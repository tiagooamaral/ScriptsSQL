/* Generated by IBExpert 09/03/2021 17:49:12*/

SET SQL DIALECT 3;

SET NAMES NONE;

CREATE DATABASE '192.168.0.20:/dados/db/WP_ADM.FDB'
USER 'UNISCOM' PASSWORD 'uniscom'
PAGE_SIZE 4096
DEFAULT CHARACTER SET NONE;



/******************************************************************************/
/*                           User Defined Functions                           */
/******************************************************************************/

DECLARE EXTERNAL FUNCTION ABS
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'IB_UDF_abs' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION ACOS
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'IB_UDF_acos' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION ADDDAY
    TIMESTAMP,
    INTEGER
    RETURNS TIMESTAMP
    ENTRY_POINT 'addDay' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION ADDHOUR
    TIMESTAMP,
    INTEGER
    RETURNS TIMESTAMP
    ENTRY_POINT 'addHour' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION ADDMILLISECOND
    TIMESTAMP,
    INTEGER
    RETURNS TIMESTAMP
    ENTRY_POINT 'addMilliSecond' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION ADDMINUTE
    TIMESTAMP,
    INTEGER
    RETURNS TIMESTAMP
    ENTRY_POINT 'addMinute' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION ADDMONTH
    TIMESTAMP,
    INTEGER
    RETURNS TIMESTAMP
    ENTRY_POINT 'addMonth' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION ADDSECOND
    TIMESTAMP,
    INTEGER
    RETURNS TIMESTAMP
    ENTRY_POINT 'addSecond' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION ADDWEEK
    TIMESTAMP,
    INTEGER
    RETURNS TIMESTAMP
    ENTRY_POINT 'addWeek' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION ADDYEAR
    TIMESTAMP,
    INTEGER
    RETURNS TIMESTAMP
    ENTRY_POINT 'addYear' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION ASCII_CHAR
    INTEGER
    RETURNS CSTRING(1) FREE_IT
    ENTRY_POINT 'IB_UDF_ascii_char' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION ASCII_VAL
    CHAR(1)
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'IB_UDF_ascii_val' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION ASIN
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'IB_UDF_asin' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION ATAN
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'IB_UDF_atan' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION ATAN2
    DOUBLE PRECISION,
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'IB_UDF_atan2' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION BIN_AND
    INTEGER,
    INTEGER
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'IB_UDF_bin_and' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION BIN_OR
    INTEGER,
    INTEGER
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'IB_UDF_bin_or' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION BIN_XOR
    INTEGER,
    INTEGER
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'IB_UDF_bin_xor' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION CEILING
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'IB_UDF_ceiling' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION COS
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'IB_UDF_cos' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION COSH
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'IB_UDF_cosh' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION COT
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'IB_UDF_cot' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION DIV
    INTEGER,
    INTEGER
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'IB_UDF_div' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION DNULLIF
    DOUBLE PRECISION BY DESCRIPTOR,
    DOUBLE PRECISION BY DESCRIPTOR
    RETURNS DOUBLE PRECISION BY DESCRIPTOR
    ENTRY_POINT 'dNullIf' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION DNVL
    DOUBLE PRECISION BY DESCRIPTOR,
    DOUBLE PRECISION BY DESCRIPTOR
    RETURNS DOUBLE PRECISION BY DESCRIPTOR
    ENTRY_POINT 'idNvl' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION DOW
    TIMESTAMP,
    VARCHAR(15)
    RETURNS PARAMETER 2
    ENTRY_POINT 'DOW' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION DPOWER
    DOUBLE PRECISION BY DESCRIPTOR,
    DOUBLE PRECISION BY DESCRIPTOR,
    DOUBLE PRECISION BY DESCRIPTOR
    RETURNS PARAMETER 3
    ENTRY_POINT 'power' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION FLOOR
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'IB_UDF_floor' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION GETEXACTTIMESTAMP
    TIMESTAMP
    RETURNS PARAMETER 1
    ENTRY_POINT 'getExactTimestamp' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION I64NULLIF
    NUMERIC(15,4) BY DESCRIPTOR,
    NUMERIC(15,4) BY DESCRIPTOR
    RETURNS NUMERIC(15,4) BY DESCRIPTOR
    ENTRY_POINT 'iNullIf' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION I64NVL
    DOUBLE PRECISION BY DESCRIPTOR,
    DOUBLE PRECISION BY DESCRIPTOR
    RETURNS DOUBLE PRECISION BY DESCRIPTOR
    ENTRY_POINT 'idNvl' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION I64ROUND
    NUMERIC(15,4) BY DESCRIPTOR,
    NUMERIC(15,4) BY DESCRIPTOR
    RETURNS PARAMETER 2
    ENTRY_POINT 'fbround' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION I64TRUNCATE
    DOUBLE PRECISION BY DESCRIPTOR,
    DOUBLE PRECISION BY DESCRIPTOR
    RETURNS PARAMETER 2
    ENTRY_POINT 'fbtruncate' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION INULLIF
    INTEGER BY DESCRIPTOR,
    INTEGER BY DESCRIPTOR
    RETURNS INTEGER BY DESCRIPTOR
    ENTRY_POINT 'iNullIf' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION INVL
    INTEGER BY DESCRIPTOR,
    INTEGER BY DESCRIPTOR
    RETURNS INTEGER BY DESCRIPTOR
    ENTRY_POINT 'idNvl' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION LN
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'IB_UDF_ln' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION LOG
    DOUBLE PRECISION,
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'IB_UDF_log' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION LOG10
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'IB_UDF_log10' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION LOWER
    CSTRING(255)
    RETURNS CSTRING(255) FREE_IT
    ENTRY_POINT 'IB_UDF_lower' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION LPAD
    CSTRING(255),
    INTEGER,
    CSTRING(1)
    RETURNS CSTRING(255) FREE_IT
    ENTRY_POINT 'IB_UDF_lpad' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION LTRIM
    CSTRING(255)
    RETURNS CSTRING(255) FREE_IT
    ENTRY_POINT 'IB_UDF_ltrim' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION MOD
    INTEGER,
    INTEGER
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'IB_UDF_mod' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION PI

    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'IB_UDF_pi' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION RAND

    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'IB_UDF_rand' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION RDB$GET_CONTEXT
    VARCHAR(80),
    VARCHAR(80)
    RETURNS VARCHAR(255) FREE_IT
    ENTRY_POINT 'get_context' MODULE_NAME 'system_module';


DECLARE EXTERNAL FUNCTION RDB$SET_CONTEXT
    VARCHAR(80),
    VARCHAR(80),
    VARCHAR(255)
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'set_context' MODULE_NAME 'system_module';


DECLARE EXTERNAL FUNCTION ROUND
    INTEGER BY DESCRIPTOR,
    INTEGER BY DESCRIPTOR
    RETURNS PARAMETER 2
    ENTRY_POINT 'fbround' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION RPAD
    CSTRING(255),
    INTEGER,
    CSTRING(1)
    RETURNS CSTRING(255) FREE_IT
    ENTRY_POINT 'IB_UDF_rpad' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION RTRIM
    CSTRING(255)
    RETURNS CSTRING(255) FREE_IT
    ENTRY_POINT 'IB_UDF_rtrim' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION SDOW
    TIMESTAMP,
    VARCHAR(5)
    RETURNS PARAMETER 2
    ENTRY_POINT 'SDOW' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION SIGN
    DOUBLE PRECISION
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'IB_UDF_sign' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION SIN
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'IB_UDF_sin' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION SINH
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'IB_UDF_sinh' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION SNULLIF
    VARCHAR(100) BY DESCRIPTOR,
    VARCHAR(100) BY DESCRIPTOR,
    VARCHAR(100) BY DESCRIPTOR
    RETURNS PARAMETER 3
    ENTRY_POINT 'sNullIf' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION SNVL
    VARCHAR(100) BY DESCRIPTOR,
    VARCHAR(100) BY DESCRIPTOR,
    VARCHAR(100) BY DESCRIPTOR
    RETURNS PARAMETER 3
    ENTRY_POINT 'sNvl' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION SQRT
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'IB_UDF_sqrt' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION SRIGHT
    VARCHAR(100) BY DESCRIPTOR,
    SMALLINT,
    VARCHAR(100) BY DESCRIPTOR
    RETURNS PARAMETER 3
    ENTRY_POINT 'right' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION STRING2BLOB
    VARCHAR(300) BY DESCRIPTOR,
    BLOB
    RETURNS PARAMETER 2
    ENTRY_POINT 'string2blob' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION STRLEN
    CSTRING(32767)
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'IB_UDF_strlen' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION SUBSTR
    CSTRING(255),
    SMALLINT,
    SMALLINT
    RETURNS CSTRING(255) FREE_IT
    ENTRY_POINT 'IB_UDF_substr' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION SUBSTRLEN
    CSTRING(255),
    SMALLINT,
    SMALLINT
    RETURNS CSTRING(255) FREE_IT
    ENTRY_POINT 'IB_UDF_substrlen' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION TAN
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'IB_UDF_tan' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION TANH
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'IB_UDF_tanh' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION TRUNCATE
    INTEGER BY DESCRIPTOR,
    INTEGER BY DESCRIPTOR
    RETURNS PARAMETER 2
    ENTRY_POINT 'fbtruncate' MODULE_NAME 'fbudf';




/******************************************************************************/
/*                                 Generators                                 */
/******************************************************************************/

CREATE GENERATOR GEN_CDATIVIDADE_ID;
SET GENERATOR GEN_CDATIVIDADE_ID TO 11;

CREATE GENERATOR GEN_CDCAMPOSVARLOOKUP_ID;
SET GENERATOR GEN_CDCAMPOSVARLOOKUP_ID TO 43;

CREATE GENERATOR GEN_CDEMPRESAMAP5_ID;
SET GENERATOR GEN_CDEMPRESAMAP5_ID TO 4;

CREATE GENERATOR GEN_CDEMPRESASEG6_ID;
SET GENERATOR GEN_CDEMPRESASEG6_ID TO 0;

CREATE GENERATOR GEN_CDEXPORTSQL_ID;
SET GENERATOR GEN_CDEXPORTSQL_ID TO 33;

CREATE GENERATOR GEN_CDLOGIS_CATEGORIA_ID;
SET GENERATOR GEN_CDLOGIS_CATEGORIA_ID TO 0;

CREATE GENERATOR GEN_CDLOGIS_COLETA_EVENTO_ID;
SET GENERATOR GEN_CDLOGIS_COLETA_EVENTO_ID TO 0;

CREATE GENERATOR GEN_CDLOGIS_COLETA_ID;
SET GENERATOR GEN_CDLOGIS_COLETA_ID TO 0;

CREATE GENERATOR GEN_CDLOGIS_COLETA_NF_ID;
SET GENERATOR GEN_CDLOGIS_COLETA_NF_ID TO 0;

CREATE GENERATOR GEN_CDLOGIS_COLETA_OCORRENCIA;
SET GENERATOR GEN_CDLOGIS_COLETA_OCORRENCIA TO 0;

CREATE GENERATOR GEN_CDLOGIS_CONDUTOR_ID;
SET GENERATOR GEN_CDLOGIS_CONDUTOR_ID TO 0;

CREATE GENERATOR GEN_CDLOGIS_SITUACAO_ID;
SET GENERATOR GEN_CDLOGIS_SITUACAO_ID TO 0;

CREATE GENERATOR GEN_CDLOGIS_VEICULO_ID;
SET GENERATOR GEN_CDLOGIS_VEICULO_ID TO 0;

CREATE GENERATOR GEN_CDMOBILE_MENSAGENS_ID;
SET GENERATOR GEN_CDMOBILE_MENSAGENS_ID TO 1;

CREATE GENERATOR GEN_CDOS;
SET GENERATOR GEN_CDOS TO 0;

CREATE GENERATOR GEN_CDOSFASE_ID;
SET GENERATOR GEN_CDOSFASE_ID TO 0;

CREATE GENERATOR GEN_CDOSPRO;
SET GENERATOR GEN_CDOSPRO TO 0;

CREATE GENERATOR GEN_CDSAFEST_NFS_ID;
SET GENERATOR GEN_CDSAFEST_NFS_ID TO 0;

CREATE GENERATOR GEN_CDSAFEST_NF_CAIXAS_ID;
SET GENERATOR GEN_CDSAFEST_NF_CAIXAS_ID TO 0;

CREATE GENERATOR GEN_CDSAFEST_NF_ITENS_ID;
SET GENERATOR GEN_CDSAFEST_NF_ITENS_ID TO 0;

CREATE GENERATOR GEN_CDSIRE_BLOCO_ID;
SET GENERATOR GEN_CDSIRE_BLOCO_ID TO 2;

CREATE GENERATOR GEN_CDSIRE_CLIENTE_ID;
SET GENERATOR GEN_CDSIRE_CLIENTE_ID TO 412;

CREATE GENERATOR GEN_CDSIRE_CONDICOES_PAGAMENTO;
SET GENERATOR GEN_CDSIRE_CONDICOES_PAGAMENTO TO 3;

CREATE GENERATOR GEN_CDSIRE_EMPREENDIMENTO_ID;
SET GENERATOR GEN_CDSIRE_EMPREENDIMENTO_ID TO 6;

CREATE GENERATOR GEN_CDSIRE_FASE_ID;
SET GENERATOR GEN_CDSIRE_FASE_ID TO 2;

CREATE GENERATOR GEN_CDSIRE_IMOVEL_ID;
SET GENERATOR GEN_CDSIRE_IMOVEL_ID TO 93;

CREATE GENERATOR GEN_CDSIRE_PESSOA_ARQUIVO_ID;
SET GENERATOR GEN_CDSIRE_PESSOA_ARQUIVO_ID TO 24;

CREATE GENERATOR GEN_CDSIRE_PESSOA_ID;
SET GENERATOR GEN_CDSIRE_PESSOA_ID TO 158;

CREATE GENERATOR GEN_CDSIRE_RESERVA_ARQUIVO_ID;
SET GENERATOR GEN_CDSIRE_RESERVA_ARQUIVO_ID TO 22;

CREATE GENERATOR GEN_CDSIRE_RESERVA_ID;
SET GENERATOR GEN_CDSIRE_RESERVA_ID TO 220;

CREATE GENERATOR GEN_CDSIRE_RESERVA_PAGAMENTO_ID;
SET GENERATOR GEN_CDSIRE_RESERVA_PAGAMENTO_ID TO 219;

CREATE GENERATOR GEN_CDSIRE_TABELA_PRECO_ID;
SET GENERATOR GEN_CDSIRE_TABELA_PRECO_ID TO 0;

CREATE GENERATOR GEN_CDTEF_ID;
SET GENERATOR GEN_CDTEF_ID TO 0;

CREATE GENERATOR GEN_CD_DW_ORCAMENTO_ID;
SET GENERATOR GEN_CD_DW_ORCAMENTO_ID TO 0;

CREATE GENERATOR GEN_MVEMAILMARKETING2_ID;
SET GENERATOR GEN_MVEMAILMARKETING2_ID TO 0;

CREATE GENERATOR GEN_MVEMAILMARKETING_ID;
SET GENERATOR GEN_MVEMAILMARKETING_ID TO 0;

CREATE GENERATOR GEN_MVNFES_ID;
SET GENERATOR GEN_MVNFES_ID TO 4842;

CREATE GENERATOR GEN_MVNFE_ID;
SET GENERATOR GEN_MVNFE_ID TO 0;

CREATE GENERATOR GEN_MVTMK;
SET GENERATOR GEN_MVTMK TO 14;

CREATE GENERATOR GEN_MVTMK2;
SET GENERATOR GEN_MVTMK2 TO 18;

CREATE GENERATOR GEN_MVTMK3;
SET GENERATOR GEN_MVTMK3 TO 1;

CREATE GENERATOR GEN_SIRE_CDRESERVA_ACOMPANHA_ID;
SET GENERATOR GEN_SIRE_CDRESERVA_ACOMPANHA_ID TO 255;

CREATE GENERATOR IBE$LOG_TABLES_GEN;
SET GENERATOR IBE$LOG_TABLES_GEN TO 0;



SET TERM ^ ; 



/******************************************************************************/
/*                             Stored Procedures                              */
/******************************************************************************/

CREATE PROCEDURE ADD_FREQUENCIA (
    ADATE TIMESTAMP,
    FREQ VARCHAR(3))
RETURNS (
    RESULT TIMESTAMP)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ADDMONTH (
    ADATE TIMESTAMP,
    AMONTH INTEGER)
RETURNS (
    RESULT TIMESTAMP)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE AGEINMONTHS (
    DATA1 TIMESTAMP,
    DATA2 TIMESTAMP)
RETURNS (
    RESULT INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE AJUSTA_VD1_QUANTIDADE
RETURNS (
    RESULT INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE AJUSTAACRESCIMO (
    PLGE_COD INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE AJUSTACDPROPRE (
    PUSACORMEDIDA VARCHAR(1))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE AJUSTAR_DATA_BAIXADOS
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE AJUSTAR_DATA_BAIXADOS_MORLGE
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE AJUSTAR_NOMEDOSCADASTROS (
    PTABELA VARCHAR(15),
    PMODO VARCHAR(3),
    PCODINI INTEGER,
    PCODFIM INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE AJUSTAVD1QUANTIDADE
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE APROVA_ORCAMENTO (
    PCOD VARCHAR(13),
    PALM INTEGER,
    PTRA INTEGER,
    PCODVD1 VARCHAR(13),
    PCLI INTEGER,
    PCON VARCHAR(40),
    PFOR INTEGER,
    PCAI INTEGER,
    PVEN INTEGER,
    PCOMP INTEGER,
    PREP INTEGER,
    PTRS INTEGER,
    PPREST INTEGER,
    PPGT INTEGER,
    PUSER INTEGER,
    PNOT INTEGER,
    PCODFORM INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ATUALIZA_CDPROPRE (
    VPARAMCOR INTEGER,
    VPARAMMED INTEGER,
    VCASAS_DECIMAIS INTEGER,
    VPRODUTO INTEGER,
    VCOR VARCHAR(3),
    VMED VARCHAR(3))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ATUALIZA_CONFERENCIA (
    PFILIAL INTEGER,
    PDATA TIMESTAMP)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ATUALIZA_INDICE (
    PDTATUAL TIMESTAMP,
    PVLRINICIAL DOUBLE PRECISION,
    PDTINICIAL TIMESTAMP,
    PMOE INTEGER)
RETURNS (
    RESULT DOUBLE PRECISION,
    RET_FLAG INTEGER,
    RET_INDICE DOUBLE PRECISION,
    RET_DATA TIMESTAMP)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ATUALIZACODCORMED (
    PPRODUTO INTEGER,
    PCOR VARCHAR(3),
    PMEDIDA VARCHAR(3),
    PTIPO INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ATUALIZAR_FINANCEIRO_VD4 (
    PVD4COD INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ATUCODFIXO (
    PPRO INTEGER,
    PCOR VARCHAR(3),
    PMED VARCHAR(3),
    PCOD VARCHAR(15),
    PTIPO INTEGER)
RETURNS (
    COD VARCHAR(21))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ATZ_PREV_PAG
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ATZ_PREV_REC
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE BALANCETE_INDICE_DO_MES (
    PDATAINI TIMESTAMP,
    PDATAVALOR TIMESTAMP)
RETURNS (
    INDICE INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE BALANCETE_MES_A_MES (
    PPLANO VARCHAR(40),
    PPROJETO VARCHAR(60),
    PFORNECATE VARCHAR(75),
    PFORNECDE VARCHAR(75),
    PCLIENTEATE VARCHAR(75),
    PCLIENTEDE VARCHAR(75),
    PCONTADE VARCHAR(30),
    PCONTAATE VARCHAR(30),
    PCCUSTODE VARCHAR(40),
    PCCUSTOATE VARCHAR(40),
    PDATAINI TIMESTAMP,
    PDATAFIN TIMESTAMP)
RETURNS (
    RMESES INTEGER,
    RMES1 DOUBLE PRECISION,
    RMES2 DOUBLE PRECISION,
    RMES3 DOUBLE PRECISION,
    RMES4 DOUBLE PRECISION,
    RMES5 DOUBLE PRECISION,
    RMES6 DOUBLE PRECISION,
    RMES7 DOUBLE PRECISION,
    RMES8 DOUBLE PRECISION,
    RMES9 DOUBLE PRECISION,
    RMES10 DOUBLE PRECISION,
    RMES11 DOUBLE PRECISION,
    RMES12 DOUBLE PRECISION,
    RTOTAL DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE BALANCETE_MES_A_MES_EMI (
    PPLANO VARCHAR(40),
    PPROJETO VARCHAR(60),
    PFORNECATE VARCHAR(75),
    PFORNECDE VARCHAR(75),
    PCLIENTEATE VARCHAR(75),
    PCLIENTEDE VARCHAR(75),
    PCONTADE VARCHAR(30),
    PCONTAATE VARCHAR(30),
    PCCUSTODE VARCHAR(40),
    PCCUSTOATE VARCHAR(40),
    PDATAINI TIMESTAMP,
    PDATAFIN TIMESTAMP)
RETURNS (
    RMESES INTEGER,
    RMES1 DOUBLE PRECISION,
    RMES2 DOUBLE PRECISION,
    RMES3 DOUBLE PRECISION,
    RMES4 DOUBLE PRECISION,
    RMES5 DOUBLE PRECISION,
    RMES6 DOUBLE PRECISION,
    RMES7 DOUBLE PRECISION,
    RMES8 DOUBLE PRECISION,
    RMES9 DOUBLE PRECISION,
    RMES10 DOUBLE PRECISION,
    RMES11 DOUBLE PRECISION,
    RMES12 DOUBLE PRECISION,
    RTOTAL DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE BALANCETE_RESUMIDO (
    PPROJETODE VARCHAR(60),
    PPROJETOATE VARCHAR(60),
    PPLANODE VARCHAR(40),
    PPLANOATE VARCHAR(40),
    PPLANO2DE VARCHAR(40),
    PPLANO2ATE VARCHAR(40),
    PFORNECATE VARCHAR(75),
    PFORNECDE VARCHAR(75),
    PCLIENTEATE VARCHAR(75),
    PCLIENTEDE VARCHAR(75),
    PCONTADE VARCHAR(30),
    PCONTAATE VARCHAR(30),
    PCCUSTODE VARCHAR(40),
    PCCUSTOATE VARCHAR(40),
    PCCUSTO2DE VARCHAR(40),
    PCCUSTO2ATE VARCHAR(40),
    PDATAINI TIMESTAMP,
    PDATAFIN TIMESTAMP,
    PCOMPETENCIA INTEGER,
    PUSAPLANO2 INTEGER,
    PQUEBRACUSTOPROJ INTEGER,
    PFILTRONIVEL INTEGER,
    PMESAMES INTEGER)
RETURNS (
    PLA_COD VARCHAR(40),
    PLA_NOM VARCHAR(30),
    CUS_NOM VARCHAR(60),
    TOTAL DOUBLE PRECISION,
    NMESES INTEGER,
    RMES1 DOUBLE PRECISION,
    RMES2 DOUBLE PRECISION,
    RMES3 DOUBLE PRECISION,
    RMES4 DOUBLE PRECISION,
    RMES5 DOUBLE PRECISION,
    RMES6 DOUBLE PRECISION,
    RMES7 DOUBLE PRECISION,
    RMES8 DOUBLE PRECISION,
    RMES9 DOUBLE PRECISION,
    RMES10 DOUBLE PRECISION,
    RMES11 DOUBLE PRECISION,
    RMES12 DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE BALANCETE_RESUMIDO_EMI (
    PPROJETO VARCHAR(60),
    PPLANO VARCHAR(40),
    PFORNECATE VARCHAR(75),
    PFORNECDE VARCHAR(75),
    PCLIENTEATE VARCHAR(75),
    PCLIENTEDE VARCHAR(75),
    PCONTADE VARCHAR(30),
    PCONTAATE VARCHAR(30),
    PCCUSTODE VARCHAR(40),
    PCCUSTOATE VARCHAR(40),
    PDATAINI TIMESTAMP,
    PDATAFIN TIMESTAMP)
RETURNS (
    RTOTAL DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE BALANCETE_SOMA_COM_ACUM (
    VALOR DOUBLE PRECISION,
    INDICE INTEGER,
    PACUM1 DOUBLE PRECISION,
    PACUM2 DOUBLE PRECISION,
    PACUM3 DOUBLE PRECISION,
    PACUM4 DOUBLE PRECISION,
    PACUM5 DOUBLE PRECISION,
    PACUM6 DOUBLE PRECISION,
    PACUM7 DOUBLE PRECISION,
    PACUM8 DOUBLE PRECISION,
    PACUM9 DOUBLE PRECISION,
    PACUM10 DOUBLE PRECISION)
RETURNS (
    RACUM1 DOUBLE PRECISION,
    RACUM2 DOUBLE PRECISION,
    RACUM3 DOUBLE PRECISION,
    RACUM4 DOUBLE PRECISION,
    RACUM5 DOUBLE PRECISION,
    RACUM6 DOUBLE PRECISION,
    RACUM7 DOUBLE PRECISION,
    RACUM8 DOUBLE PRECISION,
    RACUM9 DOUBLE PRECISION,
    RACUM10 DOUBLE PRECISION,
    RVALOR DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CALC_DEVOLU (
    PALM INTEGER,
    PCLI INTEGER)
RETURNS (
    VD1_COD VARCHAR(13),
    VD1_CAD TIMESTAMP,
    VD1_ALM INTEGER,
    VD2_COR VARCHAR(3),
    VD2_MED VARCHAR(3),
    VD2_QTD DOUBLE PRECISION,
    VD2_VLR DOUBLE PRECISION,
    VD2_VLRTOT DOUBLE PRECISION,
    PRO_NOM VARCHAR(100),
    COR_NOM VARCHAR(30),
    MED_NOM VARCHAR(30),
    VD1_NOT INTEGER,
    STATUS VARCHAR(20),
    ALM_FANT VARCHAR(20),
    TRA_NOM VARCHAR(40),
    VD2_PRO INTEGER,
    VD1_CLI INTEGER,
    CLI_RED VARCHAR(75))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CALC_SALDO (
    PSANT DOUBLE PRECISION,
    POPE TIMESTAMP,
    PCON INTEGER)
RETURNS (
    X NUMERIC(15,1))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CALC_VLRLIQ (
    PBOL VARCHAR(13),
    PDESCP DOUBLE PRECISION,
    PDESCV DOUBLE PRECISION)
RETURNS (
    LIQUIDO DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CALCULA_ESTOQUE (
    VPARAMCOR INTEGER,
    VPARAMMED INTEGER,
    VCASAS_DECIMAIS INTEGER,
    VDATA TIMESTAMP,
    VPRODUTO INTEGER,
    VCOR VARCHAR(3),
    VMEDIDA VARCHAR(3),
    VALM INTEGER,
    VCOMPCONT INTEGER,
    VFILTROATIVO INTEGER)
RETURNS (
    VVD2CAD TIMESTAMP,
    VPROANT INTEGER,
    VALMANT INTEGER,
    VMEDANT VARCHAR(5),
    VCORANT VARCHAR(5),
    VSALDO DOUBLE PRECISION,
    VULTCUSTO DOUBLE PRECISION,
    VCUSTOMEDIO DOUBLE PRECISION,
    VSALDO_SEM_CONTAGEM DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CALCULA_ESTOQUE_BASE (
    VPARAMCOR INTEGER,
    VPARAMMED INTEGER,
    VCASAS_DECIMAIS INTEGER,
    VDATA_DE TIMESTAMP,
    VDATA_ATE TIMESTAMP,
    VALM_DE VARCHAR(20),
    VALM_ATE VARCHAR(20),
    VPRODUTO_DE VARCHAR(100),
    VPRODUTO_ATE VARCHAR(100),
    VCOR_DE VARCHAR(30),
    VCOR_ATE VARCHAR(30),
    VMEDIDA_DE VARCHAR(30),
    VMEDIDA_ATE VARCHAR(30),
    VCAT_DE VARCHAR(30),
    VCAT_ATE VARCHAR(30),
    VTIP_DE VARCHAR(30),
    VTIP_ATE VARCHAR(30),
    VMAR_DE VARCHAR(30),
    VMAR_ATE VARCHAR(30),
    VGRU_DE VARCHAR(30),
    VGRU_ATE VARCHAR(30),
    VSUBGRU_DE VARCHAR(30),
    VSUBGRU_ATE VARCHAR(30),
    VUNI_DE VARCHAR(5),
    VUNI_ATE VARCHAR(5),
    VTABPRECO VARCHAR(10),
    VFILTROATIVO INTEGER,
    VSO_COM_CONTAGEM INTEGER)
RETURNS (
    VD2_CAD TIMESTAMP,
    PRO_COD INTEGER,
    PRO_NOM VARCHAR(100),
    PRO_INT VARCHAR(15),
    PRO_BAR VARCHAR(15),
    PRO_CODCM VARCHAR(21),
    ALM_COD INTEGER,
    ALM_FANT VARCHAR(20),
    MED_COD VARCHAR(3),
    MED_NOM VARCHAR(30),
    MED_ORDEM VARCHAR(40),
    COR_COD VARCHAR(3),
    COR_NOM VARCHAR(30),
    CAT_COD INTEGER,
    CAT_NOM VARCHAR(30),
    CAT_ORD VARCHAR(40),
    TIP_COD INTEGER,
    TIP_NOM VARCHAR(30),
    TIP_ORD VARCHAR(40),
    MAR_COD INTEGER,
    MAR_NOM VARCHAR(30),
    MAR_ORD VARCHAR(40),
    GRU_COD INTEGER,
    GRU_NOM VARCHAR(30),
    GRU_ORD VARCHAR(40),
    SUBGRU_COD INTEGER,
    SUBGRU_NOM VARCHAR(30),
    SUBGRU_ORD VARCHAR(40),
    VPRECO DOUBLE PRECISION,
    VSALDO DOUBLE PRECISION,
    VULTCUSTO DOUBLE PRECISION,
    VCUSTOMEDIO DOUBLE PRECISION,
    VSALDO_SEM_CONTAGEM DOUBLE PRECISION,
    SIGLA VARCHAR(5))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CHAR_LOWER (
    PCHAR VARCHAR(1))
RETURNS (
    RESULT VARCHAR(1))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CHAR_UPPER (
    PCHAR VARCHAR(1))
RETURNS (
    RESULT VARCHAR(1))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CHECASALDODACONTA (
    PCON INTEGER)
RETURNS (
    WSALDO1 DOUBLE PRECISION,
    WSALDO2 DOUBLE PRECISION,
    WULTDIA TIMESTAMP,
    WPRIDIA TIMESTAMP,
    WCONTNOM VARCHAR(30),
    WCONTA INTEGER,
    WCONPRISAL DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE COMPLETA_STRING (
    PTEXTO VARCHAR(100),
    PCARACTER VARCHAR(1),
    PCASAS INTEGER,
    PSENTIDO INTEGER)
RETURNS (
    RESULT VARCHAR(100))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CONCATENAR_RESULTADOS (
    PSQL VARCHAR(1000),
    PSEPARADOR VARCHAR(10))
RETURNS (
    RESULT VARCHAR(1000))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CONFERENCIA_ESTOQUE (
    VPARAMCOR INTEGER,
    VPARAMMED INTEGER,
    VCASAS_DECIMAIS INTEGER,
    PALM_DE VARCHAR(20),
    PALM_ATE VARCHAR(20),
    PDATA_DE TIMESTAMP,
    PDATA_ATE TIMESTAMP,
    PSODIFERENCA INTEGER)
RETURNS (
    ALM_FANT VARCHAR(20),
    DAT_INI TIMESTAMP,
    DAT_FIN TIMESTAMP,
    EST_ANT DOUBLE PRECISION,
    TOT_MOV DOUBLE PRECISION,
    TOT_AJST DOUBLE PRECISION,
    SOMA DOUBLE PRECISION,
    EST_FIN DOUBLE PRECISION,
    DIFERENCA DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CONFIGURA_TAMANHODAFONTE (
    PSTRING VARCHAR(100),
    PMODO VARCHAR(3))
RETURNS (
    RESULT VARCHAR(100))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CONVERTE_INDICE (
    PDATA TIMESTAMP,
    PVALOR DOUBLE PRECISION,
    PMOEORI INTEGER,
    PMOEDEST INTEGER)
RETURNS (
    RESULT DOUBLE PRECISION,
    RET_FLAG INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CONVERTE_INDICE_PARA_RELATORIOS (
    PDATA TIMESTAMP,
    PVALOR DOUBLE PRECISION,
    PMOEDEST INTEGER)
RETURNS (
    RVALOR DOUBLE PRECISION,
    RDATA TIMESTAMP)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CONVERTE_VALOR_UNIDADE (
    PPROCOD INTEGER,
    PVALOR DOUBLE PRECISION,
    PCAMPO_UNI_ORI VARCHAR(20),
    PCAMPO_UNI_DEST VARCHAR(20))
RETURNS (
    RESULT DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CONVERTER_MESES_EM_ANOS_MESES (
    PMESES INTEGER,
    PAGRUPAR_ANOS INTEGER)
RETURNS (
    RESULT VARCHAR(1000))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CONVERTER_MESES_EM_FREQUENCIA (
    PMESES INTEGER)
RETURNS (
    RESULT VARCHAR(1000))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CORRIGIR_CODIGO_EAN (
    PPROCOD INTEGER,
    PNOVOCODIGO VARCHAR(21))
RETURNS (
    VCODIGO VARCHAR(21))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CORRIGIR_CODIGOS
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CRIA_LOCALIZACAO (
    PMODELO VARCHAR(1))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CRIAR_CUPOM (
    PALMOXARIFADO INTEGER,
    PCADASTRO TIMESTAMP,
    PTRANSACAO INTEGER,
    PCLIENTE INTEGER,
    PREPRESENTANTE INTEGER,
    PFORNECEDOR INTEGER,
    PTRANSPORTADORA INTEGER,
    PCLIENTE2 INTEGER,
    PVENDEDOR INTEGER,
    PCAIXA INTEGER,
    PCOMPRADOR INTEGER,
    PPRESTADORSERVICO INTEGER,
    PDESCONTOPERCENTUAL DOUBLE PRECISION,
    PDESCONTOVALOR DOUBLE PRECISION,
    PQUANTIDADE DOUBLE PRECISION,
    PTOTALBRUTO DOUBLE PRECISION,
    PTOTALSEMDESCONTO DOUBLE PRECISION,
    PTOTALLIQUIDO DOUBLE PRECISION,
    PSERVICOLIQUIDO DOUBLE PRECISION,
    PSERVICOBRUTO DOUBLE PRECISION,
    PPRODUTOLIQUIDO DOUBLE PRECISION,
    PPRODUTOBRUTO DOUBLE PRECISION,
    PCFOP INTEGER,
    PPRESTACAOSERVICO INTEGER,
    PFRETE DOUBLE PRECISION,
    PFRETEPORCONTA VARCHAR(1),
    PORIGEM VARCHAR(3),
    PESPECIE VARCHAR(20),
    PMARCA VARCHAR(20),
    PNUMERO VARCHAR(20),
    PPLACAVEICULO VARCHAR(20),
    PUFVEICULO VARCHAR(20),
    PPESOBRUTO DOUBLE PRECISION,
    PPESOLIQUIDO DOUBLE PRECISION,
    PBASEICMS DOUBLE PRECISION,
    PVALORICMS DOUBLE PRECISION,
    PISS DOUBLE PRECISION,
    PVALORSEGURO DOUBLE PRECISION,
    POUTRASDESPESAS DOUBLE PRECISION,
    PSEUNUMERO VARCHAR(30),
    PVALORIPI DOUBLE PRECISION,
    POBSERVACAO BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    POBSERVACAO2 BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    POBSERVACAO3 BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    POBSERVACAO4 BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    PSTATUS VARCHAR(2),
    PIRRF DOUBLE PRECISION,
    PINSS DOUBLE PRECISION,
    PIMPOSTO3 DOUBLE PRECISION,
    PIMPOSTO4 DOUBLE PRECISION,
    PIMPOSTO5 DOUBLE PRECISION,
    PIMPOSTO6 DOUBLE PRECISION,
    PUSUARIO INTEGER,
    PDATA TIMESTAMP)
RETURNS (
    VNOVOCOD VARCHAR(13))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CRIAR_ITEM_CUPOM (
    PCODIGO VARCHAR(13),
    PPRODUTO INTEGER,
    PSERVICO INTEGER,
    PDESCRICAO VARCHAR(255),
    PCOR VARCHAR(3),
    PMEDIDA VARCHAR(3),
    PVALORUNITARIO DOUBLE PRECISION,
    PQUANTIDADE DOUBLE PRECISION,
    PIPI DOUBLE PRECISION,
    PISS DOUBLE PRECISION,
    PICMS DOUBLE PRECISION,
    PREDUCAOICMS DOUBLE PRECISION,
    PDESCONTO DOUBLE PRECISION,
    PUNIDADE INTEGER,
    PCLASSIFICACAOFISCAL INTEGER,
    PSITUACAOTRIBUTARIA INTEGER,
    PFINALIDADE INTEGER,
    POBSERVACAO1 VARCHAR(100),
    POBSERVACAO2 VARCHAR(100),
    POBSERVACAO3 VARCHAR(100),
    POBSERVACAO4 VARCHAR(100),
    POBSERVACAOBLOB BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    PUNIDADEMEDIDA INTEGER,
    PALTURA DOUBLE PRECISION,
    PCOMPRIMENTO DOUBLE PRECISION,
    PLARGURA DOUBLE PRECISION,
    PNUMEROSERIE VARCHAR(100),
    PAMBIENTE INTEGER,
    PSUBSTITUICAOTRIBUTARIA DOUBLE PRECISION,
    PCOMISSAO DOUBLE PRECISION,
    PCFOP VARCHAR(20))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CRIAR_PAGAMENTO_CUPOM (
    PCODIGO VARCHAR(13),
    PCONDICAO INTEGER,
    PDESCONTOVALOR DOUBLE PRECISION,
    PDESCONTOPERC DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CRIAR_PARCELAS_CUPOM (
    PCODIGO VARCHAR(13),
    PTIPO INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE DAYOFWEEK (
    ADATE TIMESTAMP)
RETURNS (
    RESULT INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE DAYOFYEAR (
    ADATE TIMESTAMP)
RETURNS (
    RESULT INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE DAYSOFMONTH (
    AYEAR INTEGER,
    AMONTH INTEGER)
RETURNS (
    RESULT INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE DECODEDATE (
    ADATE TIMESTAMP)
RETURNS (
    WYEAR INTEGER,
    WMONTH INTEGER,
    WDAY INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE DELET_CUPOM (
    PCOD VARCHAR(6),
    PCAD TIMESTAMP,
    PALM INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE DIGITOEAN13 (
    CODIGO VARCHAR(12))
RETURNS (
    DIGITO INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE DIVIDIR (
    PVALOR1 DOUBLE PRECISION,
    PVALOR2 DOUBLE PRECISION)
RETURNS (
    RESULT DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE DUR_EST_GRUPO (
    PTIPO INTEGER,
    PDATADE TIMESTAMP,
    PDATAATE TIMESTAMP,
    PPRODE VARCHAR(100),
    PPROATE VARCHAR(100),
    PALMDE VARCHAR(50),
    PALMATE VARCHAR(50),
    PMARDE VARCHAR(40),
    PMARATE VARCHAR(40),
    PGRUDE VARCHAR(40),
    PGRUATE VARCHAR(40),
    PSGRUDE VARCHAR(40),
    PSGRUATE VARCHAR(40),
    PTIPDE VARCHAR(40),
    PTIPATE VARCHAR(40),
    PTRADE VARCHAR(40),
    PTRAATE VARCHAR(40),
    PCATDE VARCHAR(40),
    PCATATE VARCHAR(40),
    PUSACOR INTEGER,
    PUSAMEDIDA INTEGER)
RETURNS (
    CUPOM VARCHAR(6),
    MOVIMENTO DOUBLE PRECISION,
    FATURAMENTO DOUBLE PRECISION,
    EST_SAL DOUBLE PRECISION,
    PRO_COD INTEGER,
    PRO_INT VARCHAR(15),
    PRO_BAR VARCHAR(15),
    PRO_NOM VARCHAR(100),
    COR_NOM VARCHAR(30),
    MED_NOM VARCHAR(30),
    CODIGO VARCHAR(21),
    GRUPO VARCHAR(30))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE DUR_EST_LISTAGEM (
    PDATADE TIMESTAMP,
    PDATAATE TIMESTAMP,
    PTIPO INTEGER,
    PPRODE VARCHAR(100),
    PPROATE VARCHAR(100),
    PALMDE VARCHAR(50),
    PALMATE VARCHAR(50),
    PMARDE VARCHAR(40),
    PMARATE VARCHAR(40),
    PGRUDE VARCHAR(40),
    PGRUATE VARCHAR(40),
    PSGRUDE VARCHAR(40),
    PSGRUATE VARCHAR(40),
    PTIPDE VARCHAR(40),
    PTIPATE VARCHAR(40),
    PTRADE VARCHAR(40),
    PTRAATE VARCHAR(40),
    PCATDE VARCHAR(40),
    PCATATE VARCHAR(40),
    PUSACOR INTEGER,
    PUSAMEDIDA INTEGER)
RETURNS (
    CUPOM VARCHAR(6),
    MOVIMENTO DOUBLE PRECISION,
    FATURAMENTO DOUBLE PRECISION,
    EST_SAL DOUBLE PRECISION,
    PRO_COD INTEGER,
    PRO_INT VARCHAR(15),
    PRO_BAR VARCHAR(15),
    PRO_NOM VARCHAR(100),
    DURACAO DOUBLE PRECISION,
    COR_NOM VARCHAR(30),
    MED_NOM VARCHAR(30),
    CODIGO VARCHAR(21),
    GRUPO VARCHAR(30),
    PDIAS INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE DUR_EST_SELECAO (
    PDATADE TIMESTAMP,
    PDATAATE TIMESTAMP,
    PPRODE VARCHAR(100),
    PPROATE VARCHAR(100),
    PALMDE VARCHAR(50),
    PALMATE VARCHAR(50),
    PMARDE VARCHAR(40),
    PMARATE VARCHAR(40),
    PGRUDE VARCHAR(40),
    PGRUATE VARCHAR(40),
    PSGRUDE VARCHAR(40),
    PSGRUATE VARCHAR(40),
    PTIPDE VARCHAR(40),
    PTIPATE VARCHAR(40),
    PTRADE VARCHAR(40),
    PTRAATE VARCHAR(40),
    PCATDE VARCHAR(40),
    PCATATE VARCHAR(40),
    PUSACOR INTEGER,
    PUSAMEDIDA INTEGER)
RETURNS (
    VD1_COD VARCHAR(13),
    VD2_QTD DOUBLE PRECISION,
    FATURAMENTO DOUBLE PRECISION,
    EST_SAL DOUBLE PRECISION,
    PRO_COD INTEGER,
    PRO_INT VARCHAR(15),
    PRO_BAR VARCHAR(15),
    PRO_NOM VARCHAR(100),
    PROCM VARCHAR(21),
    COR_NOM VARCHAR(30),
    MED_NOM VARCHAR(30),
    TIP_NOM VARCHAR(30),
    MAR_NOM VARCHAR(30),
    GRU_NOM VARCHAR(30),
    SUBGRUPO VARCHAR(30),
    CAT_NOM VARCHAR(30))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ELAPSEDDAYS (
    DATE1 TIMESTAMP,
    DATE2 TIMESTAMP)
RETURNS (
    RESULT INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ENCODEDATE (
    WYEAR INTEGER,
    WMONTH INTEGER,
    WDAY INTEGER)
RETURNS (
    RESULT TIMESTAMP)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ENVIA_AVISO (
    USUARIO INTEGER,
    TITULO VARCHAR(30),
    DESCRICAO VARCHAR(50),
    FORMULARIO VARCHAR(30),
    ADICIONAL VARCHAR(10))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ESPIAOVD1
RETURNS (
    ITEM VARCHAR(13),
    PROXIMO VARCHAR(13),
    ALM_COD VARCHAR(3),
    SALTO DOUBLE PRECISION,
    VD1_COD VARCHAR(16),
    VD1_CAD TIMESTAMP)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ESTOQUE_ABERTO (
    P_ALM_FANT_DE VARCHAR(20),
    P_ALM_FANT_ATE VARCHAR(20),
    P_PRO_NOM_DE VARCHAR(100),
    P_PRO_NOM_ATE VARCHAR(100),
    P_COR_NOM_DE VARCHAR(30),
    P_COR_NOM_ATE VARCHAR(30),
    P_MED_NOM_DE VARCHAR(20),
    P_MED_NOM_ATE VARCHAR(20),
    P_MAR_ORD_DE VARCHAR(40),
    P_MAR_ORD_ATE VARCHAR(40),
    P_TIP_ORD_DE VARCHAR(40),
    P_TIP_ORD_ATE VARCHAR(40),
    P_CAT_ORD_DE VARCHAR(40),
    P_CAT_ORD_ATE VARCHAR(40),
    P_GRU_ORD_DE VARCHAR(40),
    P_GRU_ORD_ATE VARCHAR(40),
    P_SUB_GRU_ORD_DE VARCHAR(40),
    P_SUB_GRU_ORD_ATE VARCHAR(40))
RETURNS (
    PRO_COD INTEGER,
    PRO_INT VARCHAR(15),
    PRO_BAR VARCHAR(15),
    PRO_NOM VARCHAR(100),
    EST_SAL DOUBLE PRECISION,
    COR_COD VARCHAR(3),
    COR_NOM VARCHAR(30),
    COR_SIG VARCHAR(5),
    MED_COD VARCHAR(3),
    MED_NOM VARCHAR(30),
    MED_ORD VARCHAR(10),
    MED_SIG VARCHAR(5),
    PROCM_COD VARCHAR(21),
    ALM_COD INTEGER,
    ALM_FANT VARCHAR(20))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ESTOQUE_ABERTO_ORDENADO (
    PMODELO VARCHAR(3),
    P_ALM_FANT_DE VARCHAR(20),
    P_ALM_FANT_ATE VARCHAR(20),
    P_PRO_NOM_DE VARCHAR(100),
    P_PRO_NOM_ATE VARCHAR(100),
    P_COR_NOM_DE VARCHAR(30),
    P_COR_NOM_ATE VARCHAR(30),
    P_MED_NOM_DE VARCHAR(20),
    P_MED_NOM_ATE VARCHAR(20),
    P_MAR_ORD_DE VARCHAR(40),
    P_MAR_ORD_ATE VARCHAR(40),
    P_TIP_ORD_DE VARCHAR(40),
    P_TIP_ORD_ATE VARCHAR(40),
    P_CAT_ORD_DE VARCHAR(40),
    P_CAT_ORD_ATE VARCHAR(40),
    P_GRU_ORD_DE VARCHAR(40),
    P_GRU_ORD_ATE VARCHAR(40),
    P_SUB_GRU_ORD_DE VARCHAR(40),
    P_SUB_GRU_ORD_ATE VARCHAR(40))
RETURNS (
    PRO_COD INTEGER,
    PRO_INT VARCHAR(15),
    PRO_BAR VARCHAR(15),
    PRO_NOM VARCHAR(100),
    EST_SAL DOUBLE PRECISION,
    QUEBRA_COD VARCHAR(10),
    QUEBRA VARCHAR(30),
    COLUNA_COD VARCHAR(10),
    COLUNA VARCHAR(30),
    PROCM_COD VARCHAR(21),
    LINHA_COD VARCHAR(10),
    LINHA VARCHAR(30))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ESTOQUE_ANTES_CONTAGEM (
    DATA TIMESTAMP,
    PRODUTO INTEGER,
    COR VARCHAR(3),
    MEDIDA VARCHAR(3),
    ALMOX INTEGER,
    USACOR INTEGER,
    USAMEDIDA INTEGER,
    CASASDECIMAIS INTEGER)
RETURNS (
    ESTOQUE DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ESTOQUE_NA_DATA (
    VPARAMCOR INTEGER,
    VPARAMMED INTEGER,
    VDATA TIMESTAMP,
    VALMOX INTEGER,
    VPRODUTO INTEGER,
    VCOR VARCHAR(3),
    VMED VARCHAR(3),
    VCASAS_DECIMAIS INTEGER)
RETURNS (
    CUSTO_MEDIO DOUBLE PRECISION,
    SALDO DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ESTORNA_PEDIDOS (
    PBOLETA VARCHAR(13))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE EXCLUIPRODUTOSVELHOS (
    PUSACORMEDIDA VARCHAR(1))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE EXCLUIR_MOVIMENTOS_FILIAL
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE EXTRAI_RADICAL_PLANO_DE_CONTAS (
    PLA_COD VARCHAR(40))
RETURNS (
    RADICAL VARCHAR(40),
    NIVEL INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE EXTRATO_CONSIGNACAO (
    NOM_CLIENTE_DE VARCHAR(75),
    NOM_CLIENTE_ATE VARCHAR(75),
    NOM_VENDEDOR_DE VARCHAR(75),
    NOM_VENDEDOR_ATE VARCHAR(75),
    NOM_FORNECEDOR_DE VARCHAR(75),
    NOM_FORNECEDOR_ATE VARCHAR(75),
    FANT_ALMOXARIFADO_DE VARCHAR(20),
    FANT_ALMOXARIFADO_ATE VARCHAR(20),
    NOM_TRANSACAO_DE VARCHAR(40),
    NOM_TRANSACAO_ATE VARCHAR(40),
    TIPO_CONSIGNACAO VARCHAR(3),
    DATA_DE TIMESTAMP,
    DATA_ATE TIMESTAMP)
RETURNS (
    PRO_COD INTEGER,
    PRO_NOM VARCHAR(255),
    COR_COD VARCHAR(3),
    COR_NOM VARCHAR(30),
    MED_COD VARCHAR(3),
    MED_NOM VARCHAR(30),
    PRO_CMP DOUBLE PRECISION,
    PRO_LRG DOUBLE PRECISION,
    PRO_ALT DOUBLE PRECISION,
    AREA INTEGER,
    QUANTIDADE DOUBLE PRECISION,
    SALDO DOUBLE PRECISION,
    VALOR DOUBLE PRECISION,
    ENTIDADE_NOM VARCHAR(75),
    ENTIDADE_COD INTEGER,
    VENDEDOR_NOM VARCHAR(75),
    VENDEDOR_COD INTEGER,
    TRA_NOM VARCHAR(40),
    TRA_SIG VARCHAR(10),
    TRA_COD INTEGER,
    VD1_CAD TIMESTAMP,
    VD1_NOT INTEGER,
    ALM_COD INTEGER,
    ALM_FANT VARCHAR(40))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE FECHA_ESTOQUE_MES (
    VPARAMCOR INTEGER,
    VPARAMMED INTEGER,
    VDATA TIMESTAMP,
    VCASAS_DECIMAIS INTEGER)
RETURNS (
    RESULT INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE FECHA_ESTOQUE_MES_GERAL (
    VALM INTEGER,
    VPARAMCOR INTEGER,
    VPARAMMED INTEGER,
    VDATA TIMESTAMP,
    VCASAS_DECIMAIS INTEGER)
RETURNS (
    RESULT INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE FLOAT_TO_STRING (
    VAL DOUBLE PRECISION)
RETURNS (
    RESULT VARCHAR(18))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE FLUXO_DE_CAIXA_POR_DIA (
    PDATADE TIMESTAMP,
    PDATAATE TIMESTAMP,
    PCLIENTE INTEGER,
    PFORNECEDOR INTEGER,
    PPLANODECONTA INTEGER)
RETURNS (
    DATA TIMESTAMP,
    PLA_COD VARCHAR(40),
    PLA_NOM VARCHAR(60),
    PLA_ORD VARCHAR(42),
    ENT_RED VARCHAR(75),
    ENT_TIP VARCHAR(5),
    VALOR DOUBLE PRECISION,
    DIA VARCHAR(20))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE FORMATARFLOAT (
    VALOR DOUBLE PRECISION,
    CASASDECIMAIS INTEGER)
RETURNS (
    RESULT DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE FORMATDATA (
    PDATA TIMESTAMP,
    P1 VARCHAR(1),
    P2 VARCHAR(1),
    P3 VARCHAR(1),
    PSEP VARCHAR(5))
RETURNS (
    DATA VARCHAR(20))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE GERA_CABECALHO_CUPOM (
    PCUPOM VARCHAR(13))
RETURNS (
    VTITULO1 VARCHAR(50),
    VTITULO2 VARCHAR(50),
    VTITULO3 VARCHAR(50),
    VCOLUNA1 VARCHAR(4000),
    VCOLUNA2 VARCHAR(4000),
    VCOLUNA3 VARCHAR(4000),
    VQUEBRA VARCHAR(1))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE GERA_CABECALHO_CUPOM_LOTE (
    PCUPOM VARCHAR(13),
    PLOTE INTEGER)
RETURNS (
    VTITULO1 VARCHAR(50),
    VTITULO2 VARCHAR(50),
    VTITULO3 VARCHAR(50),
    VCOLUNA1 VARCHAR(4000),
    VCOLUNA2 VARCHAR(4000),
    VCOLUNA3 VARCHAR(4000),
    VQUEBRA VARCHAR(1))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE GERA_CAMPOS_VARIAVEIS_CUPOM (
    PTRANSACAO INTEGER,
    PCUPOM VARCHAR(13))
RETURNS (
    VCODIGO INTEGER,
    VTIPOCAMPO VARCHAR(10),
    VLABEL VARCHAR(100),
    VTEXTO VARCHAR(100),
    VREAL DOUBLE PRECISION,
    VDATA TIMESTAMP,
    VMEMO VARCHAR(4000),
    VRESULTADO VARCHAR(4000),
    VMASCARA VARCHAR(20),
    VREQUERIDO VARCHAR(1),
    VTRAVALOOKUP VARCHAR(1),
    VTABELA VARCHAR(50),
    VCAMPOCODIGO VARCHAR(50),
    VCAMPONOME VARCHAR(50),
    VLARGURA INTEGER,
    VALTURA INTEGER,
    VSECAO VARCHAR(30))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE GERA_CAMPOS_VARIAVEIS_ENTIDADE (
    PCODIGO INTEGER,
    PTABELA VARCHAR(10))
RETURNS (
    VCODIGO INTEGER,
    VTIPOCAMPO VARCHAR(10),
    VLABEL VARCHAR(100),
    VTEXTO VARCHAR(100),
    VREAL DOUBLE PRECISION,
    VDATA TIMESTAMP,
    VMEMO VARCHAR(4000),
    VRESULTADO VARCHAR(4000),
    VMASCARA VARCHAR(20),
    VREQUERIDO VARCHAR(1),
    VTRAVALOOKUP VARCHAR(1),
    VTABELA VARCHAR(50),
    VCAMPOCODIGO VARCHAR(50),
    VCAMPONOME VARCHAR(50),
    VLARGURA INTEGER,
    VALTURA INTEGER,
    VSECAO VARCHAR(30))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE GERA_CAMPOS_VARIAVEIS_MARKETING (
    PCODIGO INTEGER,
    PGRUPO VARCHAR(10))
RETURNS (
    VCODIGO INTEGER,
    VTIPOCAMPO VARCHAR(10),
    VLABEL VARCHAR(100),
    VTEXTO VARCHAR(100),
    VREAL DOUBLE PRECISION,
    VDATA TIMESTAMP,
    VMEMO VARCHAR(4000),
    VRESULTADO VARCHAR(4000),
    VMASCARA VARCHAR(20),
    VREQUERIDO VARCHAR(1),
    VTRAVALOOKUP VARCHAR(1),
    VTABELA VARCHAR(50),
    VCAMPOCODIGO VARCHAR(50),
    VCAMPONOME VARCHAR(50),
    VLARGURA INTEGER,
    VALTURA INTEGER,
    VSECAO VARCHAR(30))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE GERA_CAMPOS_VARIAVEIS_SUPORTE (
    PCODIGO INTEGER,
    PGRUPO VARCHAR(10))
RETURNS (
    VCODIGO INTEGER,
    VTIPOCAMPO VARCHAR(10),
    VLABEL VARCHAR(100),
    VTEXTO VARCHAR(100),
    VREAL DOUBLE PRECISION,
    VDATA TIMESTAMP,
    VMEMO VARCHAR(4000),
    VRESULTADO VARCHAR(4000),
    VMASCARA VARCHAR(20),
    VREQUERIDO VARCHAR(1),
    VTRAVALOOKUP VARCHAR(1),
    VTABELA VARCHAR(50),
    VCAMPOCODIGO VARCHAR(50),
    VCAMPONOME VARCHAR(50),
    VLARGURA INTEGER,
    VALTURA INTEGER,
    VSECAO VARCHAR(30))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE GERA_CAMPOS_VARIAVEIS_TABVAR (
    PCODIGO INTEGER,
    PGRUPO VARCHAR(10))
RETURNS (
    VCODIGO INTEGER,
    VTIPOCAMPO VARCHAR(10),
    VLABEL VARCHAR(100),
    VTEXTO VARCHAR(100),
    VREAL DOUBLE PRECISION,
    VDATA TIMESTAMP,
    VMEMO VARCHAR(4000),
    VRESULTADO VARCHAR(4000),
    VMASCARA VARCHAR(20),
    VREQUERIDO VARCHAR(1),
    VTRAVALOOKUP VARCHAR(1),
    VTABELA VARCHAR(50),
    VCAMPOCODIGO VARCHAR(50),
    VCAMPONOME VARCHAR(50),
    VLARGURA INTEGER,
    VALTURA INTEGER,
    VSECAO VARCHAR(30))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE GERA_CDPROPRE (
    PPRODUTO INTEGER,
    PATIVO VARCHAR(1),
    PMARGEM DOUBLE PRECISION,
    PDESCONTO DOUBLE PRECISION,
    PVAL_DE TIMESTAMP,
    PVAL_ATE TIMESTAMP,
    PCOMISSAO DOUBLE PRECISION)
RETURNS (
    RESULT VARCHAR(1))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE GERA_CDPROPRE_CORMEDIDA (
    PPRODUTO INTEGER,
    PATIVO VARCHAR(1),
    PMARGEM DOUBLE PRECISION)
RETURNS (
    RESULT VARCHAR(1))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE GERAR_NFE_MENSALIDADE (
    PCLIENTE INTEGER,
    PDATA TIMESTAMP,
    PVALOR DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE GERAR_NFES_MENSALIDADE (
    PMES TIMESTAMP)
RETURNS (
    VCLIENTE INTEGER,
    VDATA TIMESTAMP,
    VVALOR DOUBLE PRECISION,
    VDATAINICIO TIMESTAMP,
    VDATAFIM TIMESTAMP)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE GERAR_UNIDADES_EMPREENDIMENTO (
    VEMPREENDIMENTO INTEGER,
    VBLOCO INTEGER,
    VNUMERO INTEGER)
RETURNS (
    EMPREENDIMENTO_TITULO VARCHAR(200),
    BLOCO_TITULO VARCHAR(200),
    IMOVEL_TITULO VARCHAR(200),
    IMOVEL_DATA TIMESTAMP)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE INFORM_CLIENTES (
    PCODCLI INTEGER,
    PTIPO INTEGER)
RETURNS (
    PRICOMP TIMESTAMP,
    UTLCOMP TIMESTAMP,
    MVALCOMP DOUBLE PRECISION,
    MDATCOMP TIMESTAMP,
    MEDCOMP DOUBLE PRECISION,
    TITCARQTD INTEGER,
    TITCARVAL DOUBLE PRECISION,
    MEDATRAZ DOUBLE PRECISION,
    MACUMDAT TIMESTAMP,
    MACUMVAL DOUBLE PRECISION,
    TITPAGVAL DOUBLE PRECISION,
    TITPAGQTD INTEGER,
    TITATRVAL DOUBLE PRECISION,
    TITATRQTD INTEGER,
    TITVENVAL DOUBLE PRECISION,
    TITVENQTD INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE INSERE_ITENS_ZERADOS_CONTAGEM (
    P_CON_CON INTEGER,
    P_PRO_NOM_DE VARCHAR(100),
    P_PRO_NOM_ATE VARCHAR(100),
    P_MAR_ORD_DE VARCHAR(40),
    P_MAR_ORD_ATE VARCHAR(40),
    P_GRU_ORD_DE VARCHAR(40),
    P_GRU_ORD_ATE VARCHAR(40),
    P_SUB_GRU_ORD_DE VARCHAR(40),
    P_SUB_GRU_ORD_ATE VARCHAR(40),
    P_TIP_ORD_DE VARCHAR(40),
    P_TIP_ORD_ATE VARCHAR(40),
    P_CAT_ORD_DE VARCHAR(40),
    P_CAT_ORD_ATE VARCHAR(40),
    P_COR_NOM_DE VARCHAR(30),
    P_COR_NOM_ATE VARCHAR(30),
    P_MED_NOM_DE VARCHAR(30),
    P_MED_NOM_ATE VARCHAR(30))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE INSERE_IVAST_EM_PRODUTOS (
    PCLASSFISCAL INTEGER,
    PESTADO VARCHAR(2),
    PIVA DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE INVENTARIO_ESTOQUE_GRADE (
    PMODELO VARCHAR(3),
    P_ALM_FANT_DE VARCHAR(20),
    P_ALM_FANT_ATE VARCHAR(20),
    P_PRO_NOM_DE VARCHAR(100),
    P_PRO_NOM_ATE VARCHAR(100),
    P_COR_NOM_DE VARCHAR(30),
    P_COR_NOM_ATE VARCHAR(30),
    P_MED_NOM_DE VARCHAR(20),
    P_MED_NOM_ATE VARCHAR(20),
    P_MAR_ORD_DE VARCHAR(40),
    P_MAR_ORD_ATE VARCHAR(40),
    P_TIP_ORD_DE VARCHAR(40),
    P_TIP_ORD_ATE VARCHAR(40),
    P_CAT_ORD_DE VARCHAR(40),
    P_CAT_ORD_ATE VARCHAR(40),
    P_GRU_ORD_DE VARCHAR(40),
    P_GRU_ORD_ATE VARCHAR(40),
    P_SUB_GRU_ORD_DE VARCHAR(40),
    P_SUB_GRU_ORD_ATE VARCHAR(40),
    P_OPCAO VARCHAR(15))
RETURNS (
    PROCM_COD VARCHAR(21),
    PRO_COD INTEGER,
    PRO_INT VARCHAR(15),
    PRO_BAR VARCHAR(15),
    PRO_NOM VARCHAR(100),
    QUEBRA_COD VARCHAR(20),
    QUEBRA_NOM VARCHAR(30),
    COL1_NOM VARCHAR(30),
    COL2_NOM VARCHAR(30),
    COL3_NOM VARCHAR(30),
    COL4_NOM VARCHAR(30),
    COL5_NOM VARCHAR(30),
    COL6_NOM VARCHAR(30),
    COL7_NOM VARCHAR(30),
    COL8_NOM VARCHAR(30),
    COL9_NOM VARCHAR(30),
    COL10_NOM VARCHAR(30),
    COL11_NOM VARCHAR(30),
    COL12_NOM VARCHAR(30),
    COL13_NOM VARCHAR(30),
    COL14_NOM VARCHAR(30),
    COL15_NOM VARCHAR(30),
    COL16_NOM VARCHAR(30),
    COL17_NOM VARCHAR(30),
    COL18_NOM VARCHAR(30),
    COL19_NOM VARCHAR(30),
    COL20_NOM VARCHAR(30),
    COL1_VAL DOUBLE PRECISION,
    COL2_VAL DOUBLE PRECISION,
    COL3_VAL DOUBLE PRECISION,
    COL4_VAL DOUBLE PRECISION,
    COL5_VAL DOUBLE PRECISION,
    COL6_VAL DOUBLE PRECISION,
    COL7_VAL DOUBLE PRECISION,
    COL8_VAL DOUBLE PRECISION,
    COL9_VAL DOUBLE PRECISION,
    COL10_VAL DOUBLE PRECISION,
    COL11_VAL DOUBLE PRECISION,
    COL12_VAL DOUBLE PRECISION,
    COL13_VAL DOUBLE PRECISION,
    COL14_VAL DOUBLE PRECISION,
    COL15_VAL DOUBLE PRECISION,
    COL16_VAL DOUBLE PRECISION,
    COL17_VAL DOUBLE PRECISION,
    COL18_VAL DOUBLE PRECISION,
    COL19_VAL DOUBLE PRECISION,
    COL20_VAL DOUBLE PRECISION,
    LINHA_COD VARCHAR(20),
    LINHA_NOM VARCHAR(30),
    COL_EXCESSO DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ISALPHA (
    PTEXTO VARCHAR(254))
RETURNS (
    ALPHA INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ITEMSTRING (
    PTEXTO VARCHAR(600),
    PITEM INTEGER,
    PSEPARADOR VARCHAR(1))
RETURNS (
    RESULTADO VARCHAR(600),
    ENCONTRADO INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE LEFTTRIM (
    TEXTO VARCHAR(100))
RETURNS (
    RESULT VARCHAR(100))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE LINHAS (
    N INTEGER)
RETURNS (
    I INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE LISTADIAS (
    PTIPO INTEGER)
RETURNS (
    LOOK VARCHAR(4),
    DAT_ATU TIMESTAMP,
    ALM_NOM VARCHAR(50),
    ALM_COD INTEGER,
    ALM_FANT VARCHAR(20))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE LISTAGEM_CONTAGEM_OFICIAL (
    PALMOX_DE VARCHAR(20),
    PALMOX_ATE VARCHAR(20),
    PDATA_DE TIMESTAMP,
    PDATA_ATE TIMESTAMP,
    PSETOR_DE INTEGER,
    PSETOR_ATE INTEGER,
    PPRODUTO_DE VARCHAR(100),
    PPRODUTO_ATE VARCHAR(100),
    PCOR_DE VARCHAR(3),
    PCOR_ATE VARCHAR(3),
    PMEDIDA_DE VARCHAR(3),
    PMEDIDA_ATE VARCHAR(3),
    PINCOMPLETAS INTEGER,
    PDIVERGENTES INTEGER,
    POFICIAL INTEGER,
    PSEMSETOR INTEGER,
    PSEMESTOQUE INTEGER,
    PUSACOR INTEGER,
    PUSAMEDIDA INTEGER,
    PCASAS_DECIMAIS INTEGER,
    PNUM_CONT_EXIGIDAS INTEGER,
    PTIPO INTEGER)
RETURNS (
    CON_ALM INTEGER,
    ALM_FANT VARCHAR(20),
    CON_SET INTEGER,
    CON_NUM INTEGER,
    CON_DAT TIMESTAMP,
    CON_PRO INTEGER,
    PRO_NOM VARCHAR(100),
    PRO_INT VARCHAR(15),
    PRO_BAR VARCHAR(15),
    PRO_CODAUX1 VARCHAR(20),
    PRO_CODAUX2 VARCHAR(20),
    PRO_CODCM VARCHAR(21),
    CON_COR VARCHAR(3),
    COR_NOM VARCHAR(30),
    CON_MED VARCHAR(3),
    MED_NOM VARCHAR(30),
    CON_QTD DOUBLE PRECISION,
    CON_QTD1 DOUBLE PRECISION,
    CON_QTD2 DOUBLE PRECISION,
    CON_QTD3 DOUBLE PRECISION,
    CON_QTD4 DOUBLE PRECISION,
    CON_QTD5 DOUBLE PRECISION,
    CON_FINAL DOUBLE PRECISION,
    CON_EST DOUBLE PRECISION,
    CON_DIFERENCA DOUBLE PRECISION,
    CON_PROPORCAO DOUBLE PRECISION,
    CON_OK INTEGER,
    CON_COMPLETA INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE LISTAR_COMPONENTES_PRODUTO (
    PPRODUTO INTEGER,
    PQUANTIDADE DOUBLE PRECISION,
    PNIVEL VARCHAR(1000),
    PTESTAESTOQUE INTEGER,
    PFILTRONIVEL INTEGER)
RETURNS (
    PRO_PAI INTEGER,
    PRO_NIV VARCHAR(1000),
    PRO_COD INTEGER,
    PRO_NOM VARCHAR(100),
    PRO_INT VARCHAR(15),
    PRO_BAR VARCHAR(15),
    PRO_QTD DOUBLE PRECISION,
    PRO_VLR DOUBLE PRECISION,
    PRO_SEQ INTEGER,
    UNI_COD INTEGER,
    UNI_NOM VARCHAR(30),
    UNI_SIG VARCHAR(5),
    EST_SAL DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE LISTAR_CUPONS_RELACIONADOS (
    VD1_COD VARCHAR(13))
RETURNS (
    RESULT BLOB SUB_TYPE 1 SEGMENT SIZE 80)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE MAIORACUMULO (
    PCODCLI INTEGER,
    PTIPO INTEGER)
RETURNS (
    DATA TIMESTAMP,
    ACUM DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE MAXCODESTMVVD1
RETURNS (
    VCODIGO VARCHAR(13))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE MAXCODMVLGED
RETURNS (
    VCODIGO INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE MAXTABELACDCLICOMSUFIXO
RETURNS (
    VCODIGO INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE MAXTABELACODIGO (
    PTABELA VARCHAR(50),
    PCAMPO VARCHAR(50))
RETURNS (
    VCODIGO INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE MAXTABELACODIGOCOMSUFIXO (
    PTABELA VARCHAR(50),
    PCAMPO VARCHAR(50))
RETURNS (
    VCODIGO INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE MODULUS (
    DIVIDEND INTEGER,
    DIVISOR INTEGER)
RETURNS (
    RESULT INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE OBTER_FINANCEIRO_PEDIDO (
    VD1COD VARCHAR(13),
    BAIXADO INTEGER,
    ABATIMENTO DOUBLE PRECISION)
RETURNS (
    VALOR DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE OBTER_VALOR_LIKE (
    TEXTO VARCHAR(100))
RETURNS (
    NOVO_TEXTO VARCHAR(100))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE OBTER_VALOR_NUMERICO (
    TEXTO VARCHAR(100))
RETURNS (
    NUMERO INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE PROCESSO_REQUISICAO_COTACAO (
    PUSUARIO INTEGER,
    PCOM2 INTEGER,
    PDECISAO INTEGER,
    PAUXILIAR INTEGER,
    PSITUACAO INTEGER)
RETURNS (
    RESULT VARCHAR(100))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE REAJUSTAR_CLIENTES (
    MES VARCHAR(2),
    IGPM DOUBLE PRECISION,
    IGPDI DOUBLE PRECISION,
    REAJUSTAR VARCHAR(10))
RETURNS (
    NOME VARCHAR(100),
    INDICE VARCHAR(100),
    VALOR DOUBLE PRECISION,
    PORCENTAGEM DOUBLE PRECISION,
    AJUSTADO DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE RECALC_ESTOQUE (
    VPARAMCOR INTEGER,
    VPARAMMED INTEGER,
    VCASAS_DECIMAIS INTEGER,
    VALM INTEGER,
    VHIS VARCHAR(1))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE REFAZCDPROPRE (
    PUSACORMEDIDA VARCHAR(1))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE REL_MOVCAIXA (
    PDATADE TIMESTAMP,
    PDATAATE TIMESTAMP,
    PALMDE VARCHAR(20),
    PALMATE VARCHAR(20),
    PNIVEL INTEGER)
RETURNS (
    ALM_FANT VARCHAR(20),
    MOV DOUBLE PRECISION,
    NAOEF DOUBLE PRECISION,
    SUP DOUBLE PRECISION,
    SAN DOUBLE PRECISION,
    PEND DOUBLE PRECISION,
    TOTAL DOUBLE PRECISION,
    STATUS VARCHAR(1))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE REL_MOVFILIAL_MES (
    PFILIALDE VARCHAR(20),
    PFILIALATE VARCHAR(20),
    PTRANSACAODE VARCHAR(40),
    PTRANSACAOATE VARCHAR(40),
    PDATADE TIMESTAMP,
    PDATAATE TIMESTAMP,
    PSTATUS1 VARCHAR(2),
    PSTATUS2 VARCHAR(2),
    PSTATUS3 VARCHAR(2),
    USUARIO_NIVEL INTEGER)
RETURNS (
    FILIAL VARCHAR(20),
    DATA VARCHAR(20),
    VALOR DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE REL_RESUMIDO (
    PDATA_DE TIMESTAMP,
    PDATA_ATE TIMESTAMP,
    PTRA_NOM_DE VARCHAR(40),
    PTRA_NOM_ATE VARCHAR(40),
    PCLI_RED_DE VARCHAR(75),
    PCLI_RED_ATE VARCHAR(75),
    PFOR_RED_DE VARCHAR(75),
    PFOR_RED_ATE VARCHAR(75),
    PVEN_NOM_DE VARCHAR(60),
    PVEN_NOM_ATE VARCHAR(60),
    PCOMP_NOM_DE VARCHAR(60),
    PCOMP_NOM_ATE VARCHAR(60),
    PCAI_NOM_DE VARCHAR(60),
    PCAI_NOM_ATE VARCHAR(60),
    PPREST_NOM_DE VARCHAR(60),
    PPREST_NOM_ATE VARCHAR(60),
    PREP_RED_DE VARCHAR(75),
    PREP_RED_ATE VARCHAR(75),
    PTRS_RED_DE VARCHAR(75),
    PTRS_RED_ATE VARCHAR(75),
    PSTA_SIGLA_LIST VARCHAR(20),
    PALM_FANT_DE VARCHAR(20),
    PALM_FANT_ATE VARCHAR(20))
RETURNS (
    ALM_COD INTEGER,
    ALM_FANT VARCHAR(20),
    QTD_VND DOUBLE PRECISION,
    VLR_VND DOUBLE PRECISION,
    QTD_CMP DOUBLE PRECISION,
    VLR_CMP DOUBLE PRECISION,
    QTD_PDD DOUBLE PRECISION,
    VLR_PDD DOUBLE PRECISION,
    QTD_PDC DOUBLE PRECISION,
    VLR_PDC DOUBLE PRECISION,
    QTD_ORC DOUBLE PRECISION,
    VLR_ORC DOUBLE PRECISION,
    QTD_TRS DOUBLE PRECISION,
    VLR_TRS DOUBLE PRECISION,
    QTD_TRE DOUBLE PRECISION,
    VLR_TRE DOUBLE PRECISION,
    QTD_OUT DOUBLE PRECISION,
    VLR_OUT DOUBLE PRECISION,
    QTD_CON DOUBLE PRECISION,
    VLR_CON DOUBLE PRECISION,
    QTD_TRC DOUBLE PRECISION,
    VLR_TRC DOUBLE PRECISION,
    QTD_TOTAL DOUBLE PRECISION,
    VLR_TOTAL DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE RELAT_CONTA_COMIS_REP_FORN (
    DATA_DE TIMESTAMP,
    DATA_ATE TIMESTAMP,
    REP_DE VARCHAR(75),
    REP_ATE VARCHAR(75))
RETURNS (
    VD1_CAD TIMESTAMP,
    VD1_NOT INTEGER,
    CLIENTE VARCHAR(75),
    TOTAL_LIQUIDO DOUBLE PRECISION,
    VD1_COD VARCHAR(13),
    NF BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    VALOR_RECEBIDO DOUBLE PRECISION,
    VALOR_RECEBIDO_ABATIDO DOUBLE PRECISION,
    COMISSAO_PORC DOUBLE PRECISION,
    COMISSAO_VALOR DOUBLE PRECISION,
    VD1_COMISSAO_REP_PORC DOUBLE PRECISION,
    VD1_COMISSAO_REP_VALOR DOUBLE PRECISION,
    REP_COM DOUBLE PRECISION,
    VALOR_A_PAGAR DOUBLE PRECISION,
    CAMPOS_FRETE DOUBLE PRECISION,
    CAMPOS_INSTALACAO DOUBLE PRECISION,
    VALOR_BASE_COMISSAO DOUBLE PRECISION,
    REP_RED VARCHAR(75))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE RELATORIOS_DE_PROJETOS (
    PMODELO VARCHAR(30),
    PPLANODE VARCHAR(30),
    PPLANOATE VARCHAR(30),
    PPROJETODE VARCHAR(60),
    PPROJETOATE VARCHAR(60),
    PDATADE TIMESTAMP,
    PDATAATE TIMESTAMP,
    PSTATUSPROJ VARCHAR(1),
    PFLAG VARCHAR(3),
    PHORASFUN VARCHAR(1))
RETURNS (
    RCODIGOPROJ INTEGER,
    RCODIGOPROJ2 INTEGER,
    RPROJETO VARCHAR(60),
    RETAPA VARCHAR(40),
    RPLANODECONTAS VARCHAR(30),
    RTOTALORCAM DOUBLE PRECISION,
    RTOTAL DOUBLE PRECISION,
    RSTATUS VARCHAR(20),
    RSTATUSETAPA VARCHAR(20))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE RELDURACAO (
    PDIAS INTEGER,
    PDATADE TIMESTAMP,
    PDATAATE TIMESTAMP,
    PTIPO INTEGER,
    PPRODE VARCHAR(100),
    PPROATE VARCHAR(100),
    PALMDE VARCHAR(50),
    PALMATE VARCHAR(50),
    PMARDE VARCHAR(30),
    PMARATE VARCHAR(30),
    PGRUDE VARCHAR(30),
    PGRUATE VARCHAR(30),
    PSGRUDE VARCHAR(30),
    PSGRUATE VARCHAR(30),
    PTIPDE VARCHAR(30),
    PTIPATE VARCHAR(30),
    PTRADE VARCHAR(40),
    PTRAATE VARCHAR(40),
    PCATDE VARCHAR(30),
    PCATATE VARCHAR(30))
RETURNS (
    CUPOM VARCHAR(6),
    MOVIMENTO DOUBLE PRECISION,
    FATURAMENTO DOUBLE PRECISION,
    EST_SAL DOUBLE PRECISION,
    PRO_COD INTEGER,
    PRO_INT VARCHAR(15),
    PRO_BAR VARCHAR(15),
    PRO_NOM VARCHAR(100),
    DURACAO DOUBLE PRECISION,
    TIP_NOM VARCHAR(30),
    MAR_NOM VARCHAR(30),
    GRU_NOM VARCHAR(30),
    SUBGRUPO VARCHAR(30),
    COR_NOM VARCHAR(30),
    MED_NOM VARCHAR(30),
    CODIGO VARCHAR(21),
    CATEGORIA VARCHAR(30))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE RELDURACAOCORMED (
    PDIAS INTEGER,
    PDATADE TIMESTAMP,
    PDATAATE TIMESTAMP,
    PTIPO INTEGER,
    PPRODE VARCHAR(100),
    PPROATE VARCHAR(100),
    PALMDE VARCHAR(50),
    PALMATE VARCHAR(50),
    PMARDE VARCHAR(30),
    PMARATE VARCHAR(30),
    PGRUDE VARCHAR(30),
    PGRUATE VARCHAR(30),
    PSGRUDE VARCHAR(30),
    PSGRUATE VARCHAR(30),
    PTIPDE VARCHAR(30),
    PTIPATE VARCHAR(30),
    PTRADE VARCHAR(40),
    PTRAATE VARCHAR(40),
    PCATDE VARCHAR(30),
    PCATATE VARCHAR(30))
RETURNS (
    CUPOM VARCHAR(6),
    MOVIMENTO DOUBLE PRECISION,
    FATURAMENTO DOUBLE PRECISION,
    EST_SAL DOUBLE PRECISION,
    PRO_COD INTEGER,
    PRO_INT VARCHAR(15),
    PRO_BAR VARCHAR(15),
    PRO_NOM VARCHAR(100),
    DURACAO DOUBLE PRECISION,
    TIP_NOM VARCHAR(30),
    MAR_NOM VARCHAR(30),
    GRU_NOM VARCHAR(30),
    SUBGRUPO VARCHAR(30),
    COR_NOM VARCHAR(30),
    MED_NOM VARCHAR(30),
    CODIGO VARCHAR(21),
    CATEGORIA VARCHAR(30))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE RELDURACAOSCOR (
    PDIAS INTEGER,
    PDATADE TIMESTAMP,
    PDATAATE TIMESTAMP,
    PTIPO INTEGER,
    PPRODE VARCHAR(100),
    PPROATE VARCHAR(100),
    PALMDE VARCHAR(50),
    PALMATE VARCHAR(50),
    PMARDE VARCHAR(30),
    PMARATE VARCHAR(30),
    PGRUDE VARCHAR(30),
    PGRUATE VARCHAR(30),
    PSGRUDE VARCHAR(30),
    PSGRUATE VARCHAR(30),
    PTIPDE VARCHAR(30),
    PTIPATE VARCHAR(30),
    PTRADE VARCHAR(40),
    PTRAATE VARCHAR(40),
    PCATDE VARCHAR(30),
    PCATATE VARCHAR(30))
RETURNS (
    CUPOM VARCHAR(6),
    MOVIMENTO DOUBLE PRECISION,
    FATURAMENTO DOUBLE PRECISION,
    EST_SAL DOUBLE PRECISION,
    VD2_ALM INTEGER,
    PRO_COD INTEGER,
    PRO_INT VARCHAR(15),
    PRO_BAR VARCHAR(15),
    PRO_NOM VARCHAR(100),
    DURACAO DOUBLE PRECISION,
    TIP_NOM VARCHAR(30),
    MAR_NOM VARCHAR(30),
    GRU_NOM VARCHAR(30),
    SUBGRUPO VARCHAR(30),
    CATEGORIA VARCHAR(30))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE REMOVE_INV_CHAR (
    TEXTO VARCHAR(100))
RETURNS (
    RESULT VARCHAR(100))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE REMOVE_MASCARA (
    PDOCUMENTO VARCHAR(100))
RETURNS (
    VRESULT VARCHAR(100))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE REPLICAR_CUPOM (
    PDATA TIMESTAMP,
    PCODIGO VARCHAR(13),
    PRELACIONAR INTEGER)
RETURNS (
    VNOVOCOD VARCHAR(13))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE RETIRA_CARACTERES (
    PTEXTO VARCHAR(100),
    PCARACTERES VARCHAR(100))
RETURNS (
    RESULT VARCHAR(100))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE RETIRAR_ACENTO (
    PTEXTO VARCHAR(4000))
RETURNS (
    RESULT VARCHAR(4000))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE RETIRAR_NAO_NUMERICOS (
    PTEXTO VARCHAR(100))
RETURNS (
    RESULT VARCHAR(100))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE RETORNA_TAXADIARIA (
    PMOEDA INTEGER,
    PDATA TIMESTAMP)
RETURNS (
    RESULT DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE RETORNA_TAXAMENSAL (
    PMOE INTEGER,
    PDATA TIMESTAMP)
RETURNS (
    RESULT DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SALDO_DA_CONTA_NA_DATA (
    PCONTADE VARCHAR(30),
    PCONTAATE VARCHAR(30),
    PATIVO VARCHAR(1),
    PTIPODE VARCHAR(30),
    PTIPOATE VARCHAR(30),
    PPLANODE VARCHAR(40),
    PPLANOATE VARCHAR(40),
    PCENTRODE VARCHAR(40),
    PCENTROATE VARCHAR(40),
    PCENTROAUXDE VARCHAR(40),
    PCENTROAUXATE VARCHAR(40),
    PBALANCETE INTEGER,
    PDATA TIMESTAMP)
RETURNS (
    RSALDO DOUBLE PRECISION,
    RFLAG INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SALDO_DEVOLUCOES (
    PBOLETA VARCHAR(13))
RETURNS (
    SALDO DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SALDO_PEDIDO (
    PVD2COD INTEGER,
    PSALFEC INTEGER)
RETURNS (
    PSALDO DOUBLE PRECISION,
    PQUANT DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SALDO_PEDIDO_VD1 (
    PVD1COD VARCHAR(13),
    PSALFEC INTEGER)
RETURNS (
    PSALDO DOUBLE PRECISION,
    PQUANT DOUBLE PRECISION,
    PSALDO_FIN DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SALDO_VALOR_VD1 (
    PDATADE TIMESTAMP,
    PDATAATE TIMESTAMP)
RETURNS (
    VD1_COD VARCHAR(13),
    VD1_VALOR_TOTALL DOUBLE PRECISION,
    LIQUIDO DOUBLE PRECISION,
    TRA_NOM VARCHAR(40),
    ALM_FANT VARCHAR(20),
    VD1_NOT INTEGER,
    VD1_CAD TIMESTAMP)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SALVAULTIMOREAJUSTE (
    PTIPO VARCHAR(1))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SEQUENCIA_NF_PROD (
    DATA_DE TIMESTAMP,
    DATA_ATE TIMESTAMP)
RETURNS (
    VD1_NOT DOUBLE PRECISION,
    FORM_NOM VARCHAR(45),
    CLI_RED VARCHAR(75),
    CLI_NOM VARCHAR(60),
    NOM_ENT VARCHAR(75),
    VD1_QUANTIDADE DOUBLE PRECISION,
    ALM_NOM VARCHAR(50),
    VD1_CAD TIMESTAMP,
    VD1_VALOR_TOTALL DOUBLE PRECISION,
    VD1_VALOR_ICMS DOUBLE PRECISION,
    VD1_COD VARCHAR(13),
    VD1_CFOP INTEGER,
    CFO_CFO VARCHAR(20),
    VD1_CANC VARCHAR(2),
    CFO_NOM VARCHAR(100),
    SERIE_NOM VARCHAR(5),
    STATUS VARCHAR(20),
    PGT_NOM VARCHAR(100),
    VD1_VALOR_TOTALB DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SEQUENCIA_NF_SERV (
    DATA_DE TIMESTAMP,
    DATA_ATE TIMESTAMP)
RETURNS (
    VD1_NOT DOUBLE PRECISION,
    FORM_NOM VARCHAR(45),
    CLI_RED VARCHAR(75),
    CLI_NOM VARCHAR(60),
    NOM_ENT VARCHAR(75),
    VD1_QUANTIDADE DOUBLE PRECISION,
    ALM_NOM VARCHAR(50),
    VD1_CAD TIMESTAMP,
    VD1_VALOR_TOTALL DOUBLE PRECISION,
    VD1_VALOR_ICMS DOUBLE PRECISION,
    VD1_COD VARCHAR(13),
    VD1_CFOP INTEGER,
    CFO_CFO VARCHAR(20),
    VD1_CANC VARCHAR(2),
    CFO_NOM VARCHAR(100),
    SERIE_NOM VARCHAR(5),
    STATUS VARCHAR(20),
    PGT_NOM VARCHAR(100),
    VD1_IMPOSTO3 DOUBLE PRECISION,
    VD1_IMPOSTO4 DOUBLE PRECISION,
    VD1_IMPOSTO5 DOUBLE PRECISION,
    VD1_IMPOSTO6 DOUBLE PRECISION,
    VD1_INSS DOUBLE PRECISION,
    VD1_IRRF DOUBLE PRECISION,
    PRE_NOM VARCHAR(50),
    VD1_VALOR_TOTALB DOUBLE PRECISION,
    VD1_CLI_ISS DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SINALPLANO (
    PVALOR DOUBLE PRECISION,
    PPLANO VARCHAR(40))
RETURNS (
    VALOR DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SP_GEN_CDSAFEST_NF_CAIXAS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SP_GEN_CDSAFEST_NF_ITENS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SP_GEN_CDSAFEST_NFS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SP_ROL (
    PVENCIMENTO DATE,
    PSTRIKE FLOAT,
    PTIPO VARCHAR(1),
    PATIVO INTEGER)
RETURNS (
    IDCOMPRA BIGINT,
    STRIKECOMPRA FLOAT,
    VENCIMENTO DATE,
    IDVENDA BIGINT,
    STRIKEVENDA FLOAT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SP_SITUACAO_ATUAL (
    POP INTEGER,
    PCODCLI INTEGER)
RETURNS (
    VNOMEOP VARCHAR(30),
    VSTRIKE FLOAT,
    VVENCIMENTO DATE,
    VQTDE INTEGER,
    VVALOR FLOAT,
    VVALORHIST FLOAT,
    VDTPREGAO DATE,
    VNOME VARCHAR(30),
    VTIPOOP VARCHAR(1))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SP_TESTE (
    PVENCIMENTO DATE,
    PSTRIKE FLOAT,
    PTIPO VARCHAR(1),
    PATIVO INTEGER)
RETURNS (
    IDCOMPRA BIGINT,
    STRIKECOMPRA FLOAT,
    VENCIMENTO DATE,
    IDVENDA BIGINT,
    STRIKEVENDA FLOAT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE STR_LENGTH (
    PTEXTO VARCHAR(100))
RETURNS (
    RESULT INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE STRING_HORA (
    VAL DOUBLE PRECISION)
RETURNS (
    HORA VARCHAR(10))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SUGESTAO_DE_COMPRA (
    VPARAMCOR INTEGER,
    VPARAMMED INTEGER,
    VPARAMPRECOCOR INTEGER,
    VPARAMPRECOMED INTEGER,
    VPARAMESTDDV INTEGER,
    VCASAS_DECIMAIS INTEGER,
    VALM_DE VARCHAR(20),
    VALM_ATE VARCHAR(20),
    VPRODUTO_DE VARCHAR(100),
    VPRODUTO_ATE VARCHAR(100),
    VCOR_DE VARCHAR(30),
    VCOR_ATE VARCHAR(30),
    VMEDIDA_DE VARCHAR(30),
    VMEDIDA_ATE VARCHAR(30),
    VCAT_DE VARCHAR(30),
    VCAT_ATE VARCHAR(30),
    VTIP_DE VARCHAR(30),
    VTIP_ATE VARCHAR(30),
    VMAR_DE VARCHAR(30),
    VMAR_ATE VARCHAR(30),
    VGRU_DE VARCHAR(30),
    VGRU_ATE VARCHAR(30),
    VSUBGRU_DE VARCHAR(30),
    VSUBGRU_ATE VARCHAR(30),
    VSITTRIB_DE VARCHAR(10),
    VSITTRIB_ATE VARCHAR(10),
    PDATADE TIMESTAMP,
    PDATAATE TIMESTAMP,
    VFILTROTIPO VARCHAR(20),
    PCORRECAO DOUBLE PRECISION,
    PMINPADRAO INTEGER,
    PMAXPADRAO INTEGER,
    PSOITENSCOMVENDA INTEGER,
    PSEISMESES INTEGER)
RETURNS (
    ALM_COD INTEGER,
    ALM_FANT VARCHAR(20),
    PRO_COD INTEGER,
    COR_COD VARCHAR(3),
    MED_COD VARCHAR(3),
    PRO_INT VARCHAR(15),
    PRO_BAR VARCHAR(15),
    PRO_CM VARCHAR(21),
    PRO_NOM VARCHAR(100),
    COR_NOM VARCHAR(30),
    MED_NOM VARCHAR(30),
    ESTDDV DOUBLE PRECISION,
    ESTQTD DOUBLE PRECISION,
    VENDADDV DOUBLE PRECISION,
    VENDAQTD DOUBLE PRECISION,
    COMPRADDV DOUBLE PRECISION,
    COMPRAQTD DOUBLE PRECISION,
    TOTALDDV DOUBLE PRECISION,
    TOTALQTD DOUBLE PRECISION,
    ESTMINDDV DOUBLE PRECISION,
    ESTMINQTD DOUBLE PRECISION,
    ESTMAXDDV DOUBLE PRECISION,
    ESTMAXQTD DOUBLE PRECISION,
    VNDQTD DOUBLE PRECISION,
    VNDDIA DOUBLE PRECISION,
    PRZENT DOUBLE PRECISION,
    SUGCMPDDV DOUBLE PRECISION,
    SUGCMPQTD DOUBLE PRECISION,
    TIPO VARCHAR(2),
    DESCRICAO VARCHAR(50),
    PRO_ULTC DOUBLE PRECISION,
    PRO_CUSM DOUBLE PRECISION,
    PRO_TBA DOUBLE PRECISION,
    PRO_TBB DOUBLE PRECISION,
    PRO_TBC DOUBLE PRECISION,
    PRO_TBD DOUBLE PRECISION,
    PRO_TBE DOUBLE PRECISION,
    PRO_TBF DOUBLE PRECISION,
    PRO_TBG DOUBLE PRECISION,
    PRO_TBH DOUBLE PRECISION,
    PRO_TBI DOUBLE PRECISION,
    PRO_TBJ DOUBLE PRECISION,
    PRO_TBK DOUBLE PRECISION,
    PRO_TBL DOUBLE PRECISION,
    PRO_TBM DOUBLE PRECISION,
    PRO_TBN DOUBLE PRECISION,
    PRO_TBO DOUBLE PRECISION,
    PRO_TBP DOUBLE PRECISION,
    PRO_TBQ DOUBLE PRECISION,
    PRO_TBR DOUBLE PRECISION,
    PRO_TBS DOUBLE PRECISION,
    PRO_TBT DOUBLE PRECISION,
    PRO_TBU DOUBLE PRECISION,
    PRO_TBV DOUBLE PRECISION,
    PRO_TBW DOUBLE PRECISION,
    PRO_TBX DOUBLE PRECISION,
    PRO_TBY DOUBLE PRECISION,
    PRO_TBZ DOUBLE PRECISION,
    PRO_DESCONTO DOUBLE PRECISION,
    PRO_VAL_DE TIMESTAMP,
    PRO_VAL_ATE TIMESTAMP,
    PRO_IPI DOUBLE PRECISION,
    PRO_COMISSAO DOUBLE PRECISION,
    PRO_ICM DOUBLE PRECISION,
    VMES6 DOUBLE PRECISION,
    VMES5 DOUBLE PRECISION,
    VMES4 DOUBLE PRECISION,
    VMES3 DOUBLE PRECISION,
    VMES2 DOUBLE PRECISION,
    VMES1 DOUBLE PRECISION,
    VULTENTRADA VARCHAR(30),
    VDATENTRADA TIMESTAMP,
    VQTDULTENT DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE VAC_FIN_CONFEC
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE VAC_FIN_DUPLICIDADE
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE VAC_FIN_SALDO (
    PCONTA INTEGER,
    PTIPO INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE VALIDA_CONTAGEM (
    VAL1 DOUBLE PRECISION,
    VAL2 DOUBLE PRECISION,
    VAL3 DOUBLE PRECISION,
    VAL4 DOUBLE PRECISION,
    VAL5 DOUBLE PRECISION,
    NUM_CONT_EXIGIDAS INTEGER)
RETURNS (
    RESULT DOUBLE PRECISION,
    VALIDO INTEGER,
    COMPLETA INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE VALIDA_ITEM_CONT_NO_SETOR (
    CON_ALM INTEGER,
    CON_PRO INTEGER,
    CON_COR VARCHAR(3),
    CON_MED VARCHAR(3),
    CON_DAT TIMESTAMP,
    CON_SET INTEGER,
    NUM_CONT_EXIGIDAS INTEGER)
RETURNS (
    RESULT DOUBLE PRECISION,
    VAL1 DOUBLE PRECISION,
    VAL2 DOUBLE PRECISION,
    VAL3 DOUBLE PRECISION,
    VAL4 DOUBLE PRECISION,
    VAL5 DOUBLE PRECISION,
    VALIDO INTEGER,
    COMPLETO INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE VDAY (
    ADATE TIMESTAMP)
RETURNS (
    RESULT INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE VER_ANIVERSARIO_NO_PERIODO (
    PNASCIMENTO TIMESTAMP,
    PDATA_DE TIMESTAMP,
    PDATA_ATE TIMESTAMP)
RETURNS (
    RESULTADO INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE VERCAIXA (
    PDATADE TIMESTAMP,
    PDATAATE TIMESTAMP,
    PFILIALDE INTEGER,
    PFILIALATE INTEGER,
    PCAIXADE DOUBLE PRECISION,
    PCAIXAATE DOUBLE PRECISION)
RETURNS (
    TIP_COD INTEGER,
    TIP_NOM VARCHAR(30),
    VALOR DOUBLE PRECISION,
    CAIXA INTEGER,
    DATA TIMESTAMP,
    TIPO VARCHAR(3),
    OPE VARCHAR(2),
    FILIAL INTEGER,
    TRANSACAO INTEGER,
    REC_REC TIMESTAMP)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE VERIFADUPLICIDCORMED (
    PCOD VARCHAR(21),
    PPRO INTEGER,
    PCOR VARCHAR(3),
    PMED VARCHAR(3))
RETURNS (
    PRO INTEGER,
    COR VARCHAR(3),
    MED VARCHAR(3))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE VERIFICA_TRANSFERENCIA
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE VMONTH (
    ADATE TIMESTAMP)
RETURNS (
    RESULT INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE VYEAR (
    ADATE TIMESTAMP)
RETURNS (
    RESULT INTEGER)
AS
BEGIN
  EXIT;
END^



SET TERM ; ^


/******************************************************************************/
/*                                   Tables                                   */
/******************************************************************************/

CREATE TABLE AGLIGA (
    LIG_COD           INTEGER,
    LIG_NOM           VARCHAR(70),
    LIG_MEMO          BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    LIG_CON           VARCHAR(1),
    LIG_PUB           VARCHAR(1),
    COD_USER          INTEGER,
    DAT_CAD           TIMESTAMP,
    DAT_ATU           TIMESTAMP,
    ATIVO             VARCHAR(1),
    LIG_DEST          VARCHAR(1),
    DAT_ANI           TIMESTAMP,
    LIG_EMAIL_ENVIO   VARCHAR(1),
    DAT_EMAIL         TIMESTAMP,
    ONDE_EMAIL        VARCHAR(30),
    TEMPO_EMAIL       VARCHAR(20),
    PARA_EMAIL        BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    ASSUNTO_EMAIL     VARCHAR(200),
    MSG_EMAIL         BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    HORA_EMAIL        TIMESTAMP,
    DATA_ENVIO_EMAIL  TIMESTAMP,
    HORA_ENVIO_EMAIL  VARCHAR(10)
);

CREATE TABLE AGREUNI (
    REU_COD          INTEGER,
    REU_NOM          VARCHAR(70),
    REU_MEMO         BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    REU_INI          TIMESTAMP,
    REU_FIM          TIMESTAMP,
    REU_CON          VARCHAR(1),
    REU_PUB          VARCHAR(1),
    COD_USER         INTEGER,
    DAT_CAD          TIMESTAMP,
    DAT_ATU          TIMESTAMP,
    ATIVO            VARCHAR(1),
    REU_DEST         VARCHAR(1),
    REU_EMAIL_ENVIO  VARCHAR(1)
);

CREATE TABLE AGTAREFA (
    TAR_COD          INTEGER,
    TAR_NOM          VARCHAR(70),
    TAR_MEMO         BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    TAR_CON          VARCHAR(1),
    TAR_PUB          VARCHAR(1),
    COD_USER         INTEGER,
    TAR_FLAG         INTEGER,
    DAT_CAD          TIMESTAMP,
    DAT_ATU          TIMESTAMP,
    ATIVO            VARCHAR(1),
    TAR_DEST         VARCHAR(1),
    TAR_EMAIL_ENVIO  VARCHAR(1)
);

CREATE TABLE AUTHGROUP (
    ID              BIGINT NOT NULL,
    IDENT           VARCHAR(50) CHARACTER SET UNICODE_FSS NOT NULL,
    SESSIONTIMEOUT  BIGINT,
    ACCESSRIGHTS    VARCHAR(1600) CHARACTER SET UNICODE_FSS
);

CREATE TABLE AUXOBS (
    AUX_COD       INTEGER,
    AUX_TIP       VARCHAR(1),
    DAT_CAD       TIMESTAMP,
    DAT_ATU       TIMESTAMP,
    ATIVO         VARCHAR(1),
    AUX_BOL       VARCHAR(6),
    AUX_OBS       VARCHAR(100),
    USE_CAD       INTEGER,
    USE_ATU       INTEGER,
    AUX_OBS_BLOB  BLOB SUB_TYPE 1 SEGMENT SIZE 2048,
    AUX_MOD       VARCHAR(3)
);

CREATE TABLE AXCOPAG (
    PAG_COD  INTEGER,
    PAG_CON  INTEGER,
    PAG_PLA  VARCHAR(40),
    PAG_VAL  DOUBLE PRECISION,
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1),
    PAG_HIS  VARCHAR(60)
);

CREATE TABLE AXCOREC (
    REC_COD  INTEGER,
    REC_CON  INTEGER,
    REC_PLA  VARCHAR(40),
    REC_VAL  DOUBLE PRECISION,
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1),
    REC_HIS  VARCHAR(60)
);

CREATE TABLE CD_DW_ORCAMENTO (
    ORCAMENTO_CODIGO               INTEGER NOT NULL,
    ORCAMENTO_TITULO               VARCHAR(200),
    ORCAMENTO_DESCRICAO            BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    ORCAMENTO_DATA                 TIMESTAMP,
    ORCAMENTO_CLIENTE_NOME         VARCHAR(200),
    ORCAMENTO_CLIENTE_DADOS        BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    ORCAMENTO_ENDERECO             BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    ORCAMENTO_OBSERVACAO           BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    ORCAMENTO_DATA_CADASTRO        TIMESTAMP,
    ORCAMENTO_DATA_ATUALIZACAO     TIMESTAMP,
    ORCAMENTO_USUARIO_CADASTRO     INTEGER,
    ORCAMENTO_USUARIO_ATUALIZACAO  INTEGER,
    ORCAMENTO_STATUS               VARCHAR(10)
);

CREATE TABLE CDALM (
    ALM_COD                    INTEGER,
    ALM_NOM                    VARCHAR(50),
    ALM_SIG                    VARCHAR(5),
    ALM_EST                    VARCHAR(2),
    ALM_CLI                    INTEGER,
    ALM_FOR                    INTEGER,
    ALM_REMETENTE              VARCHAR(60),
    ALM_DESTINATARIO           BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    ALM_CONTAPOP3              VARCHAR(30),
    ALM_CONTASMTP              VARCHAR(30),
    ALM_CONTAEMAIL             VARCHAR(60),
    ALM_PORTAPOP3              VARCHAR(30),
    ALM_SENHA                  VARCHAR(30),
    ALM_PORTASMTP              VARCHAR(30),
    ALM_TEL                    VARCHAR(15),
    ALM_CEP                    VARCHAR(9),
    ALM_END                    VARCHAR(50),
    ALM_BAI                    VARCHAR(20),
    ALM_CID                    VARCHAR(30),
    ALM_LOG                    VARCHAR(5),
    ALM_NUM                    VARCHAR(10),
    ALM_COP                    VARCHAR(20),
    ALM_IM                     VARCHAR(16),
    ALM_CGC                    VARCHAR(20),
    ALM_IES                    VARCHAR(16),
    DAT_CAD                    TIMESTAMP,
    DAT_ATU                    TIMESTAMP,
    ATIVO                      VARCHAR(1),
    ALM_MATRIZ                 VARCHAR(1),
    ALM_ATU_EST                VARCHAR(1),
    ALM_FANT                   VARCHAR(20),
    ALM_AUTENTICA_SMTP         VARCHAR(1),
    USE_CAD                    INTEGER,
    USE_ATU                    INTEGER,
    ALM_TRIB_SIMPLES           VARCHAR(1),
    ALM_ALIQ_SIMPLES           DOUBLE PRECISION,
    ALM_FAX                    VARCHAR(15),
    ALM_SUBST_TRIBUT_ALIQ      DOUBLE PRECISION,
    ALM_SIMPLES_CRED_ICMS      DOUBLE PRECISION,
    ALM_SSL_SMTP               VARCHAR(1),
    ALM_SSL_POP3               VARCHAR(1),
    ALM_TLS_SMTP               VARCHAR(1),
    ALM_TLS_POP3               VARCHAR(1),
    ALM_NFE_CERTIFICADO        VARCHAR(70),
    ALM_NFE_AMBIENTE           VARCHAR(1),
    ALM_NFE_EMAIL              VARCHAR(60),
    ALM_NFE_POP3               VARCHAR(30),
    ALM_NFE_PORTAPOP3          VARCHAR(30),
    ALM_NFE_SMTP               VARCHAR(30),
    ALM_NFE_PORTASMTP          VARCHAR(30),
    ALM_NFE_CONTAEMAIL         VARCHAR(60),
    ALM_NFE_EMAILSENHA         VARCHAR(30),
    ALM_NFE_AUTENTICA_SMTP     VARCHAR(1),
    ALM_NFE_SSL_SMTP           VARCHAR(1),
    ALM_NFE_SSL_POP3           VARCHAR(1),
    ALM_NFE_TLS_SMTP           VARCHAR(1),
    ALM_NFE_TLS_POP3           VARCHAR(1),
    ALM_ISS_SIMPLES            DOUBLE PRECISION,
    ALM_NFES_TRIB_MUN          VARCHAR(1),
    ALM_NFES_TRIB_FORA         VARCHAR(1),
    ALM_NFE_FORMA_EMISSAO      VARCHAR(1),
    ALM_NFES_LICENCA           VARCHAR(128),
    ALM_CNAE                   VARCHAR(10),
    ALM_NFES_CERTIFICADO       VARCHAR(255),
    ALM_NFES_REGIME            VARCHAR(1),
    ALM_RECALCULO_PELA_MATRIZ  VARCHAR(1),
    ALM_NFE_FOTO               VARCHAR(100),
    ALM_NFE_CSC                VARCHAR(50),
    ALM_NFE_IDCSC              VARCHAR(10)
);

CREATE TABLE CDALM2 (
    ALM_COD   INTEGER NOT NULL,
    ALM_TIPO  VARCHAR(1) NOT NULL
);

CREATE TABLE CDALM3 (
    ALM_COD  INTEGER NOT NULL,
    ALM_USO  INTEGER NOT NULL
);

CREATE TABLE CDAMBIENTE (
    AMB_COD  INTEGER NOT NULL,
    AMB_NOM  VARCHAR(30),
    AMB_SIG  VARCHAR(5),
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1),
    USE_CAD  INTEGER,
    USE_ATU  INTEGER
);

CREATE TABLE CDAPLIC (
    VEI_COD  INTEGER,
    VEI_NOM  VARCHAR(50),
    VEI_OBS  VARCHAR(60),
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1)
);

CREATE TABLE CDARE (
    ARE_COD   INTEGER,
    ARE_NOM   VARCHAR(30),
    ARE_OBS   BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    ARE_SIG   VARCHAR(5),
    DAT_CAD   TIMESTAMP,
    DAT_ATU   TIMESTAMP,
    ATIVO     VARCHAR(1),
    ARE_GRT   INTEGER,
    ARE_FLAG  VARCHAR(2)
);

CREATE TABLE CDARQINFO (
    ARQ_COD  INTEGER NOT NULL,
    ARQ_NOM  VARCHAR(50),
    ARQ_TAB  VARCHAR(30),
    ARQ_OBS  BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    USE_CAD  INTEGER,
    USE_ATU  INTEGER,
    ATIVO    VARCHAR(1),
    ARQ_TIP  VARCHAR(3),
    ARQ_MOD  VARCHAR(10)
);

CREATE TABLE CDARQINFO2 (
    ARQ2_COD  INTEGER NOT NULL,
    ARQ2_ARQ  INTEGER NOT NULL,
    ARQ2_TAB  VARCHAR(30)
);

CREATE TABLE CDARQINFO3 (
    ARQ3_ARQ2           INTEGER NOT NULL,
    ARQ3_CMP            VARCHAR(100),
    ARQ3_INI            INTEGER,
    ARQ3_TAM            INTEGER,
    ARQ3_NOM            VARCHAR(30),
    ARQ3_VAR            VARCHAR(1),
    ARQ_COMPL_ZEROS     VARCHAR(1),
    ARQ3_RETIRAR_ZEROS  VARCHAR(1)
);

CREATE TABLE CDATIVIDADE (
    ATIVIDADE_CODIGO            INTEGER NOT NULL,
    PROJ2_COD                   INTEGER NOT NULL,
    USE_COD                     INTEGER,
    ATIVIDADE_INICIO            TIMESTAMP,
    ATIVIDADE_FIM               TIMESTAMP,
    ATIVIDADE_DESCRICAO         BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    ATIVIDADE_DATA_CADASTRO     TIMESTAMP,
    ATIVIDADE_DATA_ATUALIZACAO  TIMESTAMP,
    ATIVIDADE_ATIVO             VARCHAR(3)
);

CREATE TABLE CDATIVO (
    ATI_COD      INTEGER NOT NULL,
    ATI_CODBAR   VARCHAR(21) NOT NULL,
    ATI_NOM      VARCHAR(75) NOT NULL,
    ATI_VLR      DOUBLE PRECISION,
    ATI_TMP_DPR  INTEGER,
    ATI_AQUIS    TIMESTAMP,
    ATI_ALIENA   TIMESTAMP,
    ATI_SET      INTEGER,
    DAT_CAD      TIMESTAMP,
    DAT_ATU      TIMESTAMP,
    USE_CAD      INTEGER,
    USE_ATU      INTEGER,
    ATIVO        VARCHAR(1)
);

CREATE TABLE CDATIVOS (
    ID           BIGINT NOT NULL,
    NOME         VARCHAR(100),
    SIGLA        VARCHAR(10),
    DAT_CAD      TIMESTAMP,
    DAT_ATU      TIMESTAMP,
    STATUS       VARCHAR(1),
    ULTIMOPRECO  FLOAT,
    VARIACAO     FLOAT
);

CREATE TABLE CDATVCOT (
    ID           BIGINT NOT NULL,
    ATIVO        BIGINT,
    ULTIMOPRECO  FLOAT,
    DAT_CAD      TIMESTAMP,
    DAT_ATU      TIMESTAMP,
    STATUS       VARCHAR(1),
    VARIACAO     FLOAT
);

CREATE TABLE CDAVAL (
    AVAL_COD   INTEGER NOT NULL,
    AVAL_DESC  VARCHAR(30),
    AVAL_SIG   VARCHAR(5),
    DAT_CAD    TIMESTAMP,
    DAT_ATU    CHAR(10),
    USE_CAD    INTEGER,
    USE_ATU    INTEGER,
    ATIVO      VARCHAR(1)
);

CREATE TABLE CDBAN (
    BAN_COD  INTEGER,
    BAN_NOM  VARCHAR(50),
    BAN_NUM  VARCHAR(5),
    BAN_WWW  VARCHAR(50),
    BAN_SIG  VARCHAR(5),
    LOGO     VARCHAR(50),
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1)
);

CREATE TABLE CDBOR (
    BOR_COD  INTEGER NOT NULL,
    BOR_CAD  TIMESTAMP,
    BOR_JUR  DOUBLE PRECISION,
    BOR_CAR  INTEGER,
    USE_CAD  INTEGER,
    USE_ATU  INTEGER,
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP
);

CREATE TABLE CDBOR2 (
    BOR2_BOR  INTEGER,
    BOR2_REC  INTEGER
);

CREATE TABLE CDCAMPOSVAR (
    VAR_COD             INTEGER NOT NULL,
    VAR_NOM             VARCHAR(50) NOT NULL,
    VAR_TIP             VARCHAR(10),
    DAT_CAD             TIMESTAMP,
    DAT_ATU             TIMESTAMP,
    ATIVO               VARCHAR(1),
    USE_CAD             INTEGER,
    USE_ATU             INTEGER,
    VAR_MASC            VARCHAR(20),
    VAR_REQ             VARCHAR(1),
    VAR_TRAVA_LOOKUP    VARCHAR(1),
    VAR_TAB             VARCHAR(50),
    VAR_CMP_COD         VARCHAR(50),
    VAR_CMP_NOM         VARCHAR(50),
    VAR_TAM_LRG         INTEGER,
    VAR_TAM_ALT         INTEGER,
    VAR_LOOKUP_HIERARQ  VARCHAR(1)
);

CREATE TABLE CDCAMPOSVARLOOKUP (
    LKP_COD  INTEGER NOT NULL,
    LKP_VAR  INTEGER NOT NULL,
    LKP_VAL  VARCHAR(100),
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1),
    USE_CAD  INTEGER,
    USE_ATU  INTEGER,
    LKP_ORD  VARCHAR(40)
);

CREATE TABLE CDCAR (
    CAR_COD                     INTEGER,
    CAR_NOM                     VARCHAR(30),
    CAR_SIG                     VARCHAR(5),
    DAT_CAD                     TIMESTAMP,
    DAT_ATU                     TIMESTAMP,
    ATIVO                       VARCHAR(1),
    CAR_CODCAR                  VARCHAR(20),
    CAR_MIN                     DOUBLE PRECISION,
    CAR_MAX                     DOUBLE PRECISION,
    CAR_CEDENTE                 VARCHAR(80),
    CAR_LOC_PAG                 VARCHAR(80),
    CAR_ACEITE                  VARCHAR(4),
    CAR_COD_CEDENTE             VARCHAR(10),
    CAR_INSTRUCAO               BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    CAR_CON                     INTEGER,
    CAR_PATH                    VARCHAR(100),
    CAR_TPO                     VARCHAR(1),
    CAR_REMESSA                 INTEGER,
    CAR_BASE                    DOUBLE PRECISION DEFAULT 0,
    CAR_RET_PATH                VARCHAR(50),
    CAR_VIAS_BOLETO             VARCHAR(10),
    CAR_INSTRU_REMESSA          VARCHAR(1),
    CAR_JUROS_TAX               DOUBLE PRECISION,
    CAR_MULTA                   DOUBLE PRECISION,
    CAR_DIAS_PROTESTO           INTEGER,
    CAR_INSTR_MULTA_JUROS_PROT  VARCHAR(1)
);

CREATE TABLE CDCARG (
    CAR_COD  INTEGER NOT NULL,
    CAR_NOM  VARCHAR(30),
    CAR_SIG  VARCHAR(5),
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1)
);

CREATE TABLE CDCAT (
    CAT_COD   INTEGER,
    CAT_NOM   VARCHAR(30),
    CAT_SIG   VARCHAR(5),
    DAT_CAD   TIMESTAMP,
    DAT_ATU   TIMESTAMP,
    ATIVO     VARCHAR(1),
    CAT_GRT   INTEGER,
    CAT_FLAG  VARCHAR(2)
);

CREATE TABLE CDCATDOC (
    TIP_COD  INTEGER,
    TIP_NOM  VARCHAR(50),
    TIP_SIG  VARCHAR(5),
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1)
);

CREATE TABLE CDCATPRO (
    CAT_COD  INTEGER,
    CAT_NOM  VARCHAR(30),
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1),
    CAT_ORD  VARCHAR(40),
    CAT_TAB  INTEGER,
    USE_CAD  INTEGER,
    USE_ATU  INTEGER
);

CREATE TABLE CDCCUST (
    CUS_COD  VARCHAR(40),
    CUS_NOM  VARCHAR(30),
    CUS_EMP  INTEGER,
    CUS_AUX  VARCHAR(60),
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1),
    CUS_ORD  VARCHAR(40),
    USE_CAD  INTEGER,
    USE_ATU  INTEGER
);

CREATE TABLE CDCCUSTAUX (
    CUS_COD   INTEGER,
    CUS_ORD   VARCHAR(40),
    CUS_NOM   VARCHAR(30),
    CUS_FLAG  VARCHAR(1),
    DAT_CAD   TIMESTAMP,
    DAT_ATU   TIMESTAMP,
    ATIVO     VARCHAR(1),
    USE_CAD   INTEGER,
    USE_ATU   INTEGER
);

CREATE TABLE CDCEP (
    CEP_COD  INTEGER,
    CEP_LOG  VARCHAR(5),
    CEP_END  VARCHAR(50),
    CEP_BAI  VARCHAR(20),
    CEP_CID  VARCHAR(30),
    CEP_EST  VARCHAR(2),
    CEP_CEP  VARCHAR(9),
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1)
);

CREATE TABLE CDCEST (
    CEST_COD        INTEGER NOT NULL,
    CEST_ITEM       VARCHAR(6),
    CEST_CEST       VARCHAR(7) NOT NULL,
    CEST_NCM        VARCHAR(8),
    CEST_DESCRICAO  VARCHAR(1024)
);

CREATE TABLE CDCFO (
    CFO_COD              INTEGER,
    CFO_NOM              VARCHAR(100),
    CFO_CFO              VARCHAR(20),
    CFO_TRI              VARCHAR(1),
    CFO_MSG1             VARCHAR(80),
    CFO_MSG2             VARCHAR(80),
    CFO_MSG3             VARCHAR(80),
    DAT_CAD              TIMESTAMP,
    DAT_ATU              TIMESTAMP,
    ATIVO                VARCHAR(1),
    CFO_TIP              VARCHAR(1),
    USE_CAD              INTEGER,
    USE_ATU              INTEGER,
    CFO_MSG4             VARCHAR(80),
    CFO_MSG5             VARCHAR(80),
    CFO_INCLUI_DESPESAS  VARCHAR(1),
    CFO_CFO2             VARCHAR(20),
    CFO_CFO3             VARCHAR(20),
    CFO_IMPORTACAO       VARCHAR(1)
);

CREATE TABLE CDCHEQUES (
    CHE_CODIGO      INTEGER NOT NULL,
    CHE_BANCO       INTEGER,
    CHE_VALOR       DOUBLE PRECISION,
    CHE_FAVORECIDO  VARCHAR(75),
    CHE_DATA        TIMESTAMP,
    CHE_CID         VARCHAR(30),
    CHE_UF          VARCHAR(2),
    CHE_CHEQUE      VARCHAR(15),
    CHE_IMPRESSO    VARCHAR(1),
    CHE_CONTA       INTEGER,
    CHE_CANCELADO   VARCHAR(1),
    CHE_BAI_DOC     VARCHAR(12),
    CHE_HIS         VARCHAR(60),
    DAT_CAD         TIMESTAMP,
    DAT_ATU         TIMESTAMP,
    ATIVO           VARCHAR(1),
    CHE_IMP_FAV     VARCHAR(1),
    CHE_IMP_MODELO  VARCHAR(1)
);

CREATE TABLE CDCHEQUES2 (
    CHE2_COD    INTEGER NOT NULL,
    CHE2_CHE    INTEGER,
    CHE2_VALOR  DOUBLE PRECISION,
    CHE2_ENT    INTEGER,
    CHE2_TIP    VARCHAR(3),
    CHE2_HIS    VARCHAR(60),
    CHE2_DATA   TIMESTAMP,
    CHE2_DOC    VARCHAR(12)
);

CREATE TABLE CDCID (
    CID_COD  INTEGER,
    CID_EST  VARCHAR(2),
    CID_NOM  VARCHAR(30),
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1),
    USE_CAD  INTEGER,
    USE_ATU  INTEGER
);

CREATE TABLE CDCLA (
    CLA_COD            INTEGER,
    CLA_CLA            VARCHAR(15),
    CLA_NOM            VARCHAR(50),
    CLA_IPI            DOUBLE PRECISION,
    CLA_SIG            VARCHAR(5),
    DAT_CAD            TIMESTAMP,
    DAT_ATU            TIMESTAMP,
    ATIVO              VARCHAR(1),
    USE_CAD            INTEGER,
    USE_ATU            INTEGER,
    CLA_OBS            VARCHAR(120),
    CLA_OBS1           VARCHAR(120),
    CLA_OBS2           VARCHAR(120),
    CLA_NCM_NUMERICOS  VARCHAR(100)
);

CREATE TABLE CDCLI (
    CLI_COD                INTEGER NOT NULL,
    CLI_ALM                INTEGER,
    CLI_NOM                VARCHAR(60),
    CLI_FIS                VARCHAR(1),
    CLI_RED                VARCHAR(75),
    CLI_EST                VARCHAR(2),
    CLI_GRU                INTEGER,
    CLI_END                VARCHAR(50),
    CLI_BAI                VARCHAR(20),
    CLI_CID                VARCHAR(30),
    CLI_TEL                VARCHAR(15),
    CLI_LOG                VARCHAR(5),
    CLI_NUM                VARCHAR(10),
    CLI_CEP                VARCHAR(9),
    CLI_REDNOM             VARCHAR(75),
    CLI_ANI                TIMESTAMP,
    CLI_PLA                VARCHAR(40),
    CLI_OBS                BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    CLI_CRE                INTEGER,
    CLI_CPF                VARCHAR(19),
    CLI_EMA                VARCHAR(60),
    CLI_WWW                VARCHAR(50),
    EST_COB                VARCHAR(2),
    CEP_COB                VARCHAR(9),
    LOG_COB                VARCHAR(5),
    BAI_COB                VARCHAR(20),
    EST_ENT                VARCHAR(2),
    LOG_ENT                VARCHAR(5),
    BAI_ENT                VARCHAR(20),
    CEP_ENT                VARCHAR(9),
    CLI_TIP                INTEGER,
    CLI_VEC                TIMESTAMP,
    CLI_FUN                INTEGER,
    CLI_PAI                VARCHAR(30),
    CLI_FOTO               BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    CLI_CNH                VARCHAR(15),
    CLI_CAT                VARCHAR(5),
    CLI_CTR                VARCHAR(15),
    CLI_SER                VARCHAR(10),
    CLI_RG                 VARCHAR(19),
    CLI_ORG                VARCHAR(10),
    CLI_ECP                VARCHAR(2),
    CLI_DRG                TIMESTAMP,
    CLI_DCP                TIMESTAMP,
    CLI_DCH                TIMESTAMP,
    CLI_IMU                VARCHAR(15),
    CLI_ENT                VARCHAR(9),
    CLI_CONTA              INTEGER,
    CLI_VAL                DOUBLE PRECISION,
    CLI_CCUSTO             VARCHAR(40),
    CLI_CARTEIRA           INTEGER,
    CLI_CONS_REV           VARCHAR(1),
    CLI_REP                INTEGER,
    CLI_DESCONTO_UNITARIO  DOUBLE PRECISION,
    CLI_DESCONTO_TOTAL     DOUBLE PRECISION,
    CLI_PGT                INTEGER,
    CLI_TIPO               VARCHAR(1),
    DAT_CAD                TIMESTAMP,
    DAT_ATU                TIMESTAMP,
    ATIVO                  VARCHAR(1),
    CLI_DEST               VARCHAR(40),
    CLI_COP                VARCHAR(30),
    END_COB                VARCHAR(50),
    NUM_COB                VARCHAR(10),
    COM_COB                VARCHAR(30),
    CID_COB                VARCHAR(30),
    END_ENT                VARCHAR(50),
    NUM_ENT                VARCHAR(10),
    COM_ENT                VARCHAR(30),
    CID_ENT                VARCHAR(30),
    IES_ENT                VARCHAR(19),
    CGC_ENT                VARCHAR(19),
    NOM_ENT                VARCHAR(60),
    CLI_REF                VARCHAR(60),
    CLI_FOTONOM            VARCHAR(50),
    CLI_TRAT               VARCHAR(10),
    NOM_COB                VARCHAR(60),
    CGC_COB                VARCHAR(19),
    FIS_COB                VARCHAR(1),
    FIS_ENT                VARCHAR(1),
    CLI_GRU2               INTEGER,
    CLI_GRU3               INTEGER,
    USE_CAD                INTEGER,
    USE_ATU                INTEGER,
    CLI_LIMVAL             DOUBLE PRECISION,
    CLI_LIMDAT             TIMESTAMP,
    CLI_ISS                DOUBLE PRECISION,
    CLI_IESU               VARCHAR(15),
    CLI_ICMS               VARCHAR(1),
    CLI_IPI                VARCHAR(1),
    CLI_CONTRIBUINTE       VARCHAR(2),
    CLI_CODIGO             INTEGER,
    CLI_PAIS               VARCHAR(100),
    PAIS_ENT               VARCHAR(100),
    PAIS_COB               VARCHAR(100),
    CLI_PROV               VARCHAR(100),
    PROV_ENT               VARCHAR(100),
    PROV_COB               VARCHAR(100),
    EMA_ENT                VARCHAR(60),
    EMA_COB                VARCHAR(60),
    CLI_SIMPLES_NACIONAL   VARCHAR(1),
    DAT_HOR_ATU            TIMESTAMP
);

CREATE TABLE CDCLIC (
    CON_COD          INTEGER,
    CON_NOM          VARCHAR(30),
    CON_OBS          VARCHAR(50),
    CON_CLI          INTEGER,
    CON_TEL          VARCHAR(18),
    CON_DAT          TIMESTAMP,
    CON_RAM          VARCHAR(10),
    DAT_CAD          TIMESTAMP,
    DAT_ATU          TIMESTAMP,
    ATIVO            VARCHAR(1),
    CON_ORDEM        INTEGER,
    CON_MALA_DIRETA  VARCHAR(2),
    CON_TEL_PRINC    VARCHAR(1),
    CON_EMAIL        VARCHAR(60),
    CON_CARG         VARCHAR(20)
);

CREATE TABLE CDCLICOM (
    COM_COD    INTEGER NOT NULL,
    COM_CLI    INTEGER,
    COM_CMP1   INTEGER,
    COM_CMP2   INTEGER,
    COM_CMP3   INTEGER,
    COM_CMP4   INTEGER,
    COM_CMP5   INTEGER,
    COM_CMP6   INTEGER,
    COM_CMP7   VARCHAR(30),
    COM_CMP8   VARCHAR(30),
    COM_CMP9   VARCHAR(30),
    COM_CMP10  VARCHAR(30),
    COM_CMP11  VARCHAR(30),
    COM_CMP12  VARCHAR(30),
    COM_CMP13  VARCHAR(30),
    COM_CMP14  VARCHAR(30),
    COM_CMP15  VARCHAR(30),
    COM_CMP16  VARCHAR(30),
    COM_CMP17  VARCHAR(30),
    COM_CMP18  VARCHAR(30),
    DAT_CAD    TIMESTAMP,
    DAT_ATU    TIMESTAMP,
    USE_CAD    INTEGER,
    USE_ATU    INTEGER,
    ATIVO      VARCHAR(1),
    COM_TAB    VARCHAR(3)
);

CREATE TABLE CDCLICOM2 (
    COM2_COD  INTEGER NOT NULL,
    COM2_NOM  VARCHAR(30),
    COM2_SIG  VARCHAR(5),
    COM2_ORD  VARCHAR(40),
    COM2_TAB  INTEGER,
    DAT_CAD   TIMESTAMP,
    DAT_ATU   TIMESTAMP,
    USE_CAD   INTEGER,
    USE_ATU   INTEGER,
    ATIVO     VARCHAR(1)
);

CREATE TABLE CDCLIDADOS (
    CLID_COD    INTEGER NOT NULL,
    CLID_CLI    INTEGER NOT NULL,
    CLID_NOME   VARCHAR(30),
    CLID_TIP    VARCHAR(1),
    CLID_CPF    VARCHAR(19),
    CLID_RG     VARCHAR(19),
    CLID_NASCI  TIMESTAMP,
    CLID_PART   DOUBLE PRECISION,
    CLID_END    VARCHAR(100),
    CLID_CON    VARCHAR(30),
    CLID_TEL    VARCHAR(15),
    CLID_AGE    VARCHAR(10),
    CLID_CONT   VARCHAR(30),
    CLID_DATA   TIMESTAMP,
    DAT_CAD     TIMESTAMP,
    DAT_ATU     TIMESTAMP,
    ATIVO       VARCHAR(1)
);

CREATE TABLE CDCLIFUN (
    FUN_COD              INTEGER NOT NULL,
    FUN_NOM              VARCHAR(60),
    FUN_EMP              INTEGER,
    FUN_SET              INTEGER,
    FUN_CAR              INTEGER,
    FUN_COND             VARCHAR(3),
    FUN_CTPS             VARCHAR(20),
    FUN_PIS              VARCHAR(20),
    FUN_ESTCIVIL         VARCHAR(3),
    FUN_ADMISSAO         TIMESTAMP,
    FUN_DEMISSAO         TIMESTAMP,
    FUN_FIS              VARCHAR(1),
    FUN_ANI              TIMESTAMP,
    FUN_CPF              VARCHAR(19),
    FUN_RG               VARCHAR(19),
    DAT_CAD              TIMESTAMP,
    DAT_ATU              TIMESTAMP,
    ATIVO                VARCHAR(1),
    USE_CAD              INTEGER,
    USE_ATU              INTEGER,
    FUN_PTRAB            VARCHAR(90),
    FUN_CODIGO           INTEGER,
    FUN_NOME_COM_CODIGO  VARCHAR(75)
);

CREATE TABLE CDCLIFUN2 (
    FUN2_COD    INTEGER NOT NULL,
    FUN2_FUN1   INTEGER,
    FUN2_CAR    INTEGER,
    FUN2_SET    INTEGER,
    FUN2_EMP    INTEGER,
    USE_CAD     INTEGER,
    USE_ATU     INTEGER,
    DAT_ATU     TIMESTAMP,
    DAT_CAD     TIMESTAMP,
    FUN2_DEM    TIMESTAMP,
    FUN2_ADM    TIMESTAMP,
    FUN2_PTRAB  VARCHAR(90)
);

CREATE TABLE CDCON (
    CON_COD             INTEGER,
    CON_NOM             VARCHAR(30),
    CON_BAN             INTEGER,
    CON_MOE             INTEGER,
    CON_SAL             DOUBLE PRECISION,
    CON_AGE             VARCHAR(10),
    CON_TEL             VARCHAR(15),
    CON_FEC             TIMESTAMP,
    CON_NUM             VARCHAR(20),
    CON_GER             VARCHAR(50),
    CON_LIM             DOUBLE PRECISION,
    CON_SIG             VARCHAR(5),
    CON_NIV             INTEGER,
    CON_PRIMEIRO_SALDO  DOUBLE PRECISION,
    DAT_CAD             TIMESTAMP,
    DAT_ATU             TIMESTAMP,
    ATIVO               VARCHAR(1),
    CON_TIP             INTEGER
);

CREATE TABLE CDCONT (
    CON_COD      INTEGER NOT NULL,
    CON_NOM      VARCHAR(60),
    CON_RED      VARCHAR(75),
    CON_LOG      VARCHAR(5),
    CON_NUM      VARCHAR(10),
    CON_COP      VARCHAR(20),
    CON_CEP      VARCHAR(9),
    CON_END      VARCHAR(50),
    CON_BAI      VARCHAR(20),
    CON_CGC      VARCHAR(19),
    CON_EMA      VARCHAR(60),
    CON_WWW      VARCHAR(50),
    CON_IES      VARCHAR(15),
    CON_PUB      VARCHAR(1),
    COD_USER     INTEGER,
    CON_CID      VARCHAR(30),
    CON_EST      VARCHAR(2),
    CON_GRU      INTEGER,
    CON_FIS      VARCHAR(1),
    DAT_CAD      TIMESTAMP,
    DAT_ATU      TIMESTAMP,
    ATIVO        VARCHAR(1),
    CON_FOTO     BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    CON_TEL      VARCHAR(15),
    CON_FOTONOM  VARCHAR(50),
    CON_TRAT     VARCHAR(10),
    USE_CAD      INTEGER,
    USE_ATU      INTEGER,
    CON_GRU2     INTEGER,
    CON_GRU3     INTEGER,
    CON_FUN      INTEGER,
    CON_CODIGO   INTEGER
);

CREATE TABLE CDCONTC (
    CON_COD          INTEGER,
    CON_NOM          VARCHAR(30),
    CON_OBS          VARCHAR(50),
    CON_CONT         INTEGER,
    CON_TEL          VARCHAR(18),
    CON_DAT          TIMESTAMP,
    CON_RAM          VARCHAR(10),
    COD_USER         INTEGER,
    DAT_CAD          TIMESTAMP,
    DAT_ATU          TIMESTAMP,
    ATIVO            VARCHAR(1),
    CON_ORDEM        INTEGER,
    CON_MALA_DIRETA  VARCHAR(1),
    CON_TEL_PRINC    VARCHAR(1)
);

CREATE TABLE CDCOR (
    COR_COD  VARCHAR(3),
    COR_NOM  VARCHAR(30),
    COR_SIG  VARCHAR(5),
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1)
);

CREATE TABLE CDCORRETORA (
    ID       BIGINT NOT NULL,
    CODIGO   BIGINT,
    NOME     VARCHAR(100),
    SIGLA    VARCHAR(10),
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    STATUS   VARCHAR(1)
);

CREATE TABLE CDCRE (
    CRE_COD        INTEGER,
    CRE_NOM        VARCHAR(30),
    CRE_FAT        VARCHAR(1),
    CRE_DIA        INTEGER,
    CRE_SIG        VARCHAR(5),
    CRE_DESCRICAO  VARCHAR(60),
    DAT_CAD        TIMESTAMP,
    DAT_ATU        TIMESTAMP,
    ATIVO          VARCHAR(1)
);

CREATE TABLE CDCSOSN (
    CSO_COD  INTEGER NOT NULL,
    CSO_NOM  VARCHAR(120),
    CSO_CSO  VARCHAR(10),
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1)
);

CREATE TABLE CDDEP (
    DEP_COD  INTEGER,
    DEP_NOM  VARCHAR(30),
    DEP_SIG  VARCHAR(5),
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1)
);

CREATE TABLE CDDOENCAS (
    DOE_COD         INTEGER NOT NULL,
    DOE_NOM         VARCHAR(70),
    DOE_INT         VARCHAR(10),
    DOE_TIP         VARCHAR(1),
    DAT_CAD         TIMESTAMP,
    DAT_ATU         TIMESTAMP,
    ATIVO           VARCHAR(1),
    USE_CAD         INTEGER,
    USE_ATU         INTEGER,
    DOE_DESCRICAO   BLOB SUB_TYPE 1 SEGMENT SIZE 1024,
    DOE_RESTRSEXO   VARCHAR(1),
    DOE_CAUSAOBITO  VARCHAR(1)
);

CREATE TABLE CDEMAIL (
    EMA_USE   INTEGER,
    EMA_DAT   TIMESTAMP,
    EMA_ORI   VARCHAR(1),
    EMA_STA   VARCHAR(1),
    EMA_ASS   VARCHAR(200),
    EMA_DE    VARCHAR(100),
    EMA_PARA  BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    EMA_MSG   BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    EMA_ANX   BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    EMA_DOC   VARCHAR(200)
);

CREATE TABLE CDEMP (
    EMP_COD  INTEGER,
    EMP_NOM  VARCHAR(50),
    EMP_CID  VARCHAR(30),
    EMP_CEP  VARCHAR(9),
    EMP_LOG  VARCHAR(5),
    EMP_END  VARCHAR(50),
    EMP_NUM  VARCHAR(10),
    EMP_COM  VARCHAR(20),
    EMP_BAI  VARCHAR(20),
    EMP_FAN  VARCHAR(20),
    EMP_EST  VARCHAR(2),
    EMP_TEL  VARCHAR(15),
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1)
);

CREATE TABLE CDEMPCNAE (
    CNAE_COD    INTEGER NOT NULL,
    CNAE_CNAE   VARCHAR(20),
    CNAE_NOM    VARCHAR(200),
    CNAE_OBS    BLOB SUB_TYPE 1 SEGMENT SIZE 1024,
    DAT_CAD     TIMESTAMP,
    DAT_ATU     TIMESTAMP,
    ATIVO       VARCHAR(1),
    USE_CAD     INTEGER,
    USE_ATU     INTEGER,
    CNAE_RISCO  INTEGER
);

CREATE TABLE CDEMPCRD (
    CRD_COD      INTEGER NOT NULL,
    CRD_FOR      INTEGER,
    CRD_CRM      VARCHAR(20),
    CRD_CAT      VARCHAR(5),
    CRD_OBS      BLOB SUB_TYPE 1 SEGMENT SIZE 1024,
    DAT_CAD      TIMESTAMP,
    DAT_ATU      TIMESTAMP,
    ATIVO        VARCHAR(1),
    USE_CAD      INTEGER,
    USE_ATU      INTEGER,
    CRD_BAN      VARCHAR(20),
    CRD_AG       VARCHAR(10),
    CRD_CC       VARCHAR(15),
    CRD_VALCONS  DOUBLE PRECISION
);

CREATE TABLE CDEMPCRD2 (
    CRD2_COD  INTEGER NOT NULL,
    CRD2_CRD  INTEGER,
    CRD2_AMB  INTEGER,
    CRD2_VAL  DOUBLE PRECISION,
    CRD2_ATU  TIMESTAMP
);

CREATE TABLE CDEMPENG (
    ENG_COD   INTEGER NOT NULL,
    ENG_FUN   INTEGER,
    ENG_CREA  VARCHAR(20),
    ENG_NIT   VARCHAR(20),
    ENG_OBS   BLOB SUB_TYPE 1 SEGMENT SIZE 1024,
    DAT_CAD   TIMESTAMP,
    DAT_ATU   TIMESTAMP,
    ATIVO     VARCHAR(1),
    USE_CAD   INTEGER,
    USE_ATU   INTEGER
);

CREATE TABLE CDEMPMEDCOORD (
    MED_COD  INTEGER NOT NULL,
    MED_FUN  INTEGER,
    MED_CRM  VARCHAR(20),
    MED_NIT  VARCHAR(20),
    MED_MTB  VARCHAR(20),
    MED_OBS  BLOB SUB_TYPE 1 SEGMENT SIZE 1024,
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1),
    USE_CAD  INTEGER,
    USE_ATU  INTEGER,
    MED_BAN  VARCHAR(20),
    MED_AG   VARCHAR(10),
    MED_CC   VARCHAR(15)
);

CREATE TABLE CDEMPPROFINT (
    PRO_COD   INTEGER NOT NULL,
    PRO_FUN   INTEGER,
    PRO_NREG  VARCHAR(30),
    PRO_ESP   VARCHAR(30),
    DAT_CAD   TIMESTAMP,
    DAT_ATU   TIMESTAMP,
    ATIVO     VARCHAR(1),
    USE_CAD   INTEGER,
    USE_ATU   INTEGER
);

CREATE TABLE CDEMPRESAMAP1 (
    MAP1_COD  INTEGER NOT NULL,
    MAP1_EMP  INTEGER,
    MAP1_SET  INTEGER
);

CREATE TABLE CDEMPRESAMAP2 (
    MAP2_COD   INTEGER NOT NULL,
    MAP2_MAP1  INTEGER,
    MAP2_CAR   INTEGER,
    MAP2_OBS   BLOB SUB_TYPE 1 SEGMENT SIZE 80
);

CREATE TABLE CDEMPRESAMAP3 (
    MAP3_COD       INTEGER NOT NULL,
    MAP3_MAP2      INTEGER,
    MAP3_EXA       INTEGER,
    MAP3_RET       INTEGER,
    MAP3_ASO       VARCHAR(1),
    MAP3_RET_DESC  COMPUTED BY ((SELECT RESULT FROM CONVERTER_MESES_EM_FREQUENCIA(CDEMPRESAMAP3.MAP3_RET)))
);

CREATE TABLE CDEMPRESAMAP4 (
    MAP4_COD                INTEGER NOT NULL,
    MAP4_MAP2               INTEGER,
    MAP4_GRAU_RISCO         INTEGER,
    MAP4_INT_CONC           VARCHAR(20),
    MAP4_TECNICA            VARCHAR(20),
    MAP4_EPC_EF             VARCHAR(3),
    MAP4_EPI_EF             VARCHAR(3),
    MAP4_CA_EPI             VARCHAR(20),
    MAP4_LIM_TOL            VARCHAR(40),
    MAP4_EXPO_HABITUAL      VARCHAR(1),
    MAP4_EXPO_OCASIONAL     VARCHAR(1),
    MAP4_CONTRO_PROT_INDIV  VARCHAR(1),
    MAP4_CONTRO_PROT_COLET  VARCHAR(1),
    MAP4_CONTRO_ORIENT      VARCHAR(1),
    MAP4_FONTE_GERADORA     VARCHAR(50),
    MAP4_PCMSO              VARCHAR(1)
);

CREATE TABLE CDEMPRESAMAP5 (
    MAP5_COD               INTEGER NOT NULL,
    MAP5_MAP2              INTEGER NOT NULL,
    MAP5_PROT_AUDITIVO     VARCHAR(100),
    MAP5_PROT_RESP         VARCHAR(100),
    MAP5_PROT_FACIAL       VARCHAR(100),
    MAP5_PROT_OLHOS        VARCHAR(100),
    MAP5_PROT_CABECA       VARCHAR(100),
    MAP5_PROT_PELE         VARCHAR(100),
    MAP5_PROT_MAOS         VARCHAR(100),
    MAP5_PROT_PES          VARCHAR(100),
    MAP5_PROT_CORPO        VARCHAR(100),
    MAP5_CA_PROT_AUDITIVO  VARCHAR(10),
    MAP5_CA_PROT_RESP      VARCHAR(10),
    MAP5_CA_PROT_FACIAL    VARCHAR(10),
    MAP5_CA_PROT_OLHOS     VARCHAR(10),
    MAP5_CA_PROT_CABECA    VARCHAR(10),
    MAP5_CA_PROT_PELE      VARCHAR(10),
    MAP5_CA_PROT_MAOS      VARCHAR(10),
    MAP5_CA_PROT_PES       VARCHAR(10),
    MAP5_CA_PROT_CORPO     VARCHAR(10)
);

CREATE TABLE CDEMPRESASEG (
    EMP_COD        INTEGER NOT NULL,
    EMP_CLI        INTEGER,
    EMP_ENG_RESP   INTEGER,
    EMP_MED_CORD   INTEGER,
    EMP_CNAE       INTEGER,
    EMP_OBS        BLOB SUB_TYPE 1 SEGMENT SIZE 1024,
    DAT_CAD        TIMESTAMP,
    DAT_ATU        TIMESTAMP,
    ATIVO          VARCHAR(1),
    USE_CAD        INTEGER,
    USE_ATU        INTEGER,
    EMP_RISCO      INTEGER,
    EMP_PCMSO      VARCHAR(1),
    EMP_PART       VARCHAR(1),
    EMP_EXAME_ALM  INTEGER,
    EMP_EXAME_TRA  INTEGER,
    EMP_EXAME_PGT  INTEGER,
    EMP_EXAME_TIP  INTEGER
);

CREATE TABLE CDEMPRESASEG2 (
    EMP2_COD  INTEGER NOT NULL,
    EMP2_EMP  INTEGER NOT NULL,
    EMP2_AMB  INTEGER,
    EMP2_VAL  DOUBLE PRECISION,
    EMP2_TIP  VARCHAR(1),
    EMP2_COB  VARCHAR(1)
);

CREATE TABLE CDEMPRESASEG3 (
    EMP3_COD  INTEGER NOT NULL,
    EMP3_EMP  INTEGER NOT NULL,
    EMP3_ENG  INTEGER,
    EMP3_INI  TIMESTAMP,
    EMP3_FIM  TIMESTAMP
);

CREATE TABLE CDEMPRESASEG4 (
    EMP4_COD  INTEGER NOT NULL,
    EMP4_EMP  INTEGER NOT NULL,
    EMP4_MED  INTEGER,
    EMP4_INI  TIMESTAMP,
    EMP4_FIM  TIMESTAMP
);

CREATE TABLE CDEMPRESASEG5 (
    EMP5_COD      INTEGER NOT NULL,
    EMP5_EMP      INTEGER NOT NULL,
    EMP5_MOD      VARCHAR(3),
    EMP5_TIP      VARCHAR(3),
    EMP5_IND      INTEGER,
    EMP5_CONT     TIMESTAMP,
    EMP5_REAJ     TIMESTAMP,
    EMP5_VLINI    DOUBLE PRECISION,
    EMP5_VLREAJ   DOUBLE PRECISION,
    EMP5_VLATUAL  DOUBLE PRECISION,
    EMP5_PGT      INTEGER,
    EMP5_TIPD     INTEGER,
    EMP5_TRANS    INTEGER,
    EMP5_FILIAL   INTEGER,
    EMP5_DIA_MES  INTEGER,
    EMP5_FAT_MIN  INTEGER
);

CREATE TABLE CDEMPRESASEG6 (
    EMP6_COD    INTEGER NOT NULL,
    EMP6_EMP5   INTEGER NOT NULL,
    EMP6_DAT    TIMESTAMP,
    EMP6_VALOR  DOUBLE PRECISION,
    EMP6_VD1    VARCHAR(13)
);

CREATE TABLE CDENTEND (
    ENT_COD   VARCHAR(13) NOT NULL,
    ENT_ENT   INTEGER,
    ENT_FLAG  VARCHAR(1),
    ENT_END   VARCHAR(100),
    DAT_CAD   TIMESTAMP,
    DAT_ATU   TIMESTAMP,
    USE_CAD   INTEGER,
    USE_ATU   INTEGER
);

CREATE TABLE CDENTVARCAMPO (
    CMP_COD  INTEGER NOT NULL,
    CMP_ENT  VARCHAR(10) NOT NULL,
    CMP_VAR  INTEGER NOT NULL,
    CMP_ORD  INTEGER,
    CMP_SEC  VARCHAR(30)
);

CREATE TABLE CDENTVARVALOR (
    VAL_ENT_COD   INTEGER NOT NULL,
    VAL_ENT_TAB   VARCHAR(10) NOT NULL,
    VAL_VAR       INTEGER NOT NULL,
    VAL_DATA      TIMESTAMP,
    VAL_REAL      DOUBLE PRECISION,
    VAL_TEXTO     VARCHAR(100),
    DAT_CAD       TIMESTAMP,
    DAT_ATU       TIMESTAMP,
    ATIVO         VARCHAR(1),
    USE_CAD       INTEGER,
    USE_ATU       INTEGER,
    VAL_BLOB      BLOB SUB_TYPE 1 SEGMENT SIZE 1024,
    VAL_MULTIPLO  INTEGER
);

CREATE TABLE CDEQUIPAMENTO (
    EQU_COD          INTEGER NOT NULL,
    EQU_NOM          VARCHAR(60) NOT NULL,
    EQU_TIPO         VARCHAR(3),
    EQU_NSERIE       VARCHAR(20),
    EQU_AFERICAO     VARCHAR(20),
    EQU_DATAFERICAO  TIMESTAMP,
    EQU_LOCAL        VARCHAR(1),
    EQU_LOCALIZACAO  VARCHAR(60),
    EQU_FOR          INTEGER,
    DAT_CAD          TIMESTAMP NOT NULL,
    DAT_ATU          TIMESTAMP NOT NULL,
    ATIVO            VARCHAR(1) NOT NULL,
    USE_CAD          INTEGER NOT NULL,
    USE_ATU          INTEGER NOT NULL
);

CREATE TABLE CDEQUIPE (
    EQP_COD  INTEGER NOT NULL,
    EQP_NOM  VARCHAR(30),
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1)
);

CREATE TABLE CDEQUIPE1 (
    EQP1_COD  INTEGER,
    EQP1_DAT  TIMESTAMP,
    EQP1_EQP  INTEGER
);

CREATE TABLE CDEQUIPE2 (
    EQP1_COD  INTEGER,
    EQP1_DAT  TIMESTAMP,
    EQP2_FUN  INTEGER
);

CREATE TABLE CDEST (
    EST_COD     INTEGER,
    EST_EST     VARCHAR(2),
    EST_ICM     DOUBLE PRECISION,
    ESTRED_ICM  DOUBLE PRECISION,
    DAT_CAD     TIMESTAMP,
    DAT_ATU     TIMESTAMP,
    ATIVO       VARCHAR(2),
    USE_CAD     INTEGER,
    USE_ATU     INTEGER
);

CREATE TABLE CDESTRATEGIA (
    ID       BIGINT NOT NULL,
    CODIGO   BIGINT,
    NOME     VARCHAR(100),
    SIGLA    VARCHAR(10),
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    STATUS   VARCHAR(1)
);

CREATE TABLE CDETIFONT (
    FONT_ETI    INTEGER NOT NULL,
    FONT_CAM    VARCHAR(10),
    FONT_NOM    VARCHAR(40),
    FONT_COR    INTEGER,
    FONT_TAM    INTEGER,
    FONT_NEG    VARCHAR(1),
    FONT_ITA    VARCHAR(1),
    FONT_SUB    VARCHAR(1),
    FONT_RAB    VARCHAR(1),
    FONT_IMP    VARCHAR(1),
    FONT_BARRA  VARCHAR(1)
);

CREATE TABLE CDETIQUETA (
    ETI_COD           INTEGER NOT NULL,
    ETI_NOM           VARCHAR(30),
    ETI_COLUMS        INTEGER,
    ETI_LEFTMARGIN    DOUBLE PRECISION,
    ETI_RIGHTMARGIN   DOUBLE PRECISION,
    ETI_PAPERALT      DOUBLE PRECISION,
    ETI_TOPMARGIN     DOUBLE PRECISION,
    ETI_BOTTOMMARGIN  DOUBLE PRECISION,
    ETI_SIZEHEIGHT    DOUBLE PRECISION,
    ETI_SIZEWIDTH     DOUBLE PRECISION,
    ETI_COLUMSSPACE   DOUBLE PRECISION,
    ETI_PAPERLAR      DOUBLE PRECISION,
    DAT_CAD           TIMESTAMP,
    DAT_ATU           TIMESTAMP,
    ATIVO             VARCHAR(1),
    ETI_TYPE          VARCHAR(10),
    ETI_MSG           BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    ETI_TIPOPAPEL     VARCHAR(15)
);

CREATE TABLE CDETQPRO (
    ETQ_COD   INTEGER,
    ETQ_IMP   INTEGER,
    ETQ_NOME  VARCHAR(30),
    ETQ_PATH  VARCHAR(250),
    ETQ_COL   INTEGER,
    DAT_CAD   TIMESTAMP,
    DAT_ATU   TIMESTAMP,
    ATIVO     VARCHAR(1)
);

CREATE TABLE CDETQPRO2 (
    ETQ_COD          INTEGER,
    ETQ_ETQ          INTEGER,
    ETQ_VAR          VARCHAR(30),
    ETQ_CAMPOS       VARCHAR(25),
    ETQ_TAMANHO      INTEGER,
    ETQ_POSINI       INTEGER,
    ETQ_CAMPOS_COMP  VARCHAR(200)
);

CREATE TABLE CDEXAMESAMB (
    AMB_COD        INTEGER NOT NULL,
    AMB_AMB        VARCHAR(30),
    AMB_NOM        VARCHAR(100),
    AMB_QTD_CH     INTEGER,
    AMB_FILME_M2   DOUBLE PRECISION,
    AMB_FILME_VAL  DOUBLE PRECISION,
    AMB_VALOR_I    DOUBLE PRECISION,
    AMB_VALOR_C    DOUBLE PRECISION,
    AMB_VALOR_A    DOUBLE PRECISION,
    AMB_VALOR_E    DOUBLE PRECISION,
    AMB_VALOR_P    DOUBLE PRECISION,
    DAT_CAD        TIMESTAMP,
    DAT_ATU        TIMESTAMP,
    ATIVO          VARCHAR(1),
    USE_CAD        INTEGER,
    USE_ATU        INTEGER,
    AMB_TIPO       VARCHAR(3),
    AMB_CLINICO    VARCHAR(1)
);

CREATE TABLE CDEXPFIN1 (
    EXP_COD  INTEGER NOT NULL,
    EXP_NOM  VARCHAR(50),
    EXP_OBS  BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    USE_CAD  INTEGER,
    USE_ATU  INTEGER,
    ATIVO    VARCHAR(1)
);

CREATE TABLE CDEXPFIN2 (
    EXP2_COD    INTEGER NOT NULL,
    EXP2_EXP    INTEGER NOT NULL,
    EXP2_POS    INTEGER,
    EXP2_TAM    INTEGER,
    EXP2_TAB    VARCHAR(30),
    EXP2_CMP    VARCHAR(30),
    EXP2_TIP    VARCHAR(30),
    EXP2_TAB2   VARCHAR(30),
    EXP2_CMP2   VARCHAR(30),
    EXP2_TIP2   VARCHAR(30),
    EXP2_ITEM   VARCHAR(1),
    EXP2_ITEM2  VARCHAR(1)
);

CREATE TABLE CDEXPFINDEPARA (
    EXP_COD  INTEGER NOT NULL,
    EXP_NOM  VARCHAR(30),
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    USE_CAD  INTEGER,
    USE_ATU  INTEGER,
    ATIVO    VARCHAR(1),
    EXP_MOD  INTEGER
);

CREATE TABLE CDEXPFINDEPARA2 (
    EXP2_COD  INTEGER NOT NULL,
    EXP2_EXP  INTEGER NOT NULL,
    EXP2_TAB  VARCHAR(30),
    EXP2_CMP  VARCHAR(30),
    EXP2_EXB  VARCHAR(30)
);

CREATE TABLE CDEXPFINDEPARA3 (
    EXP3_COD    INTEGER NOT NULL,
    EXP3_EXP2   INTEGER NOT NULL,
    EXP3_DE     VARCHAR(100),
    EXP3_PARA   VARCHAR(100),
    EXP3_PARA2  VARCHAR(100)
);

CREATE TABLE CDEXPFINDEPARA4 (
    EXP4_EXP  INTEGER NOT NULL,
    EXP4_CUS  VARCHAR(40) NOT NULL
);

CREATE TABLE CDEXPORTSQL (
    EXP_COD  INTEGER NOT NULL,
    EXP_NOM  VARCHAR(60),
    EXP_SQL  BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    USE_CAD  INTEGER,
    USE_ATU  INTEGER,
    ATIVO    VARCHAR(1)
);

CREATE TABLE CDEXPORTSQL2 (
    EXP_COD  INTEGER,
    USE_COD  INTEGER
);

CREATE TABLE CDFAQ (
    FAQ_COD  INTEGER NOT NULL,
    FAQ_TIT  VARCHAR(30),
    FAQ_TXT  BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    FAQ_USR  INTEGER NOT NULL
);

CREATE TABLE CDFASESPRO (
    FAS_COD  INTEGER,
    FAS_NOM  VARCHAR(30),
    FAS_SIG  VARCHAR(5),
    FAS_ORD  INTEGER,
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1)
);

CREATE TABLE CDFER (
    FER_NOM  VARCHAR(30) NOT NULL,
    FER_DAT  TIMESTAMP,
    FER_EST  INTEGER,
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1)
);

CREATE TABLE CDFOR (
    FOR_COD            INTEGER NOT NULL,
    FOR_RZS            VARCHAR(60),
    FOR_GRU            INTEGER,
    FOR_RED            VARCHAR(75),
    FOR_PLA            VARCHAR(40),
    FOR_CGC            VARCHAR(19),
    FOR_IES            VARCHAR(30),
    FOR_LOG            VARCHAR(5),
    FOR_END            VARCHAR(50),
    FOR_NUM            VARCHAR(10),
    FOR_COP            VARCHAR(20),
    FOR_BAI            VARCHAR(20),
    FOR_CID            VARCHAR(30),
    FOR_CEP            VARCHAR(9),
    FOR_EST            VARCHAR(2),
    FOR_CON            VARCHAR(20),
    FOR_WWW            VARCHAR(50),
    FOR_EMA            VARCHAR(60),
    FOR_TIP            INTEGER,
    FOR_VEC            TIMESTAMP,
    FOR_CONTA          INTEGER,
    FOR_VAL            DOUBLE PRECISION,
    FOR_PAI            VARCHAR(30),
    FOR_IMU            VARCHAR(14),
    FOR_DAT            TIMESTAMP,
    FOR_CCUSTO         VARCHAR(40),
    FOR_FIS            VARCHAR(1),
    FOR_CONSIDERA_IPI  VARCHAR(1),
    FOR_TEL            VARCHAR(15),
    DAT_CAD            TIMESTAMP,
    DAT_ATU            TIMESTAMP,
    ATIVO              VARCHAR(1),
    FOR_FOTO           BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    FOR_FOTONOM        VARCHAR(50),
    FOR_OBS            BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    USE_CAD            INTEGER,
    USE_ATU            INTEGER,
    FOR_CODIGO         INTEGER,
    FOR_PAIS           VARCHAR(100),
    FOR_PROV           VARCHAR(100),
    FOR_AGE            VARCHAR(15),
    FOR_CON_BAN        VARCHAR(15),
    FOR_BAN            INTEGER
);

CREATE TABLE CDFOR2 (
    FOR2_FOR  INTEGER NOT NULL,
    FOR2_GRU  INTEGER NOT NULL
);

CREATE TABLE CDFORC (
    CON_COD          INTEGER,
    CON_NOM          VARCHAR(30),
    CON_OBS          VARCHAR(50),
    CON_FOR          INTEGER,
    CON_TEL          VARCHAR(18),
    CON_DAT          TIMESTAMP,
    CON_RAM          VARCHAR(10),
    DAT_CAD          TIMESTAMP,
    DAT_ATU          TIMESTAMP,
    ATIVO            VARCHAR(1),
    CON_ORDEM        INTEGER,
    CON_MALA_DIRETA  VARCHAR(1),
    CON_TEL_PRINC    VARCHAR(1)
);

CREATE TABLE CDFORM (
    FORM_COD           INTEGER NOT NULL,
    FORM_NOM           VARCHAR(30),
    FORM_IMPRESSO      VARCHAR(30),
    FORM_IMPHORA       VARCHAR(1),
    FORM_EXCLUI_PDV    INTEGER,
    FORM_ALM           INTEGER,
    TIPOFRM            INTEGER,
    FORM_IMPPRECO      VARCHAR(1),
    FORM_MODOIMPRESSO  VARCHAR(1),
    DAT_CAD            TIMESTAMP,
    DAT_ATU            TIMESTAMP,
    ATIVO              VARCHAR(1),
    FORM_SERIE         INTEGER
);

CREATE TABLE CDFUN (
    FUN_COD             INTEGER NOT NULL,
    FUN_NOM             VARCHAR(50),
    FUN_ADM             TIMESTAMP,
    FUN_NAS             TIMESTAMP,
    FUN_APE             VARCHAR(15),
    FUN_LOG             VARCHAR(5),
    FUN_END             VARCHAR(50),
    FUN_NUM             VARCHAR(10),
    FUN_BAI             VARCHAR(20),
    FUN_CID             VARCHAR(30),
    FUN_EST             VARCHAR(2),
    FUN_CEP             VARCHAR(9),
    FUN_DEM             TIMESTAMP,
    FUN_SEX             VARCHAR(1),
    FUN_CIV             VARCHAR(1),
    FUN_RG              VARCHAR(19),
    FUN_CPF             VARCHAR(19),
    FUN_TEL             VARCHAR(15),
    FUN_USO             VARCHAR(1),
    FUN_VEN             VARCHAR(1),
    FUN_DEP             INTEGER,
    FUN_CAR             INTEGER,
    FUN_COM             DOUBLE PRECISION,
    FUN_PAI             VARCHAR(30),
    FUN_WWW             VARCHAR(50),
    FUN_EMA             VARCHAR(60),
    FUN_RAM             VARCHAR(10),
    FUN_REG             VARCHAR(30),
    FUN_MET             VARCHAR(20),
    FUN_SENHA           VARCHAR(10),
    FUN_COP             VARCHAR(20),
    FUN_FOTO            BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    FUN_CTR             VARCHAR(15),
    FUN_CNH             VARCHAR(15),
    FUN_ORG             VARCHAR(10),
    FUN_SER             VARCHAR(10),
    FUN_CAT             VARCHAR(5),
    FUN_ECP             VARCHAR(2),
    FUN_DRG             TIMESTAMP,
    FUN_DCP             TIMESTAMP,
    FUN_DCH             TIMESTAMP,
    FUN_CAI             VARCHAR(1),
    FUN_CUR             BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    FUN_ALM             INTEGER,
    FUN_COMP            VARCHAR(1),
    DAT_CAD             TIMESTAMP,
    DAT_ATU             TIMESTAMP,
    ATIVO               VARCHAR(1),
    FUN_PRE             VARCHAR(1),
    FUN_FOTONOM         VARCHAR(50),
    FUN_RED             VARCHAR(75),
    FUN_CONTA_EMAIL     VARCHAR(60),
    FUN_SENHA_EMAIL     VARCHAR(30),
    FUN_CONTA_POP3      VARCHAR(30),
    FUN_CONTA_SMTP      VARCHAR(30),
    FUN_EMA_RESP        VARCHAR(60),
    FUN_AUTENTICA_SMTP  VARCHAR(1),
    USE_CAD             INTEGER,
    USE_ATU             INTEGER,
    FUN_REUNIAO         VARCHAR(1),
    FUN_LIGACAO         VARCHAR(1),
    FUN_TAREFA          VARCHAR(1),
    FUN_ANIV            VARCHAR(1),
    FUN_EMAIL_ANTEC     INTEGER,
    FUN_EMAIL_CELULAR   VARCHAR(60),
    FUN_OPERADORA       VARCHAR(20),
    FUN_RAMAL           VARCHAR(10),
    FUN_CUSTOHORA       DOUBLE PRECISION,
    FUN_CODIGO          INTEGER,
    FUN_PORTA_SMTP      INTEGER,
    FUN_PORTA_POP3      INTEGER,
    FUN_SSL_SMTP        VARCHAR(1),
    FUN_SSL_POP3        VARCHAR(1),
    FUN_TLS_SMTP        VARCHAR(1),
    FUN_TLS_POP3        VARCHAR(1),
    FUN_AGE             VARCHAR(15),
    FUN_CON_BAN         VARCHAR(15),
    FUN_BAN             INTEGER
);

CREATE TABLE CDFUNC (
    CON_COD          INTEGER,
    CON_NOM          VARCHAR(30),
    CON_OBS          VARCHAR(50),
    CON_FUN          INTEGER,
    CON_TEL          VARCHAR(18),
    CON_DAT          TIMESTAMP,
    CON_RAM          VARCHAR(10),
    DAT_CAD          TIMESTAMP,
    DAT_ATU          TIMESTAMP,
    ATIVO            VARCHAR(1),
    CON_ORDEM        INTEGER,
    CON_MALA_DIRETA  VARCHAR(1),
    CON_TEL_PRINC    VARCHAR(1)
);

CREATE TABLE CDGRADECORMED (
    GRA_COD  INTEGER NOT NULL,
    GRA_NOM  VARCHAR(50),
    GRA_OBS  BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1),
    USE_CAD  INTEGER,
    USE_ATU  INTEGER
);

CREATE TABLE CDGRADECORMED2 (
    GRA2_GRA  INTEGER,
    GRA2_PRO  INTEGER,
    GRA2_ALM  INTEGER
);

CREATE TABLE CDGRADECORMED3 (
    GRA3_GRA  INTEGER,
    GRA3_PRO  INTEGER,
    GRA3_COR  VARCHAR(3),
    GRA3_MED  VARCHAR(3),
    GRA3_QTD  DOUBLE PRECISION
);

CREATE TABLE CDGRAURISCO (
    GRA_COD       INTEGER NOT NULL,
    GRA_NOM       VARCHAR(30) NOT NULL,
    GRA_ENQ       VARCHAR(30),
    GRA_GRAU      INTEGER NOT NULL,
    DAT_CAD       TIMESTAMP NOT NULL,
    DAT_ATU       TIMESTAMP NOT NULL,
    ATIVO         VARCHAR(1) NOT NULL,
    USE_CAD       INTEGER NOT NULL,
    USE_ATU       INTEGER NOT NULL,
    GRA_ENQ_DESC  VARCHAR(30)
);

CREATE TABLE CDGRTRA (
    GRT_COD    INTEGER NOT NULL,
    GRT_DESCR  VARCHAR(30),
    DAT_CAD    TIMESTAMP,
    DAT_ATU    TIMESTAMP,
    ATIVO      VARCHAR(1),
    GRT_FLAG   VARCHAR(1),
    GRT_TIPO   INTEGER,
    GRT_MOD    VARCHAR(20),
    GRT_CAT    VARCHAR(20),
    GRT_SIT    VARCHAR(20)
);

CREATE TABLE CDGRUC (
    GRU_COD  INTEGER,
    GRU_NOM  VARCHAR(30),
    GRU_SIG  VARCHAR(5),
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1),
    GRU_ORD  VARCHAR(40),
    GRU_TAB  INTEGER,
    USE_CAD  INTEGER,
    USE_ATU  INTEGER
);

CREATE TABLE CDGRUCONT (
    GRU_COD  INTEGER,
    GRU_NOM  VARCHAR(30),
    GRU_SIG  VARCHAR(5),
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1),
    GRU_ORD  VARCHAR(40),
    USE_CAD  INTEGER,
    USE_ATU  INTEGER,
    GRU_TAB  INTEGER
);

CREATE TABLE CDGRUF (
    GRU_COD  INTEGER NOT NULL,
    GRU_NOM  VARCHAR(30),
    GRU_SIG  VARCHAR(5),
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1),
    GRU_ORD  VARCHAR(40),
    USE_CAD  INTEGER,
    USE_ATU  INTEGER,
    GRU_TAB  INTEGER
);

CREATE TABLE CDGRUP (
    GRU_COD       INTEGER,
    GRU_NOM       VARCHAR(30),
    GRU_SIG       VARCHAR(5),
    GRU_FOTO      VARCHAR(30),
    DAT_CAD       TIMESTAMP,
    DAT_ATU       TIMESTAMP,
    ATIVO         VARCHAR(1),
    GRU_ORD       VARCHAR(40),
    GRU_TAB       INTEGER,
    USE_CAD       INTEGER,
    USE_ATU       INTEGER,
    GRU_PROD_INT  VARCHAR(1)
);

CREATE TABLE CDGRUR (
    GRU_COD  INTEGER,
    GRU_NOM  VARCHAR(30),
    GRU_SIG  VARCHAR(5),
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1),
    GRU_ORD  VARCHAR(40),
    USE_CAD  INTEGER,
    USE_ATU  INTEGER
);

CREATE TABLE CDGRUS (
    GRU_COD  INTEGER,
    GRU_NOM  VARCHAR(30),
    GRU_SIG  VARCHAR(5),
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1)
);

CREATE TABLE CDGRUTABVAR (
    GRU_COD  INTEGER NOT NULL,
    GRU_NOM  VARCHAR(100),
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    USE_CAD  INTEGER,
    USE_ATU  INTEGER,
    ATIVO    VARCHAR(1)
);

CREATE TABLE CDGRUTABVARUSER (
    USE_GRU  INTEGER,
    USE_USE  INTEGER
);

CREATE TABLE CDHIS (
    HIS_COD  INTEGER,
    HIS_NOM  VARCHAR(60) NOT NULL,
    HIS_PLA  VARCHAR(40),
    HIS_SIG  VARCHAR(5),
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1),
    HIS_CUS  VARCHAR(40)
);

CREATE TABLE CDHORA (
    HORA_COD  INTEGER,
    HORA_NOM  VARCHAR(30),
    HORA      DOUBLE PRECISION,
    DAT_CAD   TIMESTAMP,
    DAT_ATU   TIMESTAMP,
    ATIVO     VARCHAR(1)
);

CREATE TABLE CDIMPRESO (
    CODIGO            INTEGER,
    NOME              VARCHAR(30),
    TIPOFORM          VARCHAR(15),
    CAMPO_INT         VARCHAR(40),
    CAMPO_USER        VARCHAR(40),
    IMP_CAMPO_USER    VARCHAR(1),
    LINHA             INTEGER,
    COLUNA            INTEGER,
    COMPRIMENTO       INTEGER,
    REPETIR           INTEGER,
    OUTROS            VARCHAR(255),
    NORMAL            VARCHAR(1),
    NEGRITO           VARCHAR(1),
    COMPRIMIDO        VARCHAR(1),
    EXPANDIDO         VARCHAR(1),
    ENFATIZADO        VARCHAR(1),
    NLQ               VARCHAR(1),
    ESPLINHA          VARCHAR(1),
    DAT_CAD           TIMESTAMP,
    DAT_ATU           TIMESTAMP,
    ATIVO             VARCHAR(1),
    LINHASENTRENOTAS  INTEGER,
    ORDEM             INTEGER
);

CREATE TABLE CDIMPRESO2 (
    CODIGO        INTEGER NOT NULL,
    IMPRESO_NOME  VARCHAR(30),
    CABECALHO     BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    RODAPE        BLOB SUB_TYPE 1 SEGMENT SIZE 80
);

CREATE TABLE CDIMPSIMP (
    IMP_COD  INTEGER NOT NULL,
    IMP_TAB  VARCHAR(50),
    IMP_MOD  VARCHAR(50),
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    USE_CAD  INTEGER,
    USE_ATU  INTEGER,
    ATIVO    VARCHAR(1),
    IMP_NOM  VARCHAR(50)
);

CREATE TABLE CDIMPSIMP2 (
    IMP2_COD  INTEGER NOT NULL,
    IMP2_IMP  INTEGER NOT NULL,
    IMP2_CMP  VARCHAR(30),
    IMP2_TIP  VARCHAR(20),
    IMP2_INI  INTEGER,
    IMP2_TAM  INTEGER
);

CREATE TABLE CDINDICE (
    IND_COD   INTEGER NOT NULL,
    IND_ANO   INTEGER,
    IND_MES   INTEGER,
    IND_MOE   INTEGER,
    IND_TX01  DOUBLE PRECISION,
    IND_TX02  DOUBLE PRECISION,
    IND_TX03  DOUBLE PRECISION,
    IND_TX04  DOUBLE PRECISION,
    IND_TX05  DOUBLE PRECISION,
    IND_TX06  DOUBLE PRECISION,
    IND_TX07  DOUBLE PRECISION,
    IND_TX08  DOUBLE PRECISION,
    IND_TX09  DOUBLE PRECISION,
    IND_TX10  DOUBLE PRECISION,
    IND_TX11  DOUBLE PRECISION,
    IND_TX12  DOUBLE PRECISION,
    IND_TX13  DOUBLE PRECISION,
    IND_TX14  DOUBLE PRECISION,
    IND_TX15  DOUBLE PRECISION,
    IND_TX16  DOUBLE PRECISION,
    IND_TX17  DOUBLE PRECISION,
    IND_TX18  DOUBLE PRECISION,
    IND_TX19  DOUBLE PRECISION,
    IND_TX20  DOUBLE PRECISION,
    IND_TX21  DOUBLE PRECISION,
    IND_TX22  DOUBLE PRECISION,
    IND_TX23  DOUBLE PRECISION,
    IND_TX24  DOUBLE PRECISION,
    IND_TX25  DOUBLE PRECISION,
    IND_TX26  DOUBLE PRECISION,
    IND_TX27  DOUBLE PRECISION,
    IND_TX28  DOUBLE PRECISION,
    IND_TX29  DOUBLE PRECISION,
    IND_TX30  DOUBLE PRECISION,
    IND_TX31  DOUBLE PRECISION,
    IND_TXM   COMPUTED BY ((COALESCE(ind_tx01, 0) + COALESCE(ind_tx02, 0) + COALESCE(ind_tx03, 0) + COALESCE(ind_tx04, 0) + COALESCE(ind_tx05, 0) + COALESCE(ind_tx06, 0) + COALESCE(ind_tx07, 0) + COALESCE(ind_tx08, 0) + COALESCE(ind_tx09, 0) + COALESCE(ind_tx10, 0) + COALESCE(ind_tx11, 0) + COALESCE(ind_tx12, 0) + COALESCE(ind_tx13, 0) + COALESCE(ind_tx14, 0) + COALESCE(ind_tx15, 0) + COALESCE(ind_tx16, 0) + COALESCE(ind_tx17, 0) + COALESCE(ind_tx18, 0) + COALESCE(ind_tx19, 0) + COALESCE(ind_tx20, 0) + COALESCE(ind_tx21, 0) + COALESCE(ind_tx22, 0) + COALESCE(ind_tx23, 0) + COALESCE(ind_tx24, 0) + COALESCE(ind_tx25, 0) + COALESCE(ind_tx26, 0) + COALESCE(ind_tx27, 0) + COALESCE(ind_tx28, 0) + COALESCE(ind_tx29, 0) + COALESCE(ind_tx30, 0) + COALESCE(ind_tx31, 0)) / (NUllIF(( COALESCE(ind_tx01 / (NULLIF(ind_tx01,0)), 0) + COALESCE(ind_tx02 / (NULLIF(ind_tx02,0)), 0) + COALESCE(ind_tx03 / (NULLIF(ind_tx03,0)), 0) + COALESCE(ind_tx04 / (NULLIF(ind_tx04,0)), 0) + COALESCE(ind_tx05 / (NULLIF(ind_tx05,0)), 0) + COALESCE(ind_tx06 / (NULLIF(ind_tx06,0)), 0) + COALESCE(ind_tx07 / (NULLIF(ind_tx07,0)), 0) + COALESCE(ind_tx08 / (NULLIF(ind_tx08,0)), 0) + COALESCE(ind_tx09 / (NULLIF(ind_tx09,0)), 0) + COALESCE(ind_tx10 / (NULLIF(ind_tx10,0)), 0) + COALESCE(ind_tx11 / (NULLIF(ind_tx11,0)), 0) + COALESCE(ind_tx12 / (NULLIF(ind_tx12,0)), 0) + COALESCE(ind_tx13 / (NULLIF(ind_tx13,0)), 0) + COALESCE(ind_tx14 / (NULLIF(ind_tx14,0)), 0) + COALESCE(ind_tx15 / (NULLIF(ind_tx15,0)), 0) + COALESCE(ind_tx16 / (NULLIF(ind_tx16,0)), 0) + COALESCE(ind_tx17 / (NULLIF(ind_tx17,0)), 0) + COALESCE(ind_tx18 / (NULLIF(ind_tx18,0)), 0) + COALESCE(ind_tx19 / (NULLIF(ind_tx19,0)), 0) + COALESCE(ind_tx20 / (NULLIF(ind_tx20,0)), 0) + COALESCE(ind_tx21 / (NULLIF(ind_tx21,0)), 0) + COALESCE(ind_tx22 / (NULLIF(ind_tx22,0)), 0) + COALESCE(ind_tx23 / (NULLIF(ind_tx23,0)), 0) + COALESCE(ind_tx24 / (NULLIF(ind_tx24,0)), 0) + COALESCE(ind_tx25 / (NULLIF(ind_tx25,0)), 0) + COALESCE(ind_tx26 / (NULLIF(ind_tx26,0)), 0) + COALESCE(ind_tx27 / (NULLIF(ind_tx27,0)), 0) + COALESCE(ind_tx28 / (NULLIF(ind_tx28,0)), 0) + COALESCE(ind_tx29 / (NULLIF(ind_tx29,0)), 0) + COALESCE(ind_tx30 / (NULLIF(ind_tx30,0)), 0) + COALESCE(ind_tx31 / (NULLIF(ind_tx31,0)), 0)),0))),
    IND_TXC   COMPUTED BY (((COALESCE(ind_tx31, ind_tx30, ind_tx29, ind_tx28, ind_tx27, ind_tx26, ind_tx25, ind_tx24, ind_tx23, ind_tx22, ind_tx21, ind_tx20, ind_tx19, ind_tx18, ind_tx17, ind_tx16, ind_tx15, ind_tx14, ind_tx13, ind_tx12, ind_tx11, ind_tx10, ind_tx09, ind_tx08, ind_tx07, ind_tx06, ind_tx05, ind_tx04, ind_tx03, ind_tx02, ind_tx01) - COALESCE(ind_tx01, ind_tx02, ind_tx03, ind_tx04, ind_tx05, ind_tx06, ind_tx07, ind_tx08, ind_tx09, ind_tx10, ind_tx11, ind_tx12, ind_tx13, ind_tx14, ind_tx15, ind_tx16, ind_tx17, ind_tx18, ind_tx19, ind_tx20, ind_tx21, ind_tx22, ind_tx23, ind_tx24, ind_tx25, ind_tx26, ind_tx27, ind_tx28, ind_tx29, ind_tx30, ind_tx31)) / COALESCE(ind_tx01, ind_tx02, ind_tx03, ind_tx04, ind_tx05, ind_tx06, ind_tx07, ind_tx08, ind_tx09, ind_tx10, ind_tx11, ind_tx12, ind_tx13, ind_tx14, ind_tx15, ind_tx16, ind_tx17, ind_tx18, ind_tx19, ind_tx20, ind_tx21, ind_tx22, ind_tx23, ind_tx24, ind_tx25, ind_tx26, ind_tx27, ind_tx28, ind_tx29, ind_tx30, ind_tx31))),
    DAT_ATU   TIMESTAMP,
    DAT_CAD   TIMESTAMP,
    USE_CAD   INTEGER,
    USE_ATU   INTEGER,
    ATIVO     VARCHAR(1)
);

CREATE TABLE CDLOC (
    LOC_COD  INTEGER,
    LOC_NOM  VARCHAR(30),
    LOC_OBS  BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    LOC_SIG  VARCHAR(5),
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1)
);

CREATE TABLE CDLOGIS_CATEGORIA (
    CATEGORIA_CODIGO  INTEGER NOT NULL,
    CATEGORIA_NOME    VARCHAR(50) NOT NULL,
    CATEGORIA_ORDEM   INTEGER,
    DAT_CAD           TIMESTAMP,
    DAT_ATU           TIMESTAMP,
    USE_CAD           INTEGER,
    USE_ATU           INTEGER,
    ATIVO             VARCHAR(1)
);

CREATE TABLE CDLOGIS_COLETA (
    COLETA_CODIGO             INTEGER NOT NULL,
    COLETA_NUMERO             INTEGER NOT NULL,
    COLETA_REMETENTE          INTEGER,
    COLETA_DESTINATARIO       INTEGER,
    COLETA_REMET_CONTATO      VARCHAR(100),
    VEICULO_CODIGO            INTEGER,
    CONDUTOR_CODIGO           INTEGER,
    CATEGORIA_CODIGO          INTEGER,
    SITUACAO_CODIGO           INTEGER,
    DAT_CAD                   TIMESTAMP,
    DAT_ATU                   TIMESTAMP,
    USE_CAD                   INTEGER,
    USE_ATU                   INTEGER,
    ATIVO                     VARCHAR(1),
    COLETA_DEST_CONTATO       VARCHAR(100),
    COLETA_REMET_TELEFONE     VARCHAR(20),
    COLETA_REMET_CEP          VARCHAR(10),
    COLETA_REMET_LOG          VARCHAR(10),
    COLETA_REMET_ENDERECO     VARCHAR(100),
    COLETA_REMET_NUMERO       VARCHAR(20),
    COLETA_REMET_COMPLEMENTO  VARCHAR(100),
    COLETA_REMET_BAIRRO       VARCHAR(100),
    COLETA_REMET_CIDADE       VARCHAR(50),
    COLETA_REMET_ESTADO       VARCHAR(2),
    COLETA_DEST_TELEFONE      VARCHAR(20),
    COLETA_DEST_CEP           VARCHAR(10),
    COLETA_DEST_LOG           VARCHAR(10),
    COLETA_DEST_ENDERECO      VARCHAR(100),
    COLETA_DEST_NUMERO        VARCHAR(20),
    COLETA_DEST_COMPLEMENTO   VARCHAR(100),
    COLETA_DEST_BAIRRO        VARCHAR(100),
    COLETA_DEST_CIDADE        VARCHAR(50),
    COLETA_DEST_ESTADO        VARCHAR(2),
    COLETA_STATUS             VARCHAR(3),
    COLETA_STATUS_DESCRICAO   COMPUTED BY (CASE
 WHEN COLETA_STATUS = 'CAN' THEN 'CANCELADO'
 WHEN COLETA_STATUS = 'PEN' THEN 'PENDENTE'
 WHEN COLETA_STATUS = 'FIN' THEN 'FINALIZADO'
 ELSE 'ERRO'
 END),
    COLETA_OBSERVACAO         BLOB SUB_TYPE 1 SEGMENT SIZE 1024
);

CREATE TABLE CDLOGIS_COLETA_EVENTO (
    EVENTO_CODIGO     INTEGER NOT NULL,
    COLETA_CODIGO     INTEGER,
    EVENTO_TIPO       VARCHAR(10),
    EVENTO_DESCRICAO  BLOB SUB_TYPE 1 SEGMENT SIZE 1024,
    SITUACAO_CODIGO   INTEGER,
    DAT_CAD           TIMESTAMP,
    DAT_ATU           TIMESTAMP,
    USE_CAD           INTEGER,
    USE_ATU           INTEGER,
    EVENTO_ODOMETRO   INTEGER,
    EVENTO_CONTATO    VARCHAR(50),
    EVENTO_DATA       TIMESTAMP,
    ATIVO             VARCHAR(1)
);

CREATE TABLE CDLOGIS_COLETA_NF (
    NF_CODIGO           INTEGER NOT NULL,
    NF_NUMERO           VARCHAR(30),
    NF_DATA             TIMESTAMP,
    NF_VALOR_LIQUIDO    DOUBLE PRECISION,
    NF_VALOR_SEGURO     DOUBLE PRECISION,
    NF_VALOR_PEDAGIO    DOUBLE PRECISION,
    NF_VALOR_FRETE      DOUBLE PRECISION,
    NF_VALOR_OUTROS     DOUBLE PRECISION,
    DAT_CAD             TIMESTAMP,
    DAT_ATU             TIMESTAMP,
    USE_CAD             INTEGER,
    USE_ATU             INTEGER,
    ATIVO               VARCHAR(1),
    NF_NRO_VOLUMES      DOUBLE PRECISION,
    NF_TIPO_VOLUMES     VARCHAR(50),
    NF_PESO             DOUBLE PRECISION,
    NF_CUBAGEM          DOUBLE PRECISION,
    NF_ROTAS            VARCHAR(100),
    NF_TIPO_PRODUTOS    VARCHAR(100),
    NF_PRODUTO_QUIMICO  VARCHAR(100),
    NF_NRO_ONU          VARCHAR(20),
    COLETA_CODIGO       INTEGER
);

CREATE TABLE CDLOGIS_COLETA_OCORRENCIA (
    OCORRENCIA_CODIGO  INTEGER NOT NULL,
    COLETA_CODIGO      INTEGER,
    OCORRENCIA_DATA    TIMESTAMP,
    OCORRENCIA_TEXTO   BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    DAT_CAD            TIMESTAMP,
    DAT_ATU            TIMESTAMP,
    USE_CAD            INTEGER,
    USE_ATU            INTEGER,
    ATIVO              VARCHAR(1)
);

CREATE TABLE CDLOGIS_CONDUTOR (
    CONDUTOR_CODIGO  INTEGER NOT NULL,
    CONDUTOR_NOME    VARCHAR(50) NOT NULL,
    CONDUTOR_CNH     VARCHAR(20) NOT NULL,
    DAT_CAD          TIMESTAMP,
    DAT_ATU          TIMESTAMP,
    USE_CAD          INTEGER,
    USE_ATU          INTEGER,
    ATIVO            VARCHAR(1)
);

CREATE TABLE CDLOGIS_SITUACAO (
    SITUACAO_CODIGO  INTEGER NOT NULL,
    SITUACAO_NOME    VARCHAR(50) NOT NULL,
    SITUACAO_ORDEM   INTEGER,
    DAT_CAD          TIMESTAMP,
    DAT_ATU          TIMESTAMP,
    USE_CAD          INTEGER,
    USE_ATU          INTEGER,
    ATIVO            VARCHAR(1)
);

CREATE TABLE CDLOGIS_VEICULO (
    VEICULO_CODIGO     INTEGER NOT NULL,
    VEICULO_DESCRICAO  VARCHAR(100) NOT NULL,
    VEICULO_PLACA      VARCHAR(15),
    VEICULO_MODELO     VARCHAR(50),
    VEICULO_MARCA      VARCHAR(50),
    VEICULO_ANO        INTEGER,
    DAT_CAD            TIMESTAMP,
    DAT_ATU            TIMESTAMP,
    USE_CAD            INTEGER,
    USE_ATU            INTEGER,
    ATIVO              VARCHAR(1)
);

CREATE TABLE CDLSTGRTRA (
    LST_COD  INTEGER,
    LST_GRT  INTEGER,
    LST_NOM  VARCHAR(100),
    LST_SQL  BLOB SUB_TYPE 1 SEGMENT SIZE 80
);

CREATE TABLE CDMAR (
    MAR_COD   INTEGER,
    MAR_NOM   VARCHAR(30),
    MAR_SIG   VARCHAR(5),
    MAR_FOTO  VARCHAR(30),
    DAT_CAD   TIMESTAMP,
    DAT_ATU   TIMESTAMP,
    ATIVO     VARCHAR(1),
    MAR_ORD   VARCHAR(40),
    MAR_TAB   INTEGER,
    USE_CAD   INTEGER,
    USE_ATU   INTEGER
);

CREATE TABLE CDMED (
    MED_COD    VARCHAR(3),
    MED_NOM    VARCHAR(30),
    MED_SIG    VARCHAR(5),
    MED_ORDEM  VARCHAR(10),
    DAT_CAD    TIMESTAMP,
    DAT_ATU    TIMESTAMP,
    ATIVO      VARCHAR(1)
);

CREATE TABLE CDMOBILE (
    MOB_TEXTO   BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    MOB_IMAGEM  VARCHAR(100),
    DAT_CAD     TIMESTAMP,
    DAT_ATU     TIMESTAMP,
    ATIVO       VARCHAR(1)
);

CREATE TABLE CDMOBILE_MENSAGENS (
    MEN_COD     INTEGER NOT NULL,
    MEN_TEXTO   BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    MEN_IMAGEM  VARCHAR(100),
    DAT_CAD     TIMESTAMP,
    DAT_ATU     TIMESTAMP,
    ATIVO       VARCHAR(1),
    MEN_TITULO  VARCHAR(100)
);

CREATE TABLE CDMODELO (
    MOD_COD  INTEGER,
    MOD_NOM  VARCHAR(50),
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1)
);

CREATE TABLE CDMOE (
    MOE_COD   INTEGER NOT NULL,
    MOE_NOM   VARCHAR(30),
    MOE_NAC   VARCHAR(1),
    MOE_SIM   VARCHAR(2),
    DAT_CAD   TIMESTAMP,
    DAT_ATU   TIMESTAMP,
    ATIVO     VARCHAR(1),
    MOE_FLAG  VARCHAR(1),
    USE_CAD   INTEGER,
    USE_ATU   INTEGER,
    MOE_REG   VARCHAR(1)
);

CREATE TABLE CDMOTIVO (
    MOT_COD  INTEGER NOT NULL,
    MOT_TIP  VARCHAR(2),
    MOT_NOM  VARCHAR(60),
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1),
    USE_CAD  INTEGER,
    USE_ATU  INTEGER
);

CREATE TABLE CDNOVIDADES (
    NOV_COD  INTEGER NOT NULL,
    NOV_TIT  VARCHAR(100),
    NOV_MSG  BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    NOV_FRM  VARCHAR(100),
    NOV_DAT  TIMESTAMP
);

CREATE TABLE CDNOVIDADES2 (
    NOV2_NOV  INTEGER NOT NULL,
    NOV2_USE  INTEGER NOT NULL
);

CREATE TABLE CDOPCOES (
    ID           BIGINT NOT NULL,
    TIPO         VARCHAR(1),
    ATIVO        BIGINT,
    NOME         VARCHAR(20),
    ULTIMOPRECO  FLOAT,
    STRIKE       FLOAT,
    ASK          FLOAT,
    BID          FLOAT,
    VENCIMENTO   DATE,
    DAT_CAD      DATE,
    DAT_ATU      DATE,
    STATUS       VARCHAR(1),
    HORA         TIMESTAMP,
    VARIACAO     FLOAT
);

CREATE TABLE CDOPCOT (
    ID           BIGINT NOT NULL,
    IDOP         BIGINT,
    ULTIMOPRECO  FLOAT,
    DAT_CAD      TIMESTAMP,
    DAT_ATU      TIMESTAMP,
    STATUS       VARCHAR(1),
    VARIACAO     FLOAT
);

CREATE TABLE CDOS (
    COD_OS    INTEGER NOT NULL,
    NUM_OS    VARCHAR(5) NOT NULL,
    DATA_OS   TIMESTAMP NOT NULL,
    TOTAL_OS  INTEGER
);

CREATE TABLE CDOSFASE (
    ID          INTEGER NOT NULL,
    OSPRO_COD   INTEGER NOT NULL,
    ENG_COD     INTEGER NOT NULL,
    USE_COD     INTEGER,
    DAT_CAD     TIMESTAMP,
    FINALIZADO  CHAR(1)
);

CREATE TABLE CDOSPRO (
    ID          INTEGER NOT NULL,
    COD_OS      INTEGER,
    QTDE_OS     DOUBLE PRECISION,
    COD_PRO     INTEGER,
    STATUS_COD  VARCHAR(2),
    USE_COD     INTEGER,
    DAT_CAD     TIMESTAMP,
    STATUS_NOM  COMPUTED BY (CASE STATUS_COD
 WHEN 'P' THEN 'EM PRODUÇÃO'
 WHEN 'F' THEN 'FINALIZADA'
 ELSE 'NÃO INICIADA'
 END)
);

CREATE TABLE CDPDACFG (
    PDA_TRA  INTEGER,
    PDA_PGT  INTEGER,
    PDA_CLI  INTEGER,
    PDA_FOR  INTEGER
);

CREATE TABLE CDPGT (
    PGT_COD            INTEGER,
    PGT_NOM            VARCHAR(100),
    PGT_CHE            VARCHAR(1),
    PGT_PA1            INTEGER,
    PGT_PO1            DOUBLE PRECISION,
    PGT_PA2            INTEGER,
    PGT_PO2            DOUBLE PRECISION,
    PGT_PA3            INTEGER,
    PGT_PO3            DOUBLE PRECISION,
    PGT_PA4            INTEGER,
    PGT_PO4            DOUBLE PRECISION,
    PGT_PA5            INTEGER,
    PGT_PO5            DOUBLE PRECISION,
    PGT_PA6            INTEGER,
    PGT_PO6            DOUBLE PRECISION,
    PGT_PA7            INTEGER,
    PGT_PO7            DOUBLE PRECISION,
    PGT_PA8            INTEGER,
    PGT_PO8            DOUBLE PRECISION,
    PGT_SOM            VARCHAR(1),
    PGT_MIN            DOUBLE PRECISION,
    PGT_ADE            DOUBLE PRECISION,
    PGT_TAX            DOUBLE PRECISION,
    PGT_JUR            INTEGER,
    PGT_BAS            INTEGER,
    PGT_PARC           INTEGER,
    PGT_PRA            INTEGER,
    PGT_SIG            VARCHAR(5),
    PGT_PARCELAS       VARCHAR(1),
    DAT_CAD            TIMESTAMP,
    DAT_ATU            TIMESTAMP,
    ATIVO              VARCHAR(1),
    PGT_DES            DOUBLE PRECISION,
    PGT_ARRED          INTEGER,
    PGT_TIP_DOC_TODOS  VARCHAR(1),
    PGT_PO9            DOUBLE PRECISION,
    PGT_PA9            INTEGER,
    PGT_PO10           DOUBLE PRECISION,
    PGT_PA10           INTEGER,
    PGT_PO11           DOUBLE PRECISION,
    PGT_PA11           INTEGER,
    PGT_PO12           DOUBLE PRECISION,
    PGT_PA12           INTEGER,
    PGT_PO13           DOUBLE PRECISION,
    PGT_PA13           INTEGER,
    PGT_PO14           DOUBLE PRECISION,
    PGT_PA14           INTEGER,
    PGT_PO15           DOUBLE PRECISION,
    PGT_PA15           INTEGER,
    PGT_PO16           DOUBLE PRECISION,
    PGT_PA16           INTEGER,
    PGT_PO17           DOUBLE PRECISION,
    PGT_PA17           INTEGER,
    PGT_PO18           DOUBLE PRECISION,
    PGT_PA18           INTEGER,
    PGT_PO19           DOUBLE PRECISION,
    PGT_PA19           INTEGER,
    PGT_PO20           DOUBLE PRECISION,
    PGT_PA20           INTEGER,
    PGT_PO21           DOUBLE PRECISION,
    PGT_PA21           INTEGER,
    PGT_PO22           DOUBLE PRECISION,
    PGT_PA22           INTEGER,
    PGT_PO23           DOUBLE PRECISION,
    PGT_PA23           INTEGER,
    PGT_PO24           DOUBLE PRECISION,
    PGT_PA24           INTEGER,
    PGT_PO25           DOUBLE PRECISION,
    PGT_PA25           INTEGER,
    PGT_PO26           DOUBLE PRECISION,
    PGT_PA26           INTEGER,
    PGT_PO27           DOUBLE PRECISION,
    PGT_PA27           INTEGER,
    PGT_PO28           DOUBLE PRECISION,
    PGT_PA28           INTEGER,
    PGT_PO29           DOUBLE PRECISION,
    PGT_PA29           INTEGER,
    PGT_PO30           DOUBLE PRECISION,
    PGT_PA30           INTEGER,
    PGT_PO31           DOUBLE PRECISION,
    PGT_PA31           INTEGER,
    PGT_PO32           DOUBLE PRECISION,
    PGT_PA32           INTEGER,
    PGT_PO33           DOUBLE PRECISION,
    PGT_PA33           INTEGER,
    PGT_PO34           DOUBLE PRECISION,
    PGT_PA34           INTEGER,
    PGT_PO35           DOUBLE PRECISION,
    PGT_PA35           INTEGER,
    PGT_PO36           DOUBLE PRECISION,
    PGT_PA36           INTEGER,
    PGT_DIA_FATUR      INTEGER,
    PGT_DIA_ANTEC      INTEGER,
    PGT_DIA_UTIL       VARCHAR(1),
    PGT_MOBILE         VARCHAR(1)
);

CREATE TABLE CDPGT2 (
    PGT_PGT      INTEGER,
    PGT_TIP_DOC  INTEGER,
    DAT_CAD      TIMESTAMP,
    DAT_ATU      TIMESTAMP,
    USER_CAD     INTEGER,
    USER_ATU     INTEGER,
    ATIVO        VARCHAR(1)
);

CREATE TABLE CDPLA (
    PLA_COD  VARCHAR(40),
    PLA_NOM  VARCHAR(30),
    PLA_CRE  VARCHAR(1),
    PLA_TIP  VARCHAR(1),
    PLA_AUX  VARCHAR(60),
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1),
    PLA_ORD  VARCHAR(40),
    USE_CAD  INTEGER,
    USE_ATU  INTEGER
);

CREATE TABLE CDPLA_DEMO_RESUL (
    PLA_COD  INTEGER NOT NULL,
    PLA_NOM  VARCHAR(30),
    PLA_ORD  VARCHAR(40),
    PLA_CRE  VARCHAR(1),
    PLA_TIP  VARCHAR(1),
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    USE_CAD  INTEGER,
    USE_ATU  INTEGER,
    ATIVO    VARCHAR(1)
);

CREATE TABLE CDPLAAUX (
    PLA_COD   INTEGER,
    PLA_ORD   VARCHAR(40),
    PLA_NOM   VARCHAR(30),
    PLA_CRE   VARCHAR(1),
    PLA_TIP   VARCHAR(1),
    PLA_FLAG  VARCHAR(1),
    DAT_CAD   TIMESTAMP,
    DAT_ATU   TIMESTAMP,
    ATIVO     VARCHAR(1),
    USE_CAD   INTEGER,
    USE_ATU   INTEGER
);

CREATE TABLE CDPREPAG (
    PRE_COD      INTEGER,
    PRE_EMP      INTEGER,
    PRE_FOR      INTEGER,
    PRE_FRE      VARCHAR(3),
    PRE_TIP      INTEGER,
    PRE_PAR      INTEGER,
    PRE_VAL      DOUBLE PRECISION,
    PRE_CON      INTEGER,
    PRE_DAT      TIMESTAMP,
    PRE_PLA      VARCHAR(40),
    PRE_ATU      TIMESTAMP,
    PRE_ANT      INTEGER,
    PRE_PARTOT   INTEGER,
    PRE_CCUSTO   VARCHAR(40),
    PRE_EMI      TIMESTAMP,
    DAT_CAD      TIMESTAMP,
    DAT_ATU      TIMESTAMP,
    ATIVO        VARCHAR(1),
    PRE_HIS      VARCHAR(60),
    PRE_DIA      VARCHAR(2),
    PRE_CCUSTO2  INTEGER,
    PRE_PLA2     INTEGER
);

CREATE TABLE CDPREREC (
    PRE_COD      INTEGER,
    PRE_EMP      INTEGER,
    PRE_CLI      INTEGER,
    PRE_FRE      VARCHAR(3),
    PRE_TIP      INTEGER,
    PRE_PAR      INTEGER,
    PRE_VAL      DOUBLE PRECISION,
    PRE_CON      INTEGER,
    PRE_DAT      TIMESTAMP,
    PRE_PLA      VARCHAR(40),
    PRE_ATU      TIMESTAMP,
    PRE_ANT      INTEGER,
    CLI_FIL      INTEGER,
    PRE_PARTOT   INTEGER,
    PRE_CCUSTO   VARCHAR(40),
    PRE_EMI      TIMESTAMP,
    PRE_CAR      INTEGER,
    DAT_CAD      TIMESTAMP,
    DAT_ATU      TIMESTAMP,
    ATIVO        VARCHAR(1),
    PRE_HIS      VARCHAR(60),
    PRE_DIA      VARCHAR(2),
    PRE_CCUSTO2  VARCHAR(40),
    PRE_PLA2     VARCHAR(40)
);

CREATE TABLE CDPRESTSER (
    PRE_COD                 INTEGER,
    PRE_NOM                 VARCHAR(50),
    DAT_CAD                 TIMESTAMP,
    DAT_ATU                 TIMESTAMP,
    ATIVO                   VARCHAR(1),
    USE_CAD                 INTEGER,
    USE_ATU                 INTEGER,
    PRE_COD_ISS             VARCHAR(5),
    PRE_ISS                 DOUBLE PRECISION,
    PRE_PORC_IMPOSTO_TOTAL  DOUBLE PRECISION,
    PRE_FONTE               VARCHAR(100),
    CODIGOTRIBUTACAO        VARCHAR(30)
);

CREATE TABLE CDPRO (
    PRO_COD              INTEGER NOT NULL,
    PRO_NOM              VARCHAR(100),
    PRO_MAR              INTEGER,
    PRO_TIP              INTEGER,
    PRO_GRU              INTEGER,
    PRO_SIT              INTEGER,
    PRO_IPI              DOUBLE PRECISION,
    PRO_ICM              DOUBLE PRECISION,
    PRO_PES              DOUBLE PRECISION,
    PRO_UNC              DOUBLE PRECISION,
    PRO_CFO              VARCHAR(1),
    PRO_UNI              INTEGER,
    PRO_LOC              VARCHAR(20),
    PRO_CLA              INTEGER,
    PRO_VAL              INTEGER,
    PRO_OBS              BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    PRO_INT              VARCHAR(15),
    PRO_BAR              VARCHAR(15),
    PRO_FOT              BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    PRO_COMP             VARCHAR(1),
    PRO_FAB              VARCHAR(1),
    PRO_UNM              INTEGER,
    PRO_UNI_PESO         INTEGER,
    PRO_TRI              VARCHAR(2),
    PRO_ESTOQMIN         DOUBLE PRECISION,
    PRO_ESTOQMAX         DOUBLE PRECISION,
    PRO_MARGEM_MARKUP    DOUBLE PRECISION,
    PRO_REDICM           DOUBLE PRECISION,
    PRO_CAT              INTEGER,
    DAT_CAD              TIMESTAMP,
    DAT_ATU              TIMESTAMP,
    ATIVO                VARCHAR(1),
    PRO_CODAUX1          VARCHAR(20),
    PRO_CODAUX2          VARCHAR(20),
    PRO_ALT              DOUBLE PRECISION,
    PRO_CMP              DOUBLE PRECISION,
    PRO_LRG              DOUBLE PRECISION,
    PRO_FOTONOM          VARCHAR(50),
    USE_CAD              INTEGER,
    USE_ATU              INTEGER,
    PRO_SUBGRU           INTEGER,
    PRO_NOM2             VARCHAR(100),
    PRO_UNI_USO          INTEGER,
    PRO_UNI_CMP          INTEGER,
    PRO_UNI_FORN         INTEGER,
    PRO_FAT_VND          DOUBLE PRECISION,
    PRO_FAT_USO          DOUBLE PRECISION,
    PRO_FAT_CMP          DOUBLE PRECISION,
    PRO_FAT_FORN         DOUBLE PRECISION,
    PRO_INCENT_FISC      VARCHAR(2),
    PRO_PBT              DOUBLE PRECISION,
    PRO_ALTERA_DIMENSAO  VARCHAR(1),
    PRO_CLA_CMP          INTEGER,
    PRO_IPI_CMP          DOUBLE PRECISION,
    PRO_PRODFINAL        VARCHAR(1),
    PRO_USOINTERNO       CHAR(1),
    PRO_USACOMPPRODFIN   VARCHAR(1),
    PRO_USADIMPROFIN     VARCHAR(1),
    PRO_SUBTRIBUTA       DOUBLE PRECISION,
    PRO_SEM_ESTOQUE      VARCHAR(1),
    PRO_CST_IPI          INTEGER,
    PRO_CST_PIS          INTEGER,
    PRO_CST_COFINS       INTEGER,
    PRO_CSOSN            INTEGER,
    PRO_DTC              VARCHAR(20),
    PRO_GARANTIA         VARCHAR(50),
    PRO_EMPMAX           VARCHAR(50),
    DAT_HOR_ATU          TIMESTAMP,
    PRO_FOTO_ATU         TIMESTAMP,
    PRO_DIAS_ENTREGA     INTEGER,
    PRO_ALIQ_IMPOSTOS    DOUBLE PRECISION
);

CREATE TABLE CDPROAPLI (
    PRO_COD    INTEGER,
    VEI_COD    INTEGER,
    MOD_COD    INTEGER,
    DESCRICAO  VARCHAR(60),
    ANODE      VARCHAR(4),
    ANOATE     VARCHAR(4)
);

CREATE TABLE CDPROCLI (
    PRO_PRO        INTEGER,
    PRO_CLI        INTEGER,
    PRO_ULTV       DOUBLE PRECISION,
    PRO_VENM       DOUBLE PRECISION,
    PRO_ULTV_DATA  TIMESTAMP,
    PRO_PRE        DOUBLE PRECISION,
    CLI_FIL        INTEGER,
    DAT_CAD        TIMESTAMP,
    DAT_ATU        TIMESTAMP,
    ATIVO          VARCHAR(1)
);

CREATE TABLE CDPROCM (
    PRO_PRO  INTEGER,
    PRO_COR  VARCHAR(3),
    PRO_MED  VARCHAR(3),
    PRO_COD  VARCHAR(21),
    ATIVO    VARCHAR(1),
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP
);

CREATE TABLE CDPROCSOSN (
    CSO_PRO  INTEGER NOT NULL,
    CSO_ALM  INTEGER NOT NULL,
    CSO_CSO  INTEGER NOT NULL,
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1),
    USE_CAD  INTEGER,
    USE_ATU  INTEGER
);

CREATE TABLE CDPROCUSTO (
    PRO_PRO   INTEGER,
    PRO_CUS   INTEGER,
    PRO_QTD   DOUBLE PRECISION,
    PRO_VLR   DOUBLE PRECISION,
    PRO_SEQ   INTEGER,
    DAT_CAD   TIMESTAMP,
    DAT_ATU   TIMESTAMP,
    ATIVO     VARCHAR(1),
    PRO_FASE  INTEGER
);

CREATE TABLE CDPROENG (
    PRO_COD            INTEGER,
    PRO_PRO            INTEGER,
    PRO_FASES          INTEGER,
    PRO_ORDEM          INTEGER,
    PRO_OBS            VARCHAR(100),
    PRO_FOR            INTEGER,
    PRO_QTD            INTEGER,
    PRO_FASE_PRODUCAO  VARCHAR(1),
    DAT_CAD            TIMESTAMP,
    DAT_ATU            TIMESTAMP,
    ATIVO              VARCHAR(1)
);

CREATE TABLE CDPROESTLO (
    PRO_ALM   INTEGER,
    PRO_PRO   INTEGER,
    PRO_COR   VARCHAR(3),
    PRO_MED   VARCHAR(3),
    PRO_LOC1  VARCHAR(30),
    PRO_LOC2  VARCHAR(30),
    PRO_LOC3  VARCHAR(30),
    PRO_LOC4  VARCHAR(30),
    DAT_CAD   TIMESTAMP,
    DAT_ATU   TIMESTAMP,
    ATIVO     VARCHAR(1)
);

CREATE TABLE CDPROFIC (
    FIC_COD      INTEGER,
    FIC_PRO      INTEGER,
    FIC_CAMPO1   INTEGER,
    FIC_CAMPO2   INTEGER,
    FIC_CAMPO3   INTEGER,
    FIC_CAMPO4   VARCHAR(30),
    FIC_CAMPO5   VARCHAR(30),
    FIC_CAMPO6   VARCHAR(30),
    FIC_CAMPO7   VARCHAR(30),
    FIC_CAMPO8   VARCHAR(30),
    FIC_CAMPO9   VARCHAR(30),
    FIC_CAMPO10  VARCHAR(15),
    FIC_CAMPO11  VARCHAR(15),
    FIC_CAMPO12  VARCHAR(15),
    FIC_CAMPO13  VARCHAR(15),
    FIC_CAMPO14  VARCHAR(15),
    FIC_CAMPO15  VARCHAR(15),
    FIC_CAMPO16  BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    DAT_CAD      TIMESTAMP,
    DAT_ATU      TIMESTAMP,
    ATIVO        VARCHAR(1)
);

CREATE TABLE CDPROFIC2 (
    FIC2_COD  INTEGER NOT NULL,
    FIC2_NOM  VARCHAR(30),
    FIC2_SIG  VARCHAR(5),
    FIC2_ORD  VARCHAR(40),
    FIC2_TAB  INTEGER,
    DAT_CAD   TIMESTAMP,
    DAT_ATU   TIMESTAMP,
    USE_CAD   INTEGER,
    USE_ATU   INTEGER,
    ATIVO     VARCHAR(1)
);

CREATE TABLE CDPROFOR (
    PRO_PRO   INTEGER,
    PRO_FOR   INTEGER,
    PRO_ULTC  DOUBLE PRECISION,
    PRO_CUSM  DOUBLE PRECISION,
    DAT_CAD   TIMESTAMP,
    DAT_ATU   TIMESTAMP,
    ATIVO     VARCHAR(1)
);

CREATE TABLE CDPROFOTO (
    PRO_PRO       INTEGER NOT NULL,
    PRO_FOTO      BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    PRO_FOTO_NOM  VARCHAR(100),
    PRO_ORDEM     INTEGER,
    DAT_CAD       TIMESTAMP,
    DAT_ATU       TIMESTAMP,
    ATIVO         VARCHAR(1),
    DAT_HOR_ATU   TIMESTAMP
);

CREATE TABLE CDPROHIS (
    PRO_TAB  VARCHAR(20),
    PRO_ANT  INTEGER,
    PRO_DEP  INTEGER,
    PRO_DAT  TIMESTAMP,
    PRO_HIS  VARCHAR(60)
);

CREATE TABLE CDPROICM (
    PRO_COD  VARCHAR(12),
    PRO_EST  VARCHAR(2),
    PRO_ICM  DOUBLE PRECISION,
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1)
);

CREATE TABLE CDPROICMS (
    ICM_PRO  INTEGER NOT NULL,
    ICM_EST  INTEGER NOT NULL,
    ICM_ALI  DOUBLE PRECISION,
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP
);

CREATE TABLE CDPROJ (
    PROJ_COD      INTEGER NOT NULL,
    PROJ_STATUS   VARCHAR(2),
    PROJ_NOM      VARCHAR(60),
    PROJ_CLI      INTEGER,
    PROJ_DATINI   TIMESTAMP,
    PROJ_DATFIM   TIMESTAMP,
    PROJ_VALPREV  DOUBLE PRECISION,
    PROJ_USERCAD  INTEGER,
    PROJ_USERATU  INTEGER,
    DAT_CAD       TIMESTAMP,
    DAT_ATU       TIMESTAMP,
    PROJ_TEMPO    DOUBLE PRECISION,
    PROJ_HIST     BLOB SUB_TYPE 1 SEGMENT SIZE 4096
);

CREATE TABLE CDPROJ2 (
    PROJ2_COD     INTEGER NOT NULL,
    PROJ2_PROJ    INTEGER NOT NULL,
    PROJ2_NOM     VARCHAR(40),
    PROJ2_TEMPO   DOUBLE PRECISION,
    PROJ2_ORCAM   DOUBLE PRECISION,
    PROJ2_STATUS  VARCHAR(1),
    PROJ2_ORD     VARCHAR(40),
    DAT_CAD       TIMESTAMP,
    DAT_ATU       TIMESTAMP,
    USE_CAD       INTEGER,
    USE_ATU       INTEGER,
    ATIVO         VARCHAR(1)
);

CREATE TABLE CDPROJ3 (
    PROJ3_COD   INTEGER NOT NULL,
    PROJ3_PROJ  INTEGER NOT NULL,
    PROJ3_ENT   INTEGER,
    PROJ3_FLAG  VARCHAR(3)
);

CREATE TABLE CDPROJ4 (
    PROJ4_COD   INTEGER NOT NULL,
    PROJ4_PROJ  INTEGER NOT NULL,
    PROJ4_ENT   INTEGER,
    PROJ4_FLAG  VARCHAR(3)
);

CREATE TABLE CDPROMAXMIN (
    PRO_ALM      INTEGER,
    PRO_PRO      INTEGER,
    PRO_COR      VARCHAR(3),
    PRO_MED      VARCHAR(3),
    DAT_CAD      TIMESTAMP,
    DAT_ATU      TIMESTAMP,
    ATIVO        VARCHAR(1),
    PRO_MAX_DDV  DOUBLE PRECISION,
    PRO_MIN_DDV  DOUBLE PRECISION,
    PRO_MAX_QTD  DOUBLE PRECISION,
    PRO_MIN_QTD  DOUBLE PRECISION
);

CREATE TABLE CDPROMOBILE (
    PRO_PRO          INTEGER NOT NULL,
    PRO_DETALHE1     VARCHAR(100),
    PRO_DETALHE2     VARCHAR(100),
    PRO_DETALHE3     VARCHAR(100),
    PRO_DETALHE4     VARCHAR(100),
    PRO_DETALHE5     VARCHAR(100),
    PRO_DETALHE6     VARCHAR(100),
    PRO_DETALHE7     VARCHAR(100),
    PRO_DETALHE8     VARCHAR(100),
    PRO_DETALHE9     VARCHAR(100),
    PRO_DETALHE10    VARCHAR(100),
    PRO_MSG_PROMO    VARCHAR(100),
    PRO_USAR_MOBILE  VARCHAR(1)
);

CREATE TABLE CDPRONOVIDADE (
    NOV_PRO    INTEGER,
    NOV_ORDEM  INTEGER,
    DAT_CAD    TIMESTAMP,
    DAT_ATU    TIMESTAMP,
    ATIVO      VARCHAR(1)
);

CREATE TABLE CDPROPRE (
    PRO_PRO            INTEGER,
    PRO_COR            VARCHAR(3),
    PRO_MED            VARCHAR(3),
    PRO_ULTC           DOUBLE PRECISION,
    PRO_CUSM           DOUBLE PRECISION,
    PRO_TBA            DOUBLE PRECISION,
    PRO_TBB            DOUBLE PRECISION,
    PRO_TBC            DOUBLE PRECISION,
    PRO_TBD            DOUBLE PRECISION,
    PRO_TBE            DOUBLE PRECISION,
    PRO_TBF            DOUBLE PRECISION,
    PRO_TBG            DOUBLE PRECISION,
    PRO_TBH            DOUBLE PRECISION,
    PRO_TBI            DOUBLE PRECISION,
    PRO_TBJ            DOUBLE PRECISION,
    PRO_TBK            DOUBLE PRECISION,
    PRO_TBL            DOUBLE PRECISION,
    PRO_TBM            DOUBLE PRECISION,
    PRO_TBN            DOUBLE PRECISION,
    PRO_TBO            DOUBLE PRECISION,
    PRO_TBP            DOUBLE PRECISION,
    PRO_TBQ            DOUBLE PRECISION,
    PRO_TBR            DOUBLE PRECISION,
    PRO_TBS            DOUBLE PRECISION,
    PRO_TBT            DOUBLE PRECISION,
    PRO_TBU            DOUBLE PRECISION,
    PRO_TBV            DOUBLE PRECISION,
    PRO_TBW            DOUBLE PRECISION,
    PRO_TBX            DOUBLE PRECISION,
    PRO_TBY            DOUBLE PRECISION,
    PRO_TBZ            DOUBLE PRECISION,
    PRO_MARGEM_MARKUP  DOUBLE PRECISION,
    DAT_CAD            TIMESTAMP,
    DAT_ATU            TIMESTAMP,
    ATIVO              VARCHAR(1),
    PRO_DESCONTO       DOUBLE PRECISION,
    PRO_VAL_DE         TIMESTAMP,
    PRO_VAL_ATE        TIMESTAMP,
    PRO_COMISSAO       DOUBLE PRECISION
);

CREATE TABLE CDPROPREAUX (
    PRO_PRO            INTEGER,
    PRO_COR            VARCHAR(3),
    PRO_MED            VARCHAR(3),
    PRO_ULTC           DOUBLE PRECISION,
    PRO_CUSM           DOUBLE PRECISION,
    PRO_TBA            DOUBLE PRECISION,
    PRO_TBB            DOUBLE PRECISION,
    PRO_TBC            DOUBLE PRECISION,
    PRO_TBD            DOUBLE PRECISION,
    PRO_TBE            DOUBLE PRECISION,
    PRO_TBF            DOUBLE PRECISION,
    PRO_TBG            DOUBLE PRECISION,
    PRO_TBH            DOUBLE PRECISION,
    PRO_TBI            DOUBLE PRECISION,
    PRO_TBJ            DOUBLE PRECISION,
    PRO_TBK            DOUBLE PRECISION,
    PRO_TBL            DOUBLE PRECISION,
    PRO_TBM            DOUBLE PRECISION,
    PRO_TBN            DOUBLE PRECISION,
    PRO_TBO            DOUBLE PRECISION,
    PRO_TBP            DOUBLE PRECISION,
    PRO_TBQ            DOUBLE PRECISION,
    PRO_TBR            DOUBLE PRECISION,
    PRO_TBS            DOUBLE PRECISION,
    PRO_TBT            DOUBLE PRECISION,
    PRO_TBU            DOUBLE PRECISION,
    PRO_TBV            DOUBLE PRECISION,
    PRO_TBW            DOUBLE PRECISION,
    PRO_TBX            DOUBLE PRECISION,
    PRO_TBY            DOUBLE PRECISION,
    PRO_TBZ            DOUBLE PRECISION,
    PRO_MARGEM_MARKUP  DOUBLE PRECISION,
    DAT_CAD            TIMESTAMP,
    DAT_ATU            TIMESTAMP,
    ATIVO              VARCHAR(1),
    PRO_DESCONTO       DOUBLE PRECISION,
    PRO_VAL_DE         TIMESTAMP,
    PRO_VAL_ATE        TIMESTAMP
);

CREATE TABLE CDPROPRO (
    PRO_FLAG  INTEGER,
    PRO_PRO   INTEGER,
    DAT_CAD   TIMESTAMP,
    DAT_ATU   TIMESTAMP,
    ATIVO     VARCHAR(1)
);

CREATE TABLE CDPROSER1 (
    PRO_COD  INTEGER,
    PRO_NOM  VARCHAR(30),
    PRO_SIG  VARCHAR(10),
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1)
);

CREATE TABLE CDPROSER2 (
    PRO_SER  INTEGER,
    PRO_PRO  INTEGER,
    PRO_PRE  DOUBLE PRECISION,
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1)
);

CREATE TABLE CDPROSITTRIBUT (
    TRIB_PRO  INTEGER NOT NULL,
    TRIB_ALM  INTEGER NOT NULL,
    TRIB_SIT  INTEGER NOT NULL,
    DAT_CAD   TIMESTAMP,
    DAT_ATU   TIMESTAMP,
    ATIVO     VARCHAR(1),
    USE_CAD   INTEGER,
    USE_ATU   INTEGER
);

CREATE TABLE CDPROSUBTRIBUTA (
    SUB_PRO  INTEGER,
    SUB_EST  INTEGER,
    SUB_IND  DOUBLE PRECISION,
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1),
    USE_CAD  INTEGER,
    USE_ATU  INTEGER
);

CREATE TABLE CDRECIBO (
    CODIGO              INTEGER,
    NUMERORECIBO        VARCHAR(20),
    VALORRECIBO         DOUBLE PRECISION,
    RECEBI_DE           VARCHAR(20),
    NOMEDESTINO         VARCHAR(60),
    LOGRADOURODESTINO   VARCHAR(3),
    ENDERECODESTINO     VARCHAR(150),
    NUMENDERECODESTINO  VARCHAR(10),
    REFERENCIA          BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    NOMEEMITENTE        VARCHAR(60),
    CIDADERECIBO        VARCHAR(20),
    CPFEMITENTE         VARCHAR(20),
    TELEFONEEMITENTE    VARCHAR(15),
    LOGRADOUROEMITENTE  VARCHAR(3),
    ENDERECOEMITENTE    VARCHAR(150),
    NUMEDERECOEMITENTE  VARCHAR(10),
    CEPDESTINO          VARCHAR(9),
    CEPEMITENTE         VARCHAR(9),
    DAT_CAD             TIMESTAMP,
    DAT_ATU             TIMESTAMP,
    ATIVO               VARCHAR(1)
);

CREATE TABLE CDREMESSA (
    REM_COD  INTEGER NOT NULL,
    REM_CAD  TIMESTAMP,
    REM_NOM  VARCHAR(100)
);

CREATE TABLE CDREMESSA2 (
    REM2_REM  INTEGER,
    REM2_REC  INTEGER
);

CREATE TABLE CDREP (
    REP_COD      INTEGER NOT NULL,
    REP_NOM      VARCHAR(60),
    REP_RED      VARCHAR(75),
    REP_GRU      INTEGER,
    REP_CGC      VARCHAR(19),
    REP_IES      VARCHAR(15),
    REP_LOG      VARCHAR(5),
    REP_END      VARCHAR(50),
    REP_NUM      VARCHAR(10),
    REP_COP      VARCHAR(20),
    REP_BAI      VARCHAR(20),
    REP_CID      VARCHAR(30),
    REP_CEP      VARCHAR(9),
    REP_EST      VARCHAR(2),
    REP_CON      VARCHAR(20),
    REP_DAT      TIMESTAMP,
    REP_WWW      VARCHAR(50),
    REP_EMA      VARCHAR(60),
    REP_OBS      BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    REP_FIS      VARCHAR(1),
    REP_PAI      VARCHAR(30),
    REP_ANI      TIMESTAMP,
    REP_COM      DOUBLE PRECISION,
    REP_REG      VARCHAR(30),
    REP_MET      VARCHAR(20),
    DAT_CAD      TIMESTAMP,
    DAT_ATU      TIMESTAMP,
    ATIVO        VARCHAR(1),
    REP_FOTO     BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    REP_TEL      VARCHAR(15),
    REP_FOTONOM  VARCHAR(50),
    USE_CAD      INTEGER,
    USE_ATU      INTEGER,
    REP_FUN      INTEGER,
    REP_CODIGO   INTEGER,
    REP_AGE      VARCHAR(15),
    REP_CON_BAN  VARCHAR(15),
    REP_BAN      INTEGER
);

CREATE TABLE CDREPC (
    CON_COD          INTEGER,
    CON_NOM          VARCHAR(30),
    CON_REP          INTEGER,
    CON_TEL          VARCHAR(18),
    CON_DAT          TIMESTAMP,
    CON_RAM          VARCHAR(10),
    CON_OBS          VARCHAR(50),
    DAT_CAD          TIMESTAMP,
    DAT_ATU          TIMESTAMP,
    ATIVO            VARCHAR(1),
    CON_ORDEM        INTEGER,
    CON_MALA_DIRETA  VARCHAR(1),
    CON_TEL_PRINC    VARCHAR(1)
);

CREATE TABLE CDSAFEST_NF_CAIXAS (
    CAIXA_CODIGO    INTEGER NOT NULL,
    NF_CODIGO       INTEGER NOT NULL,
    CAIXA_NUMERO    INTEGER,
    CAIXA_PESO      DOUBLE PRECISION,
    CAIXA_VALOR     NUMERIC(15,2),
    CAIXA_STATUS    VARCHAR(1),
    CAIXA_REGISTRO  VARCHAR(20)
);

CREATE TABLE CDSAFEST_NF_ITEM_CAIXAS (
    ITEM_CODIGO       INTEGER NOT NULL,
    CAIXA_CODIGO      INTEGER NOT NULL,
    CAIXA_QUANTIDADE  NUMERIC(15,3)
);

CREATE TABLE CDSAFEST_NF_ITENS (
    ITEM_CODIGO      INTEGER NOT NULL,
    NF_CODIGO        INTEGER NOT NULL,
    ITEM_EAN         VARCHAR(20) NOT NULL,
    ITEM_DESCRICAO   VARCHAR(50),
    ITEM_QUANTIDADE  NUMERIC(15,3),
    ITEM_CODINT      VARCHAR(20),
    ITEM_UNIDADE     VARCHAR(5)
);

CREATE TABLE CDSAFEST_NFS (
    NF_CODIGO             INTEGER NOT NULL,
    NF_NUMERO             VARCHAR(20) NOT NULL,
    NF_CLIENTE            VARCHAR(50) NOT NULL,
    NF_ENDERECO           VARCHAR(50),
    NF_BAIRRO             VARCHAR(30),
    NF_CIDADE             VARCHAR(30),
    NF_ESTADO             VARCHAR(10),
    NF_CEP                VARCHAR(10),
    NF_TELEFONE           VARCHAR(20),
    DAT_CAD               TIMESTAMP,
    NF_DATA               TIMESTAMP,
    NF_IES                VARCHAR(30),
    NF_CNPJ               VARCHAR(30),
    NF_NUMERO_INDIVIDUAL  VARCHAR(20)
);

CREATE TABLE CDSER (
    SER_COD              INTEGER NOT NULL,
    SER_NOM              VARCHAR(100),
    SER_TIP              INTEGER,
    SER_GRU              INTEGER,
    SER_TBA              DOUBLE PRECISION,
    SER_TBB              DOUBLE PRECISION,
    SER_TBC              DOUBLE PRECISION,
    SER_TBD              DOUBLE PRECISION,
    SER_TBE              DOUBLE PRECISION,
    SER_TBF              DOUBLE PRECISION,
    SER_TBG              DOUBLE PRECISION,
    SER_TBH              DOUBLE PRECISION,
    SER_TBI              DOUBLE PRECISION,
    SER_TBJ              DOUBLE PRECISION,
    SER_ISS              DOUBLE PRECISION,
    SER_UND              VARCHAR(2),
    SER_SIG              VARCHAR(5),
    DAT_CAD              TIMESTAMP,
    DAT_ATU              TIMESTAMP,
    ATIVO                VARCHAR(1),
    SER_GRTN             INTEGER,
    SER_GRTP             VARCHAR(1),
    SER_INT              VARCHAR(15),
    SER_DESC_AUTOMATICO  DOUBLE PRECISION,
    SER_UNM              INTEGER,
    SER_ALT              DOUBLE PRECISION,
    SER_CMP              DOUBLE PRECISION,
    SER_LRG              DOUBLE PRECISION,
    USE_CAD              INTEGER,
    USE_ATU              INTEGER,
    SER_NOM2             VARCHAR(100),
    SER_PREST            INTEGER,
    SER_OBS              BLOB SUB_TYPE 1 SEGMENT SIZE 2048
);

CREATE TABLE CDSERIE_SCAN (
    FORM_COD    INTEGER,
    FORM_SERIE  INTEGER
);

CREATE TABLE CDSERIENF (
    SERIE_COD     INTEGER NOT NULL,
    SERIE_NOM     VARCHAR(5),
    DAT_CAD       TIMESTAMP,
    DAT_ATU       TIMESTAMP,
    USE_CAD       INTEGER,
    USE_ATU       INTEGER,
    ATIVO         VARCHAR(1),
    SERIE_NUMERO  INTEGER
);

CREATE TABLE CDSETOR1 (
    SET_COD  INTEGER NOT NULL,
    SET_NOM  VARCHAR(30),
    SET_SIG  VARCHAR(5),
    SET_ORD  VARCHAR(40),
    SET_TIP  INTEGER,
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1),
    USE_CAD  INTEGER,
    USE_ATU  INTEGER
);

CREATE TABLE CDSETOR2 (
    SET2_COD  INTEGER NOT NULL,
    SET2_SET  INTEGER NOT NULL,
    SET2_USE  INTEGER NOT NULL,
    SET2_VAL  DOUBLE PRECISION
);

CREATE TABLE CDSETOR3 (
    SET3_COD  INTEGER NOT NULL,
    SET3_SET  INTEGER NOT NULL,
    SET3_USE  INTEGER NOT NULL
);

CREATE TABLE CDSETORSEG (
    SET_COD  INTEGER NOT NULL,
    SET_SET  VARCHAR(30),
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1),
    USE_CAD  INTEGER,
    USE_ATU  INTEGER
);

CREATE TABLE CDSIRE_BLOCO (
    BLOCO_CODIGO            INTEGER NOT NULL,
    EMPREENDIMENTO_CODIGO   INTEGER NOT NULL,
    BLOCO_TITULO            VARCHAR(200) NOT NULL,
    BLOCO_OBSERVACAO        BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    BLOCO_DATA_CADASTRO     TIMESTAMP,
    BLOCO_DATA_ATUALIZACAO  TIMESTAMP,
    BLOCO_ATIVO             VARCHAR(1)
);

CREATE TABLE CDSIRE_CLIENTE (
    CLIENTE_CODIGO          INTEGER NOT NULL,
    CLIENTE_NOME            VARCHAR(200),
    CLIENTE_OBSERVACAO      BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    CLIENTE_DATA_CADASTRO   TIMESTAMP,
    CLIENTE_DATA_ALTERACAO  TIMESTAMP,
    CLIENTE_ATIVO           VARCHAR(1),
    CLIENTE_RELACIONAMENTO  VARCHAR(50),
    CLIENTE_DATA_CASAMENTO  TIMESTAMP
);

CREATE TABLE CDSIRE_CONDICOES_PAGAMENTO (
    CONDICOES_CODIGO            INTEGER NOT NULL,
    CONDICOES_DESCRICAO         VARCHAR(100),
    CONDICOES_DATA_CADASTRO     TIMESTAMP,
    CONDICOES_DATA_ATUALIZACAO  TIMESTAMP,
    CONDICOES_ATIVO             VARCHAR(1)
);

CREATE TABLE CDSIRE_EMPREENDIMENTO (
    EMPREENDIMENTO_CODIGO            INTEGER NOT NULL,
    EMPREENDIMENTO_TITULO            VARCHAR(200),
    EMPREENDIMENTO_OBSERVACAO        BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    EMPREENDIMENTO_DATA_ENTREGA      TIMESTAMP,
    EMPREENDIMENTO_DATA_CADASTRO     TIMESTAMP,
    EMPREENDIMENTO_DATA_ATUALIZACAO  TIMESTAMP,
    EMPREENDIMENTO_ATIVO             VARCHAR(1)
);

CREATE TABLE CDSIRE_FASE (
    FASE_CODIGO            INTEGER NOT NULL,
    FASE_NOME              VARCHAR(100) NOT NULL,
    FASE_TIPO              VARCHAR(3) NOT NULL,
    FASE_ORDEM             INTEGER,
    FASE_DATA_CADASTRO     TIMESTAMP,
    FASE_DATA_ATUALIZACAO  TIMESTAMP,
    FASE_ATIVO             VARCHAR(1)
);

CREATE TABLE CDSIRE_IMOVEL (
    IMOVEL_CODIGO              INTEGER NOT NULL,
    BLOCO_CODIGO               INTEGER NOT NULL,
    IMOVEL_TITULO              VARCHAR(50),
    IMOVEL_AREA_CONSTR_PRIV    DOUBLE PRECISION,
    IMOVEL_AREA_CONSTR_COMUM   DOUBLE PRECISION,
    IMOVEL_AREA_TERRENO_PRIV   DOUBLE PRECISION,
    IMOVEL_AREA_TERRENO_COMUM  DOUBLE PRECISION,
    IMOVEL_FRACAO_IDEAL        DOUBLE PRECISION,
    IMOVEL_VAGAS_GARAGEM       DOUBLE PRECISION,
    IMOVEL_OBSERVACAO          BLOB SUB_TYPE 1 SEGMENT SIZE 4096,
    IMOVEL_DATA_CADASTRO       TIMESTAMP,
    IMOVEL_DATA_ATUALIZACAO    TIMESTAMP,
    IMOVEL_ATIVO               VARCHAR(1)
);

CREATE TABLE CDSIRE_IMOVEL_PRECO (
    IMOVEL_CODIGO           INTEGER NOT NULL,
    TABELA_CODIGO           INTEGER NOT NULL,
    PRECO_VALOR             DOUBLE PRECISION,
    PRECO_DATA_CADASTRO     TIMESTAMP,
    PRECO_DATA_ATUALIZACAO  TIMESTAMP
);

CREATE TABLE CDSIRE_PESSOA (
    PESSOA_CODIGO             INTEGER NOT NULL,
    CLIENTE_CODIGO            INTEGER NOT NULL,
    PESSOA_NOME               VARCHAR(200) NOT NULL,
    PESSOA_TELEFONE           VARCHAR(50),
    PESSOA_RG                 VARCHAR(50),
    PESSOA_CPF                VARCHAR(50),
    PESSOA_EMAIL              VARCHAR(100),
    PESSOA_DATA_CADASTRO      TIMESTAMP,
    PESSOA_DATA_ALTERACAO     TIMESTAMP,
    PESSOA_ATIVO              VARCHAR(1),
    USUARIO_CODIGO_CADASTRO   INTEGER,
    USUARIO_CODIGO_ALTERACAO  INTEGER,
    PESSOA_TELEFONE2          VARCHAR(100),
    PESSOA_TELEFONE3          VARCHAR(100),
    PESSOA_EMAIL2             VARCHAR(100),
    PESSOA_NACIONALIDADE      VARCHAR(100),
    PESSOA_PROFISSAO          VARCHAR(100),
    PESSOA_ENDERECO           VARCHAR(100),
    PESSOA_BAIRRO             VARCHAR(100),
    PESSOA_CIDADE             VARCHAR(100),
    PESSOA_ESTADO             VARCHAR(2),
    PESSOA_PAIS               VARCHAR(100),
    PESSOA_CEP                VARCHAR(20),
    PESSOA_DATA_NASCIMENTO    TIMESTAMP,
    PESSOA_ESTADO_CIVIL       VARCHAR(100),
    PESSOA_REGIME_CASAMENTO   VARCHAR(50),
    PESSOA_DATA_CASAMENTO     TIMESTAMP
);

CREATE TABLE CDSIRE_PESSOA_ARQUIVO (
    ARQUIVO_CODIGO               INTEGER NOT NULL,
    PESSOA_CODIGO                INTEGER,
    ARQUIVO_CONTEUDO             BLOB SUB_TYPE 0 SEGMENT SIZE 4096,
    ARQUIVO_DATA_CADASTRO        TIMESTAMP,
    ARQUIVO_DATA_ATUALIZACAO     TIMESTAMP,
    ARQUIVO_USUARIO_CADASTRO     INTEGER,
    ARQUIVO_USUARIO_ATUALIZACAO  INTEGER,
    ARQUIVO_ATIVO                VARCHAR(3),
    ARQUIVO_TIPO                 VARCHAR(30)
);

CREATE TABLE CDSIRE_PESSOAS_CLIENTE (
    PESSOA_CODIGO   INTEGER NOT NULL,
    CLIENTE_CODIGO  INTEGER NOT NULL
);

CREATE TABLE CDSIRE_RESERVA (
    RESERVA_CODIGO               INTEGER NOT NULL,
    IMOVEL_CODIGO                INTEGER NOT NULL,
    CLIENTE_CODIGO               INTEGER NOT NULL,
    USUARIO_CODIGO               INTEGER NOT NULL,
    RESERVA_DATA_CADASTRO        TIMESTAMP NOT NULL,
    RESERVO_DATA_ATUALIZACAO     TIMESTAMP NOT NULL,
    RESERVA_ATIVO                VARCHAR(1) NOT NULL,
    RESERVA_DATA_CONFIRMACAO     TIMESTAMP,
    RESERVA_OBSERVACAO           BLOB SUB_TYPE 1 SEGMENT SIZE 4096,
    RESERVA_GERACAO_CONTRATO     TIMESTAMP,
    RESERVA_USUARIO_CADASTRO     INTEGER,
    RESERVA_USUARIO_ATUALIZACAO  INTEGER,
    RESERVA_DATA_ASSINATURA      TIMESTAMP,
    RESERVA_CORRESPONDENTE       INTEGER
);

CREATE TABLE CDSIRE_RESERVA_ACOMPANHAMENTO (
    RESERVA_CODIGO              INTEGER,
    ACOMPANHA_CODIGO            INTEGER NOT NULL,
    ACOMPANHA_DATA              TIMESTAMP,
    USUARIO_CODIGO              INTEGER,
    ACOMPANHA_TEXTO             BLOB SUB_TYPE 1 SEGMENT SIZE 4096,
    ACOMPANHA_DATA_CADASTRO     TIMESTAMP,
    ACOMPANHA_DATA_ATUALIZACAO  TIMESTAMP,
    ACOMPANHA_ATIVO             VARCHAR(10),
    ACOMPANHA_ARQUIVO           BLOB SUB_TYPE 0 SEGMENT SIZE 4096,
    FASE_CODIGO                 INTEGER
);

CREATE TABLE CDSIRE_RESERVA_ARQUIVO (
    ARQUIVO_CODIGO               INTEGER NOT NULL,
    RESERVA_CODIGO               INTEGER NOT NULL,
    ARQUIVO_CONTEUDO             BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    ARQUIVO_DATA_CADASTRO        TIMESTAMP,
    ARQUIVO_DATA_ATUALIZACAO     TIMESTAMP,
    ARQUIVO_USUARIO_CADASTRO     INTEGER,
    ARQUIVO_USUARIO_ATUALIZACAO  INTEGER,
    ARQUIVO_ATIVO                VARCHAR(3),
    ARQUIVO_TIPO                 VARCHAR(30)
);

CREATE TABLE CDSIRE_RESERVA_PAGAMENTO (
    PAGAMENTO_CODIGO            INTEGER NOT NULL,
    RESERVA_CODIGO              INTEGER,
    CONDICAO_CODIGO             INTEGER,
    PAGAMENTO_VALOR             DOUBLE PRECISION,
    PAGAMENTO_ORDEM             INTEGER,
    PAGAMENTO_OBS               BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    PAGAMENTO_DATA_CADASTRO     TIMESTAMP,
    PAGAMENTO_DATA_ATUALIZACAO  TIMESTAMP,
    PAGAMENTO_DATA              TIMESTAMP
);

CREATE TABLE CDSIRE_TABELA_PRECO (
    TABELA_CODIGO            INTEGER NOT NULL,
    TABELA_TITULO            VARCHAR(100) NOT NULL,
    TABELA_DATA_CADASTRO     TIMESTAMP,
    TABELA_DATA_ATUALIZACAO  TIMESTAMP,
    TABELA_ATIVO             VARCHAR(1)
);

CREATE TABLE CDSIRE_TIPO_USUARIO (
    USUARIO_CODIGO      INTEGER NOT NULL,
    TIPO_PERFIL         VARCHAR(3),
    USUARIO_FORNECEDOR  INTEGER,
    USUARIO_CLIENTE     INTEGER
);

CREATE TABLE CDSIT (
    SIT_COD           INTEGER,
    SIT_NOM           VARCHAR(60),
    SIT_CST           VARCHAR(3),
    SIT_SIT           VARCHAR(1),
    DAT_CAD           TIMESTAMP,
    DAT_ATU           TIMESTAMP,
    ATIVO             VARCHAR(1),
    USE_CAD           INTEGER,
    USE_ATU           INTEGER,
    SIT_OBS           VARCHAR(120),
    SIT_OBS1          VARCHAR(120),
    SIT_OBS2          VARCHAR(120),
    SIT_SUB_TRIB      VARCHAR(1),
    SIT_DESTACA_ICMS  VARCHAR(1)
);

CREATE TABLE CDSITCOFINS (
    COF_COD  INTEGER NOT NULL,
    COF_NOM  VARCHAR(200),
    COF_CST  VARCHAR(10),
    COF_ALQ  DOUBLE PRECISION,
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1)
);

CREATE TABLE CDSITIPI (
    IPI_COD  INTEGER NOT NULL,
    IPI_NOM  VARCHAR(200),
    IPI_CST  VARCHAR(10),
    IPI_ALQ  DOUBLE PRECISION,
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1)
);

CREATE TABLE CDSITPED (
    SIT_COD            INTEGER NOT NULL,
    SIT_NOM            VARCHAR(40),
    SIT_SIG            VARCHAR(5),
    SIT_ORD            INTEGER,
    SIT_EXIGE_ESTOQUE  VARCHAR(1),
    DAT_CAD            TIMESTAMP,
    DAT_ATU            TIMESTAMP,
    ATIVO              VARCHAR(1)
);

CREATE TABLE CDSITPIS (
    PIS_COD  INTEGER NOT NULL,
    PIS_NOM  VARCHAR(200),
    PIS_CST  VARCHAR(10),
    PIS_ALQ  DOUBLE PRECISION,
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1)
);

CREATE TABLE CDSITS (
    SIT_COD   INTEGER NOT NULL,
    SIT_NOM   VARCHAR(30),
    SIT_SIG   VARCHAR(5),
    SIT_NIV   INTEGER,
    DAT_CAD   TIMESTAMP,
    DAT_ATU   TIMESTAMP,
    ATIVO     VARCHAR(1),
    SIT_GRT   INTEGER,
    SIT_FLAG  VARCHAR(2),
    USE_CAD   INTEGER,
    USE_ATU   INTEGER
);

CREATE TABLE CDSITSER (
    SIT_COD     INTEGER,
    SIT_NOM     VARCHAR(30),
    SIT_SIG     VARCHAR(5),
    SIT_NIV     INTEGER,
    DAT_CAD     TIMESTAMP,
    DAT_ATU     TIMESTAMP,
    ATIVO       VARCHAR(1),
    SIT_NIVNOM  VARCHAR(50)
);

CREATE TABLE CDSTATUS (
    STA_COD  INTEGER,
    STA_SIG  VARCHAR(2),
    STA_NOM  VARCHAR(20)
);

CREATE TABLE CDSUBGRUP (
    GRU_COD  INTEGER,
    GRU_NOM  VARCHAR(30),
    GRU_SIG  VARCHAR(5),
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1),
    GRU_ORD  VARCHAR(40),
    GRU_TAB  INTEGER,
    USE_CAD  INTEGER,
    USE_ATU  INTEGER
);

CREATE TABLE CDSUPVARCAMPO (
    CMP_COD  INTEGER NOT NULL,
    CMP_GRU  INTEGER NOT NULL,
    CMP_VAR  INTEGER NOT NULL,
    CMP_ORD  INTEGER,
    CMP_SEC  VARCHAR(30)
);

CREATE TABLE CDSUPVARVALOR (
    VAL_SUP_COD   INTEGER NOT NULL,
    VAL_SUP_GRU   VARCHAR(10) NOT NULL,
    VAL_VAR       INTEGER NOT NULL,
    VAL_DATA      TIMESTAMP,
    VAL_REAL      DOUBLE PRECISION,
    VAL_TEXTO     VARCHAR(100),
    DAT_CAD       TIMESTAMP,
    DAT_ATU       TIMESTAMP,
    ATIVO         VARCHAR(1),
    USE_CAD       INTEGER,
    USE_ATU       INTEGER,
    VAL_BLOB      BLOB SUB_TYPE 1 SEGMENT SIZE 1024,
    VAL_MULTIPLO  INTEGER
);

CREATE TABLE CDTAB_IBPT (
    TAB_NCM       VARCHAR(20),
    TAB_EX        VARCHAR(10),
    TAB_TABELA    VARCHAR(10),
    TAB_ALIQ_NAC  DOUBLE PRECISION,
    TAB_ALIQ_INT  DOUBLE PRECISION
);

CREATE TABLE CDTABVAR (
    TAB_COD  INTEGER NOT NULL,
    TAB_NOM  VARCHAR(100),
    TAB_GRU  INTEGER,
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    USE_CAD  INTEGER,
    USE_ATU  INTEGER,
    ATIVO    VARCHAR(1)
);

CREATE TABLE CDTABVARCAMPO (
    CMP_COD  INTEGER NOT NULL,
    CMP_GRU  INTEGER NOT NULL,
    CMP_VAR  INTEGER NOT NULL,
    CMP_ORD  INTEGER,
    CMP_SEC  VARCHAR(30)
);

CREATE TABLE CDTABVARVALOR (
    VAL_TAB_COD  INTEGER NOT NULL,
    VAL_TAB_GRU  VARCHAR(10) NOT NULL,
    VAL_VAR      INTEGER NOT NULL,
    VAL_DATA     TIMESTAMP,
    VAL_REAL     DOUBLE PRECISION,
    VAL_TEXTO    VARCHAR(100),
    DAT_CAD      TIMESTAMP,
    DAT_ATU      TIMESTAMP,
    ATIVO        VARCHAR(1),
    USE_CAD      INTEGER,
    USE_ATU      INTEGER,
    VAL_BLOB     BLOB SUB_TYPE 1 SEGMENT SIZE 1024
);

CREATE TABLE CDTEF (
    TEF_COD  INTEGER NOT NULL,
    TEF_VD4  INTEGER NOT NULL,
    TEF_IDE  VARCHAR(20),
    TEF_NSU  VARCHAR(20),
    TEF_RED  VARCHAR(20),
    TEF_DAT  TIMESTAMP
);

CREATE TABLE CDTIPCONTA (
    TIP_COD  INTEGER,
    TIP_NOM  VARCHAR(30),
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1)
);

CREATE TABLE CDTIPD (
    TIP_COD           INTEGER,
    TIP_NOM           VARCHAR(30),
    TIP_RED           VARCHAR(5),
    TIP_FIN           VARCHAR(1),
    TIP_VAL           VARCHAR(1),
    TIP_PAG           VARCHAR(1),
    TIP_DESAGIO       DOUBLE PRECISION,
    TIP_DESENCAIXE    INTEGER,
    TIP_ATUALIZA      VARCHAR(3),
    TIP_PLA           VARCHAR(40),
    DAT_CAD           TIMESTAMP,
    DAT_ATU           TIMESTAMP,
    ATIVO             VARCHAR(1),
    TIP_CONSOL        VARCHAR(1),
    TIP_DOC           VARCHAR(3),
    TIP_DESAGIO_FIXO  DOUBLE PRECISION,
    TIP_DESAGIO_PROP  DOUBLE PRECISION,
    TIP_BANCO         VARCHAR(1),
    TIP_AGENCIA       VARCHAR(1),
    TIP_CONTA         VARCHAR(1),
    TIP_NUM_DOC       VARCHAR(1),
    TIP_INF_CHEQUE    VARCHAR(1),
    TIP_MOBILE        VARCHAR(1),
    TIP_TROCO         VARCHAR(1)
);

CREATE TABLE CDTIPP (
    TIP_COD   INTEGER,
    TIP_NOM   VARCHAR(30),
    TIP_SIG   VARCHAR(5),
    TIP_FOTO  VARCHAR(30),
    DAT_CAD   TIMESTAMP,
    DAT_ATU   TIMESTAMP,
    ATIVO     VARCHAR(1),
    TIP_ORD   VARCHAR(40),
    TIP_TAB   INTEGER,
    USE_CAD   INTEGER,
    USE_ATU   INTEGER
);

CREATE TABLE CDTIPS (
    TIP_COD  INTEGER,
    TIP_NOM  VARCHAR(30),
    TIP_SIG  VARCHAR(5),
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1)
);

CREATE TABLE CDTIPSERDDD (
    TIP_COD     INTEGER NOT NULL,
    TIP_NOM     VARCHAR(30),
    TIP_SIG     VARCHAR(5),
    TIP_NIV     INTEGER,
    DAT_CAD     TIMESTAMP,
    DAT_ATU     TIMESTAMP,
    ATIVO       VARCHAR(1),
    TIP_GRT     INTEGER,
    TIP_FLAG    VARCHAR(2),
    USE_CAD     INTEGER,
    USE_ATU     INTEGER,
    TIP_NIVNOM  VARCHAR(50)
);

CREATE TABLE CDTMKVARVALOR (
    VAL_TMK_COD   INTEGER NOT NULL,
    VAL_TMK_GRU   INTEGER NOT NULL,
    VAL_VAR       INTEGER NOT NULL,
    VAL_DATA      TIMESTAMP,
    VAL_REAL      DOUBLE PRECISION,
    VAL_TEXTO     VARCHAR(100),
    DAT_CAD       TIMESTAMP,
    DAT_ATU       TIMESTAMP,
    ATIVO         VARCHAR(1),
    USE_CAD       INTEGER,
    USE_ATU       INTEGER,
    VAL_BLOB      BLOB SUB_TYPE 1 SEGMENT SIZE 1024,
    VAL_MULTIPLO  INTEGER
);

CREATE TABLE CDTRA1 (
    TRA_COD                     INTEGER NOT NULL,
    TRA_NOM                     VARCHAR(40),
    TRA_INF                     VARCHAR(1),
    TRA_VEN                     VARCHAR(1),
    TRA_CLI                     VARCHAR(1),
    TRA_QTD                     INTEGER,
    TRA_DES                     DOUBLE PRECISION,
    TRA_ARR                     INTEGER,
    TRA_PGT                     INTEGER,
    TRA_ENT                     VARCHAR(1),
    TRA_TIP_TRA                 VARCHAR(3),
    TRA_REP                     VARCHAR(1),
    TRA_PRE_ENT                 VARCHAR(8),
    TRA_PRE_RET                 VARCHAR(8),
    TRA_CAI                     VARCHAR(1),
    TRA_SIG                     VARCHAR(5),
    TRA_PRECO                   VARCHAR(8),
    TRA_LAY_PDV                 VARCHAR(3),
    TRA_PED                     VARCHAR(1),
    TRA_MODULO                  VARCHAR(3),
    TRA_IMP_ITENS_SEP           VARCHAR(1),
    TRA_TRS                     VARCHAR(1),
    TRA_IMPFISCAL               VARCHAR(1),
    TRA_DIGITACAO               VARCHAR(3),
    TRA_PRA_ENT                 INTEGER,
    TRA_NIV                     INTEGER,
    TRA_ITEMOBS1                VARCHAR(1),
    TRA_ITEMOBS2                VARCHAR(1),
    TRA_ITEMOBS3                VARCHAR(1),
    TRA_ITEMOBS4                VARCHAR(1),
    TRA_HABILITAQTD             VARCHAR(1),
    ALTERA_TRA_PRECO            VARCHAR(1),
    ALTERA_TRA_PRE_ENT          VARCHAR(1),
    ALTERA_TRA_PRE_RET          VARCHAR(1),
    TRA_CONSIDERA_DESCONTO      VARCHAR(5),
    TRA_PRA_RETIRADA            INTEGER,
    TRA_NIVEL_ALTERAR           INTEGER,
    TRA_COND_PGTO_TODAS         VARCHAR(1),
    TRA_CUPOMOBS1               VARCHAR(1),
    TRA_CUPOMOBS2               VARCHAR(1),
    TRA_CUPOMOBS3               VARCHAR(1),
    TRA_CUPOMOBS4               VARCHAR(1),
    TRA_NIVEL_CANCELAR          INTEGER,
    TRA_COMP                    VARCHAR(1),
    TRA_IPI                     VARCHAR(1),
    TRA_FINALIDADE              VARCHAR(1),
    TRA_NATUREZA                VARCHAR(1),
    TRA_CAD_AUT                 VARCHAR(1),
    DAT_CAD                     TIMESTAMP,
    DAT_ATU                     TIMESTAMP,
    ATIVO                       VARCHAR(1),
    TRA_IPI_ALT                 VARCHAR(1),
    TRA_SEU_NUMERO              VARCHAR(1),
    ALTERA_TRA_DES              VARCHAR(1),
    TRA_CONSIDERA_DESCONTO_PRO  VARCHAR(1),
    ALTERA_TRA_DES_PRO          VARCHAR(1),
    TRA_UNIDADE                 VARCHAR(1),
    TRA_DIGITACAO_SER           VARCHAR(3),
    TRA_PRECO_SER               VARCHAR(8),
    ALTERA_TRA_PRECO_SER        VARCHAR(1),
    TRA_CONSIDERA_DESCONTO_SER  VARCHAR(1),
    ALTERA_TRA_DES_SER          VARCHAR(1),
    TRA_LOCAL_SER               VARCHAR(1),
    TRA_SEROBS1                 VARCHAR(1),
    TRA_SEROBS2                 VARCHAR(1),
    TRA_SEROBS3                 VARCHAR(1),
    TRA_SEROBS4                 VARCHAR(1),
    TRA_GRAVACAO_PENDENTE       VARCHAR(1),
    TRA_PRESTSERV               VARCHAR(1),
    TRA_ICMS                    VARCHAR(1),
    TRA_ICMS_ALT                VARCHAR(1),
    TRA_USA_PDV                 VARCHAR(1),
    TRA_GRAVACAO                VARCHAR(2),
    ALTERA_DES_PRO              VARCHAR(1),
    ALTERA_DES_SER              VARCHAR(1),
    TRA_HABILITAQTD_SER         VARCHAR(1),
    TRA_NRCASASDEC_PRO          INTEGER,
    TRA_NRCASASDEC_SER          INTEGER,
    TRA_SUGERE_CONDPGTO         VARCHAR(1),
    TRA_SUGERE_TIPODOC          VARCHAR(1),
    TRA_SUGERE_DESCONTO         VARCHAR(1),
    TRA_SUGERE_DESCONTO_PRO     VARCHAR(1),
    TRA_SUGERE_DESCONTO_SER     VARCHAR(1),
    TRA_NRCASASDEC_PRECO_PRO    INTEGER,
    TRA_NRCASASDEC_PRECO_SER    INTEGER,
    TRA_INF_CUS                 VARCHAR(1),
    TRA_USUARIOS_TODOS          VARCHAR(1),
    TRA_DIME_PRO                INTEGER,
    TRA_DIME_SER                INTEGER,
    TRA_DIME_LRG                INTEGER,
    TRA_BOLETO                  VARCHAR(1),
    TRA_FIN                     VARCHAR(1),
    TRA_PRESER                  VARCHAR(1),
    TRA_CONT                    VARCHAR(1),
    TRA_IRRF_TEXTO              CHAR(30),
    TRA_IRRF_MIN                DOUBLE PRECISION,
    TRA_IRRF_ALIQ               DOUBLE PRECISION,
    TRA_INSS_TEXTO              CHAR(30),
    TRA_INSS_MIN                DOUBLE PRECISION,
    TRA_INSS_ALIQ               DOUBLE PRECISION,
    TRA_END                     VARCHAR(1),
    USE_CAD                     INTEGER,
    USE_ATU                     INTEGER,
    TRA_EXCLUI_PDV              INTEGER,
    TRA_IMP_HORA                VARCHAR(1),
    TRA_IMP_PRECO               VARCHAR(1),
    TRA_MOD_IMP                 VARCHAR(1),
    TRA_TIP_TODAS               VARCHAR(1),
    TRA_PORC_PRECO              DOUBLE PRECISION,
    TRA_ARRED_PORC_PRECO        DOUBLE PRECISION,
    TRA_IMPOSTO3_TEXTO          CHAR(30),
    TRA_IMPOSTO3_ALIQ           DOUBLE PRECISION,
    TRA_IMPOSTO4_TEXTO          CHAR(30),
    TRA_IMPOSTO4_ALIQ           DOUBLE PRECISION,
    TRA_IMPOSTO5_TEXTO          CHAR(30),
    TRA_IMPOSTO5_ALIQ           DOUBLE PRECISION,
    TRA_IMPOSTO6_TEXTO          CHAR(30),
    TRA_IMPOSTO6_ALIQ           DOUBLE PRECISION,
    TRA_USE_SET_CMP             VARCHAR(1),
    TRA_OBS                     BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    TRA_OBS1                    VARCHAR(15),
    TRA_OBS2                    VARCHAR(15),
    TRA_OBS3                    VARCHAR(15),
    TRA_OBS4                    VARCHAR(15),
    TRA_OBS1_CUP                VARCHAR(15),
    TRA_OBS2_CUP                VARCHAR(15),
    TRA_OBS3_CUP                VARCHAR(15),
    TRA_OBS4_CUP                VARCHAR(15),
    TRA_LAYOUT                  VARCHAR(5),
    TRA_LINK                    INTEGER,
    TRA_TIP_TRANSF              VARCHAR(1),
    TRA_VEI                     CHAR(1) DEFAULT "F",
    TRA_ARRED_PORC_PRECO_SER    DOUBLE PRECISION,
    TRA_MSG_SIT                 VARCHAR(2),
    TRA_MSG_CLA                 VARCHAR(2),
    TRA_NSERIE                  VARCHAR(2),
    TRA_OBS1_CUP_BLOB           VARCHAR(1),
    TRA_OBS2_CUP_BLOB           VARCHAR(1),
    TRA_OBS3_CUP_BLOB           VARCHAR(1),
    TRA_OBS4_CUP_BLOB           VARCHAR(1),
    TRA_IMP_ANTECIPADO          VARCHAR(1),
    TRA_TEXTO_ANTECIPADO        VARCHAR(20),
    TRA_IMP_WORD_ARQUIVO        VARCHAR(100),
    TRA_IMP_WORD                VARCHAR(1),
    TRA_PLA                     VARCHAR(1),
    TRA_PLA2                    VARCHAR(1),
    TRA_CCUST                   VARCHAR(1),
    TRA_CCUST2                  VARCHAR(1),
    TRA_PROJ                    VARCHAR(1),
    TRA_CTRL_TIPDOC_PEDIDO      VARCHAR(1),
    TRA_REDUC_ALT               VARCHAR(1),
    TRA_REDUC                   VARCHAR(1),
    TRA_AMBIENTE                VARCHAR(1),
    TRA_PRO_UNIDADE             VARCHAR(20),
    TRA_DIGITA_ICMS             VARCHAR(1),
    TRA_DIGITA_IPI              VARCHAR(1),
    TRA_SERIE_IGNORA_FILIAL     VARCHAR(1),
    TRA_NAO_IMP_VALOR_ZERADO    VARCHAR(1),
    TRA_DIGITA_TOTAL_LIQUIDO    VARCHAR(1),
    TRA_DIGITA_TOTAL_BRUTO      VARCHAR(1),
    TRA_USAR_NOME2              VARCHAR(1),
    TRA_SIMBOLO_MOEDA           VARCHAR(2),
    TRA_USA_MOTIVO_APROVACAO    VARCHAR(1),
    TRA_USA_MOTIVO_REPROVACAO   VARCHAR(1),
    TRA_DESCR                   VARCHAR(254),
    TRA_IMP_FOTO                VARCHAR(1),
    TRA_DAT_EMISSAO             VARCHAR(1),
    TRA_TRANSF_RELAC            INTEGER,
    TRA_MARCA_DAGUA             VARCHAR(200),
    TRA_EXCEDE_DESC_PRO         VARCHAR(1),
    TRA_IMPOSTO3_MIN            DOUBLE PRECISION,
    TRA_IMPOSTO4_MIN            DOUBLE PRECISION,
    TRA_IMPOSTO5_MIN            DOUBLE PRECISION,
    TRA_IMPOSTO6_MIN            DOUBLE PRECISION,
    TRA_TIP_RET                 VARCHAR(1),
    TRA_FRETE                   VARCHAR(1),
    TRA_DIGITA_AVULSO           VARCHAR(1),
    TRA_EXIGE_CPF               VARCHAR(1),
    TRA_IMP_COD_DESC            VARCHAR(1),
    TRA_IMP_PAGAMENTO           VARCHAR(1),
    TRA_OBS_BLOB                VARCHAR(1),
    TRA_SEROBS_BLOB             VARCHAR(1),
    TRA_USAR_SERIE              VARCHAR(1),
    TRA_PARC_BAIXA_PROPORC      VARCHAR(1),
    TRA_USA_COMPOSICAO_PRECO    VARCHAR(1),
    TRA_PRODFINAL               VARCHAR(1),
    TRA_PRODUSOINT              VARCHAR(1),
    TRA_SUB_TRIBUTA             VARCHAR(1),
    TRA_SUB_TRIBUTA_ALT         VARCHAR(1),
    TRA_RETEM_ISS               VARCHAR(1),
    TRA_ISS_SERVICO             VARCHAR(1),
    TRA_UNID_SERVICO            VARCHAR(1),
    TRA_CONTROLA_CREDITO        VARCHAR(1),
    TRA_DESP_ACESS_NO_TOTAL     VARCHAR(1),
    TRA_COMISSAO_VEN            VARCHAR(1),
    TRA_DIGITA_COMISSAO_VEN     VARCHAR(1),
    TRA_COMISSAO_REP            VARCHAR(1),
    TRA_DIGITA_COMISSAO_REP     VARCHAR(1),
    TRA_LEASING                 VARCHAR(1),
    TRA_USA_DESC_PARC           VARCHAR(1),
    TRA_PRA_ENT_UTIL            VARCHAR(1),
    TRA_PRA_RETIRADA_UTIL       VARCHAR(1),
    TRA_OUTROS_LANCAMENTOS      VARCHAR(1),
    TRA_FILTRO_USER             VARCHAR(1),
    TRA_ENTREGA_POR_ITEM        VARCHAR(1),
    TRA_ATUALIZAR_ORCAMENTO     VARCHAR(1),
    TRA_VALIDADE_ORCAMENTO      INTEGER,
    TRA_COPIAR_ITENS            INTEGER,
    TRA_OBS_PRO_AUTO            VARCHAR(1),
    TRA_MARGEM                  VARCHAR(1)
);

CREATE TABLE CDTRA2 (
    TRA_PGT  INTEGER,
    TRA_TRA  INTEGER,
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1)
);

CREATE TABLE CDTRA3 (
    TRA_FORM  INTEGER,
    TRA_TRA   INTEGER,
    TIP_FORM  VARCHAR(15),
    NOME      VARCHAR(30),
    DAT_CAD   TIMESTAMP,
    DAT_ATU   TIMESTAMP,
    ATIVO     VARCHAR(1)
);

CREATE TABLE CDTRA4 (
    TRA_TRA            INTEGER,
    TRA_USER           INTEGER,
    TRA_GRUPO_USUARIO  VARCHAR(1),
    DAT_CAD            TIMESTAMP,
    DAT_ATU            TIMESTAMP,
    ATIVO              VARCHAR(1)
);

CREATE TABLE CDTRA5 (
    TRA_TIP  INTEGER,
    TRA_TRA  INTEGER,
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1)
);

CREATE TABLE CDTRA6 (
    TRA6_COD  INTEGER NOT NULL,
    TRA6_TRA  INTEGER NOT NULL,
    TRA6_VAR  INTEGER NOT NULL,
    TRA6_ORD  INTEGER,
    TRA6_SEC  VARCHAR(30)
);

CREATE TABLE CDTRA7 (
    TRA7_TRA  INTEGER NOT NULL,
    TRA7_USE  INTEGER NOT NULL
);

CREATE TABLE CDTRAAPP (
    APP_TRA  INTEGER NOT NULL,
    APP_PDA  VARCHAR(1) DEFAULT 'F',
    APP_PCP  VARCHAR(1)
);

CREATE TABLE CDTRACAT (
    TRA_TRA     INTEGER,
    TRA_CATPRO  INTEGER
);

CREATE TABLE CDTRANFE (
    TRA_TRA              INTEGER NOT NULL,
    TRA_CODIGO_EAN       VARCHAR(3),
    TRA_CODIGO_EAN_TRIB  VARCHAR(3),
    TRA_USAR_CST_IPI     VARCHAR(1),
    TRA_USAR_CST_PIS     VARCHAR(1),
    TRA_USAR_CST_COFINS  VARCHAR(1),
    TRA_DEVOLUCAO        VARCHAR(1)
);

CREATE TABLE CDTRS (
    TRS_COD      INTEGER NOT NULL,
    TRS_NOM      VARCHAR(50),
    TRS_CID      VARCHAR(30),
    TRS_CGC      VARCHAR(19),
    TRS_IES      VARCHAR(15),
    TRS_LOG      VARCHAR(5),
    TRS_END      VARCHAR(50),
    TRS_NUM      VARCHAR(7),
    TRS_COP      VARCHAR(20),
    TRS_BAI      VARCHAR(20),
    TRS_CEP      VARCHAR(9),
    TRS_EST      VARCHAR(2),
    TRS_CON      VARCHAR(20),
    TRS_TE1      VARCHAR(15),
    TRS_RA1      VARCHAR(4),
    TRS_TE2      VARCHAR(15),
    TRS_RA2      VARCHAR(4),
    TRS_FAX      VARCHAR(14),
    TRS_RA3      VARCHAR(4),
    TRS_WWW      VARCHAR(50),
    TRS_EMA      VARCHAR(60),
    DAT_CAD      TIMESTAMP,
    DAT_ATU      TIMESTAMP,
    ATIVO        VARCHAR(1),
    TRS_FOTO     BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    TRS_FOTONOM  VARCHAR(50),
    TRS_FIS      VARCHAR(1),
    TRS_RED      VARCHAR(75),
    USE_CAD      INTEGER,
    USE_ATU      INTEGER,
    TRS_CODIGO   INTEGER,
    DAT_HOR_ATU  TIMESTAMP
);

CREATE TABLE CDTRSC (
    CON_COD          INTEGER,
    CON_NOM          VARCHAR(30),
    CON_OBS          VARCHAR(50),
    CON_TRS          INTEGER,
    CON_TEL          VARCHAR(18),
    CON_DAT          TIMESTAMP,
    CON_RAM          VARCHAR(10),
    DAT_CAD          TIMESTAMP,
    DAT_ATU          TIMESTAMP,
    ATIVO            VARCHAR(1),
    CON_ORDEM        INTEGER,
    CON_MALA_DIRETA  VARCHAR(1),
    CON_TEL_PRINC    VARCHAR(1)
);

CREATE TABLE CDUNIDADE (
    CODIGO                INTEGER,
    NOME                  VARCHAR(30),
    SIGLA                 VARCHAR(5),
    DAT_CAD               TIMESTAMP,
    DAT_ATU               TIMESTAMP,
    ATIVO                 VARCHAR(1),
    UNI_USA_DIM_NO_PRECO  VARCHAR(1)
);

CREATE TABLE CDUSEATU (
    ATU_USE  INTEGER NOT NULL,
    ATU_HOR  TIMESTAMP,
    ATU_DIR  VARCHAR(50),
    ATU_AUT  VARCHAR(1),
    ATU_ITV  VARCHAR(3),
    ATU_ULT  TIMESTAMP
);

CREATE TABLE CDUSEBAK (
    BAK_COD         INTEGER NOT NULL,
    BAK_USE         INTEGER NOT NULL,
    BAK_HOR         TIMESTAMP,
    BAK_DIR         VARCHAR(50),
    BAK_NUM         INTEGER,
    BAK_OPCAO       INTEGER,
    BAK_ENVIA_BASE  VARCHAR(1),
    BAK_NOM         VARCHAR(50),
    BAK_ITV         VARCHAR(3),
    BAK_ULT         TIMESTAMP,
    BAK_SENHA       VARCHAR(20),
    BAK_PROX        TIMESTAMP
);

CREATE TABLE CDUSEBAK2 (
    BAK2_BAK            INTEGER NOT NULL,
    BAK2_PASTA          VARCHAR(100) NOT NULL,
    BAK2_EXT_EXCLUIDAS  VARCHAR(100)
);

CREATE TABLE CDUSEDDD (
    USE_COD  INTEGER NOT NULL
);

CREATE TABLE CDUSER (
    USE_COD                 INTEGER NOT NULL,
    USE_NOM                 VARCHAR(30),
    EXCLUI                  VARCHAR(1),
    INCLUI                  VARCHAR(1),
    LANCONTACORR            VARCHAR(1),
    CONTASAPAGAR            VARCHAR(1),
    CONTASARECEBER          VARCHAR(1),
    RELAT_FINANCEIRO        VARCHAR(1),
    TAB_PRODUTO             VARCHAR(1),
    TAB_FINANCEIRO          VARCHAR(1),
    TAB_SERVICO             VARCHAR(1),
    TAB_OUTRAS              VARCHAR(1),
    TAB_TRANSACAO           VARCHAR(1),
    IMPRIMIR                VARCHAR(1),
    CONFUSUARIO             VARCHAR(1),
    USE_SIG                 VARCHAR(10),
    USE_FUN                 INTEGER,
    USE_ADMI                VARCHAR(1),
    USE_NIV                 INTEGER,
    ALTERADAT_CAD           VARCHAR(1),
    ALTERADAT_ATU           VARCHAR(1),
    TAB_CLIENTE             VARCHAR(1),
    TAB_FORNECEDOR          VARCHAR(1),
    TAB_CADFINANCEIRO       VARCHAR(1),
    TAB_CONFGERAIS          VARCHAR(1),
    DAT_CAD                 TIMESTAMP,
    DAT_ATU                 TIMESTAMP,
    ATIVO                   VARCHAR(1),
    USE_SEN                 VARCHAR(30),
    TAB_CONTATO             VARCHAR(1),
    TAB_REPRESENTANTE       VARCHAR(1),
    TAB_FUNCIONARIO         VARCHAR(1),
    TAB_TRANSPORTADORA      VARCHAR(1),
    MOD_FINANCEIRO          VARCHAR(1),
    MOD_PEDVENDA            VARCHAR(1),
    MOD_PEDCOMPRA           VARCHAR(1),
    MOD_FATURAMENTO         VARCHAR(1),
    MOD_MOVIMENTACAO        VARCHAR(1),
    MOD_ESTOQUE             VARCHAR(1),
    MOD_SAC                 VARCHAR(1),
    FIL_MOVIMENTOS          VARCHAR(1),
    FIL_TRANSFARQ           VARCHAR(1),
    FIL_RELATORIOS          VARCHAR(1),
    FIL_ESTOQUE             VARCHAR(1),
    FIL_ROTINACAIXA         VARCHAR(1),
    GRUPO_USUARIO           VARCHAR(1),
    GRUPO_COD               INTEGER,
    FIL_CONTASRECEBER       VARCHAR(1),
    ENVIA_REL_EMAIL         VARCHAR(1),
    ENVIA_BOL_EMAIL         VARCHAR(1),
    USE_BACKUP              VARCHAR(1),
    MOD_TELEMARK            VARCHAR(1),
    USE_TABCLI              VARCHAR(1),
    USE_TABFOR              VARCHAR(1),
    TAB_SAC                 VARCHAR(1),
    TAB_TELE                VARCHAR(1),
    TAB_TAR                 VARCHAR(1),
    TAB_IMPO                VARCHAR(1),
    TAB_FIL                 VARCHAR(1),
    TAB_END                 VARCHAR(1),
    MOD_AGE                 VARCHAR(1),
    MOD_PROJ                VARCHAR(1),
    MOD_ATU                 VARCHAR(1),
    MOD_TRANS               VARCHAR(1),
    MOD_OUTFIN              VARCHAR(1),
    AP_PGTO                 VARCHAR(1) DEFAULT "F",
    USE_CAD                 INTEGER,
    USE_ATU                 INTEGER,
    REL_MOVCAI              VARCHAR(1),
    REL_RESMOV              VARCHAR(1),
    REL_LISMOV              VARCHAR(1),
    REL_COMVEN              VARCHAR(1),
    REL_COMREP              VARCHAR(1),
    REL_TABPRE              VARCHAR(1),
    REL_IVEEST              VARCHAR(1),
    REL_DUREST              VARCHAR(1),
    REL_MARGEM              VARCHAR(1),
    REL_MOVEST              VARCHAR(1),
    REL_INVESF              VARCHAR(1),
    REL_MOVVENDAS           VARCHAR(1),
    REL_MOVCOMPRAS          VARCHAR(1),
    TAB_SETOR               VARCHAR(1),
    FIL_LOCEST              VARCHAR(1),
    USE_DOMINIOS            BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    USE_DOMLIBERADO         VARCHAR(1),
    USE_RELEMAIL            VARCHAR(1),
    TAB_VEICULO             VARCHAR(1),
    MOD_SERVI               VARCHAR(1),
    USE_CLI_VEN             VARCHAR(1),
    USE_CON_VEN             VARCHAR(1),
    CONF_EXPORTADOR         VARCHAR(1),
    P_CONFIGURA_FINANCEIRO  VARCHAR(1),
    P_CONFIGURA_MOVITENS    VARCHAR(1),
    REL_TRANSFERENCIAS      VARCHAR(1),
    REL_CONSIGNACAO         VARCHAR(1),
    REL_CLIENTE             VARCHAR(1),
    REL_FORNECEDOR          VARCHAR(1),
    REL_CONTATO             VARCHAR(1),
    REL_FUNCIONARIO         VARCHAR(1),
    REL_REPRESENTANTE       VARCHAR(1),
    REL_TRANSPORTADORA      VARCHAR(1),
    REL_BALANCETE           VARCHAR(1),
    REL_FLUXO_CAIXA         VARCHAR(1),
    REL_CONTA_CORRENTE      VARCHAR(1),
    REL_CONTAS_A_PAGAR      VARCHAR(1),
    REL_CONTAS_A_RECEBER    VARCHAR(1),
    REL_CHEQUES_RECIBOS     VARCHAR(1),
    TAB_CLIENTE_SL          VARCHAR(1),
    TAB_FORNECEDOR_SL       VARCHAR(1),
    TAB_PRODUTO_SL          VARCHAR(1),
    TAB_PRODUTO_FAT         VARCHAR(1),
    TAB_COND_PAGTO          VARCHAR(1),
    USE_CLI                 INTEGER,
    USE_MOBILE_CLIENTE      VARCHAR(1),
    USE_CRYPTO              VARCHAR(200),
    USE_SALT                VARCHAR(200),
    MOD_INVENTARIO_ESTOQUE  VARCHAR(1),
    LANCONTACORREXCLUIR     VARCHAR(1),
    CONTASAPAGAREXCLUIR     VARCHAR(1),
    CONTASARECEBEREXCLUIR   VARCHAR(1)
);

CREATE TABLE CDUSERAUT (
    USE_COD   INTEGER,
    USE_FLAG  VARCHAR(2),
    USE_USE   INTEGER
);

CREATE TABLE CDUSGRT (
    UGT_USE  INTEGER,
    UGT_GRT  INTEGER,
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    ATIVO    VARCHAR(1)
);

CREATE TABLE CDVEICULO (
    VEI_COD     INTEGER NOT NULL,
    VEI_MAR     VARCHAR(30),
    VEI_MOD     VARCHAR(30),
    DAT_FAB     INTEGER,
    VEI_PLA     VARCHAR(12),
    VEI_PRO     INTEGER,
    VEI_PROOLD  INTEGER,
    VEI_REN     VARCHAR(12),
    DAT_ATU     TIMESTAMP,
    DAT_CAD     TIMESTAMP,
    ATIVO       CHAR(1),
    USE_CAD     INTEGER,
    USE_ATU     INTEGER
);

CREATE TABLE CDVINCDOC (
    DOC_ALM  INTEGER NOT NULL,
    DOC_DOC  INTEGER NOT NULL,
    DOC_CON  INTEGER NOT NULL,
    USE_CAD  INTEGER,
    USE_ATU  INTEGER,
    DAT_CAD  TIMESTAMP,
    DAT_ATU  TIMESTAMP,
    DOC_CAR  INTEGER
);

CREATE TABLE CODIGO (
    TABELA        VARCHAR(30) NOT NULL,
    ULTIMOCODIGO  INTEGER
);

CREATE TABLE DIC01 (
    DIC_COD  INTEGER,
    DIC_NOM  VARCHAR(10),
    DIC_TIT  VARCHAR(30),
    DIC_NAV  VARCHAR(30),
    DIC_VIS  VARCHAR(1),
    DIC_ALT  VARCHAR(1)
);

CREATE TABLE DIC02 (
    DIC_FLAG    INTEGER,
    DIC_CAM     VARCHAR(25) NOT NULL,
    DIC_DES     VARCHAR(20) NOT NULL,
    DIC_VIS     VARCHAR(1),
    DIC_ATI     VARCHAR(1),
    DIC_ALT     VARCHAR(1),
    DIC_NOMSIS  VARCHAR(30)
);

CREATE TABLE DIC03 (
    REL_COD           INTEGER,
    REL_TABELA_PAI    VARCHAR(10) NOT NULL,
    REL_TABELA_FILHA  VARCHAR(10) NOT NULL,
    REL_CAMPO_PAI     VARCHAR(25) NOT NULL,
    REL_CAMPO_FILHA   VARCHAR(25) NOT NULL
);

CREATE TABLE ESTMVVD1 (
    VD1_ALM                       INTEGER,
    VD1_CAD                       TIMESTAMP,
    VD1_COD                       VARCHAR(13) NOT NULL,
    VD1_NOT                       INTEGER,
    VD1_TRA                       INTEGER,
    VD1_VEN                       INTEGER,
    VD1_CAI                       INTEGER,
    VD1_PGT                       INTEGER,
    VD1_DESC_P                    DOUBLE PRECISION,
    VD1_DESC_V                    DOUBLE PRECISION,
    VD1_ACRESC                    DOUBLE PRECISION,
    VD1_CLI                       INTEGER,
    VD1_REP                       INTEGER,
    VD1_TRANSF                    VARCHAR(1),
    VD1_FOR                       INTEGER,
    VD1_TRS                       INTEGER,
    VD1_ENT                       TIMESTAMP,
    VD1_VALOR_TOTALB              DOUBLE PRECISION,
    VD1_QUANTPECAS                INTEGER,
    VD1_VALOR_TOTALL              DOUBLE PRECISION,
    CLI_FIL                       INTEGER,
    VD1_CFOP                      INTEGER,
    VD1_VALOR_FRETE               DOUBLE PRECISION,
    VD1_FRETE_PORCONTA            VARCHAR(1),
    VD1_ORIGEM                    VARCHAR(3),
    VD1_TIPO_FORMULARIO           INTEGER,
    VD1_PEDIDO                    INTEGER,
    VD1_ESPECIE                   VARCHAR(20),
    VD1_MARCA                     VARCHAR(20),
    VD1_NUMERO                    VARCHAR(20),
    VD1_PESOBRUTO                 VARCHAR(20),
    VD1_PESOLIQUIDO               VARCHAR(20),
    VD1_PLACADOVEICULO            VARCHAR(20),
    VD1_UFDOVEICULO               VARCHAR(20),
    VD1_RETIRADA                  TIMESTAMP,
    VD1_BASE_ICMS                 DOUBLE PRECISION,
    VD1_VALOR_ICMS                DOUBLE PRECISION,
    VD1_CFOP_TRIBUTADO            VARCHAR(1),
    VD1_ISS                       DOUBLE PRECISION,
    VD1_COMP                      INTEGER,
    VD1_VALOR_SEGURO              DOUBLE PRECISION,
    VD1_OUTRAS_DESPESAS           DOUBLE PRECISION,
    VD1_CLI2                      INTEGER,
    VD1_GAR                       INTEGER,
    VD1_SIT                       INTEGER,
    VD1_VIS                       TIMESTAMP,
    VD1_HORA                      VARCHAR(7),
    VD1_IMO                       INTEGER,
    VD1_USER                      INTEGER,
    VD1_EQP                       INTEGER,
    VD1_SEU_NUMERO                VARCHAR(30),
    VD1_PAI                       VARCHAR(3),
    VD1_VALOR_IPI                 DOUBLE PRECISION,
    VD1_ATUALIZADO                INTEGER,
    VD1_FILHO                     VARCHAR(13),
    VD1_TOTALL_SERVICO            DOUBLE PRECISION,
    VD1_OBS                       BLOB SUB_TYPE 1 SEGMENT SIZE 4096,
    VD1_OBS2                      BLOB SUB_TYPE 1 SEGMENT SIZE 4096,
    VD1_OBS3                      BLOB SUB_TYPE 1 SEGMENT SIZE 4096,
    VD1_OBS4                      BLOB SUB_TYPE 1 SEGMENT SIZE 4096,
    VD1_TOTAL_NOTA_SEMDESCTO      DOUBLE PRECISION,
    VD1_QUANTIDADE                DOUBLE PRECISION,
    VD1_CANC                      VARCHAR(2),
    STATUS                        VARCHAR(20),
    VD1_TOTALB_PRODUTO            DOUBLE PRECISION,
    VD1_TOTALL_PRODUTO            DOUBLE PRECISION,
    VD1_TOTALB_SERVICO            DOUBLE PRECISION,
    VD1_QUANTSERVI                DOUBLE PRECISION,
    VD1_CLI_CONS_REV              VARCHAR(1),
    VD1_OBSD                      BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    VD1_CARA                      BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    VD1_PROC                      VARCHAR(30),
    VD1_PEDI                      VARCHAR(30),
    VD1_HORAF                     VARCHAR(7),
    VD1_PRESTSER                  INTEGER,
    VD1_GERNF                     VARCHAR(2),
    VD1_CONTATO                   VARCHAR(40),
    VD1_IRRF                      DOUBLE PRECISION,
    VD1_INSS                      DOUBLE PRECISION,
    VD1_ALM_TRANSF                INTEGER,
    VD1_PRESTADOR                 INTEGER,
    VD1_ECF                       VARCHAR(30),
    VD1_ALM_DIGITA                INTEGER,
    VD1_IMPOSTO3                  DOUBLE PRECISION,
    VD1_IMPOSTO4                  DOUBLE PRECISION,
    VD1_IMPOSTO5                  DOUBLE PRECISION,
    VD1_IMPOSTO6                  DOUBLE PRECISION,
    VD1_USE_SET_CMP               INTEGER,
    VD1_QTDFUN                    INTEGER,
    VD1_CONTRATO                  INTEGER,
    VD1_ATU                       TIMESTAMP,
    VD1_USER_CAD                  INTEGER,
    VD1_USER_ATU                  INTEGER,
    VD1_USE_CAD                   INTEGER,
    VD1_USE_ATU                   INTEGER,
    VD1_VEI                       INTEGER,
    VD1_OBS_APROV                 BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    VD1_DATSAI                    VARCHAR(10),
    VD1_HORSAI                    VARCHAR(10),
    VD1_CLI_ISS                   DOUBLE PRECISION,
    VD1_PLA                       VARCHAR(40),
    VD1_PLA2                      INTEGER,
    VD1_CCUST                     VARCHAR(40),
    VD1_CCUST2                    INTEGER,
    VD1_PROJ                      INTEGER,
    VD1_PROJ2                     INTEGER,
    VD1_ALM_ALTER                 INTEGER,
    VD1_DAT_EMISSAO               TIMESTAMP,
    VD1_TIPSERDDD                 INTEGER,
    VD1_CPF                       VARCHAR(19),
    VD1_VAL_SUB_TRIBUTA           DOUBLE PRECISION,
    VD1_BASE_SUB_TRIBUTA          DOUBLE PRECISION,
    VD1_VALOR_TOTALB_SUB_TRIBUTA  DOUBLE PRECISION,
    VD1_ALIQ_ICMS_SIMPLES         DOUBLE PRECISION,
    VD1_CREDITO_ICMS_SIMPLES      DOUBLE PRECISION,
    VD1_CREDITO_ICMS_BASE         DOUBLE PRECISION,
    VD1_VALB_SUB_TRIBUTA          DOUBLE PRECISION,
    VD1_BASEB_SUB_TRIBUTA         DOUBLE PRECISION,
    VD1_COMISSAO_VEN_PORC         DOUBLE PRECISION,
    VD1_COMISSAO_VEN_VALOR        DOUBLE PRECISION,
    VD1_COMISSAO_REP_PORC         DOUBLE PRECISION,
    VD1_COMISSAO_REP_VALOR        DOUBLE PRECISION,
    VD1_CLI_LEASING               INTEGER,
    VD1_DEDUCAO                   DOUBLE PRECISION,
    VD1_EXPORT_EMBARQ_UF          VARCHAR(2),
    VD1_EXPORT_EMBARQ_LOCAL       VARCHAR(30),
    VD1_SCAN                      VARCHAR(1),
    VD1_CLI_ISS_ALIQ              DOUBLE PRECISION,
    VD1_VIGENCIA_DDDRIN           TIMESTAMP,
    VD1_DATA_ENTRADA              TIMESTAMP,
    VD1_DATA_SAIDA                TIMESTAMP,
    VD1_RESPONSAVEL_DDDRIN        VARCHAR(100),
    VD1_OBSI                      BLOB SUB_TYPE 1 SEGMENT SIZE 1024,
    VD1_CHAVE_NF_DEVOLUCAO        VARCHAR(100)
);

CREATE TABLE ESTMVVD10 (
    VD10_COD  INTEGER,
    VD10_VD9  INTEGER,
    VD10_PRO  INTEGER,
    VD10_COR  VARCHAR(3),
    VD10_MED  VARCHAR(3),
    VD10_QTD  DOUBLE PRECISION,
    VD10_SER  INTEGER
);

CREATE TABLE ESTMVVD11 (
    VD11_COD   INTEGER NOT NULL,
    VD11_BOL   VARCHAR(13),
    VD11_CAD   TIMESTAMP,
    VD11_ALM   INTEGER,
    VD11_ITEM  INTEGER,
    VD11_ENT   INTEGER,
    VD11_TIP   VARCHAR(3)
);

CREATE TABLE ESTMVVD12 (
    VD12_COD  INTEGER NOT NULL,
    VD12_BOL  VARCHAR(13),
    VD12_CAD  TIMESTAMP,
    VD12_ATU  TIMESTAMP,
    VD12_ALM  INTEGER,
    VD12_MOT  INTEGER,
    VD12_OBS  BLOB SUB_TYPE 1 SEGMENT SIZE 80
);

CREATE TABLE ESTMVVD13 (
    VD13_BOL       VARCHAR(13) NOT NULL,
    VD13_VAR       INTEGER NOT NULL,
    VD13_DATA      TIMESTAMP,
    VD13_REAL      DOUBLE PRECISION,
    VD13_TEXTO     VARCHAR(100),
    DAT_CAD        TIMESTAMP,
    DAT_ATU        TIMESTAMP,
    ATIVO          VARCHAR(1),
    USE_CAD        INTEGER,
    USE_ATU        INTEGER,
    VD13_BLOB      BLOB SUB_TYPE 1 SEGMENT SIZE 1024,
    VD13_MULTIPLO  INTEGER
);

CREATE TABLE ESTMVVD14 (
    VD14_BOL   VARCHAR(13),
    VD14_ORI   VARCHAR(13),
    VD14_ITEM  INTEGER
);

CREATE TABLE ESTMVVD15 (
    VD15_COD    INTEGER,
    VD15_BOL    VARCHAR(13),
    VD15_DAT    TIMESTAMP,
    VD15_PROXC  TIMESTAMP,
    VD15_OBS    BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    VD15_USE    INTEGER,
    VD15_CONT   VARCHAR(100)
);

CREATE TABLE ESTMVVD16 (
    VD16_COD        INTEGER,
    VD16_ITEM       INTEGER,
    VD16_PRO        INTEGER,
    VD16_COR        VARCHAR(3),
    VD16_MED        VARCHAR(3),
    VD16_QTD        DOUBLE PRECISION,
    VD16_VLR        DOUBLE PRECISION,
    VD16_DESCRICAO  VARCHAR(255),
    VD16_BOL        VARCHAR(13),
    VD16_VD16       INTEGER
);

CREATE TABLE ESTMVVD17 (
    VD17_VD1   VARCHAR(13),
    VD17_FUN   INTEGER,
    VD17_PORC  DOUBLE PRECISION
);

CREATE TABLE ESTMVVD18 (
    VD18_VD1   VARCHAR(13),
    VD18_REP   INTEGER,
    VD18_PORC  DOUBLE PRECISION
);

CREATE TABLE ESTMVVD19 (
    VD19_COD            INTEGER NOT NULL,
    VD19_BOL            VARCHAR(13) NOT NULL,
    VD19_ITEM           INTEGER NOT NULL,
    VD19_NUM_DI         VARCHAR(30),
    VD19_DAT_DI         TIMESTAMP,
    VD19_LOCAL_DESEMBQ  VARCHAR(100),
    VD19_UF_DESEMBQ     VARCHAR(2),
    VD19_DATA_DESEMBQ   TIMESTAMP,
    VD19_EXPORTADOR     VARCHAR(100),
    VD19_II_BASE        DOUBLE PRECISION,
    VD19_II_DESP_ADU    DOUBLE PRECISION,
    VD19_II_VALOR       DOUBLE PRECISION,
    VD19_II_IOF         DOUBLE PRECISION
);

CREATE TABLE ESTMVVD2 (
    VD2_COD                 INTEGER,
    VD2_BOL                 VARCHAR(13),
    VD2_ALM                 INTEGER,
    VD2_CAD                 TIMESTAMP,
    VD2_PRO                 INTEGER,
    VD2_VLR                 DOUBLE PRECISION,
    VD2_QTD                 DOUBLE PRECISION,
    VD2_ENT                 VARCHAR(1),
    VD2_COR                 VARCHAR(3),
    VD2_MED                 VARCHAR(3),
    VD2_SER                 INTEGER,
    VD2_ITEM                INTEGER,
    VD2_ALIQUOTA_IPI        DOUBLE PRECISION,
    VD2_ALIQUOTA_ICMS       DOUBLE PRECISION,
    VD2_DESCRICAO           VARCHAR(255),
    VD2_ALIQUOTA_ISS        DOUBLE PRECISION,
    REDUCAOBASEICMS         DOUBLE PRECISION,
    DESCONTOITEM            DOUBLE PRECISION,
    UNIDADE                 INTEGER,
    CLASSIFICACAOFISCAL     INTEGER,
    VD2_MATERIA_APLICADA    DOUBLE PRECISION,
    VD2_SITUACAOTRIBUTARIA  INTEGER,
    VD2_FINALIDADE          INTEGER,
    VD2_TIPO                VARCHAR(1),
    VD2_OBS1                VARCHAR(100),
    VD2_OBS2                VARCHAR(100),
    VD2_OBS3                VARCHAR(100),
    VD2_OBS4                VARCHAR(100),
    VD2_UNM                 INTEGER,
    VD2_ALT                 DOUBLE PRECISION,
    VD2_CMP                 DOUBLE PRECISION,
    VD2_LRG                 DOUBLE PRECISION,
    VD2_GAR                 TIMESTAMP,
    VD2_NSERIE              VARCHAR(100),
    VD2_AMBIENTE            INTEGER,
    VD2_OBS_BLOB            BLOB SUB_TYPE 1 SEGMENT SIZE 4096,
    VD2_SUB_TRIBUTA         DOUBLE PRECISION,
    VD2_COMISSAO            DOUBLE PRECISION,
    VD2_CFOP                VARCHAR(20),
    VD2_SEPARADO            VARCHAR(1),
    VD2_SIT_PED             INTEGER,
    VD2_CSOSN               VARCHAR(10),
    VD2_DATA_ENTREGA        TIMESTAMP,
    VD2_ALIQ_IMPOSTOS       DOUBLE PRECISION,
    VD2_IPI_CST             INTEGER,
    VD2_PIS_CST             INTEGER,
    VD2_COFINS_CST          INTEGER,
    VD2_CALCULAR_ST         VARCHAR(1),
    VD2_SUB_TRIBUTA_RED     DOUBLE PRECISION
);

CREATE TABLE ESTMVVD20 (
    VD20_COD         INTEGER NOT NULL,
    VD20_VD19        INTEGER NOT NULL,
    VD20_NUM_ADICAO  INTEGER,
    VD20_NUM_SEQ     INTEGER,
    VD20_FABRICANTE  VARCHAR(100),
    VD20_DESC_DI     DOUBLE PRECISION
);

CREATE TABLE ESTMVVD3 (
    VD3_COD       INTEGER NOT NULL,
    VD3_ALM       INTEGER,
    VD3_CAD       TIMESTAMP,
    VD3_BOL       VARCHAR(13),
    VD3_PGT       INTEGER,
    VD3_DSV       DOUBLE PRECISION,
    VD3_DSP       DOUBLE PRECISION,
    VD3_VLRL      DOUBLE PRECISION,
    VD3_ITEM      INTEGER,
    VD3_DEST      VARCHAR(1),
    VD3_DESC_DUP  DOUBLE PRECISION
);

CREATE TABLE ESTMVVD4 (
    VD4_COD         INTEGER NOT NULL,
    VD4_ALM         INTEGER,
    VD4_CAD         TIMESTAMP,
    VD4_BOL         VARCHAR(13),
    VD4_VEC         TIMESTAMP,
    VD4_VAL         DOUBLE PRECISION,
    VD4_TIP         INTEGER,
    VD4_FINAN       INTEGER,
    VD4_ITEM        INTEGER,
    VD4_DOC         VARCHAR(20),
    VD4_BOLETO      VARCHAR(2),
    VD4_BANCO       INTEGER,
    VD4_AGENCIA     VARCHAR(6),
    VD4_CONTA       VARCHAR(12),
    VD4_NUM_DOC     VARCHAR(20),
    VD4_ANTECIPADO  VARCHAR(1),
    VD4_PAR         INTEGER
);

CREATE TABLE ESTMVVD5 (
    VD5_COD     INTEGER NOT NULL,
    VD5_BOL     VARCHAR(13),
    VD5_ENT     INTEGER,
    VD5_TIP     VARCHAR(3),
    VD5_NUM     VARCHAR(10),
    VD5_COP     VARCHAR(30),
    VD5_CEP     VARCHAR(9),
    VD5_END     VARCHAR(100),
    VD5_BAI     VARCHAR(30),
    VD5_CID     VARCHAR(30),
    VD5_EST     VARCHAR(2),
    VD5_REF     VARCHAR(60),
    VD5_ALM     INTEGER,
    VD5_CAD     TIMESTAMP,
    VD5_NOM     VARCHAR(60),
    VD5_CNP     VARCHAR(19),
    VD5_IES     VARCHAR(19),
    VD5_FIS     VARCHAR(1),
    VD5_TIPENT  VARCHAR(1),
    VD5_PAIS    VARCHAR(100),
    VD5_PROV    VARCHAR(100)
);

CREATE TABLE ESTMVVD6 (
    VD6_COD   INTEGER NOT NULL,
    VD6_BOL   VARCHAR(13),
    VD6_ITEM  INTEGER,
    VD6_SER   INTEGER,
    VD6_MAT   INTEGER,
    VD6_CAD   TIMESTAMP,
    VD6_ATU   TIMESTAMP,
    VD6_QTD   DOUBLE PRECISION,
    VD6_QTDG  DOUBLE PRECISION
);

CREATE TABLE ESTMVVD7 (
    VD7_COD  VARCHAR(13) NOT NULL,
    VD7_ALM  INTEGER,
    VD7_CAI  INTEGER,
    VD7_DAT  TIMESTAMP,
    VD7_MAQ  INTEGER,
    VD7_FEC  VARCHAR(1)
);

CREATE TABLE ESTMVVD8 (
    VD8_CODC     INTEGER NOT NULL,
    VD8_COD      VARCHAR(13),
    VD8_ALM      INTEGER,
    VD8_TIP      INTEGER,
    VD8_OPE      VARCHAR(2),
    VD8_VAL      DOUBLE PRECISION,
    VD8_HIS      VARCHAR(70),
    VD8_FUN_CAI  VARCHAR(1)
);

CREATE TABLE ESTMVVD9 (
    VD9_COD      INTEGER,
    VD9_ASC      VARCHAR(13),
    VD9_ASC_ALM  INTEGER,
    VD9_ASC_CAD  TIMESTAMP,
    VD9_BOL      VARCHAR(13),
    VD9_ALM      INTEGER,
    VD9_CAD      TIMESTAMP,
    VD9_ATU      TIMESTAMP
);

CREATE TABLE ESTVERIF (
    VD1_COD    INTEGER,
    VD1_ALM    INTEGER,
    VD1_CAD    TIMESTAMP,
    VD1_NOT    VARCHAR(6),
    VD4_VEC    TIMESTAMP,
    VD4_VAL    DOUBLE PRECISION,
    VD4_TIP    INTEGER,
    VD4_FINAN  INTEGER,
    VD4_DOC    VARCHAR(20)
);

CREATE TABLE HISTORI (
    HIS_COD       INTEGER,
    HIS_USER      VARCHAR(30),
    HIS_HORA      TIMESTAMP,
    HIS_DATA      TIMESTAMP,
    HIS_OPERACAO  VARCHAR(100),
    DAT_CAD       TIMESTAMP,
    DAT_ATU       TIMESTAMP,
    ATIVO         VARCHAR(1)
);

CREATE TABLE LOG_CONEXOES (
    LOG_ID       DOUBLE PRECISION NOT NULL,
    LOG_USR      VARCHAR(20),
    LOG_DIA      INTEGER,
    LOG_MES      INTEGER,
    LOG_ANO      INTEGER,
    PICO         INTEGER,
    LOG_IN       TIMESTAMP,
    LOG_OUT      TIMESTAMP,
    ATIVO        CHAR(1),
    LOG_IP       VARCHAR(30),
    LOG_MAQUINA  VARCHAR(50)
);

CREATE TABLE LOGTRANSFWEB (
    LOG_CLI       INTEGER,
    LOG_IP        VARCHAR(24),
    LOG_VER       VARCHAR(24),
    LOG_IPE       VARCHAR(24),
    LOG_WUS       VARCHAR(24),
    LOG_NOM       VARCHAR(40),
    LOG_IN        TIMESTAMP,
    LOG_OUT       TIMESTAMP,
    LOG_DB        VARCHAR(30),
    LOG_TEMPO     INTEGER,
    LOG_PATH      VARCHAR(500),
    LOG_PICO      INTEGER,
    LOG_DAT_PICO  TIMESTAMP
);

CREATE TABLE MEGA (
    CONCURSO     BIGINT NOT NULL,
    DATA         TIMESTAMP,
    PRIMEIRADEZ  INTEGER,
    SEGUNDADEZ   INTEGER,
    TERCEIRADEZ  INTEGER,
    QUARTADEZ    INTEGER,
    QUINTADEZ    INTEGER,
    SEXTADEZ     INTEGER,
    GANHADOR     INTEGER,
    PREMIO       FLOAT
);

CREATE TABLE MEGA2 (
    CONCURSO  BIGINT NOT NULL,
    NUMERO    INTEGER,
    DEZENA    INTEGER
);

CREATE TABLE MODULOS (
    N_MODULO    VARCHAR(30),
    N_ACESSOP   INTEGER,
    N_ACESSOF   INTEGER,
    N_VALIDADE  TIMESTAMP,
    N_USERS     INTEGER,
    N_ATIVO     VARCHAR(1)
);

CREATE TABLE MORLGE (
    LGE_COD          INTEGER,
    LGE_CON          INTEGER,
    LGE_PLA          VARCHAR(40),
    LGE_VAL          DOUBLE PRECISION,
    LGE_DOC          VARCHAR(12),
    LGE_TIT          VARCHAR(8),
    LGE_OPE          TIMESTAMP,
    LGE_EMI          TIMESTAMP,
    LGE_TIP          VARCHAR(1),
    LGE_CCO          VARCHAR(1),
    LGE_SAL          DOUBLE PRECISION,
    LGE_CAD          TIMESTAMP,
    LGE_CCUSTO       VARCHAR(40),
    LGE_HIS          VARCHAR(60),
    LGE_TRA          INTEGER,
    LGE_TRA1         VARCHAR(1),
    LGE_CLI          INTEGER,
    LGE_FOR          INTEGER,
    LGE_PROJ2        INTEGER,
    LGE_PLA2         INTEGER,
    LGE_CCUSTO2      INTEGER,
    LGE_CLI_VINC     INTEGER,
    LGE_FOR_VINC     INTEGER,
    LGE_VEC          TIMESTAMP,
    LGE_MOE          INTEGER,
    LGE_DFP          VARCHAR(1),
    LGE_OBS          VARCHAR(60),
    LGE_CAR          INTEGER,
    LGE_VD1COD       VARCHAR(13),
    LGE_COBRAVEL     VARCHAR(1),
    LGE_BAI          VARCHAR(1),
    LGE_NOSSONUMERO  DOUBLE PRECISION,
    LGE_VOG          TIMESTAMP,
    LGE_NBOR         INTEGER,
    LGE_TIP2         INTEGER,
    LGE_ALM          INTEGER,
    LGE_RECPAG       INTEGER,
    LGE_TOT          VARCHAR(1),
    LGE_RECB_PGT     TIMESTAMP,
    LGE_CART         VARCHAR(1),
    LGE_OBS_BLOB     BLOB SUB_TYPE 1 SEGMENT SIZE 1024
);

CREATE TABLE MORLGED (
    DOB_COD          INTEGER,
    DOB_PLA          VARCHAR(40),
    DOB_VAL          DOUBLE PRECISION,
    DOB_FLAG         INTEGER,
    DOB_CON          INTEGER,
    DOB_OPE          TIMESTAMP,
    DOB_EMI          TIMESTAMP,
    DOB_CAD          TIMESTAMP,
    DOB_DOC          VARCHAR(12),
    DOB_CCUSTO       VARCHAR(40),
    DOB_HIS          VARCHAR(60),
    DOB_CLI          INTEGER,
    DOB_FOR          INTEGER,
    DOB_PROJ2        INTEGER,
    DOB_PLA2         INTEGER,
    DOB_CCUSTO2      INTEGER,
    DOB_CLI_VINC     INTEGER,
    DOB_FOR_VINC     INTEGER,
    DOB_TIP2         INTEGER,
    DOB_ALM          INTEGER,
    DOB_VEC          TIMESTAMP,
    DOB_MOE          INTEGER,
    DOB_DFP          VARCHAR(1),
    DOB_OBS          VARCHAR(60),
    DOB_CAR          INTEGER,
    DOB_VD1COD       VARCHAR(13),
    DOB_COBRAVEL     VARCHAR(1),
    DOB_BAI          VARCHAR(1),
    DOB_NOSSONUMERO  DOUBLE PRECISION,
    DOB_VOG          TIMESTAMP,
    DOB_NBOR         INTEGER,
    DOB_RECPAG       INTEGER,
    DOB_RECB_PGT     TIMESTAMP,
    DOB_CART         VARCHAR(1),
    DOB_DOB          INTEGER,
    DOB_TOT          VARCHAR(1),
    DOB_OBS_BLOB     BLOB SUB_TYPE 1 SEGMENT SIZE 1024
);

CREATE TABLE MVAVISOS (
    AVI_USE  INTEGER NOT NULL,
    AVI_TIT  VARCHAR(30),
    AVI_DES  VARCHAR(50),
    AVI_CLA  VARCHAR(30),
    AVI_ADI  VARCHAR(10)
);

CREATE TABLE MVCAT (
    CAT_COD    INTEGER NOT NULL,
    CAT_CLI    INTEGER,
    CAT_FUN    INTEGER,
    CAT_TIP    VARCHAR(1),
    CAT_DAT    TIMESTAMP,
    CAT_REG    VARCHAR(20),
    CAT_DACI   TIMESTAMP,
    CAT_HACI   TIMESTAMP,
    CAT_AFA    VARCHAR(20),
    CAT_REGPM  VARCHAR(20),
    CAT_LOCAL  VARCHAR(50),
    CAT_MUN    VARCHAR(20),
    CAT_UF     VARCHAR(2),
    CAT_CORPO  VARCHAR(20),
    CAT_AGC    VARCHAR(20),
    CAT_SITG   VARCHAR(20),
    CAT_OBITO  TIMESTAMP,
    CAT_CID    VARCHAR(20),
    CAT_DESC   BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    DAT_CAD    TIMESTAMP,
    DAT_ATU    TIMESTAMP,
    ATIVO      VARCHAR(1),
    USE_CAD    INTEGER,
    USE_ATU    INTEGER
);

CREATE TABLE MVCOM1 (
    COM1_COD   INTEGER NOT NULL,
    COM1_REQ   INTEGER,
    COM1_COT   INTEGER,
    COM1_SET3  INTEGER NOT NULL,
    COM1_PROJ  INTEGER,
    COM1_STA   INTEGER,
    COM1_OBS   BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    DAT_CAD    TIMESTAMP,
    DAT_ATU    TIMESTAMP
);

CREATE TABLE MVCOM10 (
    COM10_COD  INTEGER NOT NULL,
    COM10_TXT  BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    DAT_CAD    TIMESTAMP,
    DAT_ATU    TIMESTAMP,
    USE_CAD    INTEGER,
    USE_ATU    INTEGER,
    ATIVO      VARCHAR(1),
    COM10_NOM  VARCHAR(50)
);

CREATE TABLE MVCOM2 (
    COM2_COD        INTEGER NOT NULL,
    COM2_COM1       INTEGER,
    COM2_TIPO       INTEGER,
    COM2_COD_PRO    INTEGER,
    COM2_DESC_PRO   VARCHAR(80),
    COM2_COD_SERV   INTEGER,
    COM2_DESC_SERV  VARCHAR(80),
    COM2_QTD        DOUBLE PRECISION,
    COM2_SIT        INTEGER,
    COM2_OBS        BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    COM2_COM8       INTEGER,
    COM2_UNI        VARCHAR(5)
);

CREATE TABLE MVCOM3 (
    COM3_COM2  INTEGER NOT NULL,
    COM3_SET2  INTEGER NOT NULL,
    COM3_DAT   TIMESTAMP
);

CREATE TABLE MVCOM4 (
    COM4_COD     INTEGER NOT NULL,
    COM4_COM8    INTEGER NOT NULL,
    COM4_FOR     INTEGER,
    COM4_FORNOM  VARCHAR(75),
    COM4_CONT    VARCHAR(75),
    COM4_NUMCOT  VARCHAR(20)
);

CREATE TABLE MVCOM5 (
    COM5_COD      INTEGER NOT NULL,
    COM5_COM4     INTEGER NOT NULL,
    COM5_NOM      VARCHAR(50),
    COM5_JUROS    DOUBLE PRECISION,
    COM5_FAT_MIN  DOUBLE PRECISION,
    COM5_PGT      INTEGER
);

CREATE TABLE MVCOM6 (
    COM6_COM9  INTEGER NOT NULL,
    COM6_SET3  INTEGER NOT NULL,
    COM6_DAT   TIMESTAMP,
    COM6_COM5  INTEGER
);

CREATE TABLE MVCOM7 (
    COM7_COM2  INTEGER NOT NULL,
    COM7_AVAL  INTEGER,
    COM7_OBS   BLOB SUB_TYPE 1 SEGMENT SIZE 80
);

CREATE TABLE MVCOM8 (
    COM8_COD       INTEGER NOT NULL,
    COM8_COT       INTEGER,
    COM8_SET3      INTEGER NOT NULL,
    COM8_STA       INTEGER,
    DAT_CAD        TIMESTAMP,
    DAT_ATU        TIMESTAMP,
    COM8_NOM       VARCHAR(100),
    COM8_SET3_ATU  INTEGER,
    COM8_SOLICITA  INTEGER,
    COM8_OBS_FOR   BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    COM8_OBS_OFC   BLOB SUB_TYPE 1 SEGMENT SIZE 80
);

CREATE TABLE MVCOM9 (
    COM9_COD      INTEGER NOT NULL,
    COM9_COM4     INTEGER NOT NULL,
    COM9_COM2     INTEGER NOT NULL,
    COM9_VAL      DOUBLE PRECISION NOT NULL,
    COM9_ENTREGA  VARCHAR(100),
    COM9_OBS      BLOB SUB_TYPE 1 SEGMENT SIZE 2048
);

CREATE TABLE MVCONTEST1 (
    CON_COD             INTEGER,
    CON_ALM             INTEGER,
    CON_DAT             TIMESTAMP,
    CON_SET             INTEGER,
    CON_NUM             INTEGER,
    CON_FLAG            VARCHAR(1),
    CON_ATU             TIMESTAMP,
    CON_COD_SEM_FILIAL  COMPUTED BY ((cast((con_cod / 1000) as integer)))
);

CREATE TABLE MVCONTEST2 (
    CON_COD  INTEGER,
    CON_CON  INTEGER,
    CON_PRO  INTEGER,
    CON_COR  VARCHAR(3),
    CON_MED  VARCHAR(3),
    CON_QTD  DOUBLE PRECISION,
    CON_OBS  VARCHAR(100),
    CON_ORD  VARCHAR(20)
);

CREATE TABLE MVCONTEST3 (
    CON_CON  INTEGER,
    CON_USE  INTEGER
);

CREATE TABLE MVCONTRA (
    CON_COD        INTEGER NOT NULL,
    CON_ENT        INTEGER NOT NULL,
    CON_TIP_ENT    VARCHAR(3),
    CON_DAT        TIMESTAMP,
    CON_DATINI     TIMESTAMP,
    CON_DATFIM     TIMESTAMP,
    CON_RENOVA     VARCHAR(1),
    CON_VAL        DOUBLE PRECISION,
    CON_FREQ_COB   VARCHAR(3),
    CON_PARC       INTEGER,
    CON_INDICE     INTEGER,
    CON_FREQ_REAJ  VARCHAR(3),
    CON_STATUS     VARCHAR(2),
    CON_PGT        INTEGER,
    CON_VEN        INTEGER,
    CON_REP        INTEGER,
    DAT_CAD        TIMESTAMP,
    DAT_ATU        TIMESTAMP,
    USER_CAD       INTEGER,
    USER_ATU       INTEGER,
    ATIVO          VARCHAR(1),
    CON_USA_PGT    VARCHAR(1),
    CON_DUR        INTEGER,
    CON_DURP       VARCHAR(1),
    CON_NRO        VARCHAR(20),
    CON_SEQ        INTEGER
);

CREATE TABLE MVCONTRA2 (
    CON2_COD       INTEGER NOT NULL,
    CON2_CON       INTEGER,
    CON2_RENOVA    VARCHAR(1),
    CON2_VAL       DOUBLE PRECISION,
    CON2_FREQ_COB  VARCHAR(3),
    CON2_PARC      INTEGER,
    CON2_FRE_REAJ  VARCHAR(3),
    CON2_OBS       BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    CON2_FRE_APL   VARCHAR(3),
    CON2_PGT       INTEGER,
    CON2_SER       INTEGER,
    CON2_QTD       INTEGER,
    CON2_INDICE    INTEGER
);

CREATE TABLE MVCONTRA3 (
    CON3_COD       INTEGER NOT NULL,
    CON3_CON       INTEGER,
    CON3_PGT       INTEGER,
    CON3_SER       INTEGER,
    CON3_VAL       DOUBLE PRECISION,
    CON3_RENOVA    VARCHAR(1),
    CON3_INDICE    INTEGER,
    CON3_FREQ_COB  VARCHAR(3),
    CON3_FRE_REAJ  VARCHAR(3)
);

CREATE TABLE MVCONTRA4 (
    CON4_COD  INTEGER NOT NULL,
    CON4_CON  INTEGER,
    CON4_CAD  TIMESTAMP,
    CON4_VEC  TIMESTAMP,
    CON4_VAL  DOUBLE PRECISION,
    CON4_PGT  INTEGER,
    CON4_DOC  VARCHAR(20),
    CON4_SER  INTEGER
);

CREATE TABLE MVCONTRA5 (
    CON5_COD   INTEGER NOT NULL,
    CON5_CON   INTEGER,
    CON5_PROJ  INTEGER
);

CREATE TABLE MVCOPAG (
    PAG_COD       INTEGER NOT NULL,
    PAG_FOR       INTEGER,
    PAG_DOC       VARCHAR(12),
    PAG_DAT       TIMESTAMP,
    PAG_TIP       INTEGER,
    PAG_VEC       TIMESTAMP,
    PAG_EMI       TIMESTAMP,
    PAG_VAL       DOUBLE PRECISION,
    PAG_MOE       INTEGER,
    PAG_DFP       VARCHAR(1),
    PAG_PLA       VARCHAR(40),
    PAG_CON       INTEGER,
    PAG_BAI       VARCHAR(1),
    PAG_CCUSTO    VARCHAR(40),
    PAG_TOT       VARCHAR(1),
    PAG_DESAGIO   VARCHAR(1),
    PAG_CHEQUE    INTEGER,
    DAT_CAD       TIMESTAMP,
    DAT_ATU       TIMESTAMP,
    ATIVO         VARCHAR(1),
    PAG_VD1COD    VARCHAR(13),
    PAG_OBS       VARCHAR(60),
    PAG_ORI       INTEGER,
    PAG_BAIVER    VARCHAR(1),
    PAG_VOG       TIMESTAMP,
    PAG_PROJ2     INTEGER,
    PAG_PLA2      INTEGER,
    PAG_CCUSTO2   INTEGER,
    PAG_CLI_VINC  INTEGER,
    PAG_OBS1      BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    PAG_CAR       INTEGER,
    PAG_BAR       VARCHAR(60)
);

CREATE TABLE MVCOPAGB (
    BAI_COD       INTEGER,
    BAI_DOC       VARCHAR(12),
    BAI_CCUSTO    VARCHAR(40),
    BAI_VEC       TIMESTAMP,
    BAI_EMI       TIMESTAMP,
    BAI_VAL       DOUBLE PRECISION,
    BAI_MOE       INTEGER,
    BAI_DFP       VARCHAR(1),
    BAI_EMP       INTEGER,
    BAI_DAT       TIMESTAMP,
    BAI_CON       INTEGER,
    BAI_PGT       TIMESTAMP,
    BAI_CAR       VARCHAR(1),
    BAI_ACR       DOUBLE PRECISION,
    BAI_DES       DOUBLE PRECISION,
    BAI_TOT       VARCHAR(1),
    BAI_PLA       VARCHAR(40),
    BAI_FOR       INTEGER,
    LGE_COD       INTEGER,
    PAG_COD       INTEGER,
    BAI_TIP       INTEGER,
    BAI_CHEQUE    INTEGER,
    DAT_CAD       TIMESTAMP,
    DAT_ATU       TIMESTAMP,
    ATIVO         VARCHAR(1),
    BAI_OPE       TIMESTAMP,
    BAI_OBS       VARCHAR(60),
    LGED_COD      INTEGER,
    BAI_HIS       VARCHAR(60),
    BAI_PROJ2     INTEGER,
    BAI_PLA2      INTEGER,
    BAI_CCUSTO2   INTEGER,
    BAI_CLI_VINC  INTEGER
);

CREATE TABLE MVCOREC (
    REC_COD           INTEGER NOT NULL,
    REC_DOC           VARCHAR(12),
    REC_CCUSTO        VARCHAR(40),
    REC_DAT           TIMESTAMP,
    REC_TIP           INTEGER,
    REC_VEC           TIMESTAMP,
    REC_VAL           DOUBLE PRECISION,
    REC_MOE           INTEGER,
    REC_COB           VARCHAR(1),
    REC_CON           INTEGER,
    REC_CLI           INTEGER,
    REC_CAR           INTEGER,
    REC_EMI           TIMESTAMP,
    REC_BAI           VARCHAR(1),
    REC_TOT           VARCHAR(1),
    REC_EMINOM        VARCHAR(30),
    REC_EMICPF        VARCHAR(15),
    REC_EMIRG         VARCHAR(15),
    REC_EMITEL        VARCHAR(15),
    REC_DFP           VARCHAR(1),
    REC_BOR           VARCHAR(1),
    CLI_FIL           INTEGER,
    REC_COBRAVEL      VARCHAR(1),
    REC_PLA           VARCHAR(40),
    REC_DESAGIO       VARCHAR(1),
    DAT_CAD           TIMESTAMP,
    DAT_ATU           TIMESTAMP,
    ATIVO             VARCHAR(1),
    REC_NOSSONUMERO   DOUBLE PRECISION DEFAULT 0,
    REC_VD1COD        VARCHAR(13),
    REC_OBS           VARCHAR(60),
    REC_ORI           INTEGER,
    REC_BAIFIL        VARCHAR(1),
    REC_BAIVER        VARCHAR(1),
    REC_REC           TIMESTAMP,
    REC_VOG           TIMESTAMP,
    REC_JBOR          FLOAT,
    REC_NBOR          INTEGER,
    REC_DTBOR         TIMESTAMP,
    REC_PROJ2         INTEGER,
    REC_PLA2          INTEGER,
    REC_CCUSTO2       INTEGER,
    REC_FOR_VINC      INTEGER,
    REC_OBS1          BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    REC_SIT_BOL       VARCHAR(20),
    REC_DESD          VARCHAR(1),
    REC_COD_ORIGINAL  INTEGER
);

CREATE TABLE MVCORECB (
    BAI_COD          INTEGER,
    BAI_DOC          VARCHAR(12),
    BAI_CCUSTO       VARCHAR(40),
    BAI_PLA          VARCHAR(40),
    BAI_DAT          TIMESTAMP,
    BAI_TIP          INTEGER,
    BAI_VEC          TIMESTAMP,
    BAI_VAL          DOUBLE PRECISION,
    BAI_MOE          INTEGER,
    BAI_DFP          VARCHAR(1),
    BAI_CON          INTEGER,
    BAI_CLI          INTEGER,
    BAI_EMI          TIMESTAMP,
    BAI_PGT          TIMESTAMP,
    BAI_CART         VARCHAR(1),
    BAI_ACR          DOUBLE PRECISION,
    BAI_DES          DOUBLE PRECISION,
    BAI_TOT          VARCHAR(1),
    LGE_COD          INTEGER,
    REC_COD          INTEGER,
    BAI_CAR          INTEGER,
    CLI_FIL          INTEGER,
    BAI_EMP          INTEGER,
    REC_EMINOM       VARCHAR(30),
    REC_EMICPF       VARCHAR(15),
    REC_EMIRG        VARCHAR(15),
    REC_EMITEL       VARCHAR(15),
    REC_COBRAVEL     VARCHAR(1),
    DAT_CAD          TIMESTAMP,
    DAT_ATU          TIMESTAMP,
    ATIVO            VARCHAR(1),
    BAI_OPE          TIMESTAMP,
    BAI_OBS          VARCHAR(60),
    LGED_COD         INTEGER,
    BAI_HIS          VARCHAR(60),
    BAI_ORI          INTEGER,
    BAI_VD1COD       VARCHAR(13),
    BAI_NOSSONUMERO  INTEGER,
    BAI_PROJ2        INTEGER,
    BAI_PLA2         INTEGER,
    BAI_CCUSTO2      INTEGER,
    BAI_FOR_VINC     INTEGER
);

CREATE TABLE MVCORECD (
    DOB_COD          INTEGER NOT NULL,
    DOB_REC          INTEGER,
    DOB_DOC          VARCHAR(12),
    DOB_CCUSTO       VARCHAR(40),
    DOB_DAT          TIMESTAMP,
    DOB_TIP          INTEGER,
    DOB_VEC          TIMESTAMP,
    DOB_VAL          DOUBLE PRECISION,
    DOB_MOE          INTEGER,
    DOB_COB          VARCHAR(1),
    DOB_CON          INTEGER,
    DOB_CLI          INTEGER,
    DOB_CAR          INTEGER,
    DOB_EMI          TIMESTAMP,
    DOB_BAI          VARCHAR(1),
    DOB_TOT          VARCHAR(1),
    DOB_EMINOM       VARCHAR(30),
    DOB_EMICPF       VARCHAR(15),
    DOB_EMIRG        VARCHAR(15),
    DOB_EMITEL       VARCHAR(15),
    DOB_DFP          VARCHAR(1),
    DOB_BOR          VARCHAR(1),
    CLI_FIL          INTEGER,
    DOB_COBRAVEL     VARCHAR(1),
    DOB_PLA          VARCHAR(40),
    DOB_DESAGIO      VARCHAR(1),
    DAT_CAD          TIMESTAMP,
    DAT_ATU          TIMESTAMP,
    ATIVO            VARCHAR(1),
    DOB_NOSSONUMERO  DOUBLE PRECISION DEFAULT 0,
    DOB_VD1COD       VARCHAR(13),
    DOB_OBS          VARCHAR(60),
    DOB_ORI          INTEGER,
    DOB_BAIFIL       VARCHAR(1),
    DOB_BAIVER       VARCHAR(1),
    DOB_REC_DAT      TIMESTAMP,
    DOB_VOG          TIMESTAMP,
    DOB_JBOR         FLOAT,
    DOB_NBOR         INTEGER,
    DOB_DTBOR        TIMESTAMP,
    DOB_PROJ2        INTEGER,
    DOB_PLA2         INTEGER,
    DOB_CCUSTO2      INTEGER,
    DOB_FOR_VINC     INTEGER,
    DOB_OBS1         BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    DOB_SIT_BOL      VARCHAR(20),
    DOB_COD_ANT      INTEGER
);

CREATE TABLE MVDOC (
    DOC_COD   INTEGER,
    DOC_NOM   VARCHAR(50),
    DOC_MEMO  BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    DOC_FUN   INTEGER,
    DAT_CAD   TIMESTAMP,
    DAT_ATU   TIMESTAMP,
    ATIVO     VARCHAR(1),
    USE_CAD   INTEGER,
    USE_ATU   INTEGER,
    DOC_PUB   VARCHAR(1)
);

CREATE TABLE MVEMAILMARKETING (
    EMA_COD        INTEGER NOT NULL,
    EMA_DESCRICAO  VARCHAR(50),
    EMA_STATUS     VARCHAR(3),
    EMA_DAT        TIMESTAMP,
    EMA_ENVIO      TIMESTAMP,
    DAT_CAD        TIMESTAMP,
    DAT_ATU        TIMESTAMP,
    ATIVO          VARCHAR(1),
    USE_CAD        INTEGER,
    USE_ATU        INTEGER
);

CREATE TABLE MVEMAILMARKETING2 (
    EMA2_COD               INTEGER NOT NULL,
    EMA_COD                INTEGER NOT NULL,
    EMA2_EMAIL             VARCHAR(100),
    EMA2_STATUS            VARCHAR(3),
    EMA2_OBS               VARCHAR(100),
    EMA2_ENTIDADE          INTEGER,
    EMA2_TIP_ENT           VARCHAR(3),
    EMA2_STATUS_DESCRICAO  VARCHAR(50),
    EMA2_NOVO_EMAIL        VARCHAR(100)
);

CREATE TABLE MVEST (
    EST_ALM   INTEGER,
    EST_PRO   INTEGER,
    EST_COR   VARCHAR(3),
    EST_TAM   VARCHAR(3),
    EST_SAL   DOUBLE PRECISION,
    EST_VEN   DOUBLE PRECISION,
    EST_COM   DOUBLE PRECISION,
    EST_DAT   TIMESTAMP,
    EST_UCUS  DOUBLE PRECISION,
    EST_CMED  DOUBLE PRECISION
);

CREATE TABLE MVESTDAT (
    EST_ALM   INTEGER,
    EST_PRO   INTEGER,
    EST_COR   VARCHAR(3),
    EST_TAM   VARCHAR(3),
    EST_SAL   DOUBLE PRECISION,
    EST_VEN   DOUBLE PRECISION,
    EST_COM   DOUBLE PRECISION,
    EST_DAT   TIMESTAMP,
    EST_UCUS  DOUBLE PRECISION,
    EST_CMED  DOUBLE PRECISION
);

CREATE TABLE MVESTHIS (
    MEH_ANT  DOUBLE PRECISION,
    MEH_POS  DOUBLE PRECISION,
    MEH_DIF  DOUBLE PRECISION,
    MEH_DAT  TIMESTAMP
);

CREATE TABLE MVEXAMAUDIO (
    EXA_COD    INTEGER NOT NULL,
    EXA_CLI    INTEGER,
    EXA_FUN    INTEGER,
    EXA_CRED   INTEGER,
    EXA_NUM    INTEGER,
    EXA_NREC   INTEGER,
    EXA_TIP    VARCHAR(3),
    EXA_COND   VARCHAR(3),
    EXA_ATEND  TIMESTAMP,
    EXA_REM    VARCHAR(1),
    EXA_OBS    BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    EXA_STS    VARCHAR(1),
    EXA_AMB    INTEGER,
    EXA_TIPO   VARCHAR(1),
    EXA_DEXA   TIMESTAMP,
    EXA_DRET   TIMESTAMP,
    EXA_AVA    VARCHAR(3),
    EXA_FONO   INTEGER,
    DAT_CAD    TIMESTAMP,
    DAT_ATU    TIMESTAMP,
    ATIVO      VARCHAR(1),
    USE_CAD    INTEGER,
    USE_ATU    INTEGER
);

CREATE TABLE MVLANCEXA (
    LAN_COD         INTEGER NOT NULL,
    LAN_EMP         INTEGER,
    LAN_FUN         INTEGER,
    LAN_NUM         INTEGER,
    LAN_NREC        INTEGER,
    LAN_TIP         VARCHAR(3),
    LAN_COND        VARCHAR(3),
    LAN_ATEND       TIMESTAMP,
    LAN_FECHA       TIMESTAMP,
    LAN_OBS         BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    DAT_CAD         TIMESTAMP,
    DAT_ATU         TIMESTAMP,
    ATIVO           VARCHAR(1),
    USE_CAD         INTEGER,
    USE_ATU         INTEGER,
    LAN_PART        VARCHAR(90),
    LAN_USER_APROV  INTEGER,
    LAN_DAT_APROV   TIMESTAMP,
    LAN_APTO_ALT    VARCHAR(1),
    LAN_ENTRADA     TIMESTAMP,
    LAN_SAIDA       TIMESTAMP
);

CREATE TABLE MVLANCEXA2 (
    LAN2_COD      INTEGER NOT NULL,
    LAN2_LAN      INTEGER,
    LAN2_AMB      INTEGER,
    LAN2_PROFINT  INTEGER,
    LAN2_TIP      VARCHAR(2),
    LAN2_DAT      TIMESTAMP,
    LAN2_RET      TIMESTAMP,
    LAN2_VAL      DOUBLE PRECISION,
    LAN2_COB      VARCHAR(1),
    LAN2_AVA      VARCHAR(3),
    LAN2_PGT      TIMESTAMP,
    LAN2_CRD      INTEGER,
    LAN2_PED      INTEGER,
    LAN2_VD1      VARCHAR(13)
);

CREATE TABLE MVLANCEXA3 (
    LAN3_COD  INTEGER NOT NULL,
    LAN3_LAN  INTEGER,
    LAN3_DOE  INTEGER,
    LAN3_TIP  VARCHAR(1)
);

CREATE TABLE MVLANCEXA4 (
    LAN4_COD      INTEGER NOT NULL,
    LAN4_LAN2     INTEGER NOT NULL,
    LAN4_TIP      VARCHAR(1),
    LAN4_REP      VARCHAR(1),
    LAN4_AUD      INTEGER,
    LAN4_CALIB    VARCHAR(20),
    LAN4_DCALIB   TIMESTAMP,
    LAN4_OBS      BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    LAN4_ODA250   INTEGER,
    LAN4_ODA250R  VARCHAR(1),
    LAN4_OEA250   INTEGER,
    LAN4_OEA250R  VARCHAR(1),
    LAN4_ODA500   INTEGER,
    LAN4_ODA500R  VARCHAR(1),
    LAN4_ODO500   INTEGER,
    LAN4_ODO500R  VARCHAR(1),
    LAN4_OEA500   INTEGER,
    LAN4_OEA500R  VARCHAR(1),
    LAN4_OEO500   INTEGER,
    LAN4_OEO500R  VARCHAR(1),
    LAN4_ODA1K    INTEGER,
    LAN4_ODA1KR   VARCHAR(1),
    LAN4_ODO1K    INTEGER,
    LAN4_ODO1KR   VARCHAR(1),
    LAN4_OEA1K    INTEGER,
    LAN4_OEA1KR   VARCHAR(1),
    LAN4_OEO1K    INTEGER,
    LAN4_OEO1KR   VARCHAR(1),
    LAN4_ODA2K    INTEGER,
    LAN4_ODA2KR   VARCHAR(1),
    LAN4_ODO2K    INTEGER,
    LAN4_ODO2KR   VARCHAR(1),
    LAN4_OEA2K    INTEGER,
    LAN4_OEA2KR   VARCHAR(1),
    LAN4_OEO2K    INTEGER,
    LAN4_OEO2KR   VARCHAR(1),
    LAN4_ODA3K    INTEGER,
    LAN4_ODA3KR   VARCHAR(1),
    LAN4_ODO3K    INTEGER,
    LAN4_ODO3KR   VARCHAR(1),
    LAN4_OEA3K    INTEGER,
    LAN4_OEA3KR   VARCHAR(1),
    LAN4_OEO3K    INTEGER,
    LAN4_OEO3KR   VARCHAR(1),
    LAN4_ODA4K    INTEGER,
    LAN4_ODA4KR   VARCHAR(1),
    LAN4_ODO4K    INTEGER,
    LAN4_ODO4KR   VARCHAR(1),
    LAN4_OEA4K    INTEGER,
    LAN4_OEA4KR   VARCHAR(1),
    LAN4_OEO4K    INTEGER,
    LAN4_OEO4KR   VARCHAR(1),
    LAN4_ODA6K    INTEGER,
    LAN4_ODA6KR   VARCHAR(1),
    LAN4_OEA6K    INTEGER,
    LAN4_OEA6KR   VARCHAR(1),
    LAN4_ODA8K    INTEGER,
    LAN4_ODA8KR   VARCHAR(1),
    LAN4_OEA8K    INTEGER,
    LAN4_OEA8KR   VARCHAR(1),
    LAN4_ODANOR   VARCHAR(1),
    LAN4_ODCERU   VARCHAR(1),
    LAN4_ODORL    VARCHAR(1),
    LAN4_ODAVA    VARCHAR(1),
    LAN4_ODESTV   VARCHAR(1),
    LAN4_ODAGRV   VARCHAR(1),
    LAN4_ODOCUP   VARCHAR(1),
    LAN4_ODNOCUP  VARCHAR(1),
    LAN4_ODTIPO   VARCHAR(3),
    LAN4_ODGRAU   VARCHAR(3),
    LAN4_ODOBS    BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    LAN4_OEANOR   VARCHAR(1),
    LAN4_OECERU   VARCHAR(1),
    LAN4_OEORL    VARCHAR(1),
    LAN4_OEAVA    VARCHAR(1),
    LAN4_OEESTV   VARCHAR(1),
    LAN4_OEAGRV   VARCHAR(1),
    LAN4_OEOCUP   VARCHAR(1),
    LAN4_OENOCUP  VARCHAR(1),
    LAN4_OETIPO   VARCHAR(3),
    LAN4_OEGRAU   VARCHAR(3),
    LAN4_OEOBS    BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    LAN4_ODSRT    INTEGER,
    LAN4_ODSDT    INTEGER,
    LAN4_ODIRF    INTEGER,
    LAN4_ODIRF1   INTEGER,
    LAN4_ODIRF2   INTEGER,
    LAN4_OESRT    INTEGER,
    LAN4_OESDT    INTEGER,
    LAN4_OEIRF    INTEGER,
    LAN4_OEIRF1   INTEGER,
    LAN4_OEIRF2   INTEGER,
    LAN4_EQU      INTEGER
);

CREATE TABLE MVLGE (
    LGE_COD          INTEGER NOT NULL,
    LGE_CON          INTEGER,
    LGE_PLA          VARCHAR(40),
    LGE_VAL          DOUBLE PRECISION,
    LGE_DOC          VARCHAR(12),
    LGE_TIT          VARCHAR(8),
    LGE_OPE          TIMESTAMP,
    LGE_EMI          TIMESTAMP,
    LGE_TIP          VARCHAR(1),
    LGE_CCO          VARCHAR(1),
    LGE_SAL          DOUBLE PRECISION,
    LGE_CAD          TIMESTAMP,
    LGE_TRA          INTEGER,
    LGE_TRA1         VARCHAR(1),
    LGE_ORI          VARCHAR(5),
    LGE_CCUSTO       VARCHAR(40),
    DAT_CAD          TIMESTAMP,
    DAT_ATU          TIMESTAMP,
    ATIVO            VARCHAR(1),
    LGE_HIS          VARCHAR(60),
    LGE_MOD          VARCHAR(5),
    LGE_CLI          INTEGER,
    LGE_FOR          INTEGER,
    LGE_PROJ2        INTEGER,
    LGE_PLA2         INTEGER,
    LGE_CCUSTO2      INTEGER,
    LGE_CLI_VINC     INTEGER,
    LGE_FOR_VINC     INTEGER,
    LGE_CHEQUE       INTEGER,
    LGE_VEC          TIMESTAMP,
    LGE_MOE          INTEGER,
    LGE_DFP          VARCHAR(1),
    LGE_OBS          VARCHAR(60),
    LGE_CAR          INTEGER,
    LGE_VD1COD       VARCHAR(13),
    LGE_COBRAVEL     VARCHAR(1),
    LGE_BAI          VARCHAR(1),
    LGE_NOSSONUMERO  DOUBLE PRECISION,
    LGE_VOG          TIMESTAMP,
    LGE_NBOR         INTEGER,
    LGE_TIP2         INTEGER,
    LGE_ALM          INTEGER,
    LGE_RECPAG       INTEGER,
    LGE_TOT          VARCHAR(1),
    LGE_RECB_PGT     TIMESTAMP,
    LGE_CART         VARCHAR(1),
    LGE_OBS_BLOB     BLOB SUB_TYPE 1 SEGMENT SIZE 1024
);

CREATE TABLE MVLGED (
    DOB_COD          INTEGER,
    DOB_PLA          VARCHAR(40),
    DOB_VAL          DOUBLE PRECISION,
    DOB_FLAG         INTEGER,
    DOB_CON          INTEGER,
    DOB_OPE          TIMESTAMP,
    DOB_EMI          TIMESTAMP,
    DOB_CAD          TIMESTAMP,
    DOB_DOC          VARCHAR(12),
    DOB_CCUSTO       VARCHAR(40),
    DAT_CAD          TIMESTAMP,
    DAT_ATU          TIMESTAMP,
    ATIVO            VARCHAR(1),
    DOB_HIS          VARCHAR(60),
    DOB_CLI          INTEGER,
    DOB_FOR          INTEGER,
    DOB_PROJ2        INTEGER,
    DOB_PLA2         INTEGER,
    DOB_CCUSTO2      INTEGER,
    DOB_CLI_VINC     INTEGER,
    DOB_FOR_VINC     INTEGER,
    DOB_TIP2         INTEGER,
    DOB_ALM          INTEGER,
    DOB_VEC          TIMESTAMP,
    DOB_MOE          INTEGER,
    DOB_DFP          VARCHAR(1),
    DOB_OBS          VARCHAR(60),
    DOB_CAR          INTEGER,
    DOB_VD1COD       VARCHAR(13),
    DOB_COBRAVEL     VARCHAR(1),
    DOB_BAI          VARCHAR(1),
    DOB_NOSSONUMERO  DOUBLE PRECISION,
    DOB_VOG          TIMESTAMP,
    DOB_NBOR         INTEGER,
    DOB_RECPAG       INTEGER,
    DOB_RECB_PGT     TIMESTAMP,
    DOB_CART         VARCHAR(1),
    DOB_DOB          INTEGER,
    DOB_TIT          VARCHAR(1),
    DOB_TOT          VARCHAR(1),
    DOB_OBS_BLOB     BLOB SUB_TYPE 1 SEGMENT SIZE 1024,
    DOB_DESD_BAI     INTEGER
);

CREATE TABLE MVNFE (
    NFE_COD       INTEGER,
    NFE_VD1       VARCHAR(13),
    NFE_DAT       TIMESTAMP,
    NFE_ID        VARCHAR(50),
    NFE_STATUS    VARCHAR(10),
    NFE_ARQUIVO   BLOB SUB_TYPE 1 SEGMENT SIZE 2048,
    NFE_RESPOSTA  BLOB SUB_TYPE 1 SEGMENT SIZE 2048,
    NFE_AMBIENTE  VARCHAR(1)
);

CREATE TABLE MVNFE_CCE (
    CCE_NFE         INTEGER,
    CCE_DATA        TIMESTAMP,
    CCE_TEXTO       BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    CCE_ARQUIVO     BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    CCE_SEQUENCIAL  INTEGER,
    CCE_PROTOCOLO   VARCHAR(50),
    CCE_DATA_REG    TIMESTAMP
);

CREATE TABLE MVNFES (
    NFES_COD           INTEGER NOT NULL,
    NFES_VD1           VARCHAR(13) NOT NULL,
    NFES_DATA_GERACAO  TIMESTAMP NOT NULL,
    NFES_NUMERO        INTEGER,
    NFES_DATA_HORA     TIMESTAMP,
    NFES_VERIFICACAO   VARCHAR(10),
    NFES_STATUS        VARCHAR(10),
    NFES_LOTE          INTEGER,
    NFES_PROTOCOLO     VARCHAR(10)
);

CREATE TABLE MVOBS (
    OBS_COD   INTEGER NOT NULL,
    OBS_NOM   VARCHAR(30),
    OBS_FLAG  VARCHAR(3) NOT NULL,
    OBS_ORD   INTEGER,
    ATIVO     VARCHAR(1),
    DAT_CAD   TIMESTAMP,
    DAT_ATU   TIMESTAMP,
    USE_CAD   INTEGER,
    USE_ATU   INTEGER
);

CREATE TABLE MVOBS2 (
    OBS2_COD     INTEGER NOT NULL,
    OBS2_CODTAB  INTEGER NOT NULL,
    OBS2_OBS     BLOB SUB_TYPE 1 SEGMENT SIZE 80
);

CREATE TABLE MVOP2 (
    ID          BIGINT NOT NULL,
    OP          VARCHAR(100),
    OPE         BIGINT,
    SEQ         BIGINT,
    VENCIMENTO  TIMESTAMP,
    CALLPUT     VARCHAR(5),
    STRIKE      FLOAT,
    OPCAO       BIGINT,
    QTDE        FLOAT,
    VALOR       FLOAT,
    DAT_CAD     TIMESTAMP,
    DAT_ATU     TIMESTAMP,
    STATUS      VARCHAR(1)
);

CREATE TABLE MVOPE (
    ID          BIGINT NOT NULL,
    OPE_CLI     VARCHAR(20),
    CORRETORA   BIGINT,
    ESTRATEGIA  BIGINT,
    DTPREGAO    TIMESTAMP,
    IDOP        VARCHAR(30),
    NOME        VARCHAR(100),
    DAT_CAD     TIMESTAMP,
    DAT_ATU     TIMESTAMP,
    STATUS      VARCHAR(1)
);

CREATE TABLE MVPEDEXA (
    PED_COD    INTEGER NOT NULL,
    PED_EMP    INTEGER,
    PED_FUN    INTEGER,
    PED_CRD    INTEGER,
    PED_TIPAT  VARCHAR(3),
    PED_DAT    TIMESTAMP,
    PED_ATE    INTEGER,
    PED_OBS    BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    DAT_CAD    TIMESTAMP NOT NULL,
    DAT_ATU    TIMESTAMP,
    ATIVO      VARCHAR(1) NOT NULL,
    USE_CAD    INTEGER NOT NULL,
    USE_ATU    INTEGER
);

CREATE TABLE MVPEDEXA2 (
    PED2_COD  INTEGER NOT NULL,
    PED2_PED  INTEGER NOT NULL,
    PED2_EXA  INTEGER NOT NULL,
    PED2_DAT  TIMESTAMP,
    PED2_VAL  DOUBLE PRECISION
);

CREATE TABLE MVSUP (
    SUP_COD       INTEGER,
    SUP_CLI       INTEGER,
    SUP_CAT       INTEGER,
    SUP_MOD       INTEGER,
    SUP_CON       VARCHAR(30),
    SUP_DAT       TIMESTAMP,
    SUP_HOR       TIMESTAMP,
    SUP_PRO       BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    SUP_SOL       BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    SUP_LIG       VARCHAR(1),
    SUP_CCO       VARCHAR(1),
    SUP_RES       INTEGER,
    SUP_CONP      VARCHAR(30),
    SUP_DTC       TIMESTAMP,
    SUP_SIT       INTEGER,
    CLI_FIL       INTEGER,
    SUP_PREVISAO  TIMESTAMP,
    DAT_CAD       TIMESTAMP,
    DAT_ATU       TIMESTAMP,
    ATIVO         VARCHAR(1),
    SUP_TEMPO     DOUBLE PRECISION,
    SUP_STA       VARCHAR(1),
    SUP_GRT       INTEGER,
    SUP_GRCOD     INTEGER,
    SUP_FUNCAD    INTEGER,
    SUP_FUNATU    INTEGER,
    SUP_ASS       VARCHAR(130),
    SUP_PROJ2     INTEGER
);

CREATE TABLE MVSUP2 (
    SUP2_COD  INTEGER,
    SUP2_SUP  INTEGER,
    SUP2_FUN  INTEGER,
    SUP2_OBS  BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    DAT_CAD   TIMESTAMP,
    DAT_ATU   TIMESTAMP,
    ATIVO     VARCHAR(1)
);

CREATE TABLE MVSUP3 (
    SUP3_COD         INTEGER,
    SUP3_SUP         INTEGER,
    HORA_COD         INTEGER,
    SUP3_FUN         INTEGER,
    SUP3_HORA_ENTRA  TIMESTAMP,
    SUP3_HORA_SAIDA  TIMESTAMP,
    SUP3_DT          COMPUTED BY (SUP3_HORA_SAIDA - SUP3_HORA_ENTRA),
    SUP3_OBS         VARCHAR(60),
    SUP3_VALOR_HORA  DOUBLE PRECISION,
    DAT_CAD          TIMESTAMP,
    DAT_ATU          TIMESTAMP,
    ATIVO            VARCHAR(1),
    SUP3_DAT         TIMESTAMP
);

CREATE TABLE MVTMK (
    TMK_COD     INTEGER NOT NULL,
    TMK_GRU     INTEGER,
    TMK_ENT     INTEGER,
    TMK_FLAG    VARCHAR(3),
    TMK_ARE     INTEGER,
    TMK_CAT     INTEGER,
    TMK_SITS    INTEGER,
    TMK_FUNCAD  INTEGER,
    TMK_FUNATU  INTEGER,
    DAT_CAD     TIMESTAMP,
    DAT_ATU     TIMESTAMP,
    TMK_SEQ     INTEGER,
    TMK_STATUS  VARCHAR(2)
);

CREATE TABLE MVTMK2 (
    TMK2_COD     INTEGER,
    TMK2_TMK     INTEGER,
    TMK2_DAT     TIMESTAMP,
    TMK2_PROXC   TIMESTAMP,
    TMK2_FUNCAD  INTEGER,
    TMK2_OBS     BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    TMK2_CONT    VARCHAR(60)
);

CREATE TABLE MVTMK3 (
    TMK3_COD     INTEGER,
    TMK3_TMK     INTEGER,
    TMK3_PROSER  INTEGER,
    TMK3_FLAG    VARCHAR(2),
    TMK3_INT     INTEGER,
    TMK3_OBS     VARCHAR(100)
);

CREATE TABLE MVTRANSF1 (
    TR1_COD        INTEGER NOT NULL,
    TR1_TIPO_OPE   VARCHAR(5),
    TR1_DAT        TIMESTAMP,
    TR1_USER       INTEGER,
    TR1_DAT_MOV    TIMESTAMP,
    TR1_ALM        INTEGER,
    TR1_TIP_TRNSF  VARCHAR(5),
    TR1_CP         VARCHAR(1),
    TR1_DEST       BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    TR1_CONFER     VARCHAR(1),
    TR1_FLAG       INTEGER,
    TR1_FEC_EST    TIMESTAMP
);

CREATE TABLE MVVISIT (
    VIS_COD       INTEGER NOT NULL,
    VIS_CLI       INTEGER,
    VIS_FUN       INTEGER,
    VIS_DAT       TIMESTAMP,
    VIS_NOCO      INTEGER,
    VIS_NATOCO    VARCHAR(1),
    VIS_STSOCO    VARCHAR(1),
    VIS_OBJOCO    VARCHAR(3),
    VIS_DESCOBJ   VARCHAR(255),
    VIS_NCONTR    INTEGER,
    VIS_PRODTIP   VARCHAR(3),
    VIS_PRODDESC  VARCHAR(255),
    VIS_SITTRA    BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    VIS_PEND      BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    VIS_ATVEXC    BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    VIS_OBSCLI    BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    VIS_OBSFUN    BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    VIS_DESCOCO   BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    VIS_ACIMED    BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    VIS_ACTOM     BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    VIS_CONSEQ    BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    VIS_ANALISE   BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    VIS_RETCLI    BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    DAT_CAD       TIMESTAMP,
    DAT_ATU       TIMESTAMP,
    ATIVO         VARCHAR(1),
    USE_CAD       INTEGER,
    USE_ATU       INTEGER
);

CREATE TABLE MYAUTHUSER (
    ID                BIGINT NOT NULL,
    LOGONNAME         VARCHAR(20) CHARACTER SET UNICODE_FSS NOT NULL,
    DISPLAYNAME       VARCHAR(50) CHARACTER SET UNICODE_FSS,
    PASSWORDHASHHEXA  VARCHAR(64) CHARACTER SET UNICODE_FSS,
    GROUPRIGHTS       BIGINT,
    DATA              BLOB SUB_TYPE 0 SEGMENT SIZE 2000,
    ENABLED           INTEGER
);

CREATE TABLE NAVIA (
    N_COD             INTEGER,
    N_CTA_PAGAR_CC    VARCHAR(1),
    N_CTA_RECEBER_CC  VARCHAR(1),
    N_MOSTRA_LOOKUP   VARCHAR(1),
    N_INSTANCIAS      INTEGER,
    N_CLIENTES        INTEGER,
    DAT_CAD           TIMESTAMP,
    DAT_ATU           TIMESTAMP,
    ATIVO             VARCHAR(1)
);

CREATE TABLE PARAMET (
    P_COD                        INTEGER,
    P_TENTATIVAS                 INTEGER,
    P_LANC_DEP_FECHADO           VARCHAR(1),
    P_DATA_EMISSAO               VARCHAR(1),
    P_MAIUSCULA_MINUSCULA        VARCHAR(2),
    P_REMOVER_HIST_USER          INTEGER,
    P_GRAVA_ENTRAR               VARCHAR(1),
    P_GRAVA_SAIR                 VARCHAR(1),
    P_GRAVA_INCLUIR              VARCHAR(1),
    P_GRAVA_ALTERAR              VARCHAR(1),
    P_GRAVA_EXCLUIR              VARCHAR(1),
    P_GRAVA_ABRIRTABS            VARCHAR(1),
    P_GRAVA_FECHATABS            VARCHAR(1),
    P_USA_COR                    VARCHAR(1),
    P_USA_MEDIDA                 VARCHAR(1),
    P_USA_PRODUTO_COMPOSTO       VARCHAR(1),
    P_TABELA_A                   VARCHAR(15),
    P_TABELA_B                   VARCHAR(15),
    P_TABELA_C                   VARCHAR(15),
    P_TABELA_D                   VARCHAR(15),
    P_TABELA_E                   VARCHAR(15),
    P_TABELA_F                   VARCHAR(15),
    P_TABELA_G                   VARCHAR(15),
    P_TABELA_H                   VARCHAR(15),
    P_TABELA_I                   VARCHAR(15),
    P_TABELA_J                   VARCHAR(15),
    P_TABELA_K                   VARCHAR(15),
    P_TABELA_L                   VARCHAR(15),
    P_TABELA_M                   VARCHAR(15),
    P_TABELA_N                   VARCHAR(15),
    P_TABELA_O                   VARCHAR(15),
    P_TABELA_P                   VARCHAR(15),
    P_TABELA_Q                   VARCHAR(15),
    P_TABELA_R                   VARCHAR(15),
    P_TABELA_S                   VARCHAR(15),
    P_TABELA_T                   VARCHAR(15),
    P_TABELA_U                   VARCHAR(15),
    P_TABELA_V                   VARCHAR(15),
    P_TABELA_W                   VARCHAR(15),
    P_TABELA_X                   VARCHAR(15),
    P_TABELA_Y                   VARCHAR(15),
    P_TABELA_Z                   VARCHAR(15),
    P_BLOQUEIA_CGC               VARCHAR(1),
    P_BLOQUEIA_CPF               VARCHAR(1),
    P_MOST_CAMPO                 VARCHAR(1),
    P_PRECO_NO_SERVICO           VARCHAR(1),
    ALTERAR_BOLETA_NO_PDV        VARCHAR(1),
    VENDA_DEPOIS_DO_AJUSTE       VARCHAR(1),
    VENDA_ANTES_DO_AJUSTE        VARCHAR(1),
    P_USA_FICHA_TECNICA          VARCHAR(1),
    P_USA_CLIENTE                VARCHAR(1),
    P_USA_FORNECEDOR             VARCHAR(1),
    P_MSG_EST_MINIMO             VARCHAR(1),
    P_USA_PRECO                  VARCHAR(1),
    P_USA_CUSTOS                 VARCHAR(1),
    P_USA_ENGENHARIA             VARCHAR(1),
    CALCULODELUCRO               VARCHAR(3),
    P_FORMATO_QTD_PDD_COMPRA     VARCHAR(7),
    P_FORMATO_VLR                VARCHAR(1),
    PRECO_COR                    VARCHAR(1),
    PRECO_MEDIDA                 VARCHAR(1),
    PROXIMOCODBAR_PRODUTO        VARCHAR(1),
    NUMDIGTOCODBAR_PRODUTO       INTEGER,
    NUMINICIOCODBAR_PRODUTO      INTEGER,
    DIGITOCODBAR_PRODUTO         VARCHAR(1),
    PROXIMOCODINT_PRODUTO        VARCHAR(1),
    NUMDIGTOCODINT_PRODUTO       INTEGER,
    NUMINICIOCODINT_PRODUTO      INTEGER,
    DIGITOCODINT_PRODUTO         VARCHAR(1),
    PARTE1NOME_PRODUTO           VARCHAR(10),
    PARTE2NOME_PRODUTO           VARCHAR(10),
    PARTE3NOME_PRODUTO           VARCHAR(10),
    PARTE4NOME_PRODUTO           VARCHAR(10),
    PARTE1NNOME_PRODUTO          INTEGER,
    PARTE2NNOME_PRODUTO          INTEGER,
    PARTE3NNOME_PRODUTO          INTEGER,
    PARTE4NNOME_PRODUTO          INTEGER,
    USANOMEAUTOMATICOPRODUTO     VARCHAR(1),
    P_NIVELCONSTODOSCUPONS       INTEGER,
    P_EXCLUIROBSITENS            INTEGER,
    P_NIVELLIBRERACLIENTE        INTEGER,
    P_NUMERO_RELATORIO           INTEGER,
    P_SITUACAOTRIBUTARIA         INTEGER,
    P_CLASSIFICACAOFISCAL        INTEGER,
    P_MARCA                      INTEGER,
    P_TIPO                       INTEGER,
    P_SUBGRUPO                   INTEGER,
    P_UNVENDA                    INTEGER,
    P_CATEGORIA                  INTEGER,
    P_NIVELPAGAR                 VARCHAR(1),
    P_NIVELRECEBER               VARCHAR(1),
    DAT_CAD                      TIMESTAMP,
    DAT_ATU                      TIMESTAMP,
    ATIVO                        VARCHAR(1),
    P_USA_APLICACAO              VARCHAR(1),
    P_CODFIXO                    VARCHAR(8),
    P_CODSEQUENCIA               INTEGER,
    P_CODNUMERO                  INTEGER,
    P_USACODCORMEDIDA            VARCHAR(1),
    P_USACLIENTEPADRAO           VARCHAR(1),
    P_ALM                        INTEGER,
    P_VEN                        INTEGER,
    P_REP                        INTEGER,
    P_GRUC                       INTEGER,
    P_TIPC                       VARCHAR(1),
    P_TIPD                       INTEGER,
    P_CONDP                      INTEGER,
    P_CRE                        INTEGER,
    P_TABELA_SERVICO_A           VARCHAR(15),
    P_TABELA_SERVICO_B           VARCHAR(15),
    P_TABELA_SERVICO_C           VARCHAR(15),
    P_TABELA_SERVICO_D           VARCHAR(15),
    P_TABELA_SERVICO_E           VARCHAR(15),
    P_TABELA_SERVICO_F           VARCHAR(15),
    P_TABELA_SERVICO_G           VARCHAR(15),
    P_TABELA_SERVICO_H           VARCHAR(15),
    P_TABELA_SERVICO_I           VARCHAR(15),
    P_TABELA_SERVICO_J           VARCHAR(15),
    P_PDV_CDCLI                  VARCHAR(1),
    P_PDV_CDFOR                  VARCHAR(1),
    P_PDV_CDCONT                 VARCHAR(1),
    P_PDV_CDREP                  VARCHAR(1),
    P_PDV_CDFUN                  VARCHAR(1),
    P_PDV_CDTRS                  VARCHAR(1),
    P_PDV_CDCLI_CONTATO          VARCHAR(1),
    P_PDV_CDFOR_CONTATO          VARCHAR(1),
    P_PDV_CDCONT_CONTATO         VARCHAR(1),
    P_PDV_CDREP_CONTATO          VARCHAR(1),
    P_PDV_CDFUN_CONTATO          VARCHAR(1),
    P_PDV_CDTRS_CONTATO          VARCHAR(1),
    P_PDV_CDCLI_DADOSFAT         VARCHAR(1),
    P_PDV_CDCLI_DADOSCOB         VARCHAR(1),
    P_GRAVA_FOTO_BANCO           VARCHAR(1),
    P_GRAVA_FOTO_TIPO            VARCHAR(1),
    P_ESTOQUE_FIXO               TIMESTAMP,
    P_TRANSF_ULT_DIAS            INTEGER,
    P_IMPORT                     VARCHAR(60),
    P_EXPORT                     VARCHAR(60),
    P_ICMSPRODUTO                DOUBLE PRECISION,
    P_PDV_CDCLI_FINANC           VARCHAR(1),
    P_MTZ_CDCLI_FINANC           VARCHAR(1),
    P_USU_ESTOQUE_FIXO           VARCHAR(100),
    P_PDV_CDCLI_ENTREGA          VARCHAR(1),
    P_PDV_CDFOR_ENTREGA          VARCHAR(1),
    P_MTZ_CDFOR_ENTREGA          VARCHAR(1),
    P_MTZ_CDCLI_ENTREGA          VARCHAR(1),
    P_OBRIGA_CLI_CPF             VARCHAR(1),
    P_OBRIGA_CLI_RG              VARCHAR(1),
    P_OBRIGA_CLI_TEL             VARCHAR(1),
    P_USA_DADO_COMERCIAL         VARCHAR(1),
    P_NAO_PERMITE_CPFCNPJ_IGUAL  VARCHAR(1),
    P_TABELA_A_NIV               INTEGER,
    P_TABELA_B_NIV               INTEGER,
    P_TABELA_C_NIV               INTEGER,
    P_TABELA_D_NIV               INTEGER,
    P_TABELA_E_NIV               INTEGER,
    P_TABELA_F_NIV               INTEGER,
    P_TABELA_G_NIV               INTEGER,
    P_TABELA_H_NIV               INTEGER,
    P_TABELA_I_NIV               INTEGER,
    P_TABELA_J_NIV               INTEGER,
    P_TABELA_K_NIV               INTEGER,
    P_TABELA_L_NIV               INTEGER,
    P_TABELA_M_NIV               INTEGER,
    P_TABELA_N_NIV               INTEGER,
    P_TABELA_O_NIV               INTEGER,
    P_TABELA_P_NIV               INTEGER,
    P_TABELA_Q_NIV               INTEGER,
    P_TABELA_R_NIV               INTEGER,
    P_TABELA_S_NIV               INTEGER,
    P_TABELA_T_NIV               INTEGER,
    P_TABELA_U_NIV               INTEGER,
    P_TABELA_V_NIV               INTEGER,
    P_TABELA_W_NIV               INTEGER,
    P_TABELA_X_NIV               INTEGER,
    P_TABELA_Y_NIV               INTEGER,
    P_TABELA_Z_NIV               INTEGER,
    P_TABELA_ULTCUS_NIV          INTEGER,
    P_TABELA_CUSMED_NIV          INTEGER,
    P_LOGOREL                    BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    P_LOGOPRO                    BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    PATHLOGOS                    VARCHAR(60),
    P_DEVOLU                     VARCHAR(1),
    P_OBRIGA_END                 VARCHAR(1),
    P_USA_CAIXA                  VARCHAR(1),
    P_USA_PROCAT_ATRIB           VARCHAR(1),
    P_USUARIO_ENTRADA            VARCHAR(1)
);

CREATE TABLE PARAMETCOMP (
    P_VERIFICA_ALM_MANUT   VARCHAR(1),
    P_VALOR_SEM_APROVACAO  DOUBLE PRECISION,
    P_APROVA_PARA_COTAR    VARCHAR(1),
    P_COTACAO_PENDENTE     VARCHAR(1)
);

CREATE TABLE PARAMETENT (
    P_USA_DADO_COMERCIAL_CON      VARCHAR(1),
    P_EXIBPED_CLI                 VARCHAR(1),
    P_EXIBEVEN_CLI                VARCHAR(1),
    P_EXIBEPED_FOR                VARCHAR(1),
    P_EXIBECOM_FOR                VARCHAR(1),
    P_EXIBDADCAD                  VARCHAR(1),
    P_OBRIGA_CPF_FOR              VARCHAR(1),
    P_NAO_CPFCNPJ_IGUAL_FOR       VARCHAR(1),
    P_USA_CODIGO_ENTIDADE         VARCHAR(1),
    P_USA_FILIAL_CODIGO_ENTIDADE  VARCHAR(1)
);

CREATE TABLE PARAMETEST (
    P_USA_SETOR_CONT          VARCHAR(1),
    P_USA_NUMERO_CONT         VARCHAR(1),
    P_DIAS_FECHAMENTO_FILIAL  INTEGER,
    P_DIAS_FECHAMENTO_MATRIZ  INTEGER
);

CREATE TABLE PARAMETFIN (
    P_IMP_VERSO                VARCHAR(1) DEFAULT "S" NOT NULL,
    P_IMP_COR                  VARCHAR(1) DEFAULT "S" NOT NULL,
    P_APRV_PAGTO               VARCHAR(1) DEFAULT "N" NOT NULL,
    P_REMOVER_HIST_FINAN       INTEGER,
    P_PATH_REMESSA             VARCHAR(60),
    P_VERCLI2                  VARCHAR(2),
    P_VERFOR2                  VARCHAR(2),
    P_VERPLA2                  VARCHAR(2),
    P_VERCUSTO2                VARCHAR(2),
    P_VERPROJETO2              VARCHAR(2),
    P_LIBER_PREV               VARCHAR(1),
    P_MENSAGEM_COBRANCA        BLOB SUB_TYPE 1 SEGMENT SIZE 4096,
    P_USA_PLANO_CLI_PADRAO     VARCHAR(1),
    P_USA_CCUSTO_CLI_PADRAO    VARCHAR(1),
    P_USA_CONTA_CLI_PADRAO     VARCHAR(1),
    P_USA_PLANO_FOR_PADRAO     VARCHAR(1),
    P_USA_CCUSTO_FOR_PADRAO    VARCHAR(1),
    P_USA_CONTA_FOR_PADRAO     VARCHAR(1),
    P_ALTERA_ENTIDADE_PAG_REC  VARCHAR(1)
);

CREATE TABLE PARAMETGER (
    P_COD_CLIENTE            VARCHAR(40),
    P_LIMITE                 VARCHAR(40),
    P_CONEXOES_MAX           INTEGER,
    P_ULT_ACESSO             VARCHAR(40),
    P_WEB_IP                 VARCHAR(15),
    P_WEB_PORTA              INTEGER,
    P_ENVIA_EMAIL_ERRO       VARCHAR(1),
    P_EMAIL_SUPORTE_UNISCOM  VARCHAR(75),
    P_ARQUIVOS               BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    P_BACKUP                 VARCHAR(100),
    P_ARQUIVO_NAO_BAIXADO    BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    P_BLOQUEIO               TIMESTAMP,
    P_HIS_DIAS_TRANSF        INTEGER,
    P_OBS_GAR                BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    P_GRUPRODUTO             INTEGER,
    P_ULT_ATUALIZACAO        TIMESTAMP,
    P_ITV_ATUALIZACAO        VARCHAR(3),
    P_MTZ_CDFOR_FINANC       VARCHAR(1),
    P_DIAS_ENVIO_EMAIL       TIMESTAMP,
    P_ATUALIZACAO_IP         VARCHAR(20),
    P_ATUALIZACAO_PORTA      INTEGER,
    P_MNDATA_RELAT           VARCHAR(1),
    P_USRLIM                 VARCHAR(10),
    P_BACKUP2                VARCHAR(100),
    P_ARQUIVOS_ATUALIZACAO2  BLOB SUB_TYPE 1 SEGMENT SIZE 1024,
    P_USER_ALT_FICHAS        INTEGER,
    P_PATH_IMPORTACAO        VARCHAR(100),
    P_PATH_EXPORTACAO        VARCHAR(100)
);

CREATE TABLE PARAMETMOV (
    P_USA_TODOS_VEND_F             VARCHAR(1),
    P_USA_TODOS_VEND_M             VARCHAR(1),
    P_VEND_PRODUTO_INFERIOR        VARCHAR(1),
    P_NIVEL_VEND_PRODUTO_INFERIOR  INTEGER,
    P_TIPO_TRANSF                  VARCHAR(1),
    P_PDV_CDVEI                    VARCHAR(1),
    P_USA_TEXTONF                  VARCHAR(20),
    P_LABEL_DESCMAX                VARCHAR(1),
    P_FILTRO_DIAS_CONSULTA         INTEGER,
    P_SENHA_NIVELCUPOM             VARCHAR(1),
    P_ABRE_CUPOM_COM_CPF           VARCHAR(1),
    P_ABRE_CUPOM_MENSAGEM          VARCHAR(100),
    P_PERMITE_VND_ATRASO_VALE      VARCHAR(1),
    P_NIVEL_VND_ATRASO_VALE        INTEGER,
    P_TEXTO_RETENCAO_ISS           VARCHAR(30),
    P_SEPARAR_PEDIDOS              VARCHAR(1),
    P_DIAS_TRANSFERENCIA_PEN       INTEGER
);

CREATE TABLE PARAMETPRO (
    P_USA_DIMENSAO       VARCHAR(1),
    P_USA_ESTMINMAX_DDV  VARCHAR(1),
    P_USA_CODIGO_EAN     VARCHAR(1),
    P_USA_TABELA_IBPT    VARCHAR(1)
);

CREATE TABLE PARAMETSEG (
    P_SER_EXAME  INTEGER
);

CREATE TABLE PARAMTSUP (
    PAR_NAME    VARCHAR(20) NOT NULL,
    PAR_VALUE   VARCHAR(20) NOT NULL,
    PAR_GROUP   INTEGER,
    PAR_STATUS  VARCHAR(1)
);

CREATE TABLE VERSAO (
    VER_VER  INTEGER,
    VER_DAT  TIMESTAMP
);

CREATE TABLE VERSAO_G3STOR (
    VER_VER      INTEGER,
    VER_DAT      TIMESTAMP,
    VER_EXE_DAT  TIMESTAMP,
    VER_EXE_TAM  DOUBLE PRECISION
);





/******************************************************************************/
/*                                   Views                                    */
/******************************************************************************/


/* View: AGENDA */
CREATE VIEW AGENDA(
    CON_NOM,
    CON_RED,
    CON_CEP,
    CON_LOG,
    CON_END,
    CON_NUM,
    CON_BAI,
    CON_COP,
    CON_CGC,
    CON_EMA,
    CON_WWW,
    IES,
    DAT_CAD,
    DAT_ATU,
    CON,
    CON_COD,
    CON_CID,
    CON_EST,
    CON_FIS,
    TELEFONE,
    RAMAL,
    ATIVO)
AS
Select con_RED, con_red, con_cep, con_log,
 con_end, con_num, con_bai, Cast(con_cop as Varchar(30)) AS CON_COP,
 con_cgc, con_ema, con_www, Cast(con_ies as Varchar(19)) AS IES,
 dat_cad, dat_atu , "CON" AS CON , con_cod,
 con_cid, con_est, con_fis, con_tel AS TELEFONE,
 CAST(" " as VARCHAR(10)) AS RAMAL, ATIVO
 From cdcont
 Where con_pub = "T"
 Union All
 Select cli_RED, cli_red, cli_cep, cli_log,
 cli_end, cli_num, cli_bai, cli_cop AS CON_COP,
 cli_cpf, cli_ema, cli_www, cli_rg AS IES,
 dat_cad, dat_atu, "CLI" AS CON , cli_cod,
 cli_cid, cli_est, cli_fis, cli_tel AS TELEFONE,
 CAST(" " as VARCHAR(10)) AS RAMAL, ATIVO
 From cdcli
 Union All
 Select for_RED, for_red, for_cep, for_log,
 for_end, for_num, for_bai, Cast(for_cop as Varchar(30)) AS CON_COP,
 for_cgc, for_ema, for_www, Cast(for_ies as Varchar(19)) AS IES,
 dat_cad, dat_atu, "FOR" AS CON , for_cod ,
 for_cid, for_est, for_fis, for_tel AS TELEFONE,
 CAST(" " as VARCHAR(10)) AS RAMAL, ATIVO
 From cdfor
 Union All
 Select rep_RED, rep_red, rep_cep, rep_log,
 rep_end, rep_num, rep_bai, Cast(rep_cop as Varchar(30)) AS CON_COP,
 rep_cgc, rep_ema, rep_www, Cast(rep_ies as Varchar(19)) AS IES,
 dat_cad, dat_atu, "REP" AS CON , rep_cod ,
 rep_cid, rep_est, rep_fis, rep_tel AS TELEFONE,
 CAST(" " as VARCHAR(10)) AS RAMAL, ATIVO
 From cdrep
 Union All
 Select Cast(fun_nom as Varchar(75)), fun_red, fun_cep, fun_log,
 fun_end, fun_num, fun_bai, Cast(fun_cop as Varchar(30)) AS fun_COP,
 fun_cpf, fun_ema, fun_www, fun_rg AS IES,
 dat_cad, dat_atu, "FUN" AS CON , fun_cod,
 fun_cid, fun_est, fun_ven, fun_tel AS TELEFONE, FUN_RAMAL, ATIVO
 from cdfun
 Union All
 Select Cast(trs_nom as Varchar(75)),trs_red, trs_cep, trs_log,
 trs_end, Cast(trs_num as Varchar(10)), trs_bai, Cast(trs_cop as Varchar(30)) AS trs_COP,
 trs_cgc, trs_ema, trs_www, Cast(trs_ies as Varchar(19)) AS IES,
 dat_cad, dat_atu, "TRS" AS CON , trs_cod,
 trs_cid, trs_est, ativo as cli_fis, trs_te1 AS TELEFONE,
 CAST(" " as VARCHAR(10)) AS RAMAL, ATIVO
 from cdtrs;



/* View: CAIXA */
CREATE VIEW CAIXA(
    TIP_COD,
    TIP_NOM,
    VALOR,
    CAIXA,
    DATA,
    TIPO,
    OPE,
    FILIAL,
    TRANSACAO,
    REC_REC)
AS
SELECT B.TIP_COD,B.TIP_NOM, A.VD4_VAL AS VALOR, C.VD1_CAI AS CAIXA, A.VD4_CAD AS DATA, "MOV" AS TIPO, C.VD1_CANC AS OPE, C.VD1_ALM AS FILIAL, C.VD1_TRA AS TRANSACAO, CAST("01/01/1001" AS DATE) AS REC_REC
 FROM ESTMVVD4 A, CDTIPD B, ESTMVVD1 C, CDTRA1 D
 WHERE VD4_BOL=VD1_COD AND VD4_ALM=VD1_ALM AND VD4_CAD=VD1_CAD
 AND VD1_FOR=0 AND ( ((VD1_CANC <> "C") and (VD1_CANC <> "CF")) OR (VD1_CANC IS NULL) )
 AND TIP_COD=VD4_TIP AND TRA_COD=VD1_TRA AND TRA_TIP_TRA<>"CMP"
 UNION ALL
 SELECT 0, TIP_NOM, VD8_VAL, VD7_CAI AS CAIXA, VD7_DAT AS DATA, "CAI" AS TIPO, VD8_OPE AS OPE, VD7_ALM AS FILIAL, 0 AS TRANSACAO, CAST("01/01/1001" AS DATE) AS REC_REC
 FROM ESTMVVD7, ESTMVVD8, CDTIPD
 WHERE VD8_COD=VD7_COD AND TIP_COD=VD8_TIP
 UNION ALL
 SELECT 0, TIP_NOM, REC_VAL, VD1_CAI AS CAIXA, MVCOREC.REC_DAT AS DATA, "REC" AS TIPO, REC_BAI || " " AS OPE, ESTMVVD1.VD1_ALM AS FILIAL, ESTMVVD1.VD1_TRA AS TRANSACAO, REC_REC
 FROM MVCOREC, CDTIPD, ESTMVVD1, CDTRA1
 WHERE TIP_COD=REC_TIP AND TIP_PAG = "S" AND VD1_COD=REC_VD1COD
 AND VD1_CAD=REC_DAT AND VD1_ALM=REC_ORI AND VD1_FOR=0 AND TRA_COD=VD1_TRA AND TRA_TIP_TRA<>"CMP";



/* View: FLUXO_DE_CAIXA */
CREATE VIEW FLUXO_DE_CAIXA(
    RECEBER,
    PAGAR,
    REC_VEC)
AS
SELECT SUM(REC_VAL) AS RECEBER, 0.00 AS PAGAR, REC_VEC
 FROM MVCOREC
 WHERE REC_COBRAVEL <> 'F' AND (REC_BAIVER = 'S' OR REC_BAIVER IS NULL)
 GROUP BY REC_VEC
 UNION ALL
 SELECT 0.00 AS RECEBER, SUM(PAG_VAL) AS PAGAR, PAG_VEC AS REC_VEC
 FROM MVCOPAG
 GROUP BY PAG_VEC;



/* View: LISTAGEMAGENDA */
CREATE VIEW LISTAGEMAGENDA(
    TIPO,
    ASSUNTO,
    CONCLUIDO,
    OBSERVACAO,
    DATA,
    CODIGO,
    NEGRITO,
    DAT_ATU,
    COD_USER)
AS
Select "Ligação" As Tipo, lig_nom As Assunto,
 lig_con As Concluido, lig_memo As Observacao,
 dat_atu As Data, lig_cod As Codigo, Lig_Dest As Negrito, Dat_Atu, cod_user
 From agliga
 Union All
 Select "Tarefa " As Tipo, tar_nom As Assunto,
 tar_con As Concluido, tar_memo As Observacao,
 dat_atu As Data, tar_cod As Codigo, tar_dest As Negrito, Dat_Atu, cod_user
 From agtarefa
 Union All
 Select "Reunião" As Tipo, reu_nom As Assunto,
 reu_con As Concluido, reu_memo As Observacao,
 dat_atu As Data, reu_cod As Codigo, reu_dest As Negrito, Dat_Atu, cod_user
 From agreuni;



/* View: MVCOPAGB2 */
CREATE VIEW MVCOPAGB2(
    BAI_DOC,
    BAI_CLI,
    BAI_TIP,
    BAI_EMI,
    BAI_VEC,
    BAI_PGT,
    BAI_OPE,
    DIFERENCA,
    BAI_VAL,
    BAI_HIS,
    BAI_PLA,
    BAI_CON,
    BAI_CCUSTO,
    BAI_CAR,
    BAIXA,
    BAI_CCUSTO2,
    BAI_PLA2,
    BAI_CART,
    BAI_COD,
    BAI_DAT,
    BAI_TIP2,
    BAI_MOE,
    BAI_DFP,
    BAI_CLI2,
    LGE_COD,
    REC_COD,
    BAI_CAR2,
    REC_COBRAVEL,
    DAT_CAD,
    DAT_ATU,
    BAI_OBS,
    LGED_COD,
    BAI_HIS2,
    BAI_ORI,
    BAI_VD1COD,
    BAI_NOSSONUMERO,
    BAI_PROJ2,
    BAI_FOR_VINC,
    WDOB_DOB,
    BAI_ORI2,
    TIP_NOM,
    PLA_NOM,
    CUS_NOM,
    CAR_NOM,
    CUS_NOM2,
    PLA_NOM2,
    CON_NOM,
    ALM_FANT,
    CLI_RED,
    CLI_NOM,
    BAI_DES,
    BAI_ACR,
    FOR_RZS,
    FOR_RED,
    PROJ2_NOM,
    PROJ_NOM)
AS
SELECT DOB_DOC, DOB_CLI, DOB_TIP2, DOB_EMI, DOB_VEC,DOB_RECB_PGT,
 DOB_OPE, ( DOB_VEC - DOB_RECB_PGT ), DOB_VAL,DOB_HIS, DOB_PLA, DOB_CON,
 DOB_CCUSTO, DOB_CAR, DOB_TOT,DOB_CCUSTO2, DOB_PLA2, DOB_CART,
 DOB_cod, DOB_CAD,DOB_tip2,DOB_moe,DOB_dfp,DOB_cli,DOB_FLAG,DOB_RECPAG,
 DOB_car,DOB_cobravel,dat_cad, dat_atu,DOB_obs,DOB_cod,DOB_his,DOB_alm,
 dob_vd1cod,dob_nossonumero, dob_proj2,Dob_for_vinc, DOB_DOB, DOB_ALM
 ,CDTIPD.TIP_NOM, CDPLA.PLA_NOM, CDCCUST.CUS_NOM , CDCAR.CAR_nOM , CDCCUSTAUX.CUS_nOM , CDPLAAUX.PLA_nOM , CON_nOM, ALM_FANT,CLI_RED, CLI_NOM,
 (SELECT COALESCE(SUM(DOB_VAL),0) FROM MVLGED B WHERE B.DOB_DOB=A.DOB_cod and DOB_vAL<0) As BAI_DES,
 (SELECT COALESCE(SUM(DOB_VAL),0) FROM MVLGED B WHERE B.DOB_DOB=A.DOB_cod and DOB_vAL>0) As BAI_ACR, FOR_RZS, FOR_RED, PROJ2_NOM, PROJ_NOM
 FROM MVLGED A
 
 LEFT JOIN CDTIPD ON A.DOB_TIP2=CDTIPD.TIP_COD
 LEFT JOIN CDPLA ON A.DOB_PLA=CDPLA.PLA_COD
 LEFT JOIN CDCCUST ON A.DOB_CCUSTO=CDCCUST.CUS_COD
 LEFT JOIN CDCAR ON A.DOB_CAR=CDCAR.CAR_COD
 LEFT JOIN CDCCUSTAUX ON A.Dob_ccusto2=CDCCUSTAUX.CUS_COD
 LEFT JOIN CDPLAAUX ON A.dob_pla2=CDPLAAUX.PLA_COD
 LEFT JOIN CDCON ON A.DOB_CON=CDCON.CON_COD
 LEFT JOIN CDALM ON A.DOB_ALM=CDALM.ALM_COD
 LEFT JOIN CDCLI ON A.DOB_CLI_VINC=CDCLI.CLI_COD
 LEFT JOIN CDFOR ON A.DOB_FOR=CDFOR.FOR_COD
 LEFT JOIN CDPROJ2 ON PROJ2_COD = A.DOB_PROJ2 LEFT JOIN CDPROJ ON CDPROJ.PROJ_COD = PROJ2_PROJ
 
 WHERE A.DOB_DOB IS NULL AND A.DOB_FOR IS NOT NULL AND A.DOB_FOR <> 0
 AND ( (A.DOB_CLI = 0) OR (A.DOB_CLI IS NULL) )
 
 UNION ALL
 SELECT
 LGE_DOC, LGE_CLI, LGE_TIP2, LGE_EMI, LGE_VEC, LGE_RECB_PGT,
 LGE_OPE, ( LGE_VEC - LGE_RECB_PGT ), LGE_VAL, LGE_HIS, LGE_PLA, LGE_CON,
 LGE_CCUSTO, LGE_CAR, LGE_TOT,LGE_CCUSTO2, LGE_PLA2, LGE_CART,
 LGE_cod, LGE_CAD,LGE_tip2,LGE_moe,LGE_dfp,LGE_cli,0,LGE_RECPAG,
 LGE_car,LGE_cobravel,dat_cad, dat_atu,LGE_obs,LGE_cod,LGE_his, LGE_alm,
 LGE_vd1cod,LGE_nossonumero, LGE_proj2,LGE_for_vinc, 0, LGE_ALM
 ,CDTIPD.TIP_NOM, CDPLA.PLA_NOM, CDCCUST.CUS_NOM , CDCAR.CAR_nOM , CDCCUSTAUX.CUS_nOM , CDPLAAUX.PLA_nOM , CON_nOM, ALM_FANT,CLI_RED, CLI_NOM,
 0.0,0.0, FOR_RZS, FOR_RED, PROJ2_NOM, PROJ_NOM
 FROM MVLGE A
 
 LEFT JOIN CDTIPD ON A.LGE_TIP2=CDTIPD.TIP_COD
 LEFT JOIN CDPLA ON A.LGE_PLA=CDPLA.PLA_COD
 LEFT JOIN CDCCUST ON A.LGE_CCUSTO=CDCCUST.CUS_COD
 LEFT JOIN CDCAR ON A.LGE_CAR=CDCAR.CAR_COD
 LEFT JOIN CDCCUSTAUX ON A.LGE_ccusto2=CDCCUSTAUX.CUS_COD
 LEFT JOIN CDPLAAUX ON A.LGE_pla2=CDPLAAUX.PLA_COD
 LEFT JOIN CDCON ON A.LGE_CON=CDCON.CON_COD
 LEFT JOIN CDALM ON A.LGE_ALM=CDALM.ALM_COD
 LEFT JOIN CDCLI ON A.LGE_CLI_VINC=CDCLI.CLI_COD
 LEFT JOIN CDFOR ON A.LGE_FOR=CDFOR.FOR_COD
 LEFT JOIN CDPROJ2 ON PROJ2_COD = A.LGE_PROJ2 LEFT JOIN CDPROJ ON CDPROJ.PROJ_COD = PROJ2_PROJ
 
 WHERE A.LGE_FOR IS NOT NULL AND A.LGE_FOR <> 0
 AND ( (A.LGE_PLA<>'2') and (A.LGE_PLA<>'1') )
 AND ( (A.LGE_CLI = 0) OR (A.LGE_CLI IS NULL) )
 
 UNION ALL
 SELECT DOB_DOC, DOB_CLI, DOB_TIP2, DOB_EMI, DOB_VEC,DOB_RECB_PGT,
 DOB_OPE, ( DOB_VEC - DOB_RECB_PGT ), DOB_VAL,DOB_HIS, DOB_PLA, DOB_CON,
 DOB_CCUSTO, DOB_CAR, DOB_TOT,DOB_CCUSTO2, DOB_PLA2, DOB_CART,
 DOB_cod, DOB_CAD,DOB_tip2,DOB_moe,DOB_dfp,DOB_cli,DOB_FLAG,DOB_RECPAG,
 DOB_car,DOB_cobravel,DOB_CAD, DOB_EMI,DOB_obs,DOB_cod,DOB_his,DOB_alm,
 dob_vd1cod,dob_nossonumero, dob_proj2,Dob_for_vinc, DOB_DOB, DOB_ALM
 ,CDTIPD.TIP_NOM, CDPLA.PLA_NOM, CDCCUST.CUS_NOM , CDCAR.CAR_nOM , CDCCUSTAUX.CUS_nOM , CDPLAAUX.PLA_nOM , CON_nOM, ALM_FANT,CLI_RED, CLI_NOM,
 (SELECT COALESCE(SUM(DOB_VAL),0) FROM MORLGED B WHERE B.DOB_DOB=A.DOB_cod and DOB_vAL<0) As BAI_DES,
 (SELECT COALESCE(SUM(DOB_VAL),0) FROM MORLGED B WHERE B.DOB_DOB=A.DOB_cod and DOB_vAL>0) As BAI_ACR, FOR_RZS, FOR_RED, PROJ2_NOM, PROJ_NOM
 FROM MORLGED A
 
 LEFT JOIN CDTIPD ON A.DOB_TIP2=CDTIPD.TIP_COD
 LEFT JOIN CDPLA ON A.DOB_PLA=CDPLA.PLA_COD
 LEFT JOIN CDCCUST ON A.DOB_CCUSTO=CDCCUST.CUS_COD
 LEFT JOIN CDCAR ON A.DOB_CAR=CDCAR.CAR_COD
 LEFT JOIN CDCCUSTAUX ON A.Dob_ccusto2=CDCCUSTAUX.CUS_COD
 LEFT JOIN CDPLAAUX ON A.dob_pla2=CDPLAAUX.PLA_COD
 LEFT JOIN CDCON ON A.DOB_CON=CDCON.CON_COD
 LEFT JOIN CDALM ON A.DOB_ALM=CDALM.ALM_COD
 LEFT JOIN CDCLI ON A.DOB_CLI_VINC=CDCLI.CLI_COD
 LEFT JOIN CDFOR ON A.DOB_FOR=CDFOR.FOR_COD
 LEFT JOIN CDPROJ2 ON PROJ2_COD = A.DOB_PROJ2 LEFT JOIN CDPROJ ON CDPROJ.PROJ_COD = PROJ2_PROJ
 WHERE DOB_DOB IS NULL AND DOB_FOR IS NOT NULL AND A.DOB_FOR <> 0
 AND ( (A.DOB_CLI = 0) OR (A.DOB_CLI IS NULL) )
 
 UNION ALL
 SELECT
 LGE_DOC, LGE_CLI, LGE_TIP2, LGE_EMI, LGE_VEC, LGE_RECB_PGT,
 LGE_OPE, ( LGE_VEC - LGE_RECB_PGT ), LGE_VAL, LGE_HIS, LGE_PLA, LGE_CON,
 LGE_CCUSTO, LGE_CAR, LGE_TOT,LGE_CCUSTO2, LGE_PLA2, LGE_CART,
 LGE_cod, LGE_CAD,LGE_tip2,LGE_moe,LGE_dfp,LGE_cli,0,LGE_RECPAG,
 LGE_car,LGE_cobravel,LGE_cad, LGE_EMI, LGE_obs,LGE_cod,LGE_his,LGE_alm,
 LGE_vd1cod,LGE_nossonumero, LGE_proj2,LGE_for_vinc, 0, LGE_ALM
 ,CDTIPD.TIP_NOM, CDPLA.PLA_NOM, CDCCUST.CUS_NOM , CDCAR.CAR_nOM , CDCCUSTAUX.CUS_nOM , CDPLAAUX.PLA_nOM , CON_nOM, ALM_FANT,CLI_RED, CLI_NOM,
 0.0,0.0, FOR_RZS, FOR_RED, PROJ2_NOM, PROJ_NOM
 FROM MORLGE A
 
 LEFT JOIN CDTIPD ON A.LGE_TIP2=CDTIPD.TIP_COD
 LEFT JOIN CDPLA ON A.LGE_PLA=CDPLA.PLA_COD
 LEFT JOIN CDCCUST ON A.LGE_CCUSTO=CDCCUST.CUS_COD
 LEFT JOIN CDCAR ON A.LGE_CAR=CDCAR.CAR_COD
 LEFT JOIN CDCCUSTAUX ON A.LGE_ccusto2=CDCCUSTAUX.CUS_COD
 LEFT JOIN CDPLAAUX ON A.LGE_pla2=CDPLAAUX.PLA_COD
 LEFT JOIN CDCON ON A.LGE_CON=CDCON.CON_COD
 LEFT JOIN CDALM ON A.LGE_ALM=CDALM.ALM_COD
 LEFT JOIN CDCLI ON LGE_CLI_VINC=CDCLI.CLI_COD
 LEFT JOIN CDFOR ON A.LGE_FOR=CDFOR.FOR_COD
 LEFT JOIN CDPROJ2 ON PROJ2_COD = A.LGE_PROJ2 LEFT JOIN CDPROJ ON CDPROJ.PROJ_COD = PROJ2_PROJ
 
 WHERE A.LGE_FOR IS NOT NULL AND A.LGE_FOR <> 0
 AND ( ((A.LGE_TIP<>'D') or (A.LGE_TIP<>'T')) OR (A.LGE_TIP IS NULL) )
 AND ( (A.LGE_PLA<>'2') and (A.LGE_PLA<>'1') )
 AND ( (A.LGE_CLI = 0) OR (A.LGE_CLI IS NULL) );



/* View: MVCORECB2 */
CREATE VIEW MVCORECB2(
    BAI_DOC,
    BAI_CLI,
    BAI_TIP,
    BAI_EMI,
    BAI_VEC,
    BAI_PGT,
    BAI_OPE,
    DIFERENCA,
    BAI_VAL,
    BAI_HIS,
    BAI_PLA,
    BAI_CON,
    BAI_CCUSTO,
    BAI_CAR,
    BAIXA,
    BAI_CCUSTO2,
    BAI_PLA2,
    BAI_CART,
    BAI_COD,
    BAI_DAT,
    BAI_TIP2,
    BAI_MOE,
    BAI_DFP,
    BAI_CLI2,
    LGE_COD,
    REC_COD,
    BAI_CAR2,
    REC_COBRAVEL,
    DAT_CAD,
    DAT_ATU,
    BAI_OBS,
    LGED_COD,
    BAI_HIS2,
    BAI_ORI,
    BAI_VD1COD,
    BAI_NOSSONUMERO,
    BAI_PROJ2,
    BAI_FOR_VINC,
    WDOB_DOB,
    BAI_ORI2,
    TIP_NOM,
    PLA_NOM,
    CUS_NOM,
    CAR_NOM,
    CUS_NOM2,
    PLA_NOM2,
    CON_NOM,
    ALM_FANT,
    CLI_RED,
    CLI_NOM,
    BAI_DES,
    BAI_ACR,
    FOR_RZS,
    FOR_RED,
    PROJ2_NOM,
    PROJ_NOM)
AS
SELECT DOB_DOC, DOB_CLI, DOB_TIP2, DOB_EMI, DOB_VEC,DOB_RECB_PGT,
 DOB_OPE, ( DOB_VEC - DOB_RECB_PGT ), DOB_VAL,DOB_HIS, DOB_PLA, DOB_CON,
 DOB_CCUSTO, DOB_CAR, DOB_TOT,DOB_CCUSTO2, DOB_PLA2, DOB_CART,
 DOB_cod, DOB_CAD,DOB_tip2,DOB_moe,DOB_dfp,DOB_cli,DOB_FLAG,DOB_RECPAG,
 DOB_car,DOB_cobravel,dat_cad, dat_atu,DOB_obs,DOB_cod,DOB_his,DOB_alm,
 dob_vd1cod,dob_nossonumero, dob_proj2,Dob_for_vinc, DOB_DOB, DOB_ALM
 ,CDTIPD.TIP_NOM, CDPLA.PLA_NOM, CDCCUST.CUS_NOM , CDCAR.CAR_nOM , CDCCUSTAUX.CUS_nOM , CDPLAAUX.PLA_nOM , CON_nOM, ALM_FANT,CLI_RED, CLI_NOM,
 (SELECT COALESCE(SUM(DOB_VAL),0) FROM MVLGED B WHERE B.DOB_DOB=A.DOB_cod and DOB_vAL<0) As BAI_DES,
 (SELECT COALESCE(SUM(DOB_VAL),0) FROM MVLGED B WHERE B.DOB_DOB=A.DOB_cod and DOB_vAL>0) As BAI_ACR, FOR_RZS, FOR_RED, PROJ2_NOM, PROJ_NOM
 FROM MVLGED A
 
 LEFT JOIN CDTIPD ON A.DOB_TIP2=CDTIPD.TIP_COD
 LEFT JOIN CDPLA ON A.DOB_PLA=CDPLA.PLA_COD
 LEFT JOIN CDCCUST ON A.DOB_CCUSTO=CDCCUST.CUS_COD
 LEFT JOIN CDCAR ON A.DOB_CAR=CDCAR.CAR_COD
 LEFT JOIN CDCCUSTAUX ON A.Dob_ccusto2=CDCCUSTAUX.CUS_COD
 LEFT JOIN CDPLAAUX ON A.dob_pla2=CDPLAAUX.PLA_COD
 LEFT JOIN CDCON ON A.DOB_CON=CDCON.CON_COD
 LEFT JOIN CDALM ON A.DOB_ALM=CDALM.ALM_COD
 LEFT JOIN CDCLI ON A.DOB_CLI=CDCLI.CLI_COD
 LEFT JOIN CDFOR ON A.DOB_FOR_VINC=CDFOR.FOR_COD
 LEFT JOIN CDPROJ2 ON PROJ2_COD = A.DOB_PROJ2 LEFT JOIN CDPROJ ON CDPROJ.PROJ_COD = PROJ2_PROJ
 
 WHERE A.DOB_DOB IS NULL AND A.DOB_CLI IS NOT NULL AND A.DOB_CLI <> 0
 AND ( (A.DOB_FOR = 0) OR (A.DOB_FOR IS NULL) )
 
 UNION ALL
 SELECT
 LGE_DOC, LGE_CLI, LGE_TIP2, LGE_EMI, LGE_VEC, LGE_RECB_PGT,
 LGE_OPE, ( LGE_VEC - LGE_RECB_PGT ), LGE_VAL, LGE_HIS, LGE_PLA, LGE_CON,
 LGE_CCUSTO, LGE_CAR, LGE_TOT,LGE_CCUSTO2, LGE_PLA2, LGE_CART,
 LGE_cod, LGE_CAD,LGE_tip2,LGE_moe,LGE_dfp,LGE_cli,0,LGE_RECPAG,
 LGE_car,LGE_cobravel,dat_cad, dat_atu,LGE_obs,LGE_cod,LGE_his, LGE_alm,
 LGE_vd1cod,LGE_nossonumero, LGE_proj2,LGE_for_vinc, 0, LGE_ALM
 ,CDTIPD.TIP_NOM, CDPLA.PLA_NOM, CDCCUST.CUS_NOM , CDCAR.CAR_nOM , CDCCUSTAUX.CUS_nOM , CDPLAAUX.PLA_nOM , CON_nOM, ALM_FANT,CLI_RED, CLI_NOM,
 0.0,0.0, FOR_RZS, FOR_RED, PROJ2_NOM, PROJ_NOM
 FROM MVLGE A
 
 LEFT JOIN CDTIPD ON A.LGE_TIP2=CDTIPD.TIP_COD
 LEFT JOIN CDPLA ON A.LGE_PLA=CDPLA.PLA_COD
 LEFT JOIN CDCCUST ON A.LGE_CCUSTO=CDCCUST.CUS_COD
 LEFT JOIN CDCAR ON A.LGE_CAR=CDCAR.CAR_COD
 LEFT JOIN CDCCUSTAUX ON A.LGE_ccusto2=CDCCUSTAUX.CUS_COD
 LEFT JOIN CDPLAAUX ON A.LGE_pla2=CDPLAAUX.PLA_COD
 LEFT JOIN CDCON ON A.LGE_CON=CDCON.CON_COD
 LEFT JOIN CDALM ON A.LGE_ALM=CDALM.ALM_COD
 LEFT JOIN CDCLI ON A.LGE_CLI=CDCLI.CLI_COD
 LEFT JOIN CDFOR ON A.LGE_FOR_VINC=CDFOR.FOR_COD
 LEFT JOIN CDPROJ2 ON PROJ2_COD = A.LGE_PROJ2 LEFT JOIN CDPROJ ON CDPROJ.PROJ_COD = PROJ2_PROJ
 
 WHERE A.LGE_CLI IS NOT NULL AND A.LGE_CLI <> 0
 AND ( (A.LGE_PLA<>'2') and (A.LGE_PLA<>'1') )
 AND ( (A.LGE_FOR = 0) OR (A.LGE_FOR IS NULL) )
 
 UNION ALL
 SELECT DOB_DOC, DOB_CLI, DOB_TIP2, DOB_EMI, DOB_VEC,DOB_RECB_PGT,
 DOB_OPE, ( DOB_VEC - DOB_RECB_PGT ), DOB_VAL,DOB_HIS, DOB_PLA, DOB_CON,
 DOB_CCUSTO, DOB_CAR, DOB_TOT,DOB_CCUSTO2, DOB_PLA2, DOB_CART,
 DOB_cod, DOB_CAD,DOB_tip2,DOB_moe,DOB_dfp,DOB_cli,DOB_FLAG,DOB_RECPAG,
 DOB_car,DOB_cobravel,DOB_CAD, DOB_EMI,DOB_obs,DOB_cod,DOB_his,DOB_alm,
 dob_vd1cod,dob_nossonumero, dob_proj2,Dob_for_vinc, DOB_DOB, DOB_ALM
 ,CDTIPD.TIP_NOM, CDPLA.PLA_NOM, CDCCUST.CUS_NOM , CDCAR.CAR_nOM , CDCCUSTAUX.CUS_nOM , CDPLAAUX.PLA_nOM , CON_nOM, ALM_FANT,CLI_RED, CLI_NOM,
 (SELECT COALESCE(SUM(DOB_VAL),0) FROM MORLGED B WHERE B.DOB_DOB=A.DOB_cod and DOB_vAL<0) As BAI_DES,
 (SELECT COALESCE(SUM(DOB_VAL),0) FROM MORLGED B WHERE B.DOB_DOB=A.DOB_cod and DOB_vAL>0) As BAI_ACR, FOR_RZS, FOR_RED, PROJ2_NOM, PROJ_NOM
 FROM MORLGED A
 
 LEFT JOIN CDTIPD ON A.DOB_TIP2=CDTIPD.TIP_COD
 LEFT JOIN CDPLA ON A.DOB_PLA=CDPLA.PLA_COD
 LEFT JOIN CDCCUST ON A.DOB_CCUSTO=CDCCUST.CUS_COD
 LEFT JOIN CDCAR ON A.DOB_CAR=CDCAR.CAR_COD
 LEFT JOIN CDCCUSTAUX ON A.Dob_ccusto2=CDCCUSTAUX.CUS_COD
 LEFT JOIN CDPLAAUX ON A.dob_pla2=CDPLAAUX.PLA_COD
 LEFT JOIN CDCON ON A.DOB_CON=CDCON.CON_COD
 LEFT JOIN CDALM ON A.DOB_ALM=CDALM.ALM_COD
 LEFT JOIN CDCLI ON A.DOB_CLI=CDCLI.CLI_COD
 LEFT JOIN CDFOR ON A.DOB_FOR_VINC=CDFOR.FOR_COD
 LEFT JOIN CDPROJ2 ON PROJ2_COD = A.DOB_PROJ2 LEFT JOIN CDPROJ ON CDPROJ.PROJ_COD = PROJ2_PROJ
 WHERE DOB_DOB IS NULL AND DOB_CLI IS NOT NULL AND A.DOB_CLI <> 0
 AND ( (A.DOB_FOR = 0) OR (A.DOB_FOR IS NULL) )
 
 UNION ALL
 SELECT
 LGE_DOC, LGE_CLI, LGE_TIP2, LGE_EMI, LGE_VEC, LGE_RECB_PGT,
 LGE_OPE, ( LGE_VEC - LGE_RECB_PGT ), LGE_VAL, LGE_HIS, LGE_PLA, LGE_CON,
 LGE_CCUSTO, LGE_CAR, LGE_TOT,LGE_CCUSTO2, LGE_PLA2, LGE_CART,
 LGE_cod, LGE_CAD,LGE_tip2,LGE_moe,LGE_dfp,LGE_cli,0,LGE_RECPAG,
 LGE_car,LGE_cobravel,LGE_cad, LGE_EMI, LGE_obs,LGE_cod,LGE_his,LGE_alm,
 LGE_vd1cod,LGE_nossonumero, LGE_proj2,LGE_for_vinc, 0, LGE_ALM
 ,CDTIPD.TIP_NOM, CDPLA.PLA_NOM, CDCCUST.CUS_NOM , CDCAR.CAR_nOM , CDCCUSTAUX.CUS_nOM , CDPLAAUX.PLA_nOM , CON_nOM, ALM_FANT,CLI_RED, CLI_NOM,
 0.0,0.0, FOR_RZS, FOR_RED, PROJ2_NOM, PROJ_NOM
 FROM MORLGE A
 
 LEFT JOIN CDTIPD ON A.LGE_TIP2=CDTIPD.TIP_COD
 LEFT JOIN CDPLA ON A.LGE_PLA=CDPLA.PLA_COD
 LEFT JOIN CDCCUST ON A.LGE_CCUSTO=CDCCUST.CUS_COD
 LEFT JOIN CDCAR ON A.LGE_CAR=CDCAR.CAR_COD
 LEFT JOIN CDCCUSTAUX ON A.LGE_ccusto2=CDCCUSTAUX.CUS_COD
 LEFT JOIN CDPLAAUX ON A.LGE_pla2=CDPLAAUX.PLA_COD
 LEFT JOIN CDCON ON A.LGE_CON=CDCON.CON_COD
 LEFT JOIN CDALM ON A.LGE_ALM=CDALM.ALM_COD
 LEFT JOIN CDCLI ON A.LGE_CLI=CDCLI.CLI_COD
 LEFT JOIN CDFOR ON A.LGE_FOR_VINC=CDFOR.FOR_COD
 LEFT JOIN CDPROJ2 ON PROJ2_COD = A.LGE_PROJ2 LEFT JOIN CDPROJ ON CDPROJ.PROJ_COD = PROJ2_PROJ
 
 WHERE A.LGE_CLI IS NOT NULL AND A.LGE_CLI <> 0
 AND ( ((A.LGE_TIP<>'D') or (A.LGE_TIP<>'T')) OR (A.LGE_TIP IS NULL) )
 AND ( (A.LGE_PLA<>'2') and (A.LGE_PLA<>'1') )
 AND ( (A.LGE_FOR = 0) OR (A.LGE_FOR IS NULL) );



/* View: PESQUISA */
CREATE VIEW PESQUISA(
    BOR_COD)
AS
select DISTINCT REC_NBOR from mvcorec where REC_NBOR is not null;



/* View: TELEMARK */
CREATE VIEW TELEMARK(
    TMK2_TMK,
    DATA)
AS
SELECT TMK2_TMK,MAX(TMK2_PROXC) AS DATA FROM MVTMK2
GROUP BY TMK2_TMK;



/* View: TRANSFERENCIAS */
CREATE VIEW TRANSFERENCIAS(
    VD1_COD_ORI,
    VD1_ALM_ORI,
    VD1_CAD_ORI,
    VD1_COD_DES,
    VD1_ALM_DES,
    VD1_CAD_DES,
    VD1_TRA_ORI,
    VD1_TRA_DES,
    TRA_NOM_ORI,
    TRA_NOM_DES,
    ALM_FANT_ORI,
    ALM_FANT_DES,
    STAT_ORI,
    STAT_DES,
    VD1_NOT_ORI,
    VD1_NOT_DES,
    STATUS_ORI,
    STATUS_DES)
AS
SELECT A.VD1_COD, A.VD1_ALM, A.VD1_CAD, A.VD1_FILHO, B.VD1_ALM, B.VD1_CAD,
 A.VD1_TRA, B.VD1_TRA,
 (SELECT TRA_NOM FROM CDTRA1 WHERE TRA_COD=A.VD1_TRA),
 (SELECT TRA_NOM FROM CDTRA1 WHERE TRA_COD=B.VD1_TRA),
 (SELECT ALM_FANT FROM CDALM WHERE ALM_COD=A.VD1_ALM),
 (SELECT ALM_FANT FROM CDALM WHERE ALM_COD=B.VD1_ALM),
 A.VD1_CANC,B.VD1_CANC, A.VD1_NOT,B.VD1_NOT,A.STATUS,B.STATUS
 FROM ESTMVVD1 A, ESTMVVD1 B, CDTRA1
 WHERE TRA_TIP_TRA="TRS" AND A.VD1_TRA=TRA_COD AND B.VD1_COD=A.VD1_FILHO;



/* View: VW_SIT */
CREATE VIEW VW_SIT(
    AIDOP,
    ACLI,
    ANOMEOP,
    ASTRIKE,
    AVENCTO,
    AQTDE,
    AVALOR,
    AVALORHIST)
AS
select idop,ope_cli,CDOP.nome , OP2.strike,CDOP.vencimento,
     case when OP2.op = 'V' then OP2.qtde  else op2.qtde* -1 end,
     coalesce(cdop.ultimopreco,0),
     coalesce(OP2.valor,0)
     from mvope op
     left join mvop2 op2 on op2.OPE=op.id
     left join cdopcoes cdop on cdop.id=op2.opcao;




/******************************************************************************/
/*                             Unique Constraints                             */
/******************************************************************************/

ALTER TABLE AUTHGROUP ADD UNIQUE (IDENT);
ALTER TABLE CDPROICMS ADD CONSTRAINT UNQ_CDPROICMS UNIQUE (ICM_PRO, ICM_EST);
ALTER TABLE CDSETOR2 ADD CONSTRAINT UNQ_CDSETOR2 UNIQUE (SET2_SET, SET2_USE);
ALTER TABLE CDSETOR3 ADD CONSTRAINT UNQ_CDSETOR3 UNIQUE (SET3_USE, SET3_SET);
ALTER TABLE MYAUTHUSER ADD UNIQUE (LOGONNAME);


/******************************************************************************/
/*                                Primary Keys                                */
/******************************************************************************/

ALTER TABLE AUTHGROUP ADD PRIMARY KEY (ID);
ALTER TABLE CDALM2 ADD CONSTRAINT PK_CDALM2_COD PRIMARY KEY (ALM_COD);
ALTER TABLE CDALM3 ADD CONSTRAINT PK_CDALM3_COD PRIMARY KEY (ALM_COD, ALM_USO);
ALTER TABLE CDARQINFO2 ADD PRIMARY KEY (ARQ2_COD);
ALTER TABLE CDATIVIDADE ADD CONSTRAINT PK_CDATIVIDADE PRIMARY KEY (ATIVIDADE_CODIGO);
ALTER TABLE CDAVAL ADD CONSTRAINT PK_CDAVAL PRIMARY KEY (AVAL_COD);
ALTER TABLE CDCAMPOSVARLOOKUP ADD PRIMARY KEY (LKP_COD);
ALTER TABLE CDCARG ADD CONSTRAINT PK_CDCARG PRIMARY KEY (CAR_COD);
ALTER TABLE CDCHEQUES ADD CONSTRAINT PK_CDCHEQUES PRIMARY KEY (CHE_CODIGO);
ALTER TABLE CDCLICOM ADD CONSTRAINT PK_CDCLICOM PRIMARY KEY (COM_COD);
ALTER TABLE CDCLICOM2 ADD CONSTRAINT PK_CDCLICOM2 PRIMARY KEY (COM2_COD);
ALTER TABLE CDCSOSN ADD CONSTRAINT PK_CDCSOSN PRIMARY KEY (CSO_COD);
ALTER TABLE CDEMPMEDCOORD ADD CONSTRAINT PK_CDEMPMEDCOORD PRIMARY KEY (MED_COD);
ALTER TABLE CDEQUIPE ADD PRIMARY KEY (EQP_COD);
ALTER TABLE CDETIQUETA ADD CONSTRAINT PK_CDETIQUETA PRIMARY KEY (ETI_COD);
ALTER TABLE CDFAQ ADD CONSTRAINT PK_CDFAQ PRIMARY KEY (FAQ_COD);
ALTER TABLE CDFER ADD CONSTRAINT PK_CDFER PRIMARY KEY (FER_NOM);
ALTER TABLE CDFOR ADD CONSTRAINT PK_CDFOR PRIMARY KEY (FOR_COD);
ALTER TABLE CDFORM ADD CONSTRAINT PK_CDFORM PRIMARY KEY (FORM_COD);
ALTER TABLE CDGRTRA ADD CONSTRAINT PK_CDGRTRA PRIMARY KEY (GRT_COD);
ALTER TABLE CDINDICE ADD CONSTRAINT PK_CDINDICE PRIMARY KEY (IND_COD);
ALTER TABLE CDMOE ADD CONSTRAINT PK_CDMOE PRIMARY KEY (MOE_COD);
ALTER TABLE CDMOTIVO ADD PRIMARY KEY (MOT_COD);
ALTER TABLE CDOSFASE ADD CONSTRAINT PK_CDOSFASE PRIMARY KEY (ID);
ALTER TABLE CDPRO ADD CONSTRAINT PK_CDPRO PRIMARY KEY (PRO_COD);
ALTER TABLE CDPROFIC2 ADD CONSTRAINT PK_CDPROFIC2 PRIMARY KEY (FIC2_COD);
ALTER TABLE CDPROJ ADD PRIMARY KEY (PROJ_COD);
ALTER TABLE CDPROJ2 ADD CONSTRAINT PK_CDPROJ2 PRIMARY KEY (PROJ2_COD);
ALTER TABLE CDPROMOBILE ADD CONSTRAINT PK_CDPROMOBILE PRIMARY KEY (PRO_PRO);
ALTER TABLE CDSER ADD CONSTRAINT PK_CDSER PRIMARY KEY (SER_COD);
ALTER TABLE CDSETOR1 ADD CONSTRAINT PK_CDSETOR1 PRIMARY KEY (SET_COD);
ALTER TABLE CDSETOR2 ADD CONSTRAINT PK_CDSETOR2 PRIMARY KEY (SET2_COD);
ALTER TABLE CDSETOR3 ADD CONSTRAINT PK_CDSETOR3 PRIMARY KEY (SET3_COD);
ALTER TABLE CDSIRE_BLOCO ADD CONSTRAINT PK_CDSIRE_BLOCO PRIMARY KEY (BLOCO_CODIGO);
ALTER TABLE CDSIRE_CLIENTE ADD CONSTRAINT PK_CDSIRE_CLIENTE PRIMARY KEY (CLIENTE_CODIGO);
ALTER TABLE CDSIRE_CONDICOES_PAGAMENTO ADD CONSTRAINT PK_CDSIRE_CONDICOES_PAGAMENTO PRIMARY KEY (CONDICOES_CODIGO);
ALTER TABLE CDSIRE_EMPREENDIMENTO ADD CONSTRAINT PK_CDSIRE_EMPREENDIMENTO PRIMARY KEY (EMPREENDIMENTO_CODIGO);
ALTER TABLE CDSIRE_FASE ADD CONSTRAINT PK_CDSIRE_FASE PRIMARY KEY (FASE_CODIGO);
ALTER TABLE CDSIRE_IMOVEL ADD CONSTRAINT PK_CDSIRE_IMOVEL PRIMARY KEY (IMOVEL_CODIGO);
ALTER TABLE CDSIRE_IMOVEL_PRECO ADD CONSTRAINT PK_CDSIRE_IMOVEL_PRECO PRIMARY KEY (TABELA_CODIGO, IMOVEL_CODIGO);
ALTER TABLE CDSIRE_PESSOA ADD CONSTRAINT PK_CDSIRE_PESSOA PRIMARY KEY (PESSOA_CODIGO);
ALTER TABLE CDSIRE_PESSOAS_CLIENTE ADD CONSTRAINT PK_CDSIRE_PESSOAS_CLIENTE PRIMARY KEY (PESSOA_CODIGO, CLIENTE_CODIGO);
ALTER TABLE CDSIRE_PESSOA_ARQUIVO ADD CONSTRAINT PK_CDSIRE_PESSOA_ARQUIVO PRIMARY KEY (ARQUIVO_CODIGO);
ALTER TABLE CDSIRE_RESERVA ADD CONSTRAINT PK_CDSIRE_RESERVA PRIMARY KEY (RESERVA_CODIGO);
ALTER TABLE CDSIRE_RESERVA_ARQUIVO ADD CONSTRAINT PK_CDSIRE_RESERVA_ARQUIVO PRIMARY KEY (ARQUIVO_CODIGO);
ALTER TABLE CDSIRE_RESERVA_PAGAMENTO ADD CONSTRAINT PK_CDSIRE_RESERVA_PAGAMENTO PRIMARY KEY (PAGAMENTO_CODIGO);
ALTER TABLE CDSIRE_TABELA_PRECO ADD CONSTRAINT PK_CDSIRE_TABELA_PRECO PRIMARY KEY (TABELA_CODIGO);
ALTER TABLE CDSITS ADD CONSTRAINT PK_CDSITS PRIMARY KEY (SIT_COD);
ALTER TABLE CDTABVAR ADD CONSTRAINT PK_CDTABVAR PRIMARY KEY (TAB_COD);
ALTER TABLE CDTIPSERDDD ADD CONSTRAINT PK_CDTIPSERDDD PRIMARY KEY (TIP_COD);
ALTER TABLE CDTRA1 ADD CONSTRAINT PK_CDTRA1 PRIMARY KEY (TRA_COD);
ALTER TABLE CDUSER ADD CONSTRAINT PK_CDUSER PRIMARY KEY (USE_COD);
ALTER TABLE ESTMVVD11 ADD PRIMARY KEY (VD11_COD);
ALTER TABLE ESTMVVD12 ADD PRIMARY KEY (VD12_COD);
ALTER TABLE ESTMVVD13 ADD CONSTRAINT PK_ESTMVVD13 PRIMARY KEY (VD13_BOL, VD13_VAR);
ALTER TABLE ESTMVVD19 ADD CONSTRAINT PK_ESTMVVD19 PRIMARY KEY (VD19_COD);
ALTER TABLE ESTMVVD20 ADD CONSTRAINT PK_ESTMVVD20 PRIMARY KEY (VD20_COD);
ALTER TABLE ESTMVVD3 ADD PRIMARY KEY (VD3_COD);
ALTER TABLE ESTMVVD4 ADD PRIMARY KEY (VD4_COD);
ALTER TABLE ESTMVVD5 ADD PRIMARY KEY (VD5_COD);
ALTER TABLE ESTMVVD6 ADD PRIMARY KEY (VD6_COD);
ALTER TABLE LOG_CONEXOES ADD PRIMARY KEY (LOG_ID);
ALTER TABLE MVCOM1 ADD CONSTRAINT PK_MVCOM1 PRIMARY KEY (COM1_COD);
ALTER TABLE MVCOM2 ADD CONSTRAINT PK_MVCOM2 PRIMARY KEY (COM2_COD);
ALTER TABLE MVCOM3 ADD CONSTRAINT PK_MVCOM3 PRIMARY KEY (COM3_COM2, COM3_SET2);
ALTER TABLE MVCOM4 ADD CONSTRAINT PK_MVCOM4 PRIMARY KEY (COM4_COD);
ALTER TABLE MVCOM5 ADD CONSTRAINT PK_MVCOM5 PRIMARY KEY (COM5_COD);
ALTER TABLE MVCOM7 ADD CONSTRAINT PK_MVCOM7 PRIMARY KEY (COM7_COM2);
ALTER TABLE MVCONTRA ADD PRIMARY KEY (CON_COD);
ALTER TABLE MVCONTRA3 ADD PRIMARY KEY (CON3_COD);
ALTER TABLE MVCONTRA4 ADD PRIMARY KEY (CON4_COD);
ALTER TABLE MVCONTRA5 ADD PRIMARY KEY (CON5_COD);
ALTER TABLE MVCOPAG ADD CONSTRAINT PK_MVCOPAG PRIMARY KEY (PAG_COD);
ALTER TABLE MVCORECD ADD PRIMARY KEY (DOB_COD);
ALTER TABLE MVLGE ADD CONSTRAINT PK_MVLGE PRIMARY KEY (LGE_COD);
ALTER TABLE MVOBS ADD PRIMARY KEY (OBS_COD);
ALTER TABLE MYAUTHUSER ADD PRIMARY KEY (ID);
ALTER TABLE PARAMTSUP ADD PRIMARY KEY (PAR_NAME);


/******************************************************************************/
/*                                Foreign Keys                                */
/******************************************************************************/

ALTER TABLE CDATIVIDADE ADD CONSTRAINT FK_CDATIVIDADE_1 FOREIGN KEY (PROJ2_COD) REFERENCES CDPROJ2 (PROJ2_COD);
ALTER TABLE CDATIVIDADE ADD CONSTRAINT FK_CDATIVIDADE_2 FOREIGN KEY (USE_COD) REFERENCES CDUSER (USE_COD);
ALTER TABLE CDFAQ ADD CONSTRAINT FK_CDFAQ_2 FOREIGN KEY (FAQ_USR) REFERENCES CDUSER (USE_COD);
ALTER TABLE CDSIRE_BLOCO ADD CONSTRAINT FK_CDSIRE_BLOCO_1 FOREIGN KEY (EMPREENDIMENTO_CODIGO) REFERENCES CDSIRE_EMPREENDIMENTO (EMPREENDIMENTO_CODIGO);
ALTER TABLE CDSIRE_IMOVEL ADD CONSTRAINT FK_CDSIRE_IMOVEL_1 FOREIGN KEY (BLOCO_CODIGO) REFERENCES CDSIRE_BLOCO (BLOCO_CODIGO);
ALTER TABLE CDSIRE_IMOVEL_PRECO ADD CONSTRAINT FK_CDSIRE_IMOVEL_PRECO_1 FOREIGN KEY (IMOVEL_CODIGO) REFERENCES CDSIRE_IMOVEL (IMOVEL_CODIGO);
ALTER TABLE CDSIRE_IMOVEL_PRECO ADD CONSTRAINT FK_CDSIRE_IMOVEL_PRECO_2 FOREIGN KEY (TABELA_CODIGO) REFERENCES CDSIRE_TABELA_PRECO (TABELA_CODIGO);
ALTER TABLE CDSIRE_PESSOA ADD CONSTRAINT FK_CDSIRE_PESSOA FOREIGN KEY (CLIENTE_CODIGO) REFERENCES CDSIRE_CLIENTE (CLIENTE_CODIGO);
ALTER TABLE CDSIRE_RESERVA ADD CONSTRAINT FK_CDSIRE_RESERVA FOREIGN KEY (IMOVEL_CODIGO) REFERENCES CDSIRE_IMOVEL (IMOVEL_CODIGO);
ALTER TABLE CDSIRE_RESERVA_PAGAMENTO ADD CONSTRAINT FK_CDSIRE_RESERVA_PAGAMENTO_1 FOREIGN KEY (CONDICAO_CODIGO) REFERENCES CDSIRE_CONDICOES_PAGAMENTO (CONDICOES_CODIGO);
ALTER TABLE CDSIRE_RESERVA_PAGAMENTO ADD CONSTRAINT FK_CDSIRE_RESERVA_PAGAMENTO_2 FOREIGN KEY (RESERVA_CODIGO) REFERENCES CDSIRE_RESERVA (RESERVA_CODIGO);
ALTER TABLE CDSIRE_TIPO_USUARIO ADD CONSTRAINT FK_CDSIRE_TIPO_USUARIO_1 FOREIGN KEY (USUARIO_CODIGO) REFERENCES CDUSER (USE_COD);


/******************************************************************************/
/*                                  Indices                                   */
/******************************************************************************/

CREATE UNIQUE INDEX AGLIGA0 ON AGLIGA (LIG_COD);
CREATE INDEX IAGLIGA_DAT_ATU ON AGLIGA (DAT_ATU);
CREATE INDEX IAGLIGA_DAT_CAD ON AGLIGA (DAT_CAD);
CREATE INDEX IAGLIGA_LIG_CON ON AGLIGA (LIG_CON, DAT_ATU);
CREATE INDEX IAGLIGA_LIG_NOM ON AGLIGA (DAT_ATU, LIG_NOM);
CREATE UNIQUE INDEX AGREUNI0 ON AGREUNI (REU_COD);
CREATE INDEX IAGREUNI_DAT_ATU ON AGREUNI (DAT_ATU);
CREATE INDEX IAGREUNI_DAT_CAD ON AGREUNI (DAT_CAD);
CREATE INDEX IAGREUNI_REU_CON ON AGREUNI (REU_CON, DAT_ATU);
CREATE INDEX IAGREUNI_REU_INI ON AGREUNI (DAT_ATU, REU_INI, REU_NOM);
CREATE INDEX IAGREUNI_REU_NOM ON AGREUNI (REU_NOM);
CREATE UNIQUE INDEX AGTAREFA0 ON AGTAREFA (TAR_COD);
CREATE INDEX IAGTAREFA_DAT_ATU ON AGTAREFA (DAT_ATU);
CREATE INDEX IAGTAREFA_DAT_CAD ON AGTAREFA (DAT_CAD);
CREATE INDEX IAGTAREFA_TAR_CON ON AGTAREFA (TAR_CON, DAT_ATU);
CREATE INDEX IAGTAREFA_TAR_FLAG ON AGTAREFA (TAR_FLAG);
CREATE INDEX IAGTAREFA_TAR_NOM ON AGTAREFA (DAT_ATU, TAR_NOM);
CREATE UNIQUE DESCENDING INDEX NDXAUTHGROUPID ON AUTHGROUP (ID);
CREATE INDEX NDXAUTHGROUPIDENT ON AUTHGROUP (IDENT);
CREATE UNIQUE INDEX AUXOBS0 ON AUXOBS (AUX_COD);
CREATE INDEX IAUXOBS_AUX_OBS ON AUXOBS (AUX_OBS);
CREATE INDEX IAUXOBS_DAT_ATU ON AUXOBS (DAT_ATU);
CREATE INDEX IAUXOBS_DAT_CAD ON AUXOBS (DAT_CAD);
CREATE UNIQUE INDEX AXCOPAG0 ON AXCOPAG (PAG_COD);
CREATE INDEX IAXCOPAG_DAT_ATU ON AXCOPAG (DAT_ATU);
CREATE INDEX IAXCOPAG_DAT_CAD ON AXCOPAG (DAT_CAD);
CREATE UNIQUE INDEX AXCOREC0 ON AXCOREC (REC_COD);
CREATE INDEX IAXCOREC_DAT_ATU ON AXCOREC (DAT_ATU);
CREATE INDEX IAXCOREC_DAT_CAD ON AXCOREC (DAT_CAD);
CREATE UNIQUE INDEX CDALM0 ON CDALM (ALM_COD);
CREATE INDEX ICDALM_ALM_FANT ON CDALM (ALM_FANT);
CREATE INDEX ICDALM_ALM_NOM ON CDALM (ALM_NOM);
CREATE INDEX ICDALM_ALM_SIG ON CDALM (ALM_SIG);
CREATE INDEX ICDALM_DAT_ATU ON CDALM (DAT_ATU);
CREATE INDEX ICDALM_DAT_CAD ON CDALM (DAT_CAD);
CREATE UNIQUE INDEX RDB$PRIMARY3 ON CDALM2 (ALM_COD);
CREATE UNIQUE INDEX IDX_ALM3_USO ON CDALM3 (ALM_USO);
CREATE UNIQUE INDEX RDB$PRIMARY7 ON CDALM3 (ALM_COD, ALM_USO);
CREATE UNIQUE INDEX PK_CDAMBIEMTE ON CDAMBIENTE (AMB_COD);
CREATE UNIQUE INDEX CDARE0 ON CDARE (ARE_COD);
CREATE INDEX ICDARE_ARE_NOM ON CDARE (ARE_NOM);
CREATE INDEX ICDARE_ARE_SIG ON CDARE (ARE_SIG);
CREATE INDEX ICDARE_DAT_ATU ON CDARE (DAT_ATU);
CREATE INDEX ICDARE_DAT_CAD ON CDARE (DAT_CAD);
CREATE UNIQUE INDEX PK_CDARQINFO ON CDARQINFO (ARQ_COD);
CREATE INDEX FK_CDARQINFO2 ON CDARQINFO2 (ARQ2_ARQ);
CREATE UNIQUE INDEX RDB$PRIMARY8 ON CDARQINFO2 (ARQ2_COD);
CREATE INDEX FK_CDARQINFO3 ON CDARQINFO3 (ARQ3_ARQ2);
CREATE UNIQUE INDEX PK_CDATIVO ON CDATIVO (ATI_CODBAR);
CREATE UNIQUE INDEX CDATIVOS0 ON CDATIVOS (ID);
CREATE INDEX CDATIVOS1 ON CDATIVOS (NOME);
CREATE INDEX CDATVCOT0 ON CDATVCOT (ID);
CREATE UNIQUE INDEX RDB$PRIMARY53 ON CDAVAL (AVAL_COD);
CREATE UNIQUE INDEX CDBAN0 ON CDBAN (BAN_COD);
CREATE INDEX ICDBAN_BAN_NOM ON CDBAN (BAN_NOM);
CREATE INDEX ICDBAN_BAN_SIG ON CDBAN (BAN_SIG);
CREATE INDEX ICDBAN_DAT_ATU ON CDBAN (DAT_ATU);
CREATE INDEX ICDBAN_DAT_CAD ON CDBAN (DAT_CAD);
CREATE UNIQUE INDEX PK_CDBOR ON CDBOR (BOR_COD);
CREATE INDEX FK_CDBOR2_BOR ON CDBOR2 (BOR2_BOR);
CREATE INDEX FK_CDBOR2_REC ON CDBOR2 (BOR2_REC);
CREATE UNIQUE INDEX PK_CDCAMPOSVAR ON CDCAMPOSVAR (VAR_COD);
CREATE UNIQUE INDEX RDB$PRIMARY32 ON CDCAMPOSVARLOOKUP (LKP_COD);
CREATE UNIQUE INDEX CDCAR0 ON CDCAR (CAR_COD);
CREATE INDEX ICDCAR_CAR_NOM ON CDCAR (CAR_NOM);
CREATE INDEX ICDCAR_CAR_SIG ON CDCAR (CAR_SIG);
CREATE INDEX ICDCAR_DAT_ATU ON CDCAR (DAT_ATU);
CREATE INDEX ICDCAR_DAT_CAD ON CDCAR (DAT_CAD);
CREATE UNIQUE INDEX CDCARG0 ON CDCARG (CAR_COD);
CREATE INDEX ICDCARG_CAR_NOM ON CDCARG (CAR_NOM);
CREATE INDEX ICDCARG_CAR_SIG ON CDCARG (CAR_SIG);
CREATE INDEX ICDCARG_DAT_ATU ON CDCARG (DAT_ATU);
CREATE INDEX ICDCARG_DAT_CAD ON CDCARG (DAT_CAD);
CREATE UNIQUE INDEX CDCAT0 ON CDCAT (CAT_COD);
CREATE INDEX ICDCAT_CAT_NOM ON CDCAT (CAT_NOM);
CREATE INDEX ICDCAT_CAT_SIG ON CDCAT (CAT_SIG);
CREATE INDEX ICDCAT_DAT_ATU ON CDCAT (DAT_ATU);
CREATE INDEX ICDCAT_DAT_CAD ON CDCAT (DAT_CAD);
CREATE UNIQUE INDEX CDCATDOC0 ON CDCATDOC (TIP_COD);
CREATE INDEX ICDCATDOC_DAT_ATU ON CDCATDOC (DAT_ATU);
CREATE INDEX ICDCATDOC_DAT_CAD ON CDCATDOC (DAT_CAD);
CREATE INDEX ICDCATDOC_TIP_NOM ON CDCATDOC (TIP_NOM);
CREATE UNIQUE INDEX CDCATPRO0 ON CDCATPRO (CAT_COD);
CREATE INDEX ICDCATPRO_CAT_NOM ON CDCATPRO (CAT_NOM);
CREATE INDEX ICDCATPRO_DAT_ATU ON CDCATPRO (DAT_ATU);
CREATE INDEX ICDCATPRO_DAT_CAD ON CDCATPRO (DAT_CAD);
CREATE UNIQUE INDEX CDCCUST0 ON CDCCUST (CUS_COD);
CREATE INDEX CDCCUST_ORDEM ON CDCCUST (CUS_ORD);
CREATE INDEX ICDCCUST_CUS_EMP ON CDCCUST (CUS_EMP);
CREATE INDEX ICDCCUST_CUS_NOM ON CDCCUST (CUS_NOM);
CREATE INDEX ICDCCUST_DAT_ATU ON CDCCUST (DAT_ATU);
CREATE INDEX ICDCCUST_DAT_CAD ON CDCCUST (DAT_CAD);
CREATE UNIQUE INDEX CDCCUSTAUX0 ON CDCCUSTAUX (CUS_COD);
CREATE INDEX ICDCCUSTAUX_CUS_NOM ON CDCCUSTAUX (CUS_NOM);
CREATE UNIQUE INDEX CDCEP0 ON CDCEP (CEP_COD);
CREATE INDEX ICDCEP_CEP_CEP ON CDCEP (CEP_END);
CREATE INDEX ICDCEP_DAT_ATU ON CDCEP (DAT_ATU);
CREATE INDEX ICDCEP_DAT_CAD ON CDCEP (DAT_CAD);
CREATE UNIQUE INDEX CDCFO0 ON CDCFO (CFO_COD);
CREATE INDEX ICDCFO_CFO_CFO ON CDCFO (CFO_CFO);
CREATE INDEX ICDCFO_CFO_NOM ON CDCFO (CFO_NOM);
CREATE INDEX ICDCFO_DAT_ATU ON CDCFO (DAT_ATU);
CREATE INDEX ICDCFO_DAT_CAD ON CDCFO (DAT_CAD);
CREATE INDEX FK_CDCHEQUES2 ON CDCHEQUES2 (CHE2_CHE);
CREATE UNIQUE INDEX PK_CDCHEQUES2 ON CDCHEQUES2 (CHE2_COD);
CREATE UNIQUE INDEX CDCID0 ON CDCID (CID_COD);
CREATE INDEX ICDCID_CID_EST ON CDCID (CID_EST);
CREATE INDEX ICDCID_CID_NOM ON CDCID (CID_NOM);
CREATE INDEX ICDCID_DAT_ATU ON CDCID (DAT_ATU);
CREATE INDEX ICDCID_DAT_CAD ON CDCID (DAT_CAD);
CREATE UNIQUE INDEX CDCLA0 ON CDCLA (CLA_COD);
CREATE INDEX ICDCLA_CLA_CLA ON CDCLA (CLA_CLA);
CREATE INDEX ICDCLA_CLA_NOM ON CDCLA (CLA_NOM);
CREATE INDEX ICDCLA_DAT_ATU ON CDCLA (DAT_ATU);
CREATE INDEX ICDCLA_DAT_CAD ON CDCLA (DAT_CAD);
CREATE INDEX ICDCLI_CLI_CEP ON CDCLI (CLI_CEP);
CREATE INDEX ICDCLI_CLI_CPF ON CDCLI (CLI_CPF);
CREATE INDEX ICDCLI_CLI_END ON CDCLI (CLI_END);
CREATE INDEX ICDCLI_CLI_NOM ON CDCLI (CLI_NOM);
CREATE INDEX ICDCLI_CLI_RED ON CDCLI (CLI_RED);
CREATE INDEX ICDCLI_CLI_RG ON CDCLI (CLI_RG);
CREATE INDEX ICDCLI_CLI_TEL ON CDCLI (CLI_TEL);
CREATE INDEX ICDCLI_DAT_ATU ON CDCLI (DAT_ATU);
CREATE INDEX ICDCLI_DAT_CAD ON CDCLI (DAT_CAD);
CREATE UNIQUE INDEX PK_CDCLI ON CDCLI (CLI_COD);
CREATE UNIQUE INDEX CDCLIC0 ON CDCLIC (CON_COD);
CREATE INDEX ICDCLIC_CON_CLI ON CDCLIC (CON_CLI);
CREATE INDEX ICDCLIC_CON_NOM ON CDCLIC (CON_NOM);
CREATE INDEX ICDCLIC_CON_TEL ON CDCLIC (CON_TEL);
CREATE INDEX ICDCLIC_DAT_ATU ON CDCLIC (DAT_ATU);
CREATE INDEX ICDCLIC_DAT_CAD ON CDCLIC (DAT_CAD);
CREATE UNIQUE INDEX RDB$PRIMARY23 ON CDCLICOM (COM_COD);
CREATE UNIQUE INDEX RDB$PRIMARY24 ON CDCLICOM2 (COM2_COD);
CREATE UNIQUE INDEX PK_CDCLIDADOS ON CDCLIDADOS (CLID_COD);
CREATE INDEX FK_CDCLIFUN_FUN_CAR ON CDCLIFUN (FUN_CAR);
CREATE INDEX FK_CDCLIFUN_FUN_EMP ON CDCLIFUN (FUN_EMP);
CREATE INDEX FK_CDCLIFUN_FUN_SET ON CDCLIFUN (FUN_SET);
CREATE UNIQUE INDEX PK_CDCLIFUN ON CDCLIFUN (FUN_COD);
CREATE INDEX FK_CDCLIFUN2_1 ON CDCLIFUN2 (FUN2_FUN1);
CREATE UNIQUE INDEX PK_CDCLIFUN2 ON CDCLIFUN2 (FUN2_COD);
CREATE UNIQUE INDEX CDCON0 ON CDCON (CON_COD);
CREATE INDEX ICDCON_CON_NOM ON CDCON (CON_NOM);
CREATE INDEX ICDCON_CON_SIG ON CDCON (CON_SIG);
CREATE INDEX ICDCON_DAT_ATU ON CDCON (DAT_ATU);
CREATE INDEX ICDCON_DAT_CAD ON CDCON (DAT_CAD);
CREATE INDEX ICDCONT_CON_CEP ON CDCONT (CON_CEP);
CREATE INDEX ICDCONT_CON_CGC ON CDCONT (CON_CGC);
CREATE INDEX ICDCONT_CON_END ON CDCONT (CON_END);
CREATE INDEX ICDCONT_CON_IES ON CDCONT (CON_IES);
CREATE INDEX ICDCONT_CON_NOM ON CDCONT (CON_NOM);
CREATE INDEX ICDCONT_CON_RED ON CDCONT (CON_RED);
CREATE INDEX ICDCONT_DAT_ATU ON CDCONT (DAT_ATU);
CREATE INDEX ICDCONT_DAT_CAD ON CDCONT (DAT_CAD);
CREATE UNIQUE INDEX PK_CDCONT ON CDCONT (CON_COD);
CREATE UNIQUE INDEX CDCONTC0 ON CDCONTC (CON_COD);
CREATE INDEX ICDCONTC_CON_CONT ON CDCONTC (CON_CONT);
CREATE INDEX ICDCONTC_CON_NOM ON CDCONTC (CON_NOM);
CREATE INDEX ICDCONTC_CON_TEL ON CDCONTC (CON_TEL);
CREATE INDEX ICDCONTC_DAT_ATU ON CDCONTC (DAT_ATU);
CREATE INDEX ICDCONTC_DAT_CAD ON CDCONTC (DAT_CAD);
CREATE UNIQUE INDEX CDCOR0 ON CDCOR (COR_COD);
CREATE INDEX ICDCOR_COR_NOM ON CDCOR (COR_NOM);
CREATE INDEX ICDCOR_COR_SIG ON CDCOR (COR_SIG);
CREATE INDEX ICDCOR_DAT_ATU ON CDCOR (DAT_ATU);
CREATE INDEX ICDCOR_DAT_CAD ON CDCOR (DAT_CAD);
CREATE UNIQUE INDEX CDCORRETORA0 ON CDCORRETORA (ID);
CREATE UNIQUE INDEX CDCRE0 ON CDCRE (CRE_COD);
CREATE INDEX ICDCRE_CRE_NOM ON CDCRE (CRE_NOM);
CREATE INDEX ICDCRE_CRE_SIG ON CDCRE (CRE_SIG);
CREATE INDEX ICDCRE_DAT_ATU ON CDCRE (DAT_ATU);
CREATE INDEX ICDCRE_DAT_CAD ON CDCRE (DAT_CAD);
CREATE UNIQUE INDEX CDDEP0 ON CDDEP (DEP_COD);
CREATE INDEX ICDDEP_DAT_ATU ON CDDEP (DAT_ATU);
CREATE INDEX ICDDEP_DAT_CAD ON CDDEP (DAT_CAD);
CREATE INDEX ICDDEP_DEP_NOM ON CDDEP (DEP_NOM);
CREATE INDEX ICDDEP_DEP_SIG ON CDDEP (DEP_SIG);
CREATE UNIQUE INDEX PK_CDDOENCAS ON CDDOENCAS (DOE_COD);
CREATE UNIQUE INDEX CDEMP0 ON CDEMP (EMP_COD);
CREATE INDEX ICDEMP_DAT_ATU ON CDEMP (DAT_ATU);
CREATE INDEX ICDEMP_DAT_CAD ON CDEMP (DAT_CAD);
CREATE INDEX ICDEMP_EMP_FAN ON CDEMP (EMP_FAN);
CREATE INDEX ICDEMP_EMP_NOM ON CDEMP (EMP_NOM);
CREATE UNIQUE INDEX PK_CDEMPCNAE ON CDEMPCNAE (CNAE_COD);
CREATE INDEX FK_CDEMPCRD_CRD_FOR ON CDEMPCRD (CRD_FOR);
CREATE UNIQUE INDEX PK_CDEMPCRD ON CDEMPCRD (CRD_COD);
CREATE INDEX FK_CDEMPCRD2_CRD2_CRD ON CDEMPCRD2 (CRD2_CRD);
CREATE UNIQUE INDEX PK_CDEMPCRD2 ON CDEMPCRD2 (CRD2_COD);
CREATE INDEX FK_CDEMPENG_ENG_FUN ON CDEMPENG (ENG_FUN);
CREATE UNIQUE INDEX PK_CDEMPENG ON CDEMPENG (ENG_COD);
CREATE INDEX FK_CDEMPMEDCOORD_MED_FUN ON CDEMPMEDCOORD (MED_FUN);
CREATE INDEX FK_CDEMPPROFINT_PRO_FUN ON CDEMPPROFINT (PRO_FUN);
CREATE UNIQUE INDEX PK_CDEMPPROFINT ON CDEMPPROFINT (PRO_COD);
CREATE INDEX FK_CDEMPRESAMAP1_MAP1_EMP ON CDEMPRESAMAP1 (MAP1_EMP);
CREATE INDEX FK_CDEMPRESAMAP1_MAP1_SET ON CDEMPRESAMAP1 (MAP1_SET);
CREATE UNIQUE INDEX PK_CDEMPRESAMAP1 ON CDEMPRESAMAP1 (MAP1_COD);
CREATE INDEX FK_CDEMPRESAMAP2_MAP2_CAR ON CDEMPRESAMAP2 (MAP2_CAR);
CREATE INDEX FK_CDEMPRESAMAP2_MAP2_MAP1 ON CDEMPRESAMAP2 (MAP2_MAP1);
CREATE UNIQUE INDEX PK_CDEMPRESAMAP2 ON CDEMPRESAMAP2 (MAP2_COD);
CREATE INDEX FK_CDEMPRESAMAP3_MAP3_MAP2 ON CDEMPRESAMAP3 (MAP3_MAP2);
CREATE UNIQUE INDEX PK_CDEMPRESAMAP3 ON CDEMPRESAMAP3 (MAP3_COD);
CREATE INDEX FK_CDEMPRESAMAP4_MAP4_GRAU_RISC ON CDEMPRESAMAP4 (MAP4_GRAU_RISCO);
CREATE INDEX FK_CDEMPRESAMAP4_MAP4_MAP2 ON CDEMPRESAMAP4 (MAP4_MAP2);
CREATE UNIQUE INDEX PK_CDEMPRESAMAP4 ON CDEMPRESAMAP4 (MAP4_COD);
CREATE INDEX FK_CDEMPRESAMAP5_MAP2 ON CDEMPRESAMAP5 (MAP5_MAP2);
CREATE UNIQUE INDEX PK_CDEMPRESAMAP5 ON CDEMPRESAMAP5 (MAP5_COD);
CREATE INDEX FK_CDEMPRESASEG_EMP_CLI ON CDEMPRESASEG (EMP_CLI);
CREATE INDEX FK_CDEMPRESASEG_EMP_ENG_RESP ON CDEMPRESASEG (EMP_ENG_RESP);
CREATE UNIQUE INDEX PK_CDEMPRESASEG ON CDEMPRESASEG (EMP_COD);
CREATE INDEX FK_CDEMPRESASEG2_EMP2_AMB ON CDEMPRESASEG2 (EMP2_AMB);
CREATE INDEX FK_CDEMPRESASEG2_EMP2_EMP ON CDEMPRESASEG2 (EMP2_EMP);
CREATE UNIQUE INDEX PK_CDEMPRESASEG2 ON CDEMPRESASEG2 (EMP2_COD);
CREATE INDEX FK_CDEMPRESASEG3_EMP3_EMP ON CDEMPRESASEG3 (EMP3_EMP);
CREATE UNIQUE INDEX PK_CDEMPRESASEG3 ON CDEMPRESASEG3 (EMP3_COD);
CREATE INDEX FK_CDEMPRESASEG4_EMP4_EMP ON CDEMPRESASEG4 (EMP4_EMP);
CREATE UNIQUE INDEX PK_CDEMPRESASEG4 ON CDEMPRESASEG4 (EMP4_COD);
CREATE INDEX FK_CDEMPRESASEG5_EMP5_EMP ON CDEMPRESASEG5 (EMP5_EMP);
CREATE UNIQUE INDEX PK_CDEMPRESASEG5 ON CDEMPRESASEG5 (EMP5_COD);
CREATE INDEX FK_CDEMPRESASEG6_EMP5 ON CDEMPRESASEG6 (EMP6_EMP5);
CREATE UNIQUE INDEX PK_CDEMPRESASEG6 ON CDEMPRESASEG6 (EMP6_COD);
CREATE UNIQUE INDEX PK_CDENTEND ON CDENTEND (ENT_COD);
CREATE INDEX CDENTVARVALOR_IDX1 ON CDENTVARVALOR (VAL_ENT_COD);
CREATE INDEX CDENTVARVALOR_IDX2 ON CDENTVARVALOR (VAL_ENT_TAB);
CREATE UNIQUE INDEX PK_CDEQUIPAMENTO ON CDEQUIPAMENTO (EQU_COD);
CREATE UNIQUE INDEX RDB$PRIMARY6 ON CDEQUIPE (EQP_COD);
CREATE UNIQUE INDEX CDEST0 ON CDEST (EST_EST);
CREATE INDEX ICDEST_DAT_ATU ON CDEST (DAT_ATU);
CREATE INDEX ICDEST_DAT_CAD ON CDEST (DAT_CAD);
CREATE UNIQUE INDEX CDESTRATEGIA0 ON CDESTRATEGIA (ID);
CREATE INDEX RDB$FOREIGN18 ON CDETIFONT (FONT_ETI);
CREATE UNIQUE INDEX CDETIQUETA0 ON CDETIQUETA (ETI_COD);
CREATE INDEX ICDETIQUETA_DAT_ATU ON CDETIQUETA (DAT_ATU);
CREATE INDEX ICDETIQUETA_DAT_CAD ON CDETIQUETA (DAT_CAD);
CREATE INDEX ICDETIQUETA_ETI_NOM ON CDETIQUETA (ETI_NOM);
CREATE UNIQUE INDEX RDB$PRIMARY17 ON CDETIQUETA (ETI_COD);
CREATE UNIQUE INDEX PK_CDEXAMESAMB ON CDEXAMESAMB (AMB_COD);
CREATE UNIQUE INDEX PK_CDEXPFIN1 ON CDEXPFIN1 (EXP_COD);
CREATE INDEX FK_CDEXPFIN2 ON CDEXPFIN2 (EXP2_EXP);
CREATE UNIQUE INDEX PK_CDEXPFIN2 ON CDEXPFIN2 (EXP2_COD);
CREATE UNIQUE INDEX PK_CDEXPFINDEPARA ON CDEXPFINDEPARA (EXP_COD);
CREATE INDEX FK_CDEXPFINDEPARA2 ON CDEXPFINDEPARA2 (EXP2_EXP);
CREATE UNIQUE INDEX PK_CDEXPFINDEPARA2 ON CDEXPFINDEPARA2 (EXP2_COD);
CREATE INDEX FK_CDEXPFINDEPARA3 ON CDEXPFINDEPARA3 (EXP3_EXP2);
CREATE UNIQUE INDEX PK_CDEXPFINDEPARA3 ON CDEXPFINDEPARA3 (EXP3_COD);
CREATE INDEX FK_CDEXPFINDEPARA4 ON CDEXPFINDEPARA4 (EXP4_EXP);
CREATE UNIQUE INDEX PK_CDEXPORT ON CDEXPORTSQL (EXP_COD);
CREATE INDEX IND_EXP_COD ON CDEXPORTSQL2 (EXP_COD);
CREATE INDEX IND_USE_COD ON CDEXPORTSQL2 (USE_COD);
CREATE UNIQUE INDEX CDFASESPRO0 ON CDFASESPRO (FAS_COD);
CREATE INDEX ICDFASESPRO_DAT_ATU ON CDFASESPRO (DAT_ATU);
CREATE INDEX ICDFASESPRO_DAT_CAD ON CDFASESPRO (DAT_CAD);
CREATE INDEX ICDFASESPRO_FAS_NOM ON CDFASESPRO (FAS_NOM);
CREATE INDEX ICDFASESPRO_FAS_SIG ON CDFASESPRO (FAS_SIG);
CREATE UNIQUE INDEX RDB$PRIMARY22 ON CDFER (FER_NOM);
CREATE INDEX ICDFOR_DAT_ATU ON CDFOR (DAT_ATU);
CREATE INDEX ICDFOR_DAT_CAD ON CDFOR (DAT_CAD);
CREATE INDEX ICDFOR_FOR_BAI ON CDFOR (FOR_BAI);
CREATE INDEX ICDFOR_FOR_CEP ON CDFOR (FOR_CEP);
CREATE INDEX ICDFOR_FOR_END ON CDFOR (FOR_END);
CREATE INDEX ICDFOR_FOR_RED ON CDFOR (FOR_RED);
CREATE INDEX ICDFOR_FOR_RZS ON CDFOR (FOR_RZS);
CREATE UNIQUE INDEX RDB$PRIMARY40 ON CDFOR (FOR_COD);
CREATE INDEX FK_CDFOR2 ON CDFOR2 (FOR2_GRU);
CREATE INDEX FK_CDFOR2_FOR ON CDFOR2 (FOR2_FOR);
CREATE UNIQUE INDEX PK_CDFOR2 ON CDFOR2 (FOR2_FOR, FOR2_GRU);
CREATE UNIQUE INDEX CDFORC0 ON CDFORC (CON_COD);
CREATE INDEX ICDFORC_CON_FOR ON CDFORC (CON_FOR);
CREATE INDEX ICDFORC_CON_NOM ON CDFORC (CON_NOM);
CREATE INDEX ICDFORC_CON_TEL ON CDFORC (CON_TEL);
CREATE INDEX ICDFORC_DAT_ATU ON CDFORC (DAT_ATU);
CREATE INDEX ICDFORC_DAT_CAD ON CDFORC (DAT_CAD);
CREATE UNIQUE INDEX CDFORM0 ON CDFORM (FORM_COD);
CREATE INDEX FK_CDFORM ON CDFORM (FORM_SERIE);
CREATE INDEX ICDFORM_DAT_ATU ON CDFORM (DAT_ATU);
CREATE INDEX ICDFORM_DAT_CAD ON CDFORM (DAT_CAD);
CREATE INDEX ICDFORM_FORM_NOM ON CDFORM (FORM_NOM);
CREATE INDEX ICDFORM_TIPOFRM ON CDFORM (TIPOFRM);
CREATE UNIQUE INDEX RDB$PRIMARY29 ON CDFORM (FORM_COD);
CREATE INDEX ICDFUN_DAT_ATU ON CDFUN (DAT_ATU);
CREATE INDEX ICDFUN_DAT_CAD ON CDFUN (DAT_CAD);
CREATE INDEX ICDFUN_FUN_APE_IFUN_SENHA ON CDFUN (FUN_APE, FUN_SENHA);
CREATE INDEX ICDFUN_FUN_BAI ON CDFUN (FUN_BAI);
CREATE INDEX ICDFUN_FUN_CID ON CDFUN (FUN_CID);
CREATE INDEX ICDFUN_FUN_END ON CDFUN (FUN_END);
CREATE INDEX ICDFUN_FUN_NOM ON CDFUN (FUN_NOM);
CREATE INDEX ICDFUN_FUN_TEL ON CDFUN (FUN_TEL);
CREATE UNIQUE INDEX PK_CDFUN ON CDFUN (FUN_COD);
CREATE INDEX CDGRADECORMED_GRACOD ON CDGRADECORMED (GRA_COD);
CREATE INDEX CDGRADECORMED_GRANOM ON CDGRADECORMED (GRA_NOM);
CREATE INDEX CDGRADECORMED2_GRA2ALM ON CDGRADECORMED2 (GRA2_ALM);
CREATE INDEX CDGRADECORMED2_GRA2GRA ON CDGRADECORMED2 (GRA2_GRA);
CREATE INDEX CDGRADECORMED2_GRA2PRO ON CDGRADECORMED2 (GRA2_PRO);
CREATE INDEX CDGRADECORMED3_GRA3GRA ON CDGRADECORMED3 (GRA3_GRA);
CREATE INDEX CDGRADECORMED3_GRA3PROCORMED ON CDGRADECORMED3 (GRA3_PRO, GRA3_COR, GRA3_MED);
CREATE UNIQUE INDEX PK_CDGRAURISCO ON CDGRAURISCO (GRA_COD);
CREATE UNIQUE INDEX UNQ_NOMENQ_CDGRAURISCO ON CDGRAURISCO (GRA_NOM, GRA_ENQ);
CREATE UNIQUE INDEX RDB$PRIMARY33 ON CDGRTRA (GRT_COD);
CREATE UNIQUE INDEX CDGRUC0 ON CDGRUC (GRU_COD);
CREATE INDEX ICDGRUC_DAT_ATU ON CDGRUC (DAT_ATU);
CREATE INDEX ICDGRUC_DAT_CAD ON CDGRUC (DAT_CAD);
CREATE INDEX ICDGRUC_GRU_NOM ON CDGRUC (GRU_NOM);
CREATE INDEX ICDGRUC_GRU_SIG ON CDGRUC (GRU_SIG);
CREATE UNIQUE INDEX CDGRUF0 ON CDGRUF (GRU_COD);
CREATE INDEX ICDGRUF_DAT_ATU ON CDGRUF (DAT_ATU);
CREATE INDEX ICDGRUF_DAT_CAD ON CDGRUF (DAT_CAD);
CREATE INDEX ICDGRUF_GRU_NOM ON CDGRUF (GRU_NOM);
CREATE INDEX ICDGRUF_GRU_SIG ON CDGRUF (GRU_SIG);
CREATE UNIQUE INDEX PK_CDGRUF ON CDGRUF (GRU_COD);
CREATE UNIQUE INDEX CDGRUP0 ON CDGRUP (GRU_COD);
CREATE INDEX ICDGRUP_DAT_ATU ON CDGRUP (DAT_ATU);
CREATE INDEX ICDGRUP_DAT_CAD ON CDGRUP (DAT_CAD);
CREATE INDEX ICDGRUP_GRU_NOM ON CDGRUP (GRU_NOM);
CREATE INDEX ICDGRUP_GRU_SIG ON CDGRUP (GRU_SIG);
CREATE UNIQUE INDEX CDGRUR0 ON CDGRUR (GRU_COD);
CREATE INDEX ICDGRUR_DAT_ATU ON CDGRUR (DAT_ATU);
CREATE INDEX ICDGRUR_DAT_CAD ON CDGRUR (DAT_CAD);
CREATE INDEX ICDGRUR_GRU_NOM ON CDGRUR (GRU_NOM);
CREATE INDEX ICDGRUR_GRU_SIG ON CDGRUR (GRU_SIG);
CREATE UNIQUE INDEX CDGRUS0 ON CDGRUS (GRU_COD);
CREATE INDEX ICDGRUS_DAT_ATU ON CDGRUS (DAT_ATU);
CREATE INDEX ICDGRUS_DAT_CAD ON CDGRUS (DAT_CAD);
CREATE INDEX ICDGRUS_GRU_NOM ON CDGRUS (GRU_NOM);
CREATE INDEX ICDGRUS_GRU_SIG ON CDGRUS (GRU_SIG);
CREATE UNIQUE INDEX PK_CDGRUTABVAR ON CDGRUTABVAR (GRU_COD);
CREATE INDEX ICDHIS_HIS_NOM ON CDHIS (HIS_NOM);
CREATE UNIQUE INDEX UNQ_CDHIS ON CDHIS (HIS_NOM);
CREATE UNIQUE INDEX CDHORA0 ON CDHORA (HORA_COD);
CREATE INDEX ICDHORA_DAT_ATU ON CDHORA (DAT_ATU);
CREATE INDEX ICDHORA_DAT_CAD ON CDHORA (DAT_CAD);
CREATE INDEX ICDHORA_HORA_NOM ON CDHORA (HORA_NOM);
CREATE UNIQUE INDEX CDIMPRESO0 ON CDIMPRESO (CODIGO);
CREATE INDEX CDIMPRESO_NOME ON CDIMPRESO (NOME);
CREATE INDEX CDIMPRESO_TIPOFORM ON CDIMPRESO (TIPOFORM);
CREATE INDEX ICDIMPRESO_CAMPO_INT ON CDIMPRESO (CAMPO_INT);
CREATE INDEX ICDIMPRESO_DAT_ATU ON CDIMPRESO (DAT_ATU);
CREATE INDEX ICDIMPRESO_DAT_CAD ON CDIMPRESO (DAT_CAD);
CREATE INDEX ICDIMPRESO_LINHA ON CDIMPRESO (LINHA);
CREATE UNIQUE INDEX PK_CDIMPRESO2 ON CDIMPRESO2 (CODIGO);
CREATE UNIQUE INDEX PK_CDIMPSIMP ON CDIMPSIMP (IMP_COD);
CREATE INDEX FK_CDIMPSIMP2 ON CDIMPSIMP2 (IMP2_IMP);
CREATE UNIQUE INDEX PK_CDIMPSIMP2 ON CDIMPSIMP2 (IMP2_COD);
CREATE INDEX RDB$FOREIGN28 ON CDINDICE (IND_MOE);
CREATE UNIQUE INDEX RDB$PRIMARY26 ON CDINDICE (IND_COD);
CREATE UNIQUE INDEX CDLOC0 ON CDLOC (LOC_COD);
CREATE INDEX ICDLOC_DAT_ATU ON CDLOC (DAT_ATU);
CREATE INDEX ICDLOC_DAT_CAD ON CDLOC (DAT_CAD);
CREATE INDEX ICDLOC_LOC_NOM ON CDLOC (LOC_NOM);
CREATE INDEX ICDLOC_LOC_SIG ON CDLOC (LOC_SIG);
CREATE UNIQUE INDEX PK_CDLOGIS_CATEGORIA ON CDLOGIS_CATEGORIA (CATEGORIA_CODIGO);
CREATE INDEX FK_CDLOGIS_COLETA_CATEGORIA ON CDLOGIS_COLETA (CATEGORIA_CODIGO);
CREATE INDEX FK_CDLOGIS_COLETA_CONDUTOR ON CDLOGIS_COLETA (CONDUTOR_CODIGO);
CREATE INDEX FK_CDLOGIS_COLETA_DESTINATARIO ON CDLOGIS_COLETA (COLETA_DESTINATARIO);
CREATE INDEX FK_CDLOGIS_COLETA_REMETENTE ON CDLOGIS_COLETA (COLETA_REMETENTE);
CREATE INDEX FK_CDLOGIS_COLETA_SITUACAO ON CDLOGIS_COLETA (SITUACAO_CODIGO);
CREATE INDEX FK_CDLOGIS_COLETA_VEICULO ON CDLOGIS_COLETA (VEICULO_CODIGO);
CREATE UNIQUE INDEX PK_CDLOGIS_COLETA ON CDLOGIS_COLETA (COLETA_CODIGO);
CREATE INDEX FK_CDLOGIS_COLETA_EVENTO_COLETA ON CDLOGIS_COLETA_EVENTO (COLETA_CODIGO);
CREATE INDEX FK_CDLOGIS_COLETA_EVENTO_SITUA ON CDLOGIS_COLETA_EVENTO (SITUACAO_CODIGO);
CREATE UNIQUE INDEX PK_CDLOGIS_COLETA_EVENTO ON CDLOGIS_COLETA_EVENTO (EVENTO_CODIGO);
CREATE INDEX FK_CDLOGIS_COLETA_NF_COLETA ON CDLOGIS_COLETA_NF (COLETA_CODIGO);
CREATE UNIQUE INDEX PK_CDLOGIS_COLETA_NF ON CDLOGIS_COLETA_NF (NF_CODIGO);
CREATE INDEX FK_CDLOGIS_COLETA_OCORRENCIA_CO ON CDLOGIS_COLETA_OCORRENCIA (COLETA_CODIGO);
CREATE UNIQUE INDEX PK_CDLOGIS_COLETA_OCORRENCIA ON CDLOGIS_COLETA_OCORRENCIA (OCORRENCIA_CODIGO);
CREATE UNIQUE INDEX PK_CDLOGIS_CONDUTOR ON CDLOGIS_CONDUTOR (CONDUTOR_CODIGO);
CREATE UNIQUE INDEX PK_CDLOGIS_SITUACAO ON CDLOGIS_SITUACAO (SITUACAO_CODIGO);
CREATE UNIQUE INDEX PK_CDLOGIS_VEICULO ON CDLOGIS_VEICULO (VEICULO_CODIGO);
CREATE UNIQUE INDEX CDMAR0 ON CDMAR (MAR_COD);
CREATE INDEX ICDMAR_DAT_ATU ON CDMAR (DAT_ATU);
CREATE INDEX ICDMAR_DAT_CAD ON CDMAR (DAT_CAD);
CREATE INDEX ICDMAR_MAR_NOM ON CDMAR (MAR_NOM);
CREATE INDEX ICDMAR_MAR_SIG ON CDMAR (MAR_SIG);
CREATE UNIQUE INDEX CDMED0 ON CDMED (MED_COD);
CREATE INDEX ICDMED_DAT_ATU ON CDMED (DAT_ATU);
CREATE INDEX ICDMED_DAT_CAD ON CDMED (DAT_CAD);
CREATE INDEX ICDMED_MED_NOM ON CDMED (MED_NOM);
CREATE INDEX ICDMED_MED_ORDEM ON CDMED (MED_ORDEM);
CREATE UNIQUE INDEX CDMOE0 ON CDMOE (MOE_COD);
CREATE INDEX ICDMOE_DAT_ATU ON CDMOE (DAT_ATU);
CREATE INDEX ICDMOE_DAT_CAD ON CDMOE (DAT_CAD);
CREATE INDEX ICDMOE_MOE_NAC ON CDMOE (MOE_NAC);
CREATE INDEX ICDMOE_MOE_NOM ON CDMOE (MOE_NOM);
CREATE UNIQUE INDEX RDB$PRIMARY27 ON CDMOE (MOE_COD);
CREATE UNIQUE INDEX RDB$PRIMARY18 ON CDMOTIVO (MOT_COD);
CREATE UNIQUE INDEX PK_CDNOVIDADES ON CDNOVIDADES (NOV_COD);
CREATE INDEX FK_CDNOVIDADES2_NOV ON CDNOVIDADES2 (NOV2_NOV);
CREATE UNIQUE INDEX PK_CDNOVIDADES2 ON CDNOVIDADES2 (NOV2_NOV, NOV2_USE);
CREATE UNIQUE INDEX CDOPCOES0 ON CDOPCOES (ID);
CREATE UNIQUE INDEX CDOPCOES1 ON CDOPCOES (NOME);
CREATE UNIQUE INDEX PK_CDOS ON CDOS (COD_OS);
CREATE UNIQUE INDEX PK_CDOSPRO ON CDOSPRO (ID);
CREATE UNIQUE INDEX CDPGT0 ON CDPGT (PGT_COD);
CREATE INDEX ICDPGT_DAT_ATU ON CDPGT (DAT_ATU);
CREATE INDEX ICDPGT_DAT_CAD ON CDPGT (DAT_CAD);
CREATE INDEX ICDPGT_PGT_NOM ON CDPGT (PGT_NOM);
CREATE INDEX ICDPGT_PGT_SIG ON CDPGT (PGT_SIG);
CREATE UNIQUE INDEX CDPLA0 ON CDPLA (PLA_COD);
CREATE INDEX CDPLA_ORDEM ON CDPLA (PLA_ORD);
CREATE INDEX ICDPLA_DAT_ATU ON CDPLA (DAT_ATU);
CREATE INDEX ICDPLA_DAT_CAD ON CDPLA (DAT_CAD);
CREATE INDEX ICDPLA_PLA_COD_IPLA_NOM ON CDPLA (PLA_COD, PLA_NOM);
CREATE INDEX ICDPLA_PLA_NOM ON CDPLA (PLA_NOM);
CREATE UNIQUE INDEX CDPLAAUX0 ON CDPLAAUX (PLA_COD);
CREATE INDEX ICDPLAAUX_PLA_COD_IPLA_NOM ON CDPLAAUX (PLA_COD, PLA_NOM);
CREATE INDEX ICDPLAAUX_PLA_NOM ON CDPLAAUX (PLA_NOM);
CREATE UNIQUE INDEX PK_CDPLA_DEMO_RESUL ON CDPLA_DEMO_RESUL (PLA_COD);
CREATE UNIQUE INDEX CDPREPAG0 ON CDPREPAG (PRE_COD);
CREATE INDEX ICDPREPAG_DAT_ATU ON CDPREPAG (DAT_ATU);
CREATE INDEX ICDPREPAG_DAT_CAD ON CDPREPAG (DAT_CAD);
CREATE INDEX ICDPREPAG_PRE_CON ON CDPREPAG (PRE_CON);
CREATE INDEX ICDPREPAG_PRE_DAT ON CDPREPAG (PRE_DAT);
CREATE INDEX ICDPREPAG_PRE_EMP ON CDPREPAG (PRE_EMP);
CREATE INDEX ICDPREPAG_PRE_FOR ON CDPREPAG (PRE_FOR);
CREATE INDEX ICDPREPAG_PRE_PLA ON CDPREPAG (PRE_PLA);
CREATE INDEX ICDPREPAG_PRE_TIP ON CDPREPAG (PRE_TIP);
CREATE INDEX ICDPREPAG_PRE_VAL ON CDPREPAG (PRE_VAL);
CREATE UNIQUE INDEX CDPREREC0 ON CDPREREC (PRE_COD);
CREATE INDEX ICDPREREC_DAT_ATU ON CDPREREC (DAT_ATU);
CREATE INDEX ICDPREREC_DAT_CAD ON CDPREREC (DAT_CAD);
CREATE INDEX ICDPREREC_PRE_CLI ON CDPREREC (PRE_CLI);
CREATE INDEX ICDPREREC_PRE_CON ON CDPREREC (PRE_CON);
CREATE INDEX ICDPREREC_PRE_DAT ON CDPREREC (PRE_DAT);
CREATE INDEX ICDPREREC_PRE_EMP ON CDPREREC (PRE_EMP);
CREATE INDEX ICDPREREC_PRE_PLA ON CDPREREC (PRE_PLA);
CREATE INDEX ICDPREREC_PRE_TIP ON CDPREREC (PRE_TIP);
CREATE INDEX ICDPREREC_PRE_VAL ON CDPREREC (PRE_VAL);
CREATE UNIQUE INDEX CDPRO0 ON CDPRO (PRO_COD);
CREATE INDEX CDPRO_PRO_CAT ON CDPRO (PRO_CAT);
CREATE INDEX CDPRO_PRO_GRU ON CDPRO (PRO_GRU);
CREATE INDEX CDPRO_PRO_MAR ON CDPRO (PRO_MAR);
CREATE INDEX CDPRO_PRO_SUBGRU ON CDPRO (PRO_SUBGRU);
CREATE INDEX CDPRO_PRO_TIP ON CDPRO (PRO_TIP);
CREATE INDEX CDPRO_PRO_UNI ON CDPRO (PRO_UNI);
CREATE INDEX ICDPRO_DAT_ATU ON CDPRO (DAT_ATU);
CREATE INDEX ICDPRO_DAT_CAD ON CDPRO (DAT_CAD);
CREATE INDEX ICDPRO_PRO_BAR ON CDPRO (PRO_BAR);
CREATE INDEX ICDPRO_PRO_INT ON CDPRO (PRO_INT);
CREATE INDEX ICDPRO_PRO_NOM ON CDPRO (PRO_NOM);
CREATE UNIQUE INDEX RDB$PRIMARY41 ON CDPRO (PRO_COD);
CREATE INDEX CDPROAPLI_IDX1 ON CDPROAPLI (PRO_COD, VEI_COD, ANODE, ANOATE);
CREATE UNIQUE INDEX CDPROCLI0 ON CDPROCLI (PRO_PRO, PRO_CLI);
CREATE INDEX ICDPROCLI_DAT_ATU ON CDPROCLI (DAT_ATU);
CREATE INDEX ICDPROCLI_DAT_CAD ON CDPROCLI (DAT_CAD);
CREATE INDEX ICDPROCLI_PRO_PRO ON CDPROCLI (PRO_PRO);
CREATE UNIQUE INDEX CDPROCM0 ON CDPROCM (PRO_PRO, PRO_COR, PRO_MED);
CREATE INDEX ICDPROCM_PRO_COD ON CDPROCM (PRO_PRO, PRO_COD);
CREATE INDEX ICDPROCM_PRO_COR ON CDPROCM (PRO_PRO, PRO_COR);
CREATE INDEX ICDPROCM_PRO_MED ON CDPROCM (PRO_PRO, PRO_MED);
CREATE INDEX ICDPROCM_PRO_PRO ON CDPROCM (PRO_PRO);
CREATE INDEX CDPROCSOSN_IDX1 ON CDPROCSOSN (CSO_PRO, CSO_ALM, CSO_CSO);
CREATE UNIQUE INDEX CDPROCUSTO0 ON CDPROCUSTO (PRO_PRO, PRO_CUS);
CREATE INDEX ICDPROCUSTO_DAT_ATU ON CDPROCUSTO (DAT_ATU);
CREATE INDEX ICDPROCUSTO_DAT_CAD ON CDPROCUSTO (DAT_CAD);
CREATE INDEX ICDPROCUSTO_PRO_CUS ON CDPROCUSTO (PRO_CUS);
CREATE UNIQUE INDEX CDPROENG0 ON CDPROENG (PRO_COD, PRO_PRO);
CREATE INDEX ICDPROENG_DAT_ATU ON CDPROENG (DAT_ATU);
CREATE INDEX ICDPROENG_DAT_CAD ON CDPROENG (DAT_CAD);
CREATE INDEX ICDPROENG_PRO_PRO ON CDPROENG (PRO_PRO);
CREATE INDEX ICDPROESTLO_CORMED ON CDPROESTLO (PRO_PRO, PRO_COR, PRO_MED);
CREATE INDEX ICDPROESTLO_PRO_PRO ON CDPROESTLO (PRO_PRO);
CREATE UNIQUE INDEX CDPROFIC0 ON CDPROFIC (FIC_COD, FIC_PRO);
CREATE INDEX ICDPROFIC_DAT_ATU ON CDPROFIC (DAT_ATU);
CREATE INDEX ICDPROFIC_DAT_CAD ON CDPROFIC (DAT_CAD);
CREATE INDEX ICDPROFIC_FIC_PRO ON CDPROFIC (FIC_PRO);
CREATE UNIQUE INDEX RDB$PRIMARY25 ON CDPROFIC2 (FIC2_COD);
CREATE UNIQUE INDEX CDPROFOR0 ON CDPROFOR (PRO_PRO, PRO_FOR);
CREATE INDEX ICDPROFOR_DAT_ATU ON CDPROFOR (DAT_ATU);
CREATE INDEX ICDPROFOR_DAT_CAD ON CDPROFOR (DAT_CAD);
CREATE INDEX ICDPROFOR_PRO_PRO ON CDPROFOR (PRO_PRO);
CREATE INDEX CDPROFOTO_PRO_PRO ON CDPROFOTO (PRO_PRO);
CREATE UNIQUE INDEX RDB$10 ON CDPROICMS (ICM_PRO, ICM_EST);
CREATE UNIQUE INDEX RDB$PRIMARY16 ON CDPROJ (PROJ_COD);
CREATE INDEX RDB$FOREIGN39 ON CDPROJ2 (PROJ2_PROJ);
CREATE UNIQUE INDEX RDB$PRIMARY38 ON CDPROJ2 (PROJ2_COD);
CREATE INDEX FK_CDPROJ3 ON CDPROJ3 (PROJ3_PROJ);
CREATE UNIQUE INDEX PK_CDPROJ3 ON CDPROJ3 (PROJ3_COD);
CREATE INDEX FK_CDPROJ4 ON CDPROJ4 (PROJ4_PROJ);
CREATE UNIQUE INDEX PK_CDPROJ4 ON CDPROJ4 (PROJ4_COD);
CREATE INDEX ICDPROMAXMIN_CORMED ON CDPROMAXMIN (PRO_PRO, PRO_COR, PRO_MED);
CREATE INDEX ICDPROMAXMIN_PRO_PRO ON CDPROMAXMIN (PRO_PRO);
CREATE INDEX CDPROMOBILE_PROPRO ON CDPROMOBILE (PRO_PRO);
CREATE INDEX ICDPROPRE_CORMED ON CDPROPRE (PRO_PRO, PRO_COR, PRO_MED);
CREATE INDEX ICDPROPRE_DAT_ATU ON CDPROPRE (DAT_ATU);
CREATE INDEX ICDPROPRE_DAT_CAD ON CDPROPRE (DAT_CAD);
CREATE UNIQUE INDEX ICDPROPRE_PRO_PRO ON CDPROPRE (PRO_PRO, PRO_COR, PRO_MED);
CREATE INDEX ICDPROPREAUX_CORMED ON CDPROPREAUX (PRO_PRO, PRO_COR, PRO_MED);
CREATE INDEX ICDPROPREAUX_DAT_ATU ON CDPROPREAUX (DAT_ATU);
CREATE INDEX ICDPROPREAUX_DAT_CAD ON CDPROPREAUX (DAT_CAD);
CREATE INDEX ICDPROPREAUX_PRO_PRO ON CDPROPREAUX (PRO_PRO);
CREATE INDEX CDPROPRO0 ON CDPROPRO (PRO_FLAG);
CREATE INDEX ICDPROPRO_DAT_ATU ON CDPROPRO (DAT_ATU);
CREATE INDEX ICDPROPRO_DAT_CAD ON CDPROPRO (DAT_CAD);
CREATE INDEX ICDPROPRO_PRO_PRO ON CDPROPRO (PRO_PRO);
CREATE UNIQUE INDEX CDPROSER10 ON CDPROSER1 (PRO_COD);
CREATE INDEX ICDPROSER1_DAT_ATU ON CDPROSER1 (DAT_ATU);
CREATE INDEX ICDPROSER1_DAT_CAD ON CDPROSER1 (DAT_CAD);
CREATE INDEX ICDPROSER1_PRO_NOM ON CDPROSER1 (PRO_NOM);
CREATE UNIQUE INDEX CDPROSER20 ON CDPROSER2 (PRO_SER, PRO_PRO);
CREATE INDEX ICDPROSER2_DAT_ATU ON CDPROSER2 (DAT_ATU);
CREATE INDEX ICDPROSER2_DAT_CAD ON CDPROSER2 (DAT_CAD);
CREATE INDEX ICDPROSER2_PRO_PRO ON CDPROSER2 (PRO_PRO);
CREATE UNIQUE INDEX CDPROSUBTRIBUTA_IDX1 ON CDPROSUBTRIBUTA (SUB_PRO, SUB_EST);
CREATE UNIQUE INDEX CDRECIBO0 ON CDRECIBO (CODIGO);
CREATE INDEX ICDRECIBO_CEPDESTINO ON CDRECIBO (CEPDESTINO);
CREATE INDEX ICDRECIBO_CEPEMITENTE ON CDRECIBO (CEPEMITENTE);
CREATE UNIQUE INDEX PK_CDREMESSA ON CDREMESSA (REM_COD);
CREATE INDEX FK_CDREMESSA2_REC ON CDREMESSA2 (REM2_REC);
CREATE INDEX FK_CDREMESSA2_REM ON CDREMESSA2 (REM2_REM);
CREATE INDEX ICDREP_DAT_ATU ON CDREP (DAT_ATU);
CREATE INDEX ICDREP_DAT_CAD ON CDREP (DAT_CAD);
CREATE INDEX ICDREP_REP_BAI ON CDREP (REP_BAI);
CREATE INDEX ICDREP_REP_CEP ON CDREP (REP_CEP);
CREATE INDEX ICDREP_REP_END ON CDREP (REP_END);
CREATE INDEX ICDREP_REP_NOM ON CDREP (REP_NOM);
CREATE INDEX ICDREP_REP_RED ON CDREP (REP_RED);
CREATE UNIQUE INDEX PK_CDREP ON CDREP (REP_COD);
CREATE UNIQUE INDEX CDREPC0 ON CDREPC (CON_COD);
CREATE INDEX ICDREPC_CON_NOM ON CDREPC (CON_NOM);
CREATE INDEX ICDREPC_CON_REP ON CDREPC (CON_REP);
CREATE INDEX ICDREPC_CON_TEL ON CDREPC (CON_TEL);
CREATE INDEX ICDREPC_DAT_ATU ON CDREPC (DAT_ATU);
CREATE INDEX ICDREPC_DAT_CAD ON CDREPC (DAT_CAD);
CREATE UNIQUE INDEX PK_CDSAFEST_NFS ON CDSAFEST_NFS (NF_CODIGO);
CREATE INDEX FK_CDSAFEST_NF_CAIXAS_1 ON CDSAFEST_NF_CAIXAS (NF_CODIGO);
CREATE UNIQUE INDEX PK_CDSAFEST_NF_CAIXAS ON CDSAFEST_NF_CAIXAS (CAIXA_CODIGO);
CREATE INDEX FK_CDSAFEST_NF_ITEM_CAIXAS ON CDSAFEST_NF_ITEM_CAIXAS (ITEM_CODIGO);
CREATE INDEX FK_CDSAFEST_NF_ITEM_CAIXAS_1 ON CDSAFEST_NF_ITEM_CAIXAS (CAIXA_CODIGO);
CREATE UNIQUE INDEX PK_CDSAFEST_NF_ITEM_CAIXAS ON CDSAFEST_NF_ITEM_CAIXAS (CAIXA_CODIGO, ITEM_CODIGO);
CREATE INDEX PK_CDSAFEST_NF_ITENS ON CDSAFEST_NF_ITENS (NF_CODIGO);
CREATE UNIQUE INDEX PK_CDSAFEST_NF_ITENS_CODIGO ON CDSAFEST_NF_ITENS (ITEM_CODIGO);
CREATE UNIQUE INDEX CDSER0 ON CDSER (SER_COD);
CREATE INDEX ICDSER_DAT_ATU ON CDSER (DAT_ATU);
CREATE INDEX ICDSER_DAT_CAD ON CDSER (DAT_CAD);
CREATE INDEX ICDSER_SER_NOM ON CDSER (SER_NOM);
CREATE INDEX ICDSER_SER_SIG ON CDSER (SER_SIG);
CREATE UNIQUE INDEX RDB$PRIMARY42 ON CDSER (SER_COD);
CREATE UNIQUE INDEX PK_CDSERIENF ON CDSERIENF (SERIE_COD);
CREATE UNIQUE INDEX RDB$PRIMARY50 ON CDSETOR1 (SET_COD);
CREATE INDEX FK_CDSETOR2_USE ON CDSETOR2 (SET2_USE);
CREATE UNIQUE INDEX RDB$72 ON CDSETOR2 (SET2_SET, SET2_USE);
CREATE INDEX RDB$FOREIGN68 ON CDSETOR2 (SET2_SET);
CREATE UNIQUE INDEX RDB$PRIMARY51 ON CDSETOR2 (SET2_COD);
CREATE INDEX FK_CDSETOR3_USE ON CDSETOR3 (SET3_USE);
CREATE UNIQUE INDEX RDB$73 ON CDSETOR3 (SET3_USE, SET3_SET);
CREATE INDEX RDB$FOREIGN70 ON CDSETOR3 (SET3_SET);
CREATE UNIQUE INDEX RDB$PRIMARY52 ON CDSETOR3 (SET3_COD);
CREATE UNIQUE INDEX PK_CDSETORSEG ON CDSETORSEG (SET_COD);
CREATE UNIQUE INDEX CDSIT0 ON CDSIT (SIT_COD);
CREATE INDEX ICDSIT_DAT_ATU ON CDSIT (DAT_ATU);
CREATE INDEX ICDSIT_DAT_CAD ON CDSIT (DAT_CAD);
CREATE INDEX ICDSIT_SIT_CST ON CDSIT (SIT_CST);
CREATE INDEX ICDSIT_SIT_NOM ON CDSIT (SIT_NOM);
CREATE UNIQUE INDEX CDSITS0 ON CDSITS (SIT_COD);
CREATE INDEX ICDSITS_DAT_ATU ON CDSITS (DAT_ATU);
CREATE INDEX ICDSITS_DAT_CAD ON CDSITS (DAT_CAD);
CREATE INDEX ICDSITS_SIT_NIV ON CDSITS (SIT_NIV);
CREATE INDEX ICDSITS_SIT_NOM ON CDSITS (SIT_NOM);
CREATE INDEX ICDSITS_SIT_SIG ON CDSITS (SIT_SIG);
CREATE UNIQUE INDEX RDB$PRIMARY34 ON CDSITS (SIT_COD);
CREATE INDEX CDSITSER_SIT_COD ON CDSITSER (SIT_COD);
CREATE INDEX CDSITSER_SIT_NIV ON CDSITSER (SIT_NIV);
CREATE INDEX CDSITSER_SIT_NIVNOM ON CDSITSER (SIT_NIVNOM);
CREATE INDEX CDSITSER_SIT_NOM ON CDSITSER (SIT_NOM);
CREATE INDEX CDSITSER_SIT_SIG ON CDSITSER (SIT_SIG);
CREATE INDEX CDSTATUS_STA_NOM ON CDSTATUS (STA_NOM);
CREATE INDEX CDSTATUS_STA_SIG ON CDSTATUS (STA_SIG);
CREATE UNIQUE INDEX CDSUBGRUP0 ON CDSUBGRUP (GRU_COD);
CREATE INDEX ICDSUBGRUP_DAT_ATU ON CDSUBGRUP (DAT_ATU);
CREATE INDEX ICDSUBGRUP_DAT_CAD ON CDSUBGRUP (DAT_CAD);
CREATE INDEX ICDSUBGRUP_GRU_NOM ON CDSUBGRUP (GRU_NOM);
CREATE INDEX ICDSUBGRUP_GRU_SIG ON CDSUBGRUP (GRU_SIG);
CREATE INDEX CDSUPVARVALOR_IDX1 ON CDSUPVARVALOR (VAL_SUP_COD);
CREATE INDEX CDSUPVARVALOR_IDX2 ON CDSUPVARVALOR (VAL_SUP_GRU);
CREATE INDEX CDTABVARVALOR_IDX1 ON CDTABVARVALOR (VAL_TAB_COD);
CREATE INDEX CDTABVARVALOR_IDX2 ON CDTABVARVALOR (VAL_TAB_GRU);
CREATE INDEX CDTAB_IBPT_TAB_NCM ON CDTAB_IBPT (TAB_NCM);
CREATE INDEX FK_CDTEF ON CDTEF (TEF_VD4);
CREATE UNIQUE INDEX PK_CDTEF ON CDTEF (TEF_COD);
CREATE UNIQUE INDEX CDTIPD0 ON CDTIPD (TIP_COD);
CREATE INDEX ICDTIPD_DAT_ATU ON CDTIPD (DAT_ATU);
CREATE INDEX ICDTIPD_DAT_CAD ON CDTIPD (DAT_CAD);
CREATE INDEX ICDTIPD_TIP_NOM ON CDTIPD (TIP_NOM);
CREATE UNIQUE INDEX CDTIPP0 ON CDTIPP (TIP_COD);
CREATE INDEX ICDTIPP_DAT_ATU ON CDTIPP (DAT_ATU);
CREATE INDEX ICDTIPP_DAT_CAD ON CDTIPP (DAT_CAD);
CREATE INDEX ICDTIPP_TIP_NOM ON CDTIPP (TIP_NOM);
CREATE INDEX ICDTIPP_TIP_SIG ON CDTIPP (TIP_SIG);
CREATE UNIQUE INDEX CDTIPS0 ON CDTIPS (TIP_COD);
CREATE INDEX ICDTIPS_DAT_ATU ON CDTIPS (DAT_ATU);
CREATE INDEX ICDTIPS_DAT_CAD ON CDTIPS (DAT_CAD);
CREATE INDEX ICDTIPS_TIP_NOM ON CDTIPS (TIP_NOM);
CREATE INDEX ICDTIPS_TIP_SIG ON CDTIPS (TIP_SIG);
CREATE UNIQUE INDEX CDTIPSERDDD0 ON CDTIPSERDDD (TIP_COD);
CREATE INDEX CDTIPSERDDD_SIT_SIGNOM ON CDTIPSERDDD (TIP_NIVNOM);
CREATE INDEX ICDTIPSERDDD_DAT_ATU ON CDTIPSERDDD (DAT_ATU);
CREATE INDEX ICDTIPSERDDD_DAT_CAD ON CDTIPSERDDD (DAT_CAD);
CREATE INDEX ICDTIPSERDDD_TIP_NIV ON CDTIPSERDDD (TIP_NIV);
CREATE INDEX ICDTIPSERDDD_TIP_NOM ON CDTIPSERDDD (TIP_NOM);
CREATE INDEX ICDTIPSERDDD_TIP_SIG ON CDTIPSERDDD (TIP_SIG);
CREATE INDEX CDTMKVARVALOR_IDX1 ON CDTMKVARVALOR (VAL_TMK_COD);
CREATE INDEX CDTMKVARVALOR_IDX2 ON CDTMKVARVALOR (VAL_TMK_GRU);
CREATE UNIQUE INDEX CDTRA10 ON CDTRA1 (TRA_COD);
CREATE INDEX ICDTRA1_DAT_ATU ON CDTRA1 (DAT_ATU);
CREATE INDEX ICDTRA1_DAT_CAD ON CDTRA1 (DAT_CAD);
CREATE INDEX ICDTRA1_TRA_NOM ON CDTRA1 (TRA_NOM);
CREATE INDEX ICDTRA1_TRA_PGT ON CDTRA1 (TRA_PGT);
CREATE UNIQUE INDEX RDB$PRIMARY30 ON CDTRA1 (TRA_COD);
CREATE UNIQUE INDEX CDTRA20 ON CDTRA2 (TRA_PGT, TRA_TRA);
CREATE INDEX ICDTRA2_TRA_TRA ON CDTRA2 (TRA_TRA);
CREATE UNIQUE INDEX CDTRA30 ON CDTRA3 (TRA_FORM, TRA_TRA);
CREATE INDEX ICDTRA3_TRA_TRA ON CDTRA3 (TRA_TRA);
CREATE INDEX RDB$FOREIGN31 ON CDTRA3 (TRA_FORM);
CREATE INDEX RDB$FOREIGN32 ON CDTRA3 (TRA_TRA);
CREATE INDEX FK_CDTRA6_TRA ON CDTRA6 (TRA6_TRA);
CREATE INDEX FK_CDTRA6_VAR ON CDTRA6 (TRA6_VAR);
CREATE UNIQUE INDEX PK_CDTRA6 ON CDTRA6 (TRA6_COD);
CREATE UNIQUE INDEX CDTRACAT0 ON CDTRACAT (TRA_TRA, TRA_CATPRO);
CREATE INDEX ICDTRACAT_TRA_CATPRO ON CDTRACAT (TRA_CATPRO);
CREATE INDEX ICDTRS_DAT_ATU ON CDTRS (DAT_ATU);
CREATE INDEX ICDTRS_DAT_CAD ON CDTRS (DAT_CAD);
CREATE INDEX ICDTRS_TRS_BAI ON CDTRS (TRS_BAI);
CREATE INDEX ICDTRS_TRS_CEP ON CDTRS (TRS_CEP);
CREATE INDEX ICDTRS_TRS_END ON CDTRS (TRS_END);
CREATE INDEX ICDTRS_TRS_NOM ON CDTRS (TRS_NOM);
CREATE INDEX ICDTRS_TRS_RED ON CDTRS (TRS_RED);
CREATE UNIQUE INDEX PK_CDTRS ON CDTRS (TRS_COD);
CREATE UNIQUE INDEX CDUNIDADE0 ON CDUNIDADE (CODIGO);
CREATE INDEX ICDUNIDADE_DAT_ATU ON CDUNIDADE (DAT_ATU);
CREATE INDEX ICDUNIDADE_DAT_CAD ON CDUNIDADE (DAT_CAD);
CREATE INDEX ICDUNIDADE_NOME ON CDUNIDADE (NOME);
CREATE INDEX ICDUNIDADE_SIGLA ON CDUNIDADE (SIGLA);
CREATE INDEX FK_CDUSEATU ON CDUSEATU (ATU_USE);
CREATE INDEX FK_CDUSEBAK ON CDUSEBAK (BAK_USE);
CREATE UNIQUE INDEX PK_CDUSEBAK ON CDUSEBAK (BAK_COD);
CREATE UNIQUE INDEX UNQ_CDUSEBAK ON CDUSEBAK (BAK_USE, BAK_NOM);
CREATE INDEX FK_CDUSEBAK2 ON CDUSEBAK2 (BAK2_BAK);
CREATE UNIQUE INDEX PK_CDUSEBAK2 ON CDUSEBAK2 (BAK2_BAK, BAK2_PASTA);
CREATE UNIQUE INDEX CDUSER0 ON CDUSER (USE_COD);
CREATE INDEX ICDUSER_DAT_ATU ON CDUSER (DAT_ATU);
CREATE INDEX ICDUSER_DAT_CAD ON CDUSER (DAT_CAD);
CREATE INDEX ICDUSER_USE_NOM ON CDUSER (USE_NOM);
CREATE INDEX ICDUSER_USE_SIG ON CDUSER (USE_SIG);
CREATE UNIQUE INDEX RDB$PRIMARY12 ON CDUSER (USE_COD);
CREATE UNIQUE INDEX CDVINCDOC_IDX1 ON CDVINCDOC (DOC_ALM, DOC_DOC, DOC_CON);
CREATE UNIQUE INDEX CODIGO0 ON CODIGO (TABELA, ULTIMOCODIGO);
CREATE UNIQUE INDEX PK_CODIGO ON CODIGO (TABELA);
CREATE UNIQUE INDEX DIC010 ON DIC01 (DIC_COD);
CREATE INDEX IDIC_NAV ON DIC01 (DIC_NAV);
CREATE INDEX IDIC_NOM ON DIC01 (DIC_NOM);
CREATE INDEX IDIC_TIT ON DIC01 (DIC_TIT);
CREATE UNIQUE INDEX DIC020 ON DIC02 (DIC_FLAG, DIC_CAM);
CREATE INDEX IDIC_CAM ON DIC02 (DIC_CAM);
CREATE INDEX IDIC_DES ON DIC02 (DIC_DES);
CREATE INDEX IDIC_FLAG ON DIC02 (DIC_FLAG);
CREATE INDEX AREL_TABELA_PAI ON DIC03 (REL_TABELA_PAI);
CREATE UNIQUE INDEX DIC030 ON DIC03 (REL_COD);
CREATE INDEX IREL_TABELA_PAI ON DIC03 (REL_TABELA_PAI, REL_TABELA_FILHA);
CREATE UNIQUE INDEX ESTMVVD10 ON ESTMVVD1 (VD1_ALM, VD1_CAD, VD1_COD);
CREATE INDEX ESTMVVD1_VD1_CLI ON ESTMVVD1 (VD1_CLI);
CREATE INDEX ESTMVVD1_VD1_FILHO ON ESTMVVD1 (VD1_FILHO);
CREATE INDEX ESTMVVD1_VD1_FOR ON ESTMVVD1 (VD1_FOR);
CREATE INDEX ESTMVVD1_VD1_NOT ON ESTMVVD1 (VD1_NOT);
CREATE INDEX ESTMVVD1_VD1_REP ON ESTMVVD1 (VD1_REP);
CREATE INDEX ESTMVVD1_VD1_VEN ON ESTMVVD1 (VD1_VEN);
CREATE INDEX IESTMVVD1_VD1_CAD ON ESTMVVD1 (VD1_CAD);
CREATE DESCENDING INDEX IESTMVVD1_VD1_CAD_DESC ON ESTMVVD1 (VD1_CAD);
CREATE INDEX IESTMVVD1_VD1_COD ON ESTMVVD1 (VD1_COD);
CREATE DESCENDING INDEX IESTMVVD1_VD1_COD_DESC ON ESTMVVD1 (VD1_COD);
CREATE UNIQUE INDEX PK_ESTMVVD1 ON ESTMVVD1 (VD1_COD);
CREATE INDEX ESTMVVD10_IDX1 ON ESTMVVD10 (VD10_PRO, VD10_COR, VD10_MED);
CREATE INDEX ESTMVVD10_IDX2 ON ESTMVVD10 (VD10_VD9);
CREATE INDEX ESTMVVD10_IDX3 ON ESTMVVD10 (VD10_SER);
CREATE UNIQUE INDEX RDB$PRIMARY11 ON ESTMVVD11 (VD11_COD);
CREATE INDEX ESTMVVD12_IDX1 ON ESTMVVD12 (VD12_BOL);
CREATE INDEX ESTMVVD12_IDX2 ON ESTMVVD12 (VD12_MOT);
CREATE UNIQUE INDEX RDB$PRIMARY20 ON ESTMVVD12 (VD12_COD);
CREATE INDEX ESTMVVD14_IDXBOL ON ESTMVVD14 (VD14_BOL);
CREATE INDEX ESTMVVD14_IDXORI ON ESTMVVD14 (VD14_ORI);
CREATE INDEX ESTMVVD15_VD15BOL ON ESTMVVD15 (VD15_BOL);
CREATE INDEX ESTMVVD15_VD15COD ON ESTMVVD15 (VD15_COD);
CREATE INDEX ESTMVVD15_VD15DAT ON ESTMVVD15 (VD15_DAT);
CREATE INDEX ESTMVVD15_VD15PROXC ON ESTMVVD15 (VD15_PROXC);
CREATE INDEX ESTMVVD16_VD16BOL ON ESTMVVD16 (VD16_BOL);
CREATE INDEX ESTMVVD16_VD16COD ON ESTMVVD16 (VD16_COD);
CREATE INDEX ESTMVVD16_VD16ITEM ON ESTMVVD16 (VD16_ITEM);
CREATE INDEX ESTMVVD16_VD16PRO ON ESTMVVD16 (VD16_PRO);
CREATE INDEX ESTMVVD16_VD16PROCORMED ON ESTMVVD16 (VD16_PRO, VD16_COR, VD16_MED);
CREATE INDEX ESTMVVD16_VD16VD16 ON ESTMVVD16 (VD16_VD16);
CREATE INDEX ESTMVVD19_IDX1 ON ESTMVVD19 (VD19_BOL, VD19_ITEM);
CREATE UNIQUE INDEX ESTMVVD20 ON ESTMVVD2 (VD2_COD);
CREATE INDEX ESTMVVD2_DATA_ENTREGA ON ESTMVVD2 (VD2_DATA_ENTREGA);
CREATE DESCENDING INDEX ESTMVVD2_DATA_ENTREGA_DESC ON ESTMVVD2 (VD2_DATA_ENTREGA);
CREATE INDEX ESTMVVD2_IDX_VD2BOL ON ESTMVVD2 (VD2_BOL);
CREATE INDEX ESTMVVD2_VD2PRO ON ESTMVVD2 (VD2_PRO);
CREATE INDEX IESTMVVD2_RECALCULO ON ESTMVVD2 (VD2_ALM, VD2_PRO, VD2_COR, VD2_MED);
CREATE INDEX IESTMVVD2_VD2_BOL ON ESTMVVD2 (VD2_ALM, VD2_CAD, VD2_BOL);
CREATE INDEX ESTMVVD3_VD3_PGT ON ESTMVVD3 (VD3_PGT);
CREATE INDEX IESTMVVD3_VD3_BOL ON ESTMVVD3 (VD3_BOL);
CREATE UNIQUE INDEX RDB$PRIMARY9 ON ESTMVVD3 (VD3_COD);
CREATE INDEX ESTMVVD40 ON ESTMVVD4 (VD4_COD, VD4_ALM);
CREATE INDEX ESTMVVD4_VD4BOL ON ESTMVVD4 (VD4_BOL);
CREATE INDEX IESTMVVD4_VD4_BOL ON ESTMVVD4 (VD4_BOL, VD4_ALM, VD4_CAD);
CREATE UNIQUE INDEX RDB$PRIMARY36 ON ESTMVVD4 (VD4_COD);
CREATE INDEX ESTMVVD5_IDX1 ON ESTMVVD5 (VD5_BOL);
CREATE INDEX ESTMVVD5_IDX2 ON ESTMVVD5 (VD5_ENT);
CREATE UNIQUE INDEX RDB$PRIMARY4 ON ESTMVVD5 (VD5_COD);
CREATE UNIQUE INDEX RDB$PRIMARY5 ON ESTMVVD6 (VD6_COD);
CREATE UNIQUE INDEX PK_ESTMVVD7 ON ESTMVVD7 (VD7_COD);
CREATE UNIQUE INDEX IESTMVVD8_VD8_CODC ON ESTMVVD8 (VD8_CODC);
CREATE INDEX ESTMVVD9_IDX1 ON ESTMVVD9 (VD9_COD, VD9_BOL, VD9_ALM);
CREATE INDEX ESTMVVD9_IDX2 ON ESTMVVD9 (VD9_ASC, VD9_ASC_ALM, VD9_ASC_CAD);
CREATE UNIQUE INDEX HISTORI0 ON HISTORI (HIS_COD, HIS_USER);
CREATE INDEX IHISTORI_DAT_ATU ON HISTORI (DAT_ATU);
CREATE INDEX IHISTORI_DAT_CAD ON HISTORI (DAT_CAD);
CREATE INDEX IHISTORI_HIS_USER ON HISTORI (HIS_USER);
CREATE INDEX IDX_LOG_CLI ON LOGTRANSFWEB (LOG_CLI);
CREATE UNIQUE INDEX RDB$PRIMARY28 ON LOG_CONEXOES (LOG_ID);
CREATE UNIQUE INDEX MODULOS0 ON MODULOS (N_MODULO);
CREATE UNIQUE INDEX MORLGE0 ON MORLGE (LGE_COD);
CREATE INDEX MORLGE_IDX1 ON MORLGE (LGE_TIP2);
CREATE INDEX MORLGE_IDX10 ON MORLGE (LGE_PROJ2);
CREATE INDEX MORLGE_IDX2 ON MORLGE (LGE_PLA);
CREATE INDEX MORLGE_IDX3 ON MORLGE (LGE_CCUSTO);
CREATE INDEX MORLGE_IDX4 ON MORLGE (LGE_CAR);
CREATE INDEX MORLGE_IDX5 ON MORLGE (LGE_CCUSTO2);
CREATE INDEX MORLGE_IDX6 ON MORLGE (LGE_PLA2);
CREATE INDEX MORLGE_IDX7 ON MORLGE (LGE_CON);
CREATE INDEX MORLGE_IDX8 ON MORLGE (LGE_FOR_VINC);
CREATE INDEX MORLGE_IDX9 ON MORLGE (LGE_CLI_VINC);
CREATE INDEX IMORLGED_DOB_FLAG ON MORLGED (DOB_FLAG);
CREATE UNIQUE INDEX MORLGED0 ON MORLGED (DOB_COD);
CREATE INDEX MORLGED_IDX1 ON MORLGED (DOB_TIP2);
CREATE INDEX MORLGED_IDX10 ON MORLGED (DOB_FOR);
CREATE INDEX MORLGED_IDX11 ON MORLGED (DOB_CLI_VINC);
CREATE INDEX MORLGED_IDX12 ON MORLGED (DOB_FOR_VINC);
CREATE INDEX MORLGED_IDX13 ON MORLGED (DOB_PROJ2);
CREATE INDEX MORLGED_IDX2 ON MORLGED (DOB_PLA);
CREATE INDEX MORLGED_IDX3 ON MORLGED (DOB_CCUSTO);
CREATE INDEX MORLGED_IDX4 ON MORLGED (DOB_CAR);
CREATE INDEX MORLGED_IDX5 ON MORLGED (DOB_CCUSTO2);
CREATE INDEX MORLGED_IDX6 ON MORLGED (DOB_PLA2);
CREATE INDEX MORLGED_IDX7 ON MORLGED (DOB_CON);
CREATE INDEX MORLGED_IDX8 ON MORLGED (DOB_DOB);
CREATE INDEX MORLGED_IDX9 ON MORLGED (DOB_CLI);
CREATE INDEX RDB$FOREIGN35 ON MVAVISOS (AVI_USE);
CREATE UNIQUE INDEX PK_MVCAT ON MVCAT (CAT_COD);
CREATE INDEX RDB$FOREIGN54 ON MVCOM1 (COM1_SET3);
CREATE INDEX RDB$FOREIGN55 ON MVCOM1 (COM1_PROJ);
CREATE UNIQUE INDEX RDB$PRIMARY43 ON MVCOM1 (COM1_COD);
CREATE UNIQUE INDEX PK_MVCOM10 ON MVCOM10 (COM10_COD);
CREATE INDEX FK_MVCOM2_COM8 ON MVCOM2 (COM2_COM8);
CREATE INDEX RDB$FOREIGN56 ON MVCOM2 (COM2_COM1);
CREATE INDEX RDB$FOREIGN57 ON MVCOM2 (COM2_COD_PRO);
CREATE INDEX RDB$FOREIGN58 ON MVCOM2 (COM2_COD_SERV);
CREATE UNIQUE INDEX RDB$PRIMARY44 ON MVCOM2 (COM2_COD);
CREATE INDEX RDB$FOREIGN59 ON MVCOM3 (COM3_COM2);
CREATE INDEX RDB$FOREIGN60 ON MVCOM3 (COM3_SET2);
CREATE UNIQUE INDEX RDB$PRIMARY45 ON MVCOM3 (COM3_COM2, COM3_SET2);
CREATE INDEX FK_MVCOM4_COM8 ON MVCOM4 (COM4_COM8);
CREATE UNIQUE INDEX RDB$PRIMARY46 ON MVCOM4 (COM4_COD);
CREATE UNIQUE INDEX UNQ_MVCOM4_COM8_FOR ON MVCOM4 (COM4_COM8, COM4_FOR);
CREATE INDEX RDB$FOREIGN63 ON MVCOM5 (COM5_COM4);
CREATE UNIQUE INDEX RDB$PRIMARY47 ON MVCOM5 (COM5_COD);
CREATE INDEX FK_MVCOM6_COM5 ON MVCOM6 (COM6_COM5);
CREATE INDEX FK_MVCOM6_COM9 ON MVCOM6 (COM6_COM9);
CREATE UNIQUE INDEX PK_MVCOM6 ON MVCOM6 (COM6_COM9);
CREATE INDEX RDB$FOREIGN65 ON MVCOM6 (COM6_SET3);
CREATE INDEX RDB$FOREIGN66 ON MVCOM7 (COM7_COM2);
CREATE INDEX RDB$FOREIGN67 ON MVCOM7 (COM7_AVAL);
CREATE UNIQUE INDEX RDB$PRIMARY49 ON MVCOM7 (COM7_COM2);
CREATE INDEX FK_MVCOM8_SET3 ON MVCOM8 (COM8_SET3);
CREATE INDEX FK_MVCOM8_SET3_ATU ON MVCOM8 (COM8_SET3_ATU);
CREATE INDEX FK_MVCOM8_SOLICITA ON MVCOM8 (COM8_SOLICITA);
CREATE UNIQUE INDEX PK_MVCOM8 ON MVCOM8 (COM8_COD);
CREATE INDEX FK_MVCOM9_COM2 ON MVCOM9 (COM9_COM2);
CREATE INDEX FK_MVCOM9_COM4 ON MVCOM9 (COM9_COM4);
CREATE UNIQUE INDEX PK_MVCOM9 ON MVCOM9 (COM9_COD);
CREATE UNIQUE INDEX UNQ_MVCOM9_COM2_COM5 ON MVCOM9 (COM9_COM4, COM9_COM2);
CREATE UNIQUE INDEX MVCONTEST10 ON MVCONTEST1 (CON_COD);
CREATE INDEX MVCONTEST1_IDX1 ON MVCONTEST1 (CON_ALM, CON_DAT, CON_COD, CON_SET, CON_NUM);
CREATE UNIQUE INDEX MVCONTEST20 ON MVCONTEST2 (CON_COD);
CREATE INDEX MVCONTEST2_IDX1 ON MVCONTEST2 (CON_COD, CON_CON, CON_PRO, CON_COR, CON_MED);
CREATE INDEX MVCONTEST2_IDX2 ON MVCONTEST2 (CON_PRO, CON_COR, CON_MED);
CREATE UNIQUE INDEX RDB$PRIMARY21 ON MVCONTRA (CON_COD);
CREATE UNIQUE INDEX RDB$PRIMARY2 ON MVCONTRA3 (CON3_COD);
CREATE UNIQUE INDEX RDB$PRIMARY37 ON MVCONTRA4 (CON4_COD);
CREATE UNIQUE INDEX RDB$PRIMARY10 ON MVCONTRA5 (CON5_COD);
CREATE INDEX IMVCOPAG_PAG_BAI ON MVCOPAG (PAG_BAI);
CREATE INDEX IMVCOPAG_PAG_CON ON MVCOPAG (PAG_CON);
CREATE INDEX IMVCOPAG_PAG_DAT ON MVCOPAG (PAG_DAT);
CREATE INDEX IMVCOPAG_PAG_DFP ON MVCOPAG (PAG_DFP);
CREATE INDEX IMVCOPAG_PAG_DOC ON MVCOPAG (PAG_DOC);
CREATE INDEX IMVCOPAG_PAG_EMI ON MVCOPAG (PAG_EMI);
CREATE INDEX IMVCOPAG_PAG_FOR ON MVCOPAG (PAG_FOR);
CREATE INDEX IMVCOPAG_PAG_MOE ON MVCOPAG (PAG_MOE);
CREATE INDEX IMVCOPAG_PAG_OBS ON MVCOPAG (PAG_OBS);
CREATE INDEX IMVCOPAG_PAG_PLA ON MVCOPAG (PAG_PLA);
CREATE INDEX IMVCOPAG_PAG_TIP ON MVCOPAG (PAG_TIP);
CREATE INDEX IMVCOPAG_PAG_VAL ON MVCOPAG (PAG_VAL);
CREATE INDEX IMVCOPAG_PAG_VEC ON MVCOPAG (PAG_VEC);
CREATE UNIQUE INDEX MVCOPAG0 ON MVCOPAG (PAG_COD, PAG_FOR, PAG_DOC);
CREATE UNIQUE INDEX RDB$PRIMARY19 ON MVCOPAG (PAG_COD);
CREATE INDEX IMVCOPAGB_BAI_CON ON MVCOPAGB (BAI_CON);
CREATE INDEX IMVCOPAGB_BAI_DAT ON MVCOPAGB (BAI_DAT);
CREATE INDEX IMVCOPAGB_BAI_EMI ON MVCOPAGB (BAI_EMI);
CREATE INDEX IMVCOPAGB_BAI_EMP ON MVCOPAGB (BAI_EMP);
CREATE INDEX IMVCOPAGB_BAI_FOR ON MVCOPAGB (BAI_FOR);
CREATE INDEX IMVCOPAGB_BAI_MOE ON MVCOPAGB (BAI_MOE);
CREATE INDEX IMVCOPAGB_BAI_PGT ON MVCOPAGB (BAI_PGT);
CREATE INDEX IMVCOPAGB_BAI_PLA ON MVCOPAGB (BAI_PLA);
CREATE INDEX IMVCOPAGB_BAI_TIP ON MVCOPAGB (BAI_TIP);
CREATE INDEX IMVCOPAGB_BAI_VAL ON MVCOPAGB (BAI_VAL);
CREATE INDEX IMVCOPAGB_LGE_COD ON MVCOPAGB (LGE_COD);
CREATE INDEX IMVCOPAGB_PAG_COD ON MVCOPAGB (PAG_COD);
CREATE UNIQUE INDEX MVCOPAGB0 ON MVCOPAGB (BAI_COD);
CREATE INDEX IMVCOREC_REC_CAR ON MVCOREC (REC_CAR);
CREATE INDEX IMVCOREC_REC_CLI ON MVCOREC (REC_CLI);
CREATE INDEX IMVCOREC_REC_CON ON MVCOREC (REC_CON);
CREATE INDEX IMVCOREC_REC_DAT ON MVCOREC (REC_DAT);
CREATE INDEX IMVCOREC_REC_DOC ON MVCOREC (REC_DOC);
CREATE INDEX IMVCOREC_REC_EMI ON MVCOREC (REC_EMI);
CREATE INDEX IMVCOREC_REC_MOE ON MVCOREC (REC_MOE);
CREATE INDEX IMVCOREC_REC_OBS ON MVCOREC (REC_OBS);
CREATE INDEX IMVCOREC_REC_PLA ON MVCOREC (REC_PLA);
CREATE INDEX IMVCOREC_REC_TIP ON MVCOREC (REC_TIP);
CREATE INDEX IMVCOREC_REC_VAL ON MVCOREC (REC_VAL);
CREATE INDEX IMVCOREC_REC_VEC ON MVCOREC (REC_VEC);
CREATE INDEX MVCOREC0 ON MVCOREC (REC_COD, REC_DOC, REC_CCUSTO);
CREATE INDEX MVCOREC_VD1COD ON MVCOREC (REC_VD1COD);
CREATE UNIQUE INDEX RDB$PRIMARY1 ON MVCOREC (REC_COD);
CREATE INDEX IMVCORECB_BAI_CAR ON MVCORECB (BAI_CAR);
CREATE INDEX IMVCORECB_BAI_CLI ON MVCORECB (BAI_CLI);
CREATE INDEX IMVCORECB_BAI_CON ON MVCORECB (BAI_CON);
CREATE INDEX IMVCORECB_BAI_DOC ON MVCORECB (BAI_DOC);
CREATE INDEX IMVCORECB_BAI_EMI ON MVCORECB (BAI_EMI);
CREATE INDEX IMVCORECB_BAI_EMP ON MVCORECB (BAI_EMP);
CREATE INDEX IMVCORECB_BAI_MOE ON MVCORECB (BAI_MOE);
CREATE INDEX IMVCORECB_BAI_PGT ON MVCORECB (BAI_PGT);
CREATE INDEX IMVCORECB_BAI_PLA ON MVCORECB (BAI_PLA);
CREATE INDEX IMVCORECB_BAI_TIP ON MVCORECB (BAI_TIP);
CREATE INDEX IMVCORECB_BAI_VAL ON MVCORECB (BAI_VAL);
CREATE INDEX IMVCORECB_BAI_VEC ON MVCORECB (BAI_VEC);
CREATE INDEX IMVCORECB_LGE_COD ON MVCORECB (LGE_COD);
CREATE INDEX IMVCORECB_REC_COD ON MVCORECB (REC_COD);
CREATE UNIQUE INDEX MVCORECB0 ON MVCORECB (BAI_COD);
CREATE INDEX MVCORECB_VD1COD ON MVCORECB (BAI_VD1COD);
CREATE INDEX IMVCORECD_DOB_CAR ON MVCORECD (DOB_CAR);
CREATE INDEX IMVCORECD_DOB_CLI ON MVCORECD (DOB_CLI);
CREATE INDEX IMVCORECD_DOB_CON ON MVCORECD (DOB_CON);
CREATE INDEX IMVCORECD_DOB_DAT ON MVCORECD (DOB_DAT);
CREATE INDEX IMVCORECD_DOB_DOC ON MVCORECD (DOB_DOC);
CREATE INDEX IMVCORECD_DOB_EMI ON MVCORECD (DOB_EMI);
CREATE INDEX IMVCORECD_DOB_MOE ON MVCORECD (DOB_MOE);
CREATE INDEX IMVCORECD_DOB_OBS ON MVCORECD (DOB_OBS);
CREATE INDEX IMVCORECD_DOB_PLA ON MVCORECD (DOB_PLA);
CREATE INDEX IMVCORECD_DOB_REC ON MVCORECD (DOB_REC);
CREATE INDEX IMVCORECD_DOB_TIP ON MVCORECD (DOB_TIP);
CREATE INDEX IMVCORECD_DOB_VAL ON MVCORECD (DOB_VAL);
CREATE INDEX IMVCORECD_DOB_VEC ON MVCORECD (DOB_VEC);
CREATE INDEX MVCORECD0 ON MVCORECD (DOB_COD, DOB_DOC, DOB_CCUSTO);
CREATE INDEX MVCORECD_VD1COD ON MVCORECD (DOB_VD1COD);
CREATE UNIQUE INDEX RDB$PRIMARY31 ON MVCORECD (DOB_COD);
CREATE INDEX IMVDOC_DAT_ATU ON MVDOC (DAT_ATU);
CREATE INDEX IMVDOC_DAT_CAD ON MVDOC (DAT_CAD);
CREATE INDEX IMVDOC_DOC_NOM ON MVDOC (DOC_NOM);
CREATE UNIQUE INDEX MVDOC0 ON MVDOC (DOC_COD);
CREATE INDEX MVEMAILMARKETING_DESCRICAO ON MVEMAILMARKETING (EMA_DESCRICAO);
CREATE INDEX MVEMAILMARKETING_ENVIO ON MVEMAILMARKETING (EMA_ENVIO);
CREATE UNIQUE INDEX PK_MVEMAILMARKETING ON MVEMAILMARKETING (EMA_COD);
CREATE INDEX FK_MVEMAILMARKETING2_1 ON MVEMAILMARKETING2 (EMA_COD);
CREATE INDEX MVEMAILMARKETING2_EMAIL ON MVEMAILMARKETING2 (EMA2_EMAIL);
CREATE INDEX MVEMAILMARKETING2_ENTIDADE ON MVEMAILMARKETING2 (EMA2_TIP_ENT, EMA2_ENTIDADE);
CREATE INDEX MVEMAILMARKETING2_NOVO_EMAIL ON MVEMAILMARKETING2 (EMA2_NOVO_EMAIL);
CREATE INDEX MVEMAILMARKETING2_STATUS ON MVEMAILMARKETING2 (EMA2_STATUS);
CREATE UNIQUE INDEX PK_MVEMAILMARKETING2 ON MVEMAILMARKETING2 (EMA2_COD);
CREATE UNIQUE INDEX MVEST0 ON MVEST (EST_ALM, EST_PRO, EST_COR, EST_TAM);
CREATE INDEX MVEST_IDX1 ON MVEST (EST_PRO);
CREATE INDEX MVEST_IDX2 ON MVEST (EST_COR);
CREATE INDEX MVEST_IDX3 ON MVEST (EST_TAM);
CREATE INDEX MVESTDAT_ESTDATPROALM ON MVESTDAT (EST_ALM, EST_DAT, EST_PRO);
CREATE INDEX MVESTDAT_EST_ALM ON MVESTDAT (EST_ALM);
CREATE INDEX MVESTDAT_EST_COR ON MVESTDAT (EST_COR);
CREATE INDEX MVESTDAT_EST_DAT ON MVESTDAT (EST_DAT);
CREATE INDEX MVESTDAT_EST_PRO ON MVESTDAT (EST_PRO);
CREATE INDEX MVESTDAT_EST_TAM ON MVESTDAT (EST_TAM);
CREATE UNIQUE INDEX MVESTDAT_IDX1 ON MVESTDAT (EST_ALM, EST_PRO, EST_COR, EST_TAM, EST_DAT);
CREATE UNIQUE INDEX PK_MVEXAMAUDIO ON MVEXAMAUDIO (EXA_COD);
CREATE INDEX FK_MVLANCEXA_LAN_EMP ON MVLANCEXA (LAN_EMP);
CREATE INDEX FK_MVLANCEXA_LAN_FUN ON MVLANCEXA (LAN_FUN);
CREATE UNIQUE INDEX PK_MVLANCEXA ON MVLANCEXA (LAN_COD);
CREATE INDEX FK_MVLANCEXA2_LAN2_AMB ON MVLANCEXA2 (LAN2_AMB);
CREATE INDEX FK_MVLANCEXA2_LAN2_CRD ON MVLANCEXA2 (LAN2_CRD);
CREATE INDEX FK_MVLANCEXA2_LAN2_LAN ON MVLANCEXA2 (LAN2_LAN);
CREATE INDEX FK_MVLANCEXA2_LAN2_PED ON MVLANCEXA2 (LAN2_PED);
CREATE INDEX FK_MVLANCEXA2_LAN2_PROFINT ON MVLANCEXA2 (LAN2_PROFINT);
CREATE UNIQUE INDEX PK_MVLANCEXA2 ON MVLANCEXA2 (LAN2_COD);
CREATE INDEX FK_MVLANCEXA3_LAN3_DOE ON MVLANCEXA3 (LAN3_DOE);
CREATE INDEX FK_MVLANCEXA3_LAN3_LAN ON MVLANCEXA3 (LAN3_LAN);
CREATE UNIQUE INDEX PK_MVLANCEXA3 ON MVLANCEXA3 (LAN3_COD);
CREATE INDEX FK_MVLANCEXA4_LAN4_LAN2 ON MVLANCEXA4 (LAN4_LAN2);
CREATE UNIQUE INDEX PK_MVLANCEXA4 ON MVLANCEXA4 (LAN4_COD);
CREATE INDEX IMVLGE_LGE_CCO ON MVLGE (LGE_CCO);
CREATE INDEX IMVLGE_LGE_CON ON MVLGE (LGE_PLA);
CREATE INDEX IMVLGE_LGE_DOC ON MVLGE (LGE_DOC);
CREATE INDEX IMVLGE_LGE_HIS ON MVLGE (LGE_HIS);
CREATE INDEX IMVLGE_LGE_OPE ON MVLGE (LGE_OPE);
CREATE INDEX IMVLGE_LGE_OPELGE_COD ON MVLGE (LGE_OPE, LGE_COD);
CREATE INDEX IMVLGE_LGE_OPE_DOC_CON ON MVLGE (LGE_OPE, LGE_DOC, LGE_CON);
CREATE INDEX IMVLGE_LGE_OPE_ILGE_DOC ON MVLGE (LGE_OPE, LGE_DOC);
CREATE INDEX IMVLGE_LGE_TRA ON MVLGE (LGE_TRA);
CREATE INDEX IMVLGE_LGE_VAL ON MVLGE (LGE_VAL);
CREATE UNIQUE INDEX MVLGE0 ON MVLGE (LGE_COD, LGE_CON);
CREATE INDEX MVLGE_IDX1 ON MVLGE (LGE_TIP2);
CREATE INDEX MVLGE_IDX10 ON MVLGE (LGE_PROJ2);
CREATE INDEX MVLGE_IDX3 ON MVLGE (LGE_CCUSTO);
CREATE INDEX MVLGE_IDX4 ON MVLGE (LGE_CAR);
CREATE INDEX MVLGE_IDX5 ON MVLGE (LGE_CCUSTO2);
CREATE INDEX MVLGE_IDX6 ON MVLGE (LGE_PLA2);
CREATE INDEX MVLGE_IDX7 ON MVLGE (LGE_CON);
CREATE INDEX MVLGE_IDX8 ON MVLGE (LGE_FOR_VINC);
CREATE INDEX MVLGE_IDX9 ON MVLGE (LGE_CLI_VINC);
CREATE UNIQUE INDEX RDB$PRIMARY14 ON MVLGE (LGE_COD);
CREATE INDEX IMVLGED_DOB_FLAG ON MVLGED (DOB_FLAG);
CREATE UNIQUE INDEX MVLGED0 ON MVLGED (DOB_COD);
CREATE INDEX MVLGED_IDX1 ON MVLGED (DOB_TIP2);
CREATE INDEX MVLGED_IDX10 ON MVLGED (DOB_FOR);
CREATE INDEX MVLGED_IDX11 ON MVLGED (DOB_CLI_VINC);
CREATE INDEX MVLGED_IDX12 ON MVLGED (DOB_FOR_VINC);
CREATE INDEX MVLGED_IDX13 ON MVLGED (DOB_PROJ2);
CREATE INDEX MVLGED_IDX2 ON MVLGED (DOB_PLA);
CREATE INDEX MVLGED_IDX3 ON MVLGED (DOB_CCUSTO);
CREATE INDEX MVLGED_IDX4 ON MVLGED (DOB_CAR);
CREATE INDEX MVLGED_IDX5 ON MVLGED (DOB_CCUSTO2);
CREATE INDEX MVLGED_IDX6 ON MVLGED (DOB_PLA2);
CREATE INDEX MVLGED_IDX7 ON MVLGED (DOB_CON);
CREATE INDEX MVLGED_IDX8 ON MVLGED (DOB_DOB);
CREATE INDEX MVLGED_IDX9 ON MVLGED (DOB_CLI);
CREATE INDEX MVNFES_VD1 ON MVNFES (NFES_VD1);
CREATE UNIQUE INDEX PK_MVNFES ON MVNFES (NFES_COD);
CREATE UNIQUE INDEX RDB$PRIMARY13 ON MVOBS (OBS_COD);
CREATE INDEX FK_MVOBS2 ON MVOBS2 (OBS2_COD);
CREATE UNIQUE INDEX MVOP20 ON MVOP2 (ID);
CREATE INDEX MVOP21 ON MVOP2 (OPE);
CREATE UNIQUE DESCENDING INDEX NDXMVOP2ID ON MVOP2 (ID);
CREATE INDEX NDXMVOP2OPCAO ON MVOP2 (OPCAO);
CREATE INDEX NDXMVOP2OPE ON MVOP2 (OPE);
CREATE UNIQUE INDEX MVOPE0 ON MVOPE (ID);
CREATE INDEX MVOPE2 ON MVOPE (IDOP);
CREATE UNIQUE DESCENDING INDEX NDXMVOPEID ON MVOPE (ID);
CREATE INDEX FK_MVPEDEXA_PED_CRD ON MVPEDEXA (PED_CRD);
CREATE INDEX FK_MVPEDEXA_PED_EMP ON MVPEDEXA (PED_EMP);
CREATE INDEX FK_MVPEDEXA_PED_FUN ON MVPEDEXA (PED_FUN);
CREATE UNIQUE INDEX PK_MVPEDEXA ON MVPEDEXA (PED_COD);
CREATE INDEX FK_MVPEDEXA2_PED2_PED ON MVPEDEXA2 (PED2_PED);
CREATE UNIQUE INDEX PK_MVPEDEXA2 ON MVPEDEXA2 (PED2_COD);
CREATE INDEX IMVSUP_SUP_DAT ON MVSUP (SUP_DAT);
CREATE UNIQUE INDEX MVSUP0 ON MVSUP (SUP_COD);
CREATE INDEX IMVSUP2_SUP2_SUP ON MVSUP2 (SUP2_SUP);
CREATE UNIQUE INDEX MVSUP20 ON MVSUP2 (SUP2_COD, SUP2_SUP);
CREATE UNIQUE INDEX PK_MVVISIT ON MVVISIT (VIS_COD);
CREATE INDEX NDXMYAUTHUSERGROUPRIGHTS ON MYAUTHUSER (GROUPRIGHTS);
CREATE UNIQUE DESCENDING INDEX NDXMYAUTHUSERID ON MYAUTHUSER (ID);
CREATE INDEX NDXMYAUTHUSERLOGONNAME ON MYAUTHUSER (LOGONNAME);
CREATE INDEX INAVIA_DAT_ATU ON NAVIA (DAT_ATU);
CREATE INDEX INAVIA_DAT_CAD ON NAVIA (DAT_CAD);
CREATE UNIQUE INDEX NAVIA0 ON NAVIA (N_COD);
CREATE INDEX IPARAMET_DAT_ATU ON PARAMET (DAT_ATU);
CREATE INDEX IPARAMET_DAT_CAD ON PARAMET (DAT_CAD);
CREATE UNIQUE INDEX PARAMET0 ON PARAMET (P_COD);
CREATE UNIQUE INDEX RDB$PRIMARY15 ON PARAMTSUP (PAR_NAME);


/******************************************************************************/
/*                                  Triggers                                  */
/******************************************************************************/


SET TERM ^ ;




/* Trigger: CDATIVIDADE_BI */
CREATE TRIGGER CDATIVIDADE_BI FOR CDATIVIDADE
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.atividade_codigo is null) then
    new.atividade_codigo = gen_id(gen_cdatividade_id,1);
end
^

/* Trigger: CDCAMPOSVARLOOKUP_BI */
CREATE TRIGGER CDCAMPOSVARLOOKUP_BI FOR CDCAMPOSVARLOOKUP
ACTIVE BEFORE INSERT POSITION 0
AS
 BEGIN
 IF (NEW.LKP_COD IS NULL) THEN
 NEW.LKP_COD = GEN_ID(GEN_CDCAMPOSVARLOOKUP_ID,1);
 END
^

/* Trigger: CDCLA_BIU0 */
CREATE TRIGGER CDCLA_BIU0 FOR CDCLA
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
AS
 declare variable vtexto varchar(100);
 begin
 select result from retirar_nao_numericos(new.cla_cla) into vtexto;
 new.cla_ncm_numericos = vtexto;
 end
^

/* Trigger: CDCLIFUN_BIU0 */
CREATE TRIGGER CDCLIFUN_BIU0 FOR CDCLIFUN
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
AS
 begin
 if (new.fun_codigo is null) then
 begin
 Select max(fun_codigo)+1 From cdclifun Into new.fun_codigo;
 if (new.fun_codigo is null) then
 new.fun_codigo = 1;
 end
 new.fun_nome_com_codigo = new.fun_codigo || ' - ' || new.fun_nom;
 end
^

/* Trigger: CDCLI_BIU0 */
CREATE TRIGGER CDCLI_BIU0 FOR CDCLI
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
AS
 begin
 new.dat_hor_atu = cast('now' as date);
 end
^

/* Trigger: CDEMPRESAMAP2_AI0 */
CREATE TRIGGER CDEMPRESAMAP2_AI0 FOR CDEMPRESAMAP2
ACTIVE AFTER INSERT POSITION 0
AS
 begin
 Insert into cdempresamap5 (map5_map2) Values (new.map2_cod);
 end
^

/* Trigger: CDEMPRESAMAP5_BI */
CREATE TRIGGER CDEMPRESAMAP5_BI FOR CDEMPRESAMAP5
ACTIVE BEFORE INSERT POSITION 0
AS
 BEGIN
 IF (NEW.MAP5_COD IS NULL) THEN
 NEW.MAP5_COD = GEN_ID(GEN_CDEMPRESAMAP5_ID,1);
 END
^

/* Trigger: CDEMPRESASEG6_BI */
CREATE TRIGGER CDEMPRESASEG6_BI FOR CDEMPRESASEG6
ACTIVE BEFORE INSERT POSITION 0
AS
 BEGIN
 IF (NEW.EMP6_COD IS NULL) THEN
 NEW.EMP6_COD = GEN_ID(GEN_CDEMPRESASEG6_ID,1);
 END
^

/* Trigger: CDETIQUETA_AI0 */
CREATE TRIGGER CDETIQUETA_AI0 FOR CDETIQUETA
ACTIVE AFTER INSERT POSITION 0
AS
 begin
 if (cdetiqueta.eti_type = "ENTIDADES") then
 begin
 insert into cdetifont values (new.eti_cod, "Mensagem", "Arial",0,8,
 "F","F","F","F","T", "");
 insert into cdetifont values (new.eti_cod, "Entidade", "Arial",0,8,
 "F","F","F","F","T", "");
 insert into cdetifont values (new.eti_cod, "Endereço", "Arial",0,8,
 "F","F","F","F","T", "");
 insert into cdetifont values (new.eti_cod, "Contato", "Arial",0,8,
 "F","F","F","F","T", "");
 end
 else
 if (cdetiqueta.eti_type = "PRODUTOS") then
 begin
 insert into cdetifont values (new.eti_cod, "Cod_CorMed", "Arial",0,8,
 "F","F","F","F","T", "");
 insert into cdetifont values (new.eti_cod, "Cod_Int", "Arial",0,8,
 "F","F","F","F","T", "");
 insert into cdetifont values (new.eti_cod, "Cod_Bar", "Arial",0,8,
 "F","F","F","F","T", "");
 insert into cdetifont values (new.eti_cod, "Descricao", "Arial",0,8,
 "F","F","F","F","T", "");
 insert into cdetifont values (new.eti_cod, "Marca", "Arial",0,8,
 "F","F","F","F","T", "");
 insert into cdetifont values (new.eti_cod, "Tipo", "Arial",0,8,
 "F","F","F","F","T", "");
 insert into cdetifont values (new.eti_cod, "Grupo", "Arial",0,8,
 "F","F","F","F","T", "");
 insert into cdetifont values (new.eti_cod, "Sub_Grupo", "Arial",0,8,
 "F","F","F","F","T", "");
 insert into cdetifont values (new.eti_cod, "Medida", "Arial",0,8,
 "F","F","F","F","T", "");
 insert into cdetifont values (new.eti_cod, "Cor", "Arial",0,8,
 "F","F","F","F","T", "");
 insert into cdetifont values (new.eti_cod, "Categoria", "Arial",0,8,
 "F","F","F","F","T", "");
 insert into cdetifont values (new.eti_cod, "Preco", "Arial",0,8,
 "F","F","F","F","T", "");
 end
 end
^

/* Trigger: CDEXPORTSQL_BI0 */
CREATE TRIGGER CDEXPORTSQL_BI0 FOR CDEXPORTSQL
ACTIVE BEFORE INSERT POSITION 0
AS
 begin
 New.exp_cod = gen_id(gen_cdexportsql_id,1);
 end
^

/* Trigger: CDGRAURISCO_BIU0 */
CREATE TRIGGER CDGRAURISCO_BIU0 FOR CDGRAURISCO
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
AS
 begin
 new.gra_enq_desc = CASE new.GRA_ENQ WHEN 'BIO' THEN 'Biológico' WHEN 'ERG' THEN 'Ergonômico' WHEN 'FIS' THEN 'Físico' WHEN 'MEC' THEN 'Mecânico' WHEN 'QUI' THEN 'Químico' WHEN 'SEM' THEN 'Sem Riscos' END;
 end
^

/* Trigger: CDIMPRESO_AU0 */
CREATE TRIGGER CDIMPRESO_AU0 FOR CDIMPRESO
ACTIVE AFTER UPDATE POSITION 0
AS
 begin
 UPDATE CDFORM
 SET FORM_NOM = NEW.NOME
 WHERE FORM_NOM = OLD.NOME;
 
 UPDATE CDTRA3
 SET NOME = NEW.NOME
 WHERE NOME = OLD.NOME;
 end
^

/* Trigger: CDLOGIS_CATEGORIA_BI */
CREATE TRIGGER CDLOGIS_CATEGORIA_BI FOR CDLOGIS_CATEGORIA
ACTIVE BEFORE INSERT POSITION 0
AS
 BEGIN
 IF (NEW.CATEGORIA_CODIGO IS NULL) THEN
 NEW.CATEGORIA_CODIGO = GEN_ID(GEN_CDLOGIS_CATEGORIA_ID,1);
 END
^

/* Trigger: CDLOGIS_COLETA_BI */
CREATE TRIGGER CDLOGIS_COLETA_BI FOR CDLOGIS_COLETA
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
AS
 BEGIN
 IF (NEW.COLETA_CODIGO IS NULL) THEN
 NEW.COLETA_CODIGO = GEN_ID(GEN_CDLOGIS_COLETA_ID,1);
 IF ((NEW.COLETA_NUMERO IS NULL) OR (NEW.COLETA_NUMERO = 0)) THEN
 SELECT MAX(COLETA_NUMERO)+1 FROM CDLOGIS_COLETA INTO NEW.COLETA_NUMERO;
 IF ((NEW.COLETA_NUMERO IS NULL) OR (NEW.COLETA_NUMERO = 0)) THEN
 NEW.COLETA_NUMERO = 1;
 END
^

/* Trigger: CDLOGIS_COLETA_EVENTO_BI */
CREATE TRIGGER CDLOGIS_COLETA_EVENTO_BI FOR CDLOGIS_COLETA_EVENTO
ACTIVE BEFORE INSERT POSITION 0
AS
 BEGIN
 IF (NEW.EVENTO_CODIGO IS NULL) THEN
 NEW.EVENTO_CODIGO = GEN_ID(GEN_CDLOGIS_COLETA_EVENTO_ID,1);
 END
^

/* Trigger: CDLOGIS_COLETA_NF_BI */
CREATE TRIGGER CDLOGIS_COLETA_NF_BI FOR CDLOGIS_COLETA_NF
ACTIVE BEFORE INSERT POSITION 0
AS
 BEGIN
 IF (NEW.NF_CODIGO IS NULL) THEN
 NEW.NF_CODIGO = GEN_ID(GEN_CDLOGIS_COLETA_NF_ID,1);
 END
^

/* Trigger: CDLOGIS_COLETA_OCORRENCIA_BI */
CREATE TRIGGER CDLOGIS_COLETA_OCORRENCIA_BI FOR CDLOGIS_COLETA_OCORRENCIA
ACTIVE BEFORE INSERT POSITION 0
AS
 BEGIN
 IF (NEW.OCORRENCIA_CODIGO IS NULL) THEN
 NEW.OCORRENCIA_CODIGO = GEN_ID(GEN_CDLOGIS_COLETA_OCORRENCIA,1);
 END
^

/* Trigger: CDLOGIS_CONDUTOR_BI */
CREATE TRIGGER CDLOGIS_CONDUTOR_BI FOR CDLOGIS_CONDUTOR
ACTIVE BEFORE INSERT POSITION 0
AS
 BEGIN
 IF (NEW.CONDUTOR_CODIGO IS NULL) THEN
 NEW.CONDUTOR_CODIGO = GEN_ID(GEN_CDLOGIS_CONDUTOR_ID,1);
 END
^

/* Trigger: CDLOGIS_SITUACAO_BI */
CREATE TRIGGER CDLOGIS_SITUACAO_BI FOR CDLOGIS_SITUACAO
ACTIVE BEFORE INSERT POSITION 0
AS
 BEGIN
 IF (NEW.SITUACAO_CODIGO IS NULL) THEN
 NEW.SITUACAO_CODIGO = GEN_ID(GEN_CDLOGIS_SITUACAO_ID,1);
 END
^

/* Trigger: CDLOGIS_VEICULO_BI */
CREATE TRIGGER CDLOGIS_VEICULO_BI FOR CDLOGIS_VEICULO
ACTIVE BEFORE INSERT POSITION 0
AS
 BEGIN
 IF (NEW.VEICULO_CODIGO IS NULL) THEN
 NEW.VEICULO_CODIGO = GEN_ID(GEN_CDLOGIS_VEICULO_ID,1);
 END
^

/* Trigger: CDMOBILE_MENSAGENS_BI */
CREATE TRIGGER CDMOBILE_MENSAGENS_BI FOR CDMOBILE_MENSAGENS
ACTIVE BEFORE INSERT POSITION 0
AS
 BEGIN
 IF ((NEW.MEN_COD IS NULL) or (NEW.MEN_COD = 0)) THEN
 NEW.MEN_COD = GEN_ID(GEN_CDMOBILE_MENSAGENS_ID,1);
 END
^

/* Trigger: CDOSFASE_BI */
CREATE TRIGGER CDOSFASE_BI FOR CDOSFASE
ACTIVE BEFORE INSERT POSITION 0
AS
 BEGIN
 IF (NEW.ID IS NULL) THEN
 NEW.ID = GEN_ID(GEN_CDOSFASE_ID,1);
 END
^

/* Trigger: CDOS_BI */
CREATE TRIGGER CDOS_BI FOR CDOS
ACTIVE BEFORE INSERT POSITION 0
AS
 BEGIN
 IF (NEW.COD_OS IS NULL) THEN
 NEW.COD_OS = GEN_ID(GEN_CDOS,1);
 END
^

/* Trigger: CDPROCM_AD0 */
CREATE TRIGGER CDPROCM_AD0 FOR CDPROCM
ACTIVE AFTER DELETE POSITION 0
AS
 DECLARE VARIABLE USAPRECOCOR VARCHAR(1);
 DECLARE VARIABLE USAPRECOMEDIDA VARCHAR(1);
 BEGIN
 SELECT PRECO_COR FROM PARAMET INTO USAPRECOCOR;
 SELECT PRECO_MEDIDA FROM PARAMET INTO USAPRECOMEDIDA;
 
 IF ((USAPRECOCOR = 'T') AND (USAPRECOMEDIDA = 'T')) THEN
 DELETE FROM CDPROPRE WHERE CDPROPRE.PRO_PRO = OLD.PRO_PRO
 AND CDPROPRE.PRO_COR = OLD.PRO_COR
 AND CDPROPRE.PRO_MED = OLD.PRO_MED;
 END
^

/* Trigger: CDPROCM_AIU0 */
CREATE TRIGGER CDPROCM_AIU0 FOR CDPROCM
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
AS
 declare variable vUsaEAN varchar(1);
 declare variable vEAN varchar(21);
 begin
 if ((new.pro_cod is not null) and (new.pro_cod <> '')) then
 begin
 Select Coalesce(P_USA_CODIGO_EAN, 'F') From PARAMETPRO Into vUsaEan;
 if (vUsaEan = 'T') then
 begin
 Select vcodigo From corrigir_codigo_ean(new.pro_pro, new.pro_cod) into vEan;
 new.pro_cod = vEan;
 end
 end
 end
^

/* Trigger: CDPROFOTO_BI0 */
CREATE TRIGGER CDPROFOTO_BI0 FOR CDPROFOTO
ACTIVE BEFORE INSERT POSITION 0
AS
 begin
 new.dat_hor_atu = cast('now' as date);
 end
^

/* Trigger: CDPRO_AD0 */
CREATE TRIGGER CDPRO_AD0 FOR CDPRO
ACTIVE AFTER DELETE POSITION 0
AS
 BEGIN
 DELETE FROM CDPROICMS WHERE ICM_PRO = OLD.PRO_COD;
 DELETE FROM CDPROCM WHERE PRO_PRO = OLD.PRO_COD;
 DELETE FROM CDPROPRE WHERE PRO_PRO = OLD.PRO_COD;
 DELETE FROM CDPROMAXMIN WHERE PRO_PRO = OLD.PRO_COD;
 DELETE FROM CDPROESTLO WHERE PRO_PRO = OLD.PRO_COD;
 DELETE FROM CDPROICM WHERE PRO_COD = OLD.PRO_COD;
 DELETE FROM CDPROAPLI WHERE PRO_COD = OLD.PRO_COD;
 DELETE FROM CDPROFIC WHERE FIC_PRO = OLD.PRO_COD;
 DELETE FROM CDPROCLI WHERE PRO_PRO = OLD.PRO_COD;
 DELETE FROM CDPROFOR WHERE PRO_PRO = OLD.PRO_COD;
 DELETE FROM CDPROCUSTO WHERE PRO_PRO = OLD.PRO_COD;
 DELETE FROM CDPROENG WHERE PRO_PRO = OLD.PRO_COD;
 END
^

/* Trigger: CDPRO_AIU0 */
CREATE TRIGGER CDPRO_AIU0 FOR CDPRO
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
AS
 begin
 new.dat_hor_atu = cast('now' as date);
 end
^

/* Trigger: CDSAFEST_NFS_AI0 */
CREATE TRIGGER CDSAFEST_NFS_AI0 FOR CDSAFEST_NFS
ACTIVE AFTER INSERT POSITION 0
AS
 begin
 Insert into CDSAFEST_NF_CAIXAS (NF_CODIGO, CAIXA_NUMERO)
 Select new.nf_codigo, 1
 From RDB$DATABASE
 where not Exists (select CAIXA_CODIGO From CDSAFEST_NF_CAIXAS Where CDSAFEST_NF_CAIXAS.NF_CODIGO = new.nf_codigo);
 end
^

/* Trigger: CDSAFEST_NFS_BI */
CREATE TRIGGER CDSAFEST_NFS_BI FOR CDSAFEST_NFS
ACTIVE BEFORE INSERT POSITION 0
AS
 BEGIN
 IF (NEW.NF_CODIGO IS NULL) THEN
 NEW.NF_CODIGO = GEN_ID(GEN_CDSAFEST_NFS_ID,1);
 IF (NEW.DAT_CAD IS NULL) THEN
 NEW.DAT_CAD = 'now';
 END
^

/* Trigger: CDSAFEST_NF_CAIXAS_AD0 */
CREATE TRIGGER CDSAFEST_NF_CAIXAS_AD0 FOR CDSAFEST_NF_CAIXAS
ACTIVE AFTER DELETE POSITION 0
AS
 begin
 update cdsafest_nf_caixas set caixa_numero = caixa_numero - 1
 where nf_codigo = old.nf_codigo
 and caixa_numero > old.caixa_numero;
 end
^

/* Trigger: CDSAFEST_NF_CAIXAS_BI */
CREATE TRIGGER CDSAFEST_NF_CAIXAS_BI FOR CDSAFEST_NF_CAIXAS
ACTIVE BEFORE INSERT POSITION 0
AS
 BEGIN
 IF (NEW.CAIXA_CODIGO IS NULL) THEN
 NEW.CAIXA_CODIGO = GEN_ID(GEN_CDSAFEST_NF_CAIXAS_ID,1);
 IF (NEW.CAIXA_STATUS IS NULL) THEN
 NEW.CAIXA_STATUS = 'A';
 END
^

/* Trigger: CDSAFEST_NF_ITENS_AI0 */
CREATE TRIGGER CDSAFEST_NF_ITENS_AI0 FOR CDSAFEST_NF_ITENS
ACTIVE AFTER INSERT POSITION 0
AS
 begin
 Insert into cdsafest_nf_item_caixas(
 caixa_codigo, item_codigo, caixa_quantidade)
 values (
 (select caixa_codigo from cdsafest_nf_caixas where nf_codigo = new.nf_codigo and caixa_numero = 1),
 new.item_codigo,
 new.item_quantidade);
 end
^

/* Trigger: CDSAFEST_NF_ITENS_BI */
CREATE TRIGGER CDSAFEST_NF_ITENS_BI FOR CDSAFEST_NF_ITENS
ACTIVE BEFORE INSERT POSITION 0
AS
 BEGIN
 IF (NEW.ITEM_CODIGO IS NULL) THEN
 NEW.ITEM_CODIGO = GEN_ID(GEN_CDSAFEST_NF_ITENS_ID,1);
 END
^

/* Trigger: CDSIRE_BLOCO_BI */
CREATE TRIGGER CDSIRE_BLOCO_BI FOR CDSIRE_BLOCO
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
as
 begin
 if (new.bloco_codigo is null) then
 begin
 new.bloco_codigo = gen_id(gen_cdsire_bloco_id,1);
 if (new.bloco_data_cadastro is null) THEN
 new.bloco_data_cadastro = 'now';
 end
 IF ((new.bloco_ativo IS NULL) OR ((new.bloco_ativo <> 'A') AND (new.bloco_ativo <> 'I'))) THEN
 new.bloco_ativo = 'A';
 IF (new.bloco_data_atualizacao IS NULL) THEN
 new.bloco_data_atualizacao = 'now';
 end
^

/* Trigger: CDSIRE_CLIENTE_BI */
CREATE TRIGGER CDSIRE_CLIENTE_BI FOR CDSIRE_CLIENTE
ACTIVE BEFORE INSERT POSITION 0
AS
 BEGIN
 IF (NEW.CLIENTE_CODIGO IS NULL) THEN
 NEW.CLIENTE_CODIGO = GEN_ID(GEN_CDSIRE_CLIENTE_ID,1);
 END
^

/* Trigger: CDSIRE_CONDICOES_PAGAMENTO_BI */
CREATE TRIGGER CDSIRE_CONDICOES_PAGAMENTO_BI FOR CDSIRE_CONDICOES_PAGAMENTO
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
as
begin
  if (new.condicoes_codigo is null) then
  begin
    new.condicoes_codigo = gen_id(gen_cdsire_condicoes_pagamento,1);
    new.condicoes_data_cadastro = 'now';
    new.condicoes_ativo = 'A';
  end                                                               
  new.condicoes_data_atualizacao = 'now';
end
^

/* Trigger: CDSIRE_EMPREENDIMENTO_BI */
CREATE TRIGGER CDSIRE_EMPREENDIMENTO_BI FOR CDSIRE_EMPREENDIMENTO
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
AS
 BEGIN
 IF (NEW.EMPREENDIMENTO_CODIGO IS NULL) THEN
 BEGIN
 NEW.EMPREENDIMENTO_CODIGO = GEN_ID(GEN_CDSIRE_EMPREENDIMENTO_ID,1);
 IF (NEW.EMPREENDIMENTO_DATA_CADASTRO IS NULL) THEN
 NEW.EMPREENDIMENTO_DATA_CADASTRO = 'now';
 END
 IF ((NEW.EMPREENDIMENTO_ATIVO IS NULL) OR ((NEW.EMPREENDIMENTO_ATIVO <> 'A') AND (NEW.EMPREENDIMENTO_ATIVO <> 'I'))) THEN
 NEW.EMPREENDIMENTO_ATIVO = 'A';
 IF (NEW.EMPREENDIMENTO_DATA_ATUALIZACAO IS NULL) THEN
 NEW.EMPREENDIMENTO_DATA_ATUALIZACAO = 'now';
 END
^

/* Trigger: CDSIRE_FASE_BI */
CREATE TRIGGER CDSIRE_FASE_BI FOR CDSIRE_FASE
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
as
 begin
 if (new.fase_codigo is null) then
 begin
 new.fase_codigo = gen_id(gen_cdsire_fase_id,1);
 if (new.fase_data_cadastro is null) THEN
 new.fase_data_cadastro = 'now';
 END
 IF ((new.fase_ativo IS NULL) OR ((new.fase_ativo <> 'A') AND (new.fase_ativo <> 'I'))) THEN
 new.fase_ativo = 'A';
 IF (new.fase_data_atualizacao IS NULL) THEN
 new.fase_data_atualizacao = 'now';
 end
^

/* Trigger: CDSIRE_IMOVEL_BI */
CREATE TRIGGER CDSIRE_IMOVEL_BI FOR CDSIRE_IMOVEL
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
AS
 BEGIN
 IF (NEW.IMOVEL_CODIGO IS NULL) THEN
 BEGIN
 NEW.IMOVEL_CODIGO = GEN_ID(GEN_CDSIRE_IMOVEL_ID,1);
 IF (NEW.IMOVEL_DATA_CADASTRO IS NULL) THEN
 NEW.IMOVEL_DATA_CADASTRO = 'now';
 END
 IF ((NEW.IMOVEL_ATIVO IS NULL) OR ((NEW.IMOVEL_ATIVO <> 'A') AND (NEW.IMOVEL_ATIVO <> 'I'))) THEN
 NEW.IMOVEL_ATIVO = 'A';
 IF (NEW.IMOVEL_DATA_ATUALIZACAO IS NULL) THEN
 NEW.IMOVEL_DATA_ATUALIZACAO = 'now';
 END
^

/* Trigger: CDSIRE_PESSOA_ARQUIVO_BI */
CREATE TRIGGER CDSIRE_PESSOA_ARQUIVO_BI FOR CDSIRE_PESSOA_ARQUIVO
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.arquivo_codigo is null) then
    new.arquivo_codigo = gen_id(gen_cdsire_pessoa_arquivo_id,1);
end
^

/* Trigger: CDSIRE_PESSOA_BI */
CREATE TRIGGER CDSIRE_PESSOA_BI FOR CDSIRE_PESSOA
ACTIVE BEFORE INSERT POSITION 0
AS
 BEGIN
 IF (NEW.PESSOA_CODIGO IS NULL) THEN
 NEW.PESSOA_CODIGO = GEN_ID(GEN_CDSIRE_PESSOA_ID,1);
 END
^

/* Trigger: CDSIRE_RESERVA_ACOMPANHA_BI */
CREATE TRIGGER CDSIRE_RESERVA_ACOMPANHA_BI FOR CDSIRE_RESERVA_ACOMPANHAMENTO
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.acompanha_codigo is null) then
    new.acompanha_codigo = gen_id(gen_sire_cdreserva_acompanha_id,1);
end
^

/* Trigger: CDSIRE_RESERVA_ARQUIVO_BI */
CREATE TRIGGER CDSIRE_RESERVA_ARQUIVO_BI FOR CDSIRE_RESERVA_ARQUIVO
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.arquivo_codigo is null) then
    new.arquivo_codigo = gen_id(gen_cdsire_reserva_arquivo_id,1);
end
^

/* Trigger: CDSIRE_RESERVA_BI */
CREATE TRIGGER CDSIRE_RESERVA_BI FOR CDSIRE_RESERVA
ACTIVE BEFORE INSERT POSITION 0
AS
 BEGIN
 IF (NEW.RESERVA_CODIGO IS NULL) THEN
 NEW.RESERVA_CODIGO = GEN_ID(GEN_CDSIRE_RESERVA_ID,1);
 END
^

/* Trigger: CDSIRE_RESERVA_PAGAMENTO_BI */
CREATE TRIGGER CDSIRE_RESERVA_PAGAMENTO_BI FOR CDSIRE_RESERVA_PAGAMENTO
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
as
begin
  if (new.pagamento_codigo is null) then
  begin
    new.pagamento_codigo = gen_id(gen_cdsire_reserva_pagamento_id,1);
    new.pagamento_data_cadastro = 'now';
  end
  new.pagamento_data_atualizacao = 'now';
end
^

/* Trigger: CDSIRE_TABELA_PRECO_BI */
CREATE TRIGGER CDSIRE_TABELA_PRECO_BI FOR CDSIRE_TABELA_PRECO
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.tabela_codigo is null) then
    new.tabela_codigo = gen_id(gen_cdsire_tabela_preco_id,1);
end
^

/* Trigger: CDSITSER_BI0 */
CREATE TRIGGER CDSITSER_BI0 FOR CDSITSER
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
AS
 begin
 select result || ' - ' ||
 case
 when new.sit_nom starting with result || ' ' then
 substr(new.sit_nom, strlen(result)+2, strlen(new.sit_nom))
 else new.sit_nom
 end
 from completa_string(new.sit_niv,'0',strlen((select max(sit_niv) from cdsitser)),0)
 into new.sit_nivnom;
 end
^

/* Trigger: CDTEF_BI */
CREATE TRIGGER CDTEF_BI FOR CDTEF
ACTIVE BEFORE INSERT POSITION 0
AS
 BEGIN
 IF (NEW.TEF_COD IS NULL) THEN
 NEW.TEF_COD = GEN_ID(GEN_CDTEF_ID,1);
 END
^

/* Trigger: CDTIPSERDDD_BIU0 */
CREATE TRIGGER CDTIPSERDDD_BIU0 FOR CDTIPSERDDD
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
AS
 begin
 select result || ' - ' ||
 case
 when new.tip_nom starting with result || ' ' then
 substr(new.tip_nom, strlen(result)+2, strlen(new.tip_nom))
 else new.tip_nom
 end
 from completa_string(new.tip_niv,'0',strlen((select max(tip_niv) from cdtipserddd)),0)
 into new.tip_nivnom;
 end
^

/* Trigger: CDTRS_BIU0 */
CREATE TRIGGER CDTRS_BIU0 FOR CDTRS
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
AS
 begin
 new.dat_hor_atu = cast('now' as date);
 end
^

/* Trigger: CD_DW_ORCAMENTO_BI */
CREATE TRIGGER CD_DW_ORCAMENTO_BI FOR CD_DW_ORCAMENTO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ORCAMENTO_CODIGO IS NULL) THEN
    NEW.ORCAMENTO_CODIGO = GEN_ID(GEN_CD_DW_ORCAMENTO_ID,1);
END
^

/* Trigger: ESTMVVD1_BIU0 */
CREATE TRIGGER ESTMVVD1_BIU0 FOR ESTMVVD1
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
AS
 begin
 if (new.vd1_canc = 'C') then new.status = 'CANCELADO';
 else if (new.vd1_canc = 'CF') then new.status = 'CANCELADO ECF';
 else if (new.vd1_canc = 'P') then new.status = 'PENDENTE';
 else if (new.vd1_canc = 'TP') then new.status = 'TRANSF.PENDENTE';
 else if (new.vd1_canc = 'F') then new.status = 'FECHADO';
 else if (new.vd1_canc = 'FN') then new.status = 'FINALIZADO';
 else if (new.vd1_canc = 'BP') then new.status = 'BAIXA PARCIAL';
 else if (new.vd1_canc = 'BT') then new.status = 'BAIXA TOTAL';
 else if (new.vd1_canc = 'AP') then new.status = 'APROVADO';
 else if (new.vd1_canc = 'RP') then new.status = 'REPROVADO';
 else if (new.vd1_canc = 'CT') then new.status = 'CONCLUIDO TOTAL';
 else if (new.vd1_canc = 'CP') then new.status = 'CONCLUIDO PARCIAL';
 else if (new.vd1_canc = 'CN') then new.status = 'CONTAGEM DE ESTOQUE';
 end
^

/* Trigger: MVCOREC_BI0 */
CREATE TRIGGER MVCOREC_BI0 FOR MVCOREC
ACTIVE BEFORE INSERT POSITION 0
AS
 begin
 if (new.rec_cod_original is null) then
 new.rec_cod_original = new.rec_cod;
 end
^

/* Trigger: MVEMAILMARKETING2_BI */
CREATE TRIGGER MVEMAILMARKETING2_BI FOR MVEMAILMARKETING2
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
AS
 BEGIN
 IF (NEW.EMA2_COD IS NULL) THEN
 NEW.EMA2_COD = GEN_ID(GEN_MVEMAILMARKETING2_ID,1);
 NEW.ema2_status_descricao =
 CASE NEW.EMA2_STATUS
 WHEN 'LID' THEN 'Mensagem lida'
 WHEN 'REC' THEN 'Mensagem recebida'
 WHEN 'EXC' THEN 'Usuário pediu para ser excluído'
 WHEN 'CAI' THEN 'Caixa postal cheia'
 WHEN 'INV' THEN 'E-mail inválido'
 ELSE ''
 END;
 END
^

/* Trigger: MVEMAILMARKETING_BI */
CREATE TRIGGER MVEMAILMARKETING_BI FOR MVEMAILMARKETING
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
AS
 BEGIN
 IF (NEW.EMA_COD IS NULL) THEN
 NEW.EMA_COD = GEN_ID(GEN_MVEMAILMARKETING_ID,1);
 END
^

/* Trigger: MVEST_BIU0 */
CREATE TRIGGER MVEST_BIU0 FOR MVEST
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
AS
 declare variable vSEMESTOQUE varchar(1);
 begin
 if (new.est_sal <> 0) then
 begin
 select COALESCE(PRO_SEM_ESTOQUE, 'F') From CDPRO Where PRO_COD = new.est_pro into :vSemEstoque;
 if (vSemEstoque = 'T') then
 new.est_sal = 0;
 end
 end
^

/* Trigger: MVLGE_AU0 */
CREATE TRIGGER MVLGE_AU0 FOR MVLGE
ACTIVE AFTER UPDATE POSITION 0
AS
 begin
 if ((new.lge_pla = '2') and ((new.lge_ope <> old.lge_ope) or (new.lge_con <> old.lge_con))) then
 update mvlged set dob_ope = new.lge_ope, dob_con = new.lge_con
 where dob_flag = new.lge_cod;
 
 if (new.lge_ope <> old.lge_ope) then
 begin
 if (new.lge_ori = 'cPAG') then
 update mvcopagb set bai_ope = new.lge_ope where lge_cod = new.lge_cod;
 else if (new.lge_ori = 'cREC') then
 update mvcorecb set bai_ope = new.lge_ope where lge_cod = new.lge_cod;
 end
 end
^

/* Trigger: MVNFES_BI */
CREATE TRIGGER MVNFES_BI FOR MVNFES
ACTIVE BEFORE INSERT POSITION 0
as
 begin
 if (new.nfes_cod is null) then
 new.nfes_cod = gen_id(gen_mvnfes_id,1);
 end
^

/* Trigger: MVNFE_BI */
CREATE TRIGGER MVNFE_BI FOR MVNFE
ACTIVE BEFORE INSERT POSITION 0
AS
 BEGIN
 IF (NEW.NFE_COD IS NULL) THEN
 NEW.NFE_COD = GEN_ID(GEN_MVNFE_ID,1);
 END
^

/* Trigger: MVTMK2_A01 */
CREATE TRIGGER MVTMK2_A01 FOR MVTMK2
ACTIVE BEFORE INSERT POSITION 0
AS
begin
   new.tmk2_dat = CAST("TODAY" AS DATE);
   new.tmk2_cod  = gen_id(gen_mvtmk2, 1);
end
^

/* Trigger: MVTMK3_A03 */
CREATE TRIGGER MVTMK3_A03 FOR MVTMK3
ACTIVE BEFORE INSERT POSITION 0
AS
begin
   new.tmk3_cod  = gen_id(gen_mvtmk3, 1);
end
^

/* Trigger: MVTMK_A01 */
CREATE TRIGGER MVTMK_A01 FOR MVTMK
ACTIVE BEFORE INSERT POSITION 0
AS
begin
   new.dat_cad = CAST("TODAY" AS DATE);
   new.dat_atu = CAST("TODAY" AS DATE);
   new.tmk_cod = gen_id(gen_mvtmk, 1);
end
^

/* Trigger: MVTMK_A02 */
CREATE TRIGGER MVTMK_A02 FOR MVTMK
ACTIVE BEFORE UPDATE POSITION 0
AS
 begin
 old.dat_atu = CAST("TODAY" AS DATE);
 end
^

/* Trigger: MVTMK_AD0 */
CREATE TRIGGER MVTMK_AD0 FOR MVTMK
ACTIVE AFTER DELETE POSITION 0
AS
begin
   DELETE FROM MVTMK2 WHERE TMK2_TMK=OLD.TMK_COD;
   DELETE FROM MVTMK3 WHERE TMK3_TMK=OLD.TMK_COD;
end
^

/* Trigger: TRIG_CDOSPRO */
CREATE TRIGGER TRIG_CDOSPRO FOR CDOSPRO
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN
 if ((NEW.ID <= 0) OR (NEW.ID IS NULL)) THEN
 NEW.ID = GEN_ID(GEN_CDOSPRO, 1);
 if (COALESCE(NEW.STATUS_COD, '') NOT IN ('P', 'F')) then
 NEW.STATUS_COD = 'N';
 END
^

SET TERM ; ^


/******************************************************************************/
/*                             Stored Procedures                              */
/******************************************************************************/


SET TERM ^ ;

ALTER PROCEDURE ADD_FREQUENCIA (
    ADATE TIMESTAMP,
    FREQ VARCHAR(3))
RETURNS (
    RESULT TIMESTAMP)
AS
 BEGIN
 IF (FREQ="ANU") THEN
 EXECUTE PROCEDURE ADDMONTH(ADATE, 12) RETURNING_VALUES (RESULT);
 ELSE IF (FREQ="MEN") THEN
 EXECUTE PROCEDURE ADDMONTH(ADATE, 1) RETURNING_VALUES (RESULT);
 ELSE IF (FREQ="BIM") THEN
 EXECUTE PROCEDURE ADDMONTH(ADATE, 2) RETURNING_VALUES (RESULT);
 ELSE IF (FREQ="TRI") THEN
 EXECUTE PROCEDURE ADDMONTH(ADATE, 3) RETURNING_VALUES (RESULT);
 ELSE IF (FREQ="QUA") THEN
 EXECUTE PROCEDURE ADDMONTH(ADATE, 4) RETURNING_VALUES (RESULT);
 ELSE IF ( (FREQ="SEM") OR (FREQ="SMT") ) THEN
 EXECUTE PROCEDURE ADDMONTH(ADATE, 6) RETURNING_VALUES (RESULT);
 ELSE IF ((FREQ="7DI") OR (FREQ="SMA")) THEN
 RESULT = ADATE + 7;
 ELSE IF (FREQ="QUI") THEN
 RESULT = ADATE + 15;
 ELSE IF (FREQ="DIA") THEN
 RESULT = ADATE + 1;
 ELSE
 RESULT = ADATE;
 END
^

ALTER PROCEDURE ADDMONTH (
    ADATE TIMESTAMP,
    AMONTH INTEGER)
RETURNS (
    RESULT TIMESTAMP)
AS
DECLARE VARIABLE WYEAR INTEGER;
DECLARE VARIABLE WMONTH INTEGER;
DECLARE VARIABLE WDAY INTEGER;
DECLARE VARIABLE MOD INTEGER;
DECLARE VARIABLE DAYSOFMONTH INTEGER;
BEGIN
 IF (AMonth is Null) THEN
 AMonth = 0;
 EXECUTE PROCEDURE DecodeDate(ADate) RETURNING_VALUES(wYear, wMonth, wDay);
 IF(AMonth < 0) THEN
 BEGIN
 AMonth = AMonth * -1;
 wYear = wYear - CAST(((AMonth-1)/12)-0.49 AS INTEGER) -1;
 AMonth = AMonth -1;
 EXECUTE PROCEDURE Modulus(AMonth, 12) RETURNING_VALUES(Mod);
 AMonth = 12 - (Mod+1);
 wMonth = wMonth + AMonth;
 END
 ELSE
 BEGIN
 wYear = wYear + CAST(((AMonth-1)/12)-0.49 AS INTEGER);
 AMonth = AMonth -1;
 EXECUTE PROCEDURE Modulus(AMonth, 12) RETURNING_VALUES(Mod);
 wMonth = wMonth + Mod +1;
 END
 IF(wMonth > 12) THEN
 BEGIN
 wYear = wYear +1;
 wMonth = wMonth -12;
 END
 EXECUTE PROCEDURE DaysOfMonth(wYear, wMonth) RETURNING_VALUES (DaysOfMonth);
 IF(wDay > DaysOfMonth) THEN wDay = DaysOfMonth;
 EXECUTE PROCEDURE EncodeDate(wYear, wMonth, wDay) RETURNING_VALUES (Result);
 SUSPEND;
 END
^

ALTER PROCEDURE AGEINMONTHS (
    DATA1 TIMESTAMP,
    DATA2 TIMESTAMP)
RETURNS (
    RESULT INTEGER)
AS
DECLARE VARIABLE mm1 INTEGER;
DECLARE VARIABLE aa1 INTEGER;
DECLARE VARIABLE mm2 INTEGER;
DECLARE VARIABLE aa2 INTEGER;
BEGIN
/* Calcula a diferenca em MESES entre duas datas <Data2 - Data1> */
   EXECUTE PROCEDURE vYear (Data1) RETURNING_VALUES aa1;
   EXECUTE PROCEDURE vMonth(Data1) RETURNING_VALUES mm1;
   EXECUTE PROCEDURE vYear (Data2) RETURNING_VALUES aa2;
   EXECUTE PROCEDURE vMonth(Data2) RETURNING_VALUES mm2;
   Result = (mm2 - mm1) + ((aa2 - aa1) * 12);
END
^

ALTER PROCEDURE AJUSTA_VD1_QUANTIDADE
RETURNS (
    RESULT INTEGER)
AS
 DECLARE VARIABLE VD1_COD VARCHAR(13);
 DECLARE VARIABLE VD1_QTD DOUBLE PRECISION;
 DECLARE VARIABLE VD2_QTD DOUBLE PRECISION;
 begin
 update estmvvd1 set vd1_quantidade = 0 where vd1_origem <> 'CNT';
 For
 Select vd1_cod, VD1_QUantidade, SUM(COALESCE(VD2_QTD,0))
 from estmvvd1, estmvvd2
 where vd1_Cod = vd2_bol
 and vd1_origem <> 'CNT'
 group by VD1_COD, VD1_QUantidade
 Having (COALESCE(VD1_QUantidade,0) <> COALESCE(SUM(COALESCE(VD2_QTD,0)),0))
 Into vd1_cod, vd1_qtd, vd2_qtd do
 update estmvvd1 A set vd1_quantidade = COALESCE(:VD2_QTD,0) where vd1_cod = :vd1_cod;
 Result = 1;
 suspend;
 end
^

ALTER PROCEDURE AJUSTAACRESCIMO (
    PLGE_COD INTEGER)
AS
  declare variable wdob_dob integer; declare variable wdob_cod integer; declare variable wcod integer; BEGIN FOR SELECT DOB_DOB, DOB_COD FROM MVLGED WHERE DOB_DFP='A' AND DOB_DOB IS NOT NULL INTO WDOB_DOB, WDOB_COD DO BEGIN SELECT DOB_COD FROM MVLGED WHERE DOB_RECPAG=:WDOB_DOB INTO WCOD; UPDATE MVLGED SET DOB_DOB=:WCOD, DOB_DFP='D', DOB_FLAG=:pLGE_COD WHERE DOB_COD=:WDOB_COD; END  END
^

ALTER PROCEDURE AJUSTACDPROPRE (
    PUSACORMEDIDA VARCHAR(1))
AS
 DECLARE VARIABLE WREGPROPRE INTEGER;
 DECLARE VARIABLE WREGPRO INTEGER;
 DECLARE VARIABLE WREGPROCM INTEGER;
 DECLARE VARIABLE WEXECUTAPROC VARCHAR(1);
 BEGIN


 wExecutaProc="F";
 IF (PUSACORMEDIDA="S") THEN
 BEGIN
 SELECT COUNT(PRO_PRO) FROM CDPROPRE INTO :wRegPropre;
 SELECT COUNT(PRO_PRO) FROM CDPROCM INTO :wRegProcm;
 IF (wRegPropre <> wRegProcm) THEN
 wExecutaProc = "T";
 END
 ELSE
 BEGIN
 SELECT COUNT(PRO_PRO) FROM CDPROPRE INTO :wRegPropre;
 SELECT COUNT(PRO_COD) AS REGISTROS FROM CDPRO INTO :wRegPro;
 IF (wRegPropre <> wRegPro) THEN
 wExecutaProc = "T";
 END

 IF (wExecutaProc = "T") THEN
 BEGIN
 IF (PUSACORMEDIDA="S") THEN
 BEGIN
 Insert Into cdpropre ( pro_pro, PRO_MARGEM_MARKUP ,pro_cor ,pro_med ,ativo, dat_cad, dat_atu)
 Select cdpro.pro_cod, cdpro.PRO_MARGEM_MARKUP
 ,cdprocm.pro_cor, cdprocm.pro_med, cdprocm.ativo, "today", "today"
 From cdpro, cdprocm
 Where cdpro.pro_cod <> 0
 and cdprocm.pro_pro = cdpro.pro_cod
 and not exists( select * from cdpropre where cdpropre.pro_pro=cdpro.pro_cod
 and cdpropre.pro_cor=cdprocm.pro_cor
 and cdpropre.pro_med=cdprocm.pro_med)
 and (pro_cor<>"" and pro_med<>"");
 END
 ELSE
 BEGIN
 Insert Into cdpropre ( pro_pro, PRO_MARGEM_MARKUP,ativo, dat_cad, dat_atu, pro_cor, pro_med)
 Select cdpro.pro_cod, cdpro.PRO_MARGEM_MARKUP,"A", "today", "today", "",""
 From cdpro Where cdpro.pro_cod <> 0
 and not exists( select * from cdpropre where cdpropre.pro_pro=cdpro.pro_cod);
 END

 INSERT INTO CDPROHIS(PRO_TAB,PRO_ANT,PRO_DEP,PRO_DAT,PRO_HIS) VALUES( "CDPROCM", :wRegProcm, (SELECT COUNT(PRO_PRO) FROM CDPROCM), CAST("TODAY" AS DATE), "PROCEDURE AJUSTACDPROPRE" );
 INSERT INTO CDPROHIS(PRO_TAB,PRO_ANT,PRO_DEP,PRO_DAT,PRO_HIS) VALUES( "CDPROPRE", :wRegPropre, (SELECT COUNT(PRO_PRO) FROM CDPROPRE), CAST("TODAY" AS DATE), "PROCEDURE AJUSTACDPROPRE" );
 INSERT INTO CDPROHIS(PRO_TAB,PRO_ANT,PRO_DEP,PRO_DAT,PRO_HIS) VALUES( "CDPRO", :wRegPro, (SELECT COUNT(PRO_COD) FROM CDPRO), CAST("TODAY" AS DATE), "PROCEDURE AJUSTACDPROPRE" );

 END

 END
^

ALTER PROCEDURE AJUSTAR_DATA_BAIXADOS
AS
 DECLARE VARIABLE WCOD INTEGER;
 DECLARE VARIABLE WBAI_COD INTEGER;
 DECLARE VARIABLE WDATACC DATE;
 DECLARE VARIABLE WDATABAIXADOS DATE;
 DECLARE VARIABLE ORIGEM VARCHAR(4);
 DECLARE VARIABLE FLAG INTEGER;
 BEGIN
 
 FOR
 SELECT LGE_COD, BAI_COD, BAI_EMI, LGE_EMI, 'RECB' AS ORIGEM, 1 AS FLAG
 FROM MVCORECB A LEFT JOIN MVLGE on A.LGE_COD = LGE_COD
 WHERE
 (A.BAI_EMI <> LGE_EMI)
 and LGE_PLA <> '2'
 
 UNION ALL
 
 SELECT LGE_COD, BAI_COD, BAI_OPE, LGE_OPE, 'RECB' AS ORIGEM, 2 AS FLAG
 FROM MVCORECB A LEFT JOIN MVLGE on A.LGE_COD = LGE_COD
 WHERE
 (A.BAI_OPE <> LGE_OPE)
 and LGE_PLA <> '2'
 
 UNION ALL
 
 SELECT LGE_COD, BAI_COD, BAI_VEC, LGE_VEC, 'RECB' AS ORIGEM, 3 AS FLAG
 FROM MVCORECB A LEFT JOIN MVLGE on A.LGE_COD = LGE_COD
 WHERE
 (A.BAI_VEC <> LGE_VEC)
 and LGE_PLA <> '2'
 
 UNION all
 
 SELECT LGE_COD, BAI_COD, BAI_PGT, LGE_RECB_PGT, 'RECB' AS ORIGEM, 4 AS FLAG
 FROM MVCORECB A LEFT JOIN MVLGE on A.LGE_COD = LGE_COD
 WHERE
 (A.BAI_PGT <> LGE_RECB_PGT)
 and LGE_PLA <> '2'
 
 UNION ALL
 
 SELECT LGE_COD, BAI_COD, BAI_EMI, LGE_EMI, 'PAGB' AS ORIGEM, 5 AS FLAG
 FROM MVCOPAGB A LEFT JOIN MVLGE on A.LGE_COD = LGE_COD
 WHERE
 (A.BAI_EMI <> LGE_EMI)
 and LGE_PLA <> '2'
 
 UNION ALL
 
 SELECT LGE_COD, BAI_COD, BAI_OPE, LGE_OPE, 'PAGB' AS ORIGEM, 6 AS FLAG
 FROM MVCOPAGB A LEFT JOIN MVLGE on A.LGE_COD = LGE_COD
 WHERE
 (A.BAI_OPE <> LGE_OPE)
 and LGE_PLA <> '2'
 
 UNION ALL
 
 SELECT LGE_COD, BAI_COD, BAI_VEC, LGE_VEC, 'PAGB' AS ORIGEM, 7 AS FLAG
 FROM MVCOPAGB A LEFT JOIN MVLGE on A.LGE_COD = LGE_COD
 WHERE
 (A.BAI_VEC <> LGE_VEC)
 and LGE_PLA <> '2'
 
 UNION all
 
 SELECT LGE_COD, BAI_COD, BAI_PGT, LGE_RECB_PGT, 'PAGB' AS ORIGEM, 8 AS FLAG
 FROM MVCOPAGB A LEFT JOIN MVLGE on A.LGE_COD = LGE_COD
 WHERE
 (A.BAI_PGT <> LGE_RECB_PGT)
 and LGE_PLA <> '2'
 
 UNION ALL
 
 SELECT LGE_COD, BAI_COD, BAI_EMI, DOB_EMI, 'RECB' AS ORIGEM, 9 AS FLAG
 FROM MVCORECB A LEFT JOIN MVLGED on A.LGED_COD = DOB_COD
 WHERE
 (A.BAI_EMI <> DOB_EMI)
 
 UNION ALL
 
 SELECT LGE_COD, BAI_COD, BAI_OPE, DOB_OPE, 'RECB' AS ORIGEM, 10 AS FLAG
 FROM MVCORECB A LEFT JOIN MVLGED on A.LGED_COD = DOB_COD
 WHERE
 (A.BAI_OPE <> DOB_OPE)
 
 UNION ALL
 
 SELECT LGE_COD, BAI_COD, BAI_VEC, DOB_VEC, 'RECB' AS ORIGEM, 11 AS FLAG
 FROM MVCORECB A LEFT JOIN MVLGED on A.LGED_COD = DOB_COD
 WHERE
 (A.BAI_VEC <> DOB_VEC)
 
 UNION ALL
 
 SELECT LGE_COD, BAI_COD, BAI_PGT, DOB_RECB_PGT, 'RECB' AS ORIGEM, 12 AS FLAG
 FROM MVCORECB A LEFT JOIN MVLGED on A.LGED_COD = DOB_COD
 WHERE
 (A.BAI_PGT <> DOB_RECB_PGT)
 
 UNION ALL
 
 SELECT LGE_COD, BAI_COD, BAI_EMI, DOB_EMI, 'PAGB' AS ORIGEM, 13 AS FLAG
 FROM MVCOPAGB A LEFT JOIN MVLGED on A.LGED_COD = DOB_COD
 WHERE
 (A.BAI_EMI <> DOB_EMI)
 
 UNION ALL
 
 SELECT LGE_COD, BAI_COD, BAI_OPE, DOB_OPE, 'PAGB' AS ORIGEM, 14 AS FLAG
 FROM MVCOPAGB A LEFT JOIN MVLGED on A.LGED_COD = DOB_COD
 WHERE
 (A.BAI_OPE <> DOB_OPE)
 
 UNION ALL
 
 SELECT LGE_COD, BAI_COD, BAI_VEC, DOB_VEC, 'PAGB' AS ORIGEM, 15 AS FLAG
 FROM MVCOPAGB A LEFT JOIN MVLGED on A.LGED_COD = DOB_COD
 WHERE
 (A.BAI_VEC <> DOB_VEC)
 
 UNION ALL
 
 SELECT LGE_COD, BAI_COD, BAI_PGT, DOB_RECB_PGT, 'PAGB' AS ORIGEM, 16 AS FLAG
 FROM MVCOPAGB A LEFT JOIN MVLGED on A.LGED_COD = DOB_COD
 WHERE
 (A.BAI_PGT <> DOB_RECB_PGT)
 ORDER BY 3
 
 INTO :WCOD, :WBAI_COD, :WDATABAIXADOS, :WDATACC, :ORIGEM, :FLAG DO
 BEGIN
 IF (FLAG = 1 OR FLAG = 9 ) THEN
 UPDATE MVCORECB SET BAI_EMI = :WDATACC WHERE BAI_COD = :WBAI_COD;
 ELSE IF (FLAG = 2 OR FLAG = 10) THEN
 UPDATE MVCORECB SET BAI_OPE = :WDATACC WHERE BAI_COD = :WBAI_COD;
 ELSE IF (FLAG = 3 OR FLAG = 11) THEN
 UPDATE MVCORECB SET BAI_VEC = :WDATACC WHERE BAI_COD = :WBAI_COD;
 ELSE IF (FLAG = 4 OR FLAG = 12) THEN
 UPDATE MVCORECB SET BAI_PGT = :WDATACC WHERE BAI_COD = :WBAI_COD;
 
 ELSE IF (FLAG = 5 OR FLAG = 13 ) THEN
 UPDATE MVCOPAGB SET BAI_EMI = :WDATACC WHERE BAI_COD = :WBAI_COD;
 ELSE IF (FLAG = 6 OR FLAG = 14) THEN
 UPDATE MVCOPAGB SET BAI_OPE = :WDATACC WHERE BAI_COD = :WBAI_COD;
 ELSE IF (FLAG = 7 OR FLAG = 15) THEN
 UPDATE MVCOPAGB SET BAI_VEC = :WDATACC WHERE BAI_COD = :WBAI_COD;
 ELSE IF (FLAG = 8 OR FLAG = 16) THEN
 UPDATE MVCOPAGB SET BAI_PGT = :WDATACC WHERE BAI_COD = :WBAI_COD;
 END
 
 END
^

ALTER PROCEDURE AJUSTAR_DATA_BAIXADOS_MORLGE
AS
 declare variable wcod integer;
 declare variable wbai_cod integer;
 declare variable wdatacc date;
 declare variable wdatabaixados date;
 declare variable origem varchar(4);
 declare variable flag integer;
 BEGIN
 
 FOR
 SELECT LGE_COD, BAI_COD, BAI_EMI, LGE_EMI, 'RECB' AS ORIGEM, 1 AS FLAG
 FROM MVCORECB A LEFT JOIN MORLGE on A.LGE_COD = LGE_COD
 WHERE
 (A.BAI_EMI <> LGE_EMI)
 and LGE_PLA <> '2'
 
 UNION ALL
 
 SELECT LGE_COD, BAI_COD, BAI_OPE, LGE_OPE, 'RECB' AS ORIGEM, 2 AS FLAG
 FROM MVCORECB A LEFT JOIN MORLGE on A.LGE_COD = LGE_COD
 WHERE
 (A.BAI_OPE <> LGE_OPE)
 and LGE_PLA <> '2'
 
 UNION ALL
 
 SELECT LGE_COD, BAI_COD, BAI_VEC, LGE_VEC, 'RECB' AS ORIGEM, 3 AS FLAG
 FROM MVCORECB A LEFT JOIN MORLGE on A.LGE_COD = LGE_COD
 WHERE
 (A.BAI_VEC <> LGE_VEC)
 and LGE_PLA <> '2'
 
 UNION all
 
 SELECT LGE_COD, BAI_COD, BAI_PGT, LGE_RECB_PGT, 'RECB' AS ORIGEM, 4 AS FLAG
 FROM MVCORECB A LEFT JOIN MORLGE on A.LGE_COD = LGE_COD
 WHERE
 (A.BAI_PGT <> LGE_RECB_PGT)
 and LGE_PLA <> '2'
 
 UNION ALL
 
 SELECT LGE_COD, BAI_COD, BAI_EMI, LGE_EMI, 'PAGB' AS ORIGEM, 5 AS FLAG
 FROM MVCOPAGB A LEFT JOIN MORLGE on A.LGE_COD = LGE_COD
 WHERE
 (A.BAI_EMI <> LGE_EMI)
 and LGE_PLA <> '2'
 
 UNION ALL
 
 SELECT LGE_COD, BAI_COD, BAI_OPE, LGE_OPE, 'PAGB' AS ORIGEM, 6 AS FLAG
 FROM MVCOPAGB A LEFT JOIN MORLGE on A.LGE_COD = LGE_COD
 WHERE
 (A.BAI_OPE <> LGE_OPE)
 and LGE_PLA <> '2'
 
 UNION ALL
 
 SELECT LGE_COD, BAI_COD, BAI_VEC, LGE_VEC, 'PAGB' AS ORIGEM, 7 AS FLAG
 FROM MVCOPAGB A LEFT JOIN MORLGE on A.LGE_COD = LGE_COD
 WHERE
 (A.BAI_VEC <> LGE_VEC)
 and LGE_PLA <> '2'
 
 UNION all
 
 SELECT LGE_COD, BAI_COD, BAI_PGT, LGE_RECB_PGT, 'PAGB' AS ORIGEM, 8 AS FLAG
 FROM MVCOPAGB A LEFT JOIN MORLGE on A.LGE_COD = LGE_COD
 WHERE
 (A.BAI_PGT <> LGE_RECB_PGT)
 and LGE_PLA <> '2'
 
 UNION ALL
 
 SELECT LGE_COD, BAI_COD, BAI_EMI, DOB_EMI, 'RECB' AS ORIGEM, 9 AS FLAG
 FROM MVCORECB A LEFT JOIN MORLGED on A.LGED_COD = DOB_COD
 WHERE
 (A.BAI_EMI <> DOB_EMI)
 
 UNION ALL
 
 SELECT LGE_COD, BAI_COD, BAI_OPE, DOB_OPE, 'RECB' AS ORIGEM, 10 AS FLAG
 FROM MVCORECB A LEFT JOIN MORLGED on A.LGED_COD = DOB_COD
 WHERE
 (A.BAI_OPE <> DOB_OPE)
 
 UNION ALL
 
 SELECT LGE_COD, BAI_COD, BAI_VEC, DOB_VEC, 'RECB' AS ORIGEM, 11 AS FLAG
 FROM MVCORECB A LEFT JOIN MORLGED on A.LGED_COD = DOB_COD
 WHERE
 (A.BAI_VEC <> DOB_VEC)
 
 UNION ALL
 
 SELECT LGE_COD, BAI_COD, BAI_PGT, DOB_RECB_PGT, 'RECB' AS ORIGEM, 12 AS FLAG
 FROM MVCORECB A LEFT JOIN MORLGED on A.LGED_COD = DOB_COD
 WHERE
 (A.BAI_PGT <> DOB_RECB_PGT)
 
 UNION ALL
 
 SELECT LGE_COD, BAI_COD, BAI_EMI, DOB_EMI, 'PAGB' AS ORIGEM, 13 AS FLAG
 FROM MVCOPAGB A LEFT JOIN MORLGED on A.LGED_COD = DOB_COD
 WHERE
 (A.BAI_EMI <> DOB_EMI)
 
 UNION ALL
 
 SELECT LGE_COD, BAI_COD, BAI_OPE, DOB_OPE, 'PAGB' AS ORIGEM, 14 AS FLAG
 FROM MVCOPAGB A LEFT JOIN MORLGED on A.LGED_COD = DOB_COD
 WHERE
 (A.BAI_OPE <> DOB_OPE)
 
 UNION ALL
 
 SELECT LGE_COD, BAI_COD, BAI_VEC, DOB_VEC, 'PAGB' AS ORIGEM, 15 AS FLAG
 FROM MVCOPAGB A LEFT JOIN MORLGED on A.LGED_COD = DOB_COD
 WHERE
 (A.BAI_VEC <> DOB_VEC)
 
 UNION ALL
 
 SELECT LGE_COD, BAI_COD, BAI_PGT, DOB_RECB_PGT, 'PAGB' AS ORIGEM, 16 AS FLAG
 FROM MVCOPAGB A LEFT JOIN MORLGED on A.LGED_COD = DOB_COD
 WHERE
 (A.BAI_PGT <> DOB_RECB_PGT)
 ORDER BY 3
 
 INTO :WCOD, :WBAI_COD, :WDATABAIXADOS, :WDATACC, :ORIGEM, :FLAG DO
 BEGIN
 IF (FLAG = 1 OR FLAG = 9 ) THEN
 UPDATE MVCORECB SET BAI_EMI = :WDATACC WHERE BAI_COD = :WBAI_COD;
 ELSE IF (FLAG = 2 OR FLAG = 10) THEN
 UPDATE MVCORECB SET BAI_OPE = :WDATACC WHERE BAI_COD = :WBAI_COD;
 ELSE IF (FLAG = 3 OR FLAG = 11) THEN
 UPDATE MVCORECB SET BAI_VEC = :WDATACC WHERE BAI_COD = :WBAI_COD;
 ELSE IF (FLAG = 4 OR FLAG = 12) THEN
 UPDATE MVCORECB SET BAI_PGT = :WDATACC WHERE BAI_COD = :WBAI_COD;
 
 ELSE IF (FLAG = 5 OR FLAG = 13 ) THEN
 UPDATE MVCOPAGB SET BAI_EMI = :WDATACC WHERE BAI_COD = :WBAI_COD;
 ELSE IF (FLAG = 6 OR FLAG = 14) THEN
 UPDATE MVCOPAGB SET BAI_OPE = :WDATACC WHERE BAI_COD = :WBAI_COD;
 ELSE IF (FLAG = 7 OR FLAG = 15) THEN
 UPDATE MVCOPAGB SET BAI_VEC = :WDATACC WHERE BAI_COD = :WBAI_COD;
 ELSE IF (FLAG = 8 OR FLAG = 16) THEN
 UPDATE MVCOPAGB SET BAI_PGT = :WDATACC WHERE BAI_COD = :WBAI_COD;
 END
 
 END
^

ALTER PROCEDURE AJUSTAR_NOMEDOSCADASTROS (
    PTABELA VARCHAR(15),
    PMODO VARCHAR(3),
    PCODINI INTEGER,
    PCODFIM INTEGER)
AS
 DECLARE VARIABLE WCOD INTEGER;
 DECLARE VARIABLE WCOD2 VARCHAR(40);
 DECLARE VARIABLE WTEXTO1 VARCHAR(100);
 DECLARE VARIABLE WTEXTO2 VARCHAR(100);
 DECLARE VARIABLE WTEXTO3 VARCHAR(100);
 DECLARE VARIABLE WTEXTO4 VARCHAR(100);
 DECLARE VARIABLE WTEXTO5 VARCHAR(100);
 DECLARE VARIABLE WTEXTO6 VARCHAR(100);
 DECLARE VARIABLE WTEXTO7 VARCHAR(100);
 DECLARE VARIABLE WTEXTO8 VARCHAR(100);
 DECLARE VARIABLE WTEXTO9 VARCHAR(100);
 DECLARE VARIABLE WTEXTO10 VARCHAR(100);
 DECLARE VARIABLE WTEXTO11 VARCHAR(100);
 DECLARE VARIABLE WTEXTO12 VARCHAR(100);
 DECLARE VARIABLE WTEXTO13 VARCHAR(100);
 DECLARE VARIABLE WTEXTO14 VARCHAR(100);
 DECLARE VARIABLE WTEXTO15 VARCHAR(100);
 DECLARE VARIABLE WTEXTO16 VARCHAR(100);
 DECLARE VARIABLE WTEXTO17 VARCHAR(100);
 DECLARE VARIABLE WTEXTO18 VARCHAR(100);
 DECLARE VARIABLE WTEXTO19 VARCHAR(100);
 DECLARE VARIABLE WTEXTO20 VARCHAR(100);
 BEGIN
 IF (UPPER(PTABELA) = 'CDCLI') THEN
 BEGIN
 FOR SELECT CLI_COD, CLI_NOM, CLI_RED, CLI_END, CLI_COP, CLI_BAI,
 CLI_CID, CLI_REF, CLI_LOG, NOM_COB, END_COB, BAI_COB, CID_COB,
 COM_COB, LOG_COB, NOM_ENT, END_ENT, BAI_ENT, CID_ENT, COM_ENT, LOG_ENT
 FROM CDCLI
 WHERE CLI_COD > :PCODINI AND CLI_COD <= :PCODFIM
 ORDER BY CLI_COD INTO
 WCOD, WTEXTO1, WTEXTO2, WTEXTO3, WTEXTO4, WTEXTO5, WTEXTO6, WTEXTO7, WTEXTO8, WTEXTO9,
 WTEXTO10, WTEXTO11, WTEXTO12, WTEXTO13, WTEXTO14, WTEXTO15, WTEXTO16, WTEXTO17,
 WTEXTO18, WTEXTO19, WTEXTO20 DO
 BEGIN
 UPDATE CDCLI CLI SET
 CLI.CLI_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO)),
 CLI.CLI_RED = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO2, :PMODO)),
 CLI.CLI_END = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO3, :PMODO)),
 CLI.CLI_COP = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO4, :PMODO)),
 CLI.CLI_BAI = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO5, :PMODO)),
 CLI.CLI_CID = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO6, :PMODO)),
 CLI.CLI_REF = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO7, :PMODO)),
 CLI.CLI_LOG = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO8, :PMODO)),
 CLI.NOM_COB = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO9, :PMODO)),
 CLI.END_COB = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO10, :PMODO)),
 CLI.BAI_COB = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO11, :PMODO)),
 CLI.CID_COB = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO12, :PMODO)),
 CLI.COM_COB = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO13, :PMODO)),
 CLI.LOG_COB = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO14, :PMODO)),
 CLI.NOM_ENT = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO15, :PMODO)),
 CLI.END_ENT = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO16, :PMODO)),
 CLI.BAI_ENT = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO17, :PMODO)),
 CLI.CID_ENT = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO18, :PMODO)),
 CLI.COM_ENT = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO19, :PMODO)),
 CLI.LOG_ENT = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO20, :PMODO))
 WHERE CLI.CLI_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDFOR') THEN
 BEGIN
 FOR SELECT FOR_COD, FOR_RZS, FOR_RED, FOR_LOG, FOR_END, FOR_COP, FOR_BAI, FOR_CID
 FROM CDFOR WHERE FOR_COD > :PCODINI AND FOR_COD <= :PCODFIM
 ORDER BY 1 INTO
 WCOD, WTEXTO1, WTEXTO2, WTEXTO3, WTEXTO4, WTEXTO5, WTEXTO6, WTEXTO7 DO
 BEGIN
 UPDATE CDFOR FORN SET
 FORN.FOR_RZS = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO)),
 FORN.FOR_RED = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO2, :PMODO)),
 FORN.FOR_LOG = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO3, :PMODO)),
 FORN.FOR_END = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO4, :PMODO)),
 FORN.FOR_COP = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO5, :PMODO)),
 FORN.FOR_BAI = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO6, :PMODO)),
 FORN.FOR_CID = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO7, :PMODO))
 WHERE FORN.FOR_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDCONT') THEN
 BEGIN
 FOR SELECT CON_COD, CON_NOM, CON_RED, CON_LOG, CON_COP, CON_END, CON_BAI, CON_CID
 FROM CDCONT WHERE CON_COD > :PCODINI AND CON_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1, WTEXTO2, WTEXTO3, WTEXTO4, WTEXTO5, WTEXTO6, WTEXTO7 DO
 BEGIN
 UPDATE CDCONT CONT SET
 CONT.CON_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO)),
 CONT.CON_RED = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO2, :PMODO)),
 CONT.CON_LOG = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO3, :PMODO)),
 CONT.CON_COP = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO4, :PMODO)),
 CONT.CON_END = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO5, :PMODO)),
 CONT.CON_BAI = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO6, :PMODO)),
 CONT.CON_CID = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO7, :PMODO))
 WHERE CONT.CON_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDREP') THEN
 BEGIN
 FOR SELECT REP_COD, REP_NOM, REP_RED, REP_LOG, REP_END, REP_COP, REP_BAI, REP_CID
 FROM CDREP WHERE REP_COD > :PCODINI AND REP_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1, WTEXTO2, WTEXTO3, WTEXTO4, WTEXTO5, WTEXTO6, WTEXTO7 DO
 BEGIN
 UPDATE CDREP REP SET
 REP.REP_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO)),
 REP.REP_RED = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO2, :PMODO)),
 REP.REP_LOG = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO3, :PMODO)),
 REP.REP_END = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO4, :PMODO)),
 REP.REP_COP = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO5, :PMODO)),
 REP.REP_BAI = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO6, :PMODO)),
 REP.REP_CID = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO7, :PMODO))
 WHERE REP.REP_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDFUN') THEN
 BEGIN
 FOR SELECT FUN_COD, FUN_NOM, FUN_LOG, FUN_END, FUN_BAI, FUN_CID, FUN_COP, FUN_RED
 FROM CDFUN WHERE FUN_COD > :PCODINI AND FUN_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1, WTEXTO2, WTEXTO3, WTEXTO4, WTEXTO5, WTEXTO6, WTEXTO7 DO
 BEGIN
 UPDATE CDFUN FUN SET
 FUN.FUN_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO)),
 FUN.FUN_LOG = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO2, :PMODO)),
 FUN.FUN_END = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO3, :PMODO)),
 FUN.FUN_BAI = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO4, :PMODO)),
 FUN.FUN_CID = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO5, :PMODO)),
 FUN.FUN_COP = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO6, :PMODO)),
 FUN.FUN_RED = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO7, :PMODO))
 WHERE FUN.FUN_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDTRS') THEN
 BEGIN
 FOR SELECT TRS_COD, TRS_NOM, TRS_CID, TRS_LOG, TRS_END, TRS_COP, TRS_BAI, TRS_RED
 FROM CDTRS WHERE TRS_COD > :PCODINI AND TRS_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1, WTEXTO2, WTEXTO3, WTEXTO4, WTEXTO5, WTEXTO6, WTEXTO7 DO
 BEGIN
 UPDATE CDTRS TRS SET
 TRS.TRS_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO)),
 TRS.TRS_CID = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO2, :PMODO)),
 TRS.TRS_LOG = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO3, :PMODO)),
 TRS.TRS_END = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO4, :PMODO)),
 TRS.TRS_COP = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO5, :PMODO)),
 TRS.TRS_BAI = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO6, :PMODO)),
 TRS.TRS_RED = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO7, :PMODO))
 WHERE TRS.TRS_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDSER') THEN
 BEGIN
 FOR SELECT SER_COD, SER_NOM, SER_NOM2 FROM CDSER
 WHERE SER_COD > :PCODINI AND SER_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1, WTEXTO2 DO
 BEGIN
 UPDATE CDSER SER SET
 SER.SER_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO)),
 SER.SER_NOM2 = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO2, :PMODO))
 WHERE SER.SER_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDPRO') THEN
 BEGIN
 FOR SELECT PRO_COD, PRO_NOM, PRO_NOM2
 FROM CDPRO WHERE PRO_COD > :PCODINI AND PRO_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1, WTEXTO2 DO
 BEGIN
 UPDATE CDPRO PRO SET
 PRO.PRO_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO)),
 PRO.PRO_NOM2 = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO2, :PMODO))
 WHERE PRO.PRO_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDMAR') THEN
 BEGIN
 FOR SELECT MAR_COD, MAR_NOM FROM CDMAR
 WHERE MAR_COD > :PCODINI AND MAR_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1 DO
 BEGIN
 UPDATE CDMAR MAR SET
 MAR.MAR_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO))
 WHERE MAR.MAR_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDGRUP') THEN
 BEGIN
 FOR SELECT GRU_COD, GRU_NOM FROM CDGRUP
 WHERE GRU_COD > :PCODINI AND GRU_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1 DO
 BEGIN
 UPDATE CDGRUP GRU SET
 GRU.GRU_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO))
 WHERE GRU.GRU_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDSUBGRUP') THEN
 BEGIN
 FOR SELECT GRU_COD, GRU_NOM FROM CDSUBGRUP
 WHERE GRU_COD > :PCODINI AND GRU_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1 DO
 BEGIN
 UPDATE CDSUBGRUP SGRU SET
 SGRU.GRU_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO))
 WHERE SGRU.GRU_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDTIPP') THEN
 BEGIN
 FOR SELECT TIP_COD, TIP_NOM FROM CDTIPP
 WHERE TIP_COD > :PCODINI AND TIP_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1 DO
 BEGIN
 UPDATE CDTIPP TIP SET
 TIP.TIP_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO))
 WHERE TIP.TIP_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDCOR') THEN
 BEGIN
 FOR SELECT COR_COD, COR_NOM FROM CDCOR
 INTO WCOD2, WTEXTO1 DO
 BEGIN
 UPDATE CDCOR COR SET
 COR.COR_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO))
 WHERE COR.COR_COD = :WCOD2;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDCMED') THEN
 BEGIN
 FOR SELECT MED_COD, MED_NOM FROM CDMED
 INTO WCOD2, WTEXTO1 DO
 BEGIN
 UPDATE CDMED MED SET
 MED.MED_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO))
 WHERE MED.MED_COD = :WCOD2;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDUNIDADE') THEN
 BEGIN
 FOR SELECT CODIGO, NOME FROM CDUNIDADE
 WHERE CODIGO > :PCODINI AND CODIGO <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1 DO
 BEGIN
 UPDATE CDUNIDADE UNI SET
 UNI.NOME = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO))
 WHERE UNI.CODIGO = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDCLIC') THEN
 BEGIN
 FOR SELECT CON_COD, CON_NOM FROM CDCLIC
 WHERE CON_COD > :PCODINI AND CON_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1 DO
 BEGIN
 UPDATE CDCLIC CLIC SET
 CLIC.CON_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO))
 WHERE CLIC.CON_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDFORC') THEN
 BEGIN
 FOR SELECT CON_COD, CON_NOM FROM CDFORC
 WHERE CON_COD > :PCODINI AND CON_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1 DO
 BEGIN
 UPDATE CDFORC FORC SET
 FORC.CON_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO))
 WHERE FORC.CON_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDCONTC') THEN
 BEGIN
 FOR SELECT CON_COD, CON_NOM FROM CDCONTC
 WHERE CON_COD > :PCODINI AND CON_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1 DO
 BEGIN
 UPDATE CDCONTC CONTC SET
 CONTC.CON_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO))
 WHERE CONTC.CON_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDREPC') THEN
 BEGIN
 FOR SELECT CON_COD, CON_NOM FROM CDREPC
 WHERE CON_COD > :PCODINI AND CON_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1 DO
 BEGIN
 UPDATE CDREPC REPC SET
 REPC.CON_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO))
 WHERE REPC.CON_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDFUNC') THEN
 BEGIN
 FOR SELECT CON_COD, CON_NOM FROM CDFUNC
 WHERE CON_COD > :PCODINI AND CON_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1 DO
 BEGIN
 UPDATE CDFUNC FUNC SET
 FUNC.CON_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO))
 WHERE FUNC.CON_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDTRSC') THEN
 BEGIN
 FOR SELECT CON_COD, CON_NOM FROM CDTRSC
 WHERE CON_COD > :PCODINI AND CON_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1 DO
 BEGIN
 UPDATE CDTRSC TRSC SET
 TRSC.CON_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO))
 WHERE TRSC.CON_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDCATDOC') THEN
 BEGIN
 FOR SELECT TIP_COD, TIP_NOM FROM CDCATDOC
 WHERE TIP_COD > :PCODINI AND TIP_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1 DO
 BEGIN
 UPDATE CDCATDOC CATD SET
 CATD.TIP_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO))
 WHERE CATD.TIP_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDCATPRO') THEN
 BEGIN
 FOR SELECT CAT_COD, CAT_NOM FROM CDCATPRO
 WHERE CAT_COD > :PCODINI AND CAT_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1 DO
 BEGIN
 UPDATE CDCATPRO CATP SET
 CATP.CAT_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO))
 WHERE CATP.CAT_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'MVCOM2') THEN
 BEGIN
 FOR SELECT COM2_COD, COM2_DESC_PRO, COM2_DESC_SERV FROM MVCOM2
 WHERE COM2_COD > :PCODINI AND COM2_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1, WTEXTO2 DO
 BEGIN
 UPDATE MVCOM2 MV2 SET
 MV2.COM2_DESC_PRO = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO)),
 MV2.COM2_DESC_SERV = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO2, :PMODO))
 WHERE MV2.COM2_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'MVCOM5') THEN
 BEGIN
 FOR SELECT COM5_COD, COM5_NOM FROM MVCOM5
 WHERE COM5_COD > :PCODINI AND COM5_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1 DO
 BEGIN
 UPDATE MVCOM5 MV5 SET
 MV5.COM5_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO))
 WHERE MV5.COM5_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'MVCOM8') THEN
 BEGIN
 FOR SELECT COM8_COD, COM8_NOM FROM MVCOM8
 WHERE COM8_COD > :PCODINI AND COM8_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1 DO
 BEGIN
 UPDATE MVCOM8 MV8 SET
 MV8.COM8_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO))
 WHERE MV8.COM8_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'MVCOM10') THEN
 BEGIN
 FOR SELECT COM10_COD, COM10_NOM FROM MVCOM10
 WHERE COM10_COD > :PCODINI AND COM10_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1 DO
 BEGIN
 UPDATE MVCOM10 MV10 SET
 MV10.COM10_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO))
 WHERE MV10.COM10_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDGRUC') THEN
 BEGIN
 FOR SELECT GRU_COD, GRU_NOM FROM CDGRUC
 WHERE GRU_COD > :PCODINI AND GRU_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1 DO
 BEGIN
 UPDATE CDGRUC GRUC SET
 GRUC.GRU_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO))
 WHERE GRUC.GRU_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDGRUF') THEN
 BEGIN
 FOR SELECT GRU_COD, GRU_NOM FROM CDGRUF
 WHERE GRU_COD > :PCODINI AND GRU_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1 DO
 BEGIN
 UPDATE CDGRUF GRUF SET
 GRUF.GRU_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO))
 WHERE GRUF.GRU_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDGRUCONT') THEN
 BEGIN
 FOR SELECT GRU_COD, GRU_NOM FROM CDGRUCONT
 WHERE GRU_COD > :PCODINI AND GRU_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1 DO
 BEGIN
 UPDATE CDGRUCONT GRUCONT SET
 GRUCONT.GRU_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO))
 WHERE GRUCONT.GRU_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDGRUR') THEN
 BEGIN
 FOR SELECT GRU_COD, GRU_NOM FROM CDGRUR
 WHERE GRU_COD > :PCODINI AND GRU_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1 DO
 BEGIN
 UPDATE CDGRUR GRUR SET
 GRUR.GRU_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO))
 WHERE GRUR.GRU_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDCARG') THEN
 BEGIN
 FOR SELECT CAR_COD, CAR_NOM FROM CDCARG
 WHERE CAR_COD > :PCODINI AND CAR_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1 DO
 BEGIN
 UPDATE CDCARG CARG SET
 CARG.CAR_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO))
 WHERE CARG.CAR_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDDEP') THEN
 BEGIN
 FOR SELECT DEP_COD, DEP_NOM FROM CDDEP
 WHERE DEP_COD > :PCODINI AND DEP_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1 DO
 BEGIN
 UPDATE CDDEP DEP SET
 DEP.DEP_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO))
 WHERE DEP.DEP_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDFASESPRO') THEN
 BEGIN
 FOR SELECT FAS_COD, FAS_NOM FROM CDFASESPRO
 WHERE FAS_COD > :PCODINI AND FAS_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1 DO
 BEGIN
 UPDATE CDFASESPRO FPRO SET
 FPRO.FAS_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO))
 WHERE FPRO.FAS_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDAPLIC') THEN
 BEGIN
 FOR SELECT VEI_COD, VEI_NOM FROM CDAPLIC
 WHERE VEI_COD > :PCODINI AND VEI_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1 DO
 BEGIN
 UPDATE CDAPLIC APLIC SET
 APLIC.VEI_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO))
 WHERE APLIC.VEI_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDVEICULO') THEN
 BEGIN
 FOR SELECT VEI_COD, VEI_MOD, VEI_MAR FROM CDVEICULO
 WHERE VEI_COD > :PCODINI AND VEI_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1, WTEXTO2 DO
 BEGIN
 UPDATE CDVEICULO VEI SET
 VEI.VEI_MOD = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO)),
 VEI.VEI_MAR = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO2, :PMODO))
 WHERE VEI.VEI_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDBAN') THEN
 BEGIN
 FOR SELECT BAN_COD, BAN_NOM FROM CDBAN
 WHERE BAN_COD > :PCODINI AND BAN_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1 DO
 BEGIN
 UPDATE CDBAN BAN SET
 BAN.BAN_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO))
 WHERE BAN.BAN_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDMOE') THEN
 BEGIN
 FOR SELECT MOE_COD, MOE_NOM FROM CDMOE
 WHERE MOE_COD > :PCODINI AND MOE_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1 DO
 BEGIN
 UPDATE CDMOE MOE SET
 MOE.MOE_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO))
 WHERE MOE.MOE_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDCON') THEN
 BEGIN
 FOR SELECT CON_COD, CON_NOM FROM CDCON
 WHERE CON_COD > :PCODINI AND CON_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1 DO
 BEGIN
 UPDATE CDCON CON SET
 CON.CON_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO))
 WHERE CON.CON_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDTIPCONTA') THEN
 BEGIN
 FOR SELECT TIP_COD, TIP_NOM FROM CDTIPCONTA
 WHERE TIP_COD > :PCODINI AND TIP_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1 DO
 BEGIN
 UPDATE CDTIPCONTA TCONTA SET
 TCONTA.TIP_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO))
 WHERE TCONTA.TIP_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDCAR') THEN
 BEGIN
 FOR SELECT CAR_COD, CAR_NOM FROM CDCAR
 WHERE CAR_COD > :PCODINI AND CAR_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1 DO
 BEGIN
 UPDATE CDCAR CAR SET
 CAR.CAR_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO))
 WHERE CAR.CAR_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDPLA') THEN
 BEGIN
 FOR SELECT PLA_COD, PLA_NOM, PLA_AUX FROM CDPLA
 ORDER BY 1
 INTO WCOD2, WTEXTO1, WTEXTO2 DO
 BEGIN
 UPDATE CDPLA PLA SET
 PLA.PLA_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO)),
 PLA.PLA_AUX = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO2, :PMODO))
 WHERE PLA.PLA_COD = :WCOD2;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDPLAAUX') THEN
 BEGIN
 FOR SELECT PLA_COD, PLA_NOM FROM CDPLAAUX
 WHERE PLA_COD > :PCODINI AND PLA_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1 DO
 BEGIN
 UPDATE CDPLAAUX PLAAUX SET
 PLAAUX.PLA_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO))
 WHERE PLAAUX.PLA_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDCCUST') THEN
 BEGIN
 FOR SELECT CUS_COD, CUS_NOM, CUS_AUX FROM CDCCUST
 ORDER BY 1
 INTO WCOD2, WTEXTO1, WTEXTO2 DO
 BEGIN
 UPDATE CDCCUST CUST SET
 CUST.CUS_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO)),
 CUST.CUS_AUX = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO2, :PMODO))
 WHERE CUST.CUS_COD = :WCOD2;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDCCUSTAUX') THEN
 BEGIN
 FOR SELECT CUS_COD, CUS_NOM FROM CDCCUSTAUX
 WHERE CUS_COD > :PCODINI AND CUS_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1 DO
 BEGIN
 UPDATE CDCCUSTAUX CUSTAUX SET
 CUSTAUX.CUS_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO))
 WHERE CUSTAUX.CUS_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDHIS') THEN
 BEGIN
 FOR SELECT HIS_COD, HIS_NOM FROM CDHIS
 WHERE HIS_COD > :PCODINI AND HIS_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1 DO
 BEGIN
 UPDATE CDHIS HIS SET
 HIS.HIS_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO))
 WHERE HIS.HIS_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDTIPD') THEN
 BEGIN
 FOR SELECT TIP_COD, TIP_NOM FROM CDTIPD
 WHERE TIP_COD > :PCODINI AND TIP_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1 DO
 BEGIN
 UPDATE CDTIPD TIPD SET
 TIPD.TIP_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO))
 WHERE TIPD.TIP_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDCLA') THEN
 BEGIN
 FOR SELECT CLA_COD, CLA_NOM FROM CDCLA
 WHERE CLA_COD > :PCODINI AND CLA_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1 DO
 BEGIN
 UPDATE CDCLA CLA SET
 CLA.CLA_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO))
 WHERE CLA.CLA_COD = :WCOD;
 END
 END
 
 ELSE IF (UPPER(PTABELA) = 'CDSIT') THEN
 BEGIN
 FOR SELECT SIT_COD, SIT_NOM FROM CDSIT
 WHERE SIT_COD > :PCODINI AND SIT_COD <= :PCODFIM ORDER BY 1
 INTO WCOD, WTEXTO1 DO
 BEGIN
 UPDATE CDSIT SIT SET
 SIT.SIT_NOM = (SELECT RESULT FROM CONFIGURA_TAMANHODAFONTE(:WTEXTO1, :PMODO))
 WHERE SIT.SIT_COD = :WCOD;
 END
 END
 
 END
^

ALTER PROCEDURE AJUSTAVD1QUANTIDADE
AS
 DECLARE VARIABLE VD1_COD VARCHAR(13);
 DECLARE VARIABLE VD1_QTD DOUBLE PRECISION;
 DECLARE VARIABLE VD2_QTD DOUBLE PRECISION;
 begin
 update estmvvd1 set vd1_quantidade = 0;
 For
 Select vd1_cod, VD1_QUantidade, SUM(COALESCE(VD2_QTD,0))
 from estmvvd2 inner join estmvvd1 on vd1_cod = vd2_bol
 left join cdtra1 on tra_cod = vd1_tra
 left join cdalm on alm_cod = vd1_alm and
 vd1_canc <>'CN'
 group by VD1_COD, VD1_QUantidade,VD1_QUANTSERVI
 Having (not((COALESCE(VD1_QUANTIDADE,0)=COALESCE(SUM(COALESCE(VD2_QTD,0)),0)) or
 (COALESCE(VD1_QUANTSERVI,0)=COALESCE(SUM(COALESCE(VD2_QTD,0)),0))))
 
 Into vd1_cod, vd1_qtd, vd2_qtd do
 update estmvvd1 A set vd1_quantidade = COALESCE(:VD2_QTD,0),
 VD1_QUANTSERVI = COALESCE(:VD2_QTD,0)
 where vd1_cod =:vd1_cod;
 
 END
^

ALTER PROCEDURE APROVA_ORCAMENTO (
    PCOD VARCHAR(13),
    PALM INTEGER,
    PTRA INTEGER,
    PCODVD1 VARCHAR(13),
    PCLI INTEGER,
    PCON VARCHAR(40),
    PFOR INTEGER,
    PCAI INTEGER,
    PVEN INTEGER,
    PCOMP INTEGER,
    PREP INTEGER,
    PTRS INTEGER,
    PPREST INTEGER,
    PPGT INTEGER,
    PUSER INTEGER,
    PNOT INTEGER,
    PCODFORM INTEGER)
AS
DECLARE VARIABLE WMODULO VARCHAR(3);
DECLARE VARIABLE WLAYOUTPDV VARCHAR(3);
DECLARE VARIABLE WQTDVD2 DOUBLE PRECISION;
DECLARE VARIABLE WVD1_VEN INTEGER;
DECLARE VARIABLE WVD1_CAI INTEGER;
DECLARE VARIABLE WVD1_CLI INTEGER;
DECLARE VARIABLE WVD1_REP INTEGER;
DECLARE VARIABLE WVD1_FOR INTEGER;
DECLARE VARIABLE WVD1_TRS INTEGER;
DECLARE VARIABLE WVD1_PRESTSER INTEGER;
DECLARE VARIABLE WVD1_COMP INTEGER;
DECLARE VARIABLE WVD1_CONTATO VARCHAR(40);
DECLARE VARIABLE WTOTLIQ DOUBLE PRECISION;
DECLARE VARIABLE WTOTBRU DOUBLE PRECISION;
DECLARE VARIABLE VVD1_NOT INTEGER;
DECLARE VARIABLE VVD1_DESC_P DOUBLE PRECISION;
DECLARE VARIABLE VVD1_DESC_V DOUBLE PRECISION;
DECLARE VARIABLE VVD1_ACRESC DOUBLE PRECISION;
DECLARE VARIABLE VVD1_TIPO_FORMULARIO INTEGER;
DECLARE VARIABLE VVD1_OBS BLOB SUB_TYPE 1 SEGMENT SIZE 4096;
DECLARE VARIABLE VVD1_OBS2 BLOB SUB_TYPE 1 SEGMENT SIZE 4096;
DECLARE VARIABLE VVD1_OBS3 BLOB SUB_TYPE 1 SEGMENT SIZE 4096;
DECLARE VARIABLE VVD1_OBS4 BLOB SUB_TYPE 1 SEGMENT SIZE 4096;
DECLARE VARIABLE VVD1_ALM_DIGITA INTEGER;
DECLARE VARIABLE VVD1_USE_CAD INTEGER;
DECLARE VARIABLE VVD1_USE_ATU INTEGER;
DECLARE VARIABLE VVD1_ORIGEM VARCHAR(3);
DECLARE VARIABLE WDSP DOUBLE PRECISION;
DECLARE VARIABLE WDSV DOUBLE PRECISION;
BEGIN
 
 SELECT TRA_MODULO, TRA_LAY_PDV FROM CDTRA1 WHERE TRA_COD=:PTRA INTO WMODULO, WLAYOUTPDV;
 
 select vd1_ven, vd1_cai, vd1_cli, vd1_rep, vd1_for,
 vd1_trs, vd1_prestser, VD1_COMP, VD1_CONTATO
 from estmvvd1 where vd1_cod=:PCOD and vd1_alm=:PALM
 INTO Wvd1_ven, Wvd1_cai, Wvd1_cli, Wvd1_rep, Wvd1_for,
 Wvd1_trs, Wvd1_prestser, WVD1_COMP, WVD1_CONTATO;
 
 IF (PCLI<>0) THEN
 Wvd1_cli=:PCLI;
 
 IF (PCON<>'') THEN
 WVD1_CONTATO=:PCON;
 
 IF (PFOR<>0) THEN
 Wvd1_for=:PFOR;
 
 IF (PCAI<>0) THEN
 Wvd1_cai=:PCAI;
 
 IF (PVEN <>0) THEN
 Wvd1_ven=:PVEN;
 
 IF (PCOMP<>0) THEN
 WVD1_COMP=:PCOMP;
 
 IF (PREP<>0) THEN
 Wvd1_rep=:PREP;
 
 IF (PTRS<>0) THEN
 Wvd1_trs=:PTRS;
 
 IF (PPREST<>0) THEN
 Wvd1_prestser=:PPREST;
 
 SELECT Sum( ((VD2_VLR*VD2_QTD) - (DESCONTOITEM/100)*(VD2_VLR*VD2_QTD)) ) , Sum( (VD2_VLR*VD2_QTD) ), SUM(VD2_QTD) FROM ESTMVVD2
 WHERE VD2_BOL=:PCOD AND VD2_ALM=:PALM AND VD2_TIPO='A'
 INTO WTOTLIQ, WTOTBRU, WQTDVD2;
 
 select vd1_not, vd1_desc_p, vd1_desc_v, vd1_acresc,
 vd1_tipo_formulario, vd1_obs, vd1_obs2, vd1_obs3, vd1_obs4,
 vd1_alm_digita, vd1_use_cad, vd1_use_atu, VD1_ORIGEM
 from estmvvd1 where vd1_cod=:PCOD and vd1_alm=:PALM into
 Vvd1_not, Vvd1_desc_p, Vvd1_desc_v, Vvd1_acresc,
 Vvd1_tipo_formulario, Vvd1_obs, Vvd1_obs2, Vvd1_obs3, Vvd1_obs4,
 Vvd1_alm_digita, Vvd1_use_cad, Vvd1_use_atu, VVD1_ORIGEM;
 
 IF ((pCodForm<>0) AND (NOT pCodForm IS NULL)) THEN
 Vvd1_tipo_formulario=pCodForm;
 
 select vd3_dsp, vd3_dsv from estmvvd3
 WHERE VD3_BOL=:PCOD AND VD3_ALM=:PALM AND VD3_PGT=:PPGT INTO WDSP, WDSV;
 
 if ((not WDSP is null) and (WDSP>0)) then
 begin
 WTOTLIQ = :WTOTLIQ - (:WTOTLIQ * (WDSP / 100));
 end
 
 if ((not WDSV is null) and (WDSV>0)) then
 begin
 WTOTLIQ = :WTOTLIQ - WDSV;
 end
 
 if(:wdsp is not null)then
 vvd1_desc_p = :wdsp;
 
 INSERT INTO ESTMVVD1 (
 VD1_ALM, VD1_CAD, VD1_COD, vd1_not, vd1_tra, vd1_Ven, vd1_cai, vd1_pgt,
 vd1_desc_p, vd1_desc_v, vd1_acresc, vd1_Cli, vd1_rep, vd1_for,
 vd1_trs,  VD1_QUANTIDADE, VD1_QUANTPECAS, VD1_VALOR_TOTALL,
 VD1_ORIGEM, vd1_tipo_formulario, VD1_COMP,
 VD1_TOTALB_PRODUTO, VD1_TOTALL_PRODUTO,
 VD1_TOTALB_SERVICO, VD1_TOTALL_SERVICO, VD1_QUANTSERVI,
 VD1_VALOR_FRETE, VD1_VALOR_SEGURO, VD1_OUTRAS_DESPESAS,
 vd1_obs, vd1_obs2, vd1_obs3, vd1_obs4,
 VD1_VALOR_TOTALB, VD1_TOTAL_NOTA_SEMDESCTO, vd1_canc, status,
 VD1_PRESTSER, VD1_CONTATO, vd1_alm_digita, vd1_use_cad, vd1_use_atu, vd1_atu ) VALUES (
 :PALM, CAST("TODAY" AS DATE), :PCODVD1, :pNot, :PTRA, :Wvd1_ven, :Wvd1_cai, :PPGT,
 :Vvd1_desc_p, :Vvd1_desc_v, :Vvd1_acresc, :Wvd1_cli, :Wvd1_rep, :Wvd1_for,
 :Wvd1_trs,  :WQTDVD2, :WQTDVD2, :WTOTLIQ,
 :WMODULO, :Vvd1_tipo_formulario, :WVD1_COMP,
 CASE WHEN :WLAYOUTPDV <> 'SER' THEN :WTOTBRU ELSE 0 END, CASE WHEN :WLAYOUTPDV <> 'SER' THEN :WTOTLIQ ELSE 0 END,
 CASE WHEN :WLAYOUTPDV = 'SER' THEN :WTOTBRU ELSE 0 END, CASE WHEN :WLAYOUTPDV = 'SER' THEN :WTOTLIQ ELSE 0 END, CASE WHEN :WLAYOUTPDV = 'SER' THEN :WQTDVD2 ELSE 0 END,
 0, 0, 0,
 :Vvd1_obs, :Vvd1_obs2, :Vvd1_obs3, :Vvd1_obs4,
 :WTOTBRU, :WTOTBRU, 'FN', 'FINALIZADO',
 :Wvd1_prestser, :WVD1_CONTATO, :Vvd1_alm_digita, :pUser, :pUser,
 CAST("TODAY" AS DATE));
 
 UPDATE ESTMVVD1 SET VD1_FILHO=:PCODVD1, VD1_CANC='AP', STATUS='APROVADO' WHERE VD1_COD=:PCOD AND VD1_ALM=:PALM;
 
 INSERT INTO ESTMVVD2 (vd2_cod, vd2_bol, vd2_alm, vd2_cad, vd2_pro, vd2_vlr,
 vd2_qtd, vd2_ent, vd2_cor, vd2_med, vd2_ser, vd2_item, vd2_aliquota_ipi,
 vd2_aliquota_icms, vd2_descricao, vd2_aliquota_iss, reducaobaseicms,
 descontoitem, unidade, classificacaofiscal, vd2_materia_aplicada,
 vd2_situacaotributaria, vd2_finalidade, vd2_tipo, vd2_obs1, vd2_obs2,
 vd2_obs3, vd2_obs4, vd2_unm, vd2_alt, vd2_cmp, vd2_lrg, vd2_gar, vd2_nserie,
 vd2_ambiente, vd2_obs_blob, vd2_sub_tributa)
 select
 (SELECT MAX(VD2_COD)+1 FROM ESTMVVD2), :PCODVD1, :PALM, cast("today" as date),
 vd2_pro, vd2_vlr, vd2_qtd, vd2_ent,
 vd2_cor, vd2_med, vd2_ser, vd2_item, vd2_aliquota_ipi, vd2_aliquota_icms,
 vd2_descricao, vd2_aliquota_iss, reducaobaseicms, descontoitem, unidade,
 classificacaofiscal, vd2_materia_aplicada, vd2_situacaotributaria,
 vd2_finalidade, vd2_tipo, vd2_obs1, vd2_obs2, vd2_obs3, vd2_obs4, vd2_unm,
 vd2_alt, vd2_cmp, vd2_lrg, vd2_gar, VD2_NSERIE, vd2_ambiente,
 vd2_obs_blob, vd2_sub_tributa
 from estmvvd2 WHERE VD2_BOL=:PCOD AND VD2_ALM=:PALM AND VD2_TIPO='A';
 
 if ((PPGT is not null) and (PPGT <> 0)) then
 begin
 INSERT INTO estmvvd3 (vd3_cod, vd3_alm, vd3_cad, vd3_bol, vd3_pgt, vd3_dsv, vd3_dsp, vd3_vlrl, vd3_item, vd3_dest)
 select (SELECT MAX(VD3_COD)+1 FROM ESTMVVD3), :PALM, cast("today" as date), :PCODVD1, :PPGT, vd3_dsv, vd3_dsp, :WTOTLIQ,
 vd3_item, vd3_dest
 from estmvvd3 WHERE VD3_BOL=:PCOD AND VD3_ALM=:PALM AND VD3_PGT=:PPGT;
 end
 
 INSERT INTO ESTMVVD5 (vd5_cod, vd5_bol, vd5_ent, vd5_tip, vd5_num, vd5_cop, vd5_cep, vd5_end, vd5_bai, vd5_cid, vd5_est, vd5_ref, vd5_alm, vd5_cad, vd5_nom, vd5_cnp, vd5_ies, vd5_fis, vd5_tipent, vd5_pais, vd5_prov)
 select (SELECT MAX(VD5_COD)+1 FROM ESTMVVD5), :PCODVD1, vd5_ent, vd5_tip, vd5_num, vd5_cop, vd5_cep, vd5_end,
 vd5_bai, vd5_cid, vd5_est, vd5_ref, :PALM, cast("today" as date), vd5_nom, vd5_cnp, vd5_ies,
 vd5_fis, vd5_tipent, vd5_pais, vd5_prov
 from estmvvd5 WHERE VD5_BOL=:PCOD AND VD5_ALM=:PALM;
 
 UPDATE CODIGO SET ULTIMOCODIGO=(SELECT MAX(VD2_COD) FROM ESTMVVD2) WHERE TABELA='ESTMVVD2';
 UPDATE CODIGO SET ULTIMOCODIGO=(SELECT MAX(VD3_COD) FROM ESTMVVD3) WHERE TABELA='ESTMVVD3';
 UPDATE CODIGO SET ULTIMOCODIGO=(SELECT MAX(VD5_COD) FROM ESTMVVD5) WHERE TABELA='ESTMVVD5';
 
 END
^

ALTER PROCEDURE ATUALIZA_CDPROPRE (
    VPARAMCOR INTEGER,
    VPARAMMED INTEGER,
    VCASAS_DECIMAIS INTEGER,
    VPRODUTO INTEGER,
    VCOR VARCHAR(3),
    VMED VARCHAR(3))
AS
 DECLARE VARIABLE VESTPRO INTEGER;
 DECLARE VARIABLE VESTCOR VARCHAR(3);
 DECLARE VARIABLE VESTTAM VARCHAR(3);
 DECLARE VARIABLE VESTSAL DOUBLE PRECISION;
 DECLARE VARIABLE VESTUCUS DOUBLE PRECISION;
 DECLARE VARIABLE VESTCMED DOUBLE PRECISION;
 DECLARE VARIABLE VREGISTROS INTEGER;
 DECLARE VARIABLE VARREDONDA INTEGER;
 DECLARE VARIABLE VANTPRO INTEGER;
 DECLARE VARIABLE VANTCOR VARCHAR(3);
 DECLARE VARIABLE VANTTAM VARCHAR(3);
 DECLARE VARIABLE VMEDIAQT DOUBLE PRECISION;
 DECLARE VARIABLE VMEDIACM DOUBLE PRECISION;
 DECLARE VARIABLE VULTCUST DOUBLE PRECISION;
 DECLARE VARIABLE VCALCCUS DOUBLE PRECISION;
 DECLARE VARIABLE VCALCMED DOUBLE PRECISION;
 Begin
 if (vCasas_Decimais = 0) then
 vArredonda = 1;
 else if (vCasas_Decimais = 1) then
 vArredonda = 10;
 else if (vCasas_Decimais = 2) then
 vArredonda = 100;
 else if (vCasas_Decimais = 3) then
 vArredonda = 1000;
 else if (vCasas_Decimais = 4) then
 vArredonda = 10000;
 else if (vCasas_Decimais = 5) then
 vArredonda = 100000;
 else if (vCasas_Decimais = 6) then
 vArredonda = 1000000;
 vMediaCM = 0;
 vMediaQt = 0;
 vUltCust = 0;
 vRegistros = 0;
 vCalcCus = 0;
 vCalcMed = 0;
 
 For
 select est_pro, est_cor, est_tam, est_ucus, est_cmed, est_sal
 from mvest
 where ((est_pro = :vproduto) or (:vproduto is null))
 and ((est_cor = :vcor) or (:vcor is null))
 and ((est_tam = :vmed) or (:vmed is null))
 order by 1, 2, 3
 Into vEstPro, vEstCor, vEstTam, vEstUcus, vEstCmed, vEstSal
 Do Begin
 if ((vAntPro <> vEstPro) or
 ((vAntCor <> vEstCor) and (vParamCor = 1)) or
 ((vAntTam <> vEstTam) and (vParamMed = 1))) then
 begin
 if (not vAntPro is null) then
 begin
 Update CDPROPRE Set pro_cusm = :vMediaCM, pro_ultc = :vUltCust
 Where pro_pro = :vAntPro
 And ((pro_cor = :vAntCor) or (not :vParamCor = 1))
 And ((pro_med = :vAntTam) or (not :vParamMed = 1));
 end
 vMediaCM = vEstCmed;
 vMediaQt = 0;
 vUltCust = vEstUcus;
 vRegistros = 0;
 end
 vAntPro = vEstPro;
 vAntCor = vEstCor;
 vAntTam = vEstTam;
 if ((vEstCmed Is not Null) and (vEstSal Is not Null) and (vEstCmed > 0) and (vEstSal > 0)) then
 Begin
 vCalcMed = (vMediaCM * vMediaQt) + (vEstCmed * vEstSal);
 vMediaQt = vMediaQt + vEstSal;
 if ((vMediaQt <> 0) and (vCalcMed <> 0)) then
 vMediaCM = vCalcMed / vMediaQt;
 else
 vMediaCM = vEstCmed;
 End
 if ((vEstUcus Is not Null) and (vEstSal Is not Null) and (vEstUcus > 0) and (vEstSal > 0)) then
 begin
 vCalcCus = (vUltCust * vRegistros) + (vEstUCus * vEstSal);
 vRegistros = vRegistros + vEstSal;
 if ((vRegistros <> 0) and (vCalcCus <> 0)) then
 vUltCust = vCalcCus / vRegistros;
 else
 vUltCust = vEstUCus;
 end
 vMediaCM = Cast((vMediaCM * vArredonda) as integer) / vArredonda;
 vUltCust = Cast((vUltCust * vArredonda) as integer) / vArredonda;
 End
 
 if (not vAntPro is null) then
 begin
 Update CDPROPRE Set pro_cusm = :vMediaCM, pro_ultc = :vUltCust
 Where pro_pro = :vAntPro
 And ((pro_cor = :vAntCor) or (not (:vParamCor = 1)))
 And ((pro_med = :vAntTam) or (not (:vParamMed = 1)));
 end
 
 End
^

ALTER PROCEDURE ATUALIZA_CONFERENCIA (
    PFILIAL INTEGER,
    PDATA TIMESTAMP)
AS
 DECLARE VARIABLE WREC_COD INTEGER;
 DECLARE VARIABLE WREC_DOC VARCHAR(12);
 DECLARE VARIABLE WREC_CCUSTO VARCHAR(40);
 DECLARE VARIABLE WREC_CLI INTEGER;
 DECLARE VARIABLE WDESAGIO DOUBLE PRECISION;
 DECLARE VARIABLE WTIP_DESENCAIXE INTEGER;
 DECLARE VARIABLE WTIP_DESAGIO INTEGER;
 DECLARE VARIABLE WREC_VAL DOUBLE PRECISION;
 DECLARE VARIABLE WREC_VEC DATE;
 BEGIN

 FOR SELECT REC_COD, REC_DOC, REC_CCUSTO, REC_CLI FROM MVCOREC WHERE DAT_ATU=:PDATA AND REC_ORI=:PFILIAL AND REC_BAIFIL="S" AND REC_TOT="T" INTO :WREC_COD, :WREC_DOC, :WREC_CCUSTO, :WREC_CLI DO
 BEGIN
 IF ( EXISTS( SELECT * FROM MVCOREC WHERE REC_DOC=:WREC_DOC AND REC_CCUSTO=:WREC_CCUSTO AND REC_CLI=:WREC_CLI AND REC_ORI=:PFILIAL AND REC_COD<>:WREC_COD) ) THEN
 BEGIN
 DELETE FROM MVCOREC WHERE REC_DOC=:WREC_DOC AND REC_CCUSTO=:WREC_CCUSTO AND REC_CLI=:WREC_CLI AND REC_ORI=:PFILIAL AND REC_BAIFIL="N" AND REC_COD<>:WREC_COD;
 END
 END

 FOR SELECT TIP_DESENCAIXE,TIP_DESAGIO,REC_VAL,REC_VEC,REC_COD FROM MVCOREC,CDTIPD WHERE REC_BAIVER="N" AND REC_ORI=:PFILIAL AND (REC_DAT=:PDATA OR REC_REC=:PDATA) AND TIP_ATUALIZA="CON" AND REC_TIP=TIP_COD INTO :WTIP_DESENCAIXE, :WTIP_DESAGIO, :WREC_VAL, :WREC_VEC, :WREC_COD DO
 BEGIN
 IF ( :WTIP_DESENCAIXE >0 ) THEN
 BEGIN
 WREC_VEC = :WREC_VEC+:WTIP_DESENCAIXE;
 UPDATE MVCOREC SET REC_VEC=:WREC_VEC WHERE REC_COD=:WREC_COD;
 END
 IF ( :WTIP_DESAGIO >0 ) THEN
 BEGIN
 WDESAGIO = (:WREC_VAL/100)*:WTIP_DESAGIO;
 WREC_VAL = :WREC_VAL-:WDESAGIO;
 UPDATE MVCOREC SET REC_VAL=:WREC_VAL WHERE REC_COD=:WREC_COD;
 END
 END

 UPDATE MVCOREC SET REC_BAIVER="S"
 WHERE REC_BAIVER="N"
 AND REC_ORI=:PFILIAL
 AND REC_DAT=:PDATA;

 FOR SELECT REC_COD FROM MVCOREC, CDTIPD WHERE REC_DAT=:PDATA AND REC_ORI=:PFILIAL AND TIP_CONSOL="S" AND REC_VD1COD<>0 AND REC_TIP=TIP_COD INTO :WREC_COD DO
 BEGIN
 DELETE FROM MVCOREC WHERE REC_COD=:WREC_COD;
 END

 END
^

ALTER PROCEDURE ATUALIZA_INDICE (
    PDTATUAL TIMESTAMP,
    PVLRINICIAL DOUBLE PRECISION,
    PDTINICIAL TIMESTAMP,
    PMOE INTEGER)
RETURNS (
    RESULT DOUBLE PRECISION,
    RET_FLAG INTEGER,
    RET_INDICE DOUBLE PRECISION,
    RET_DATA TIMESTAMP)
AS
 DECLARE VARIABLE VTAXA DOUBLE PRECISION;
 DECLARE VARIABLE VATU INTEGER;
 DECLARE VARIABLE VANO INTEGER;
 DECLARE VARIABLE VANOA INTEGER;
 DECLARE VARIABLE VINI INTEGER;
 DECLARE VARIABLE VFLAGM VARCHAR(1);
 DECLARE VARIABLE VVLIN DOUBLE PRECISION;
 DECLARE VARIABLE VVLFI DOUBLE PRECISION;
 DECLARE VARIABLE VNAC VARCHAR(1);
 begin
 ret_flag = 1;
 VINI = extract(month from :pdtinicial);
 VATU = extract(month from :pdtatual);
 VANO = extract(year from :pdtinicial);
 VANOA = extract(year from :pdtatual);
 select cdmoe.moe_flag, cdmoe.moe_nac from cdmoe
 where cdmoe.moe_cod = :pmoe into vflagM, vnac;
 if (VFLAGM <> "M") then
 begin
 PDTINICIAL = cast(cast(VINI as varchar(2)) || "/01/" || cast(VANO as varchar(4)) as date);
 PDTATUAL = cast(cast(VATU as varchar(2)) || "/01/" || extract(year from :pdtatual) as date);
 RET_DATA = PDTINICIAL;
 while ( PDTINICIAL < PDTATUAL ) do
 begin
 if ( VINI > 0 ) then
 execute procedure retorna_taxamensal(PMOE, PDTINICIAL) returning_values (VTAXA);
 RET_INDICE = VTAXA;
 RET_DATA = PDTINICIAL;
 Result = PVLRINICIAL;
 Suspend;
 PVLRINICIAL = PVLRINICIAL + (VTAXA * PVLRINICIAL / 100);
 if (:vtaxa is null) then
 ret_flag=0;
 if (VINI = 12) then
 begin
 VINI = 1;
 VANO = VANO + 1;
 end
 else
 VINI = VINI + 1;
 PDTINICIAL = cast(cast(VINI as varchar(2)) || "/01/" || cast(VANO as varchar(4)) as date);
 end
 RET_INDICE = null;
 RET_DATA = PDTINICIAL;
 Result = PVLRINICIAL;
 Suspend;
 end
 else
 begin
 execute procedure retorna_taxadiaria(:pmoe,:pdtinicial) returning_values(:vvlin);
 execute procedure retorna_taxadiaria(:pmoe,:pdtatual) returning_values(:vvlfi);
 if (vnac = "N") then
 ret_flag=1;
 else
 if ((vvlin is null) or (vvlfi is null)) then
 ret_flag=0;
 else
 ret_flag=1;
 Result = PVLRINICIAL;
 RET_INDICE = vvlin;
 RET_DATA = pdtinicial;
 suspend;
 if ((:vvlin <> 0) and (:vvlfi <> 0)) then
 PVLRINICIAL = ((PVLRINICIAL / :vvlin)* :vvlfi);
 else
 PVLRINICIAL =:pvlrinicial;
 PVLRINICIAL = cast((PVLRINICIAL * 10000) as integer) / 10000;
 Result = PVLRINICIAL;
 RET_DATA = pdtatual;
 RET_INDICE = vvlfi;
 suspend;
 end
 end
^

ALTER PROCEDURE ATUALIZACODCORMED (
    PPRODUTO INTEGER,
    PCOR VARCHAR(3),
    PMEDIDA VARCHAR(3),
    PTIPO INTEGER)
AS
 DECLARE VARIABLE WPRO INTEGER;
 DECLARE VARIABLE WCOR VARCHAR(3);
 DECLARE VARIABLE WMED VARCHAR(3);
 DECLARE VARIABLE WCOD INTEGER;
 BEGIN
 WCOD=0;
 IF (pMedida="") THEN
 BEGIN
 FOR SELECT DISTINCT PRO_MED
 FROM rdb$database left join cdprocm on (pro_pro= :PPRODUTO)
 WHERE pro_pro = :PPRODUTO OR NOT EXISTS (SELECT * FROM cdprocm WHERE pro_pro = :PPRODUTO)
 INTO WMED DO
 BEGIN
 INSERT INTO CDPROCM VALUES( :pProduto, :pCor, :WMED, (SELECT COD FROM ATUCODFIXO(null,"","","",2)),"A",cast("today" as date),cast("today" as date) );
 END
 END

 IF (pCor="") THEN
 BEGIN
 FOR SELECT DISTINCT PRO_COR
 FROM rdb$database left join cdprocm on (pro_pro= :PPRODUTO)
 WHERE pro_pro = :PPRODUTO OR NOT EXISTS (SELECT * FROM cdprocm WHERE pro_pro = :PPRODUTO)
 INTO WCOR DO
 BEGIN
 INSERT INTO CDPROCM VALUES( :pProduto, :WCOR, :pMedida, (SELECT COD FROM ATUCODFIXO(null,"","","",2)),"A",cast("today" as date),cast("today" as date) );
 END
 END

 END
^

ALTER PROCEDURE ATUALIZAR_FINANCEIRO_VD4 (
    PVD4COD INTEGER)
AS
DECLARE VARIABLE VDOC VARCHAR(12);
DECLARE VARIABLE VVALOR DOUBLE PRECISION;
DECLARE VARIABLE VDATAVEC DATE;
DECLARE VARIABLE VTIP INTEGER;
DECLARE VARIABLE VCLI INTEGER;
DECLARE VARIABLE VCONTA INTEGER;
DECLARE VARIABLE VCARTEIRA INTEGER;
DECLARE VARIABLE VCCUSTO VARCHAR(40);
DECLARE VARIABLE VPLANO VARCHAR(40);
DECLARE VARIABLE VVD1COD VARCHAR(13);
DECLARE VARIABLE VVD1CAD DATE;
DECLARE VARIABLE VVD1ALM INTEGER;
DECLARE VARIABLE VTRANOM VARCHAR(40);
DECLARE VARIABLE VALMFANT VARCHAR(20);
DECLARE VARIABLE VOBS VARCHAR(60);
DECLARE VARIABLE VVD1NOT INTEGER;
DECLARE VARIABLE VTIPFIN VARCHAR(1);
begin
 SELECT CDCLI.CLI_CCUSTO, CDCLI.CLI_PLA, CDCLI.CLI_CONTA, CDCLI.CLI_CARTEIRA,
 CDALM.ALM_FANT,
 CDTRA1.TRA_NOM,
 ESTMVVD1.VD1_CLI, ESTMVVD1.VD1_NOT, ESTMVVD1.VD1_COD, ESTMVVD1.VD1_CAD, ESTMVVD1.VD1_ALM,
 ESTMVVD4.VD4_VEC, ESTMVVD4.VD4_DOC, ESTMVVD4.VD4_VAL, ESTMVVD4.VD4_TIP,
 CDTIPD.TIP_FIN
 FROM ESTMVVD4, ESTMVVD1, CDCLI, CDALM, CDTRA1, CDTIPD
 WHERE ESTMVVD4.VD4_BOL = ESTMVVD1.VD1_COD
 AND ESTMVVD1.VD1_TRA = CDTRA1.TRA_COD
 AND CDALM.ALM_COD = ESTMVVD1.VD1_ALM
 AND CDCLI.CLI_COD = CDALM.ALM_CLI
 AND ESTMVVD4.VD4_TIP = CDTIPD.TIP_COD
 AND ESTMVVD4.VD4_COD = :pvd4cod
 Into vccusto, vplano, vconta, vcarteira, valmfant, vtranom,
 vcli, vvd1not, vvd1cod, vvd1cad, vvd1alm, vdatavec, vdoc, vvalor,
 vtip, vtipfin;
 
 vobs = vtranom || ' - N. ' || vvd1not || ' - ' || valmfant;
 
 if (vtipfin = 'S') then
 begin
 insert into mvcorec (rec_cod, rec_doc, rec_ccusto, rec_dat, rec_tip, rec_vec,
 rec_val, rec_moe, rec_cob, rec_con, rec_cli, rec_car, rec_emi, rec_bai,
 rec_tot, rec_eminom, rec_emicpf, rec_emirg, rec_emitel, rec_dfp, rec_bor,
 cli_fil, rec_cobravel, rec_pla, rec_desagio, dat_cad, dat_atu, ativo,
 rec_nossonumero, rec_vd1cod, rec_obs, rec_ori, rec_baifil, rec_baiver,
 rec_rec, rec_vog, rec_jbor, rec_nbor, rec_dtbor, rec_proj2, rec_pla2,
 rec_ccusto2, rec_for_vinc, rec_obs1, rec_sit_bol, rec_desd)
 values ((Select VCODIGO From maxtabelacodigo('MVCOREC','REC_COD')),
 :vdoc, :vccusto, :vvd1cad, :vtip, :vdatavec, :vvalor, null, '',
 :vconta, :vcli, :vcarteira, :vvd1cad, '', 'T', null, null, null, null,
 'D', null, :vvd1alm, 'T', :vplano, null, 'today', 'today', 'A', 0,
 :vvd1cod, :vobs, :vvd1alm, null, null, null, :vdatavec, null,
 null, null, null, null, null, null, null, null, null);
 end
 end
^

ALTER PROCEDURE ATUCODFIXO (
    PPRO INTEGER,
    PCOR VARCHAR(3),
    PMED VARCHAR(3),
    PCOD VARCHAR(15),
    PTIPO INTEGER)
RETURNS (
    COD VARCHAR(21))
AS
 DECLARE VARIABLE WCODINTBAR VARCHAR(15);
 DECLARE VARIABLE WCODFIXO VARCHAR(8);
 DECLARE VARIABLE WCODSEQUENCIA INTEGER;
 DECLARE VARIABLE WCODNUMERO INTEGER;
 DECLARE VARIABLE WSEQNUM INTEGER;
 DECLARE VARIABLE WNUM INTEGER;
 DECLARE VARIABLE WEXISTE INTEGER;
 BEGIN
 
 IF (PTIPO=0) Then
 BEGIN
 select first 1 pro_bar from cdpro where pro_cod=:PPRO into WCODINTBAR;
 IF (PCOD<>"") THEN
 BEGIN
 COD=PCOD||PCOR||PMED;
 END
 ELSE
 BEGIN
 COD=WCODINTBAR||PCOR||PMED;
 END
 END
 
 IF (PTIPO=1) Then
 BEGIN
 select first 1 pro_int from cdpro where pro_cod=:PPRO into WCODINTBAR;
 IF (PCOD<>"") THEN
 BEGIN
 COD=PCOD||PCOR||PMED;
 END
 ELSE
 BEGIN
 COD=WCODINTBAR||PCOR||PMED;
 END
 END
 
 IF (PTIPO=2) THEN
 BEGIN
 SELECT P_CODFIXO, P_CODSEQUENCIA, P_CODNUMERO FROM PARAMET INTO WCODFIXO,WCODSEQUENCIA,WCODNUMERO;
 IF ( (WCODFIXO <> "") AND (WCODNUMERO <> 0) AND (WCODSEQUENCIA <> 0) ) THEN
 BEGIN
 SELECT RESULT FROM STR_LENGTH(:WCODSEQUENCIA) INTO WSeqNum;
 SELECT RESULT FROM STR_LENGTH(:WCODFIXO) INTO WNum;
 
 IF (:WSeqNum < :WCODNUMERO) THEN
 BEGIN
 SELECT RESULT FROM COMPLETA_STRING(:WCODSEQUENCIA,"0",:WCODNUMERO-:WNum,-1) INTO COD;
 COD=:WCODFIXO||COD;
 END
 ELSE
 COD=CAST( WCODSEQUENCIA AS VARCHAR(21) );
 
 WCODSEQUENCIA=WCODSEQUENCIA+1;
 UPDATE PARAMET SET P_CODSEQUENCIA=:WCODSEQUENCIA;
 END
 END
 
 IF ((PTIPO=4) or (PTIPO=5)) Then
 BEGIN
 if (PTIPO=5) then
 select first 1 pro_bar from cdpro where pro_cod=:PPRO into WCODINTBAR;
 else
 select first 1 pro_int from cdpro where pro_cod=:PPRO into WCODINTBAR;
 select count(pro_pro)+1 from cdprocm where pro_pro=:PPRO into WNum;
 WEXISTE = 1;
 while (wexiste = 1) do
 begin
 IF (PCOD<>"") THEN
 BEGIN
 COD=PCOD||cast(WNUM as varchar(10));
 END
 ELSE
 BEGIN
 COD=WCODINTBAR||cast(WNUM as varchar(10));
 END
 Select Coalesce((select 1 from cdprocm where pro_cod = :COD),0) from linhas(1) into :wexiste;
 WNum = WNum + 1;
 end
 END
 
 SUSPEND;
 END
^

ALTER PROCEDURE ATZ_PREV_PAG
AS
 DECLARE VARIABLE WDTLIMITE DATE;
 DECLARE VARIABLE WDTEMISSAO DATE;
 DECLARE VARIABLE WDTVENC DATE;
 DECLARE VARIABLE WPARCELAS INTEGER;
 DECLARE VARIABLE WPARCELASRESTANTES INTEGER;
 DECLARE VARIABLE WMSG VARCHAR(30);
 DECLARE VARIABLE WYEAR INTEGER;
 DECLARE VARIABLE WMONTH INTEGER;
 DECLARE VARIABLE WDAY INTEGER;
 DECLARE VARIABLE WPROXNR INTEGER;
 DECLARE VARIABLE WPRE_COD INTEGER;
 DECLARE VARIABLE WPRE_FOR INTEGER;
 DECLARE VARIABLE WPRE_FRE VARCHAR(3);
 DECLARE VARIABLE WPRE_TIP INTEGER;
 DECLARE VARIABLE WPRE_PAR INTEGER;
 DECLARE VARIABLE WPRE_VAL DOUBLE PRECISION;
 DECLARE VARIABLE WPRE_CON INTEGER;
 DECLARE VARIABLE WPRE_DAT DATE;
 DECLARE VARIABLE WPRE_PLA VARCHAR(40);
 DECLARE VARIABLE WPRE_ATU DATE;
 DECLARE VARIABLE WPRE_ANT INTEGER;
 DECLARE VARIABLE WPRE_PARTOT INTEGER;
 DECLARE VARIABLE WPRE_HIS VARCHAR(60);
 DECLARE VARIABLE WPRE_CCUSTO VARCHAR(40);
 DECLARE VARIABLE WPRE_EMI DATE;
 DECLARE VARIABLE WPRE_DIA INTEGER;
 DECLARE VARIABLE WDIA_MES INTEGER;
 DECLARE VARIABLE WP_LIBER_PREV VARCHAR(1);
 DECLARE VARIABLE WPRE_CCUSTO2 INTEGER;
 DECLARE VARIABLE WPRE_PLA2 INTEGER;
 BEGIN
 FOR SELECT PRE_COD, PRE_FOR,PRE_FRE,PRE_TIP,PRE_PAR,PRE_VAL,PRE_CON,PRE_DAT,PRE_PLA,PRE_ATU,PRE_ANT,PRE_PARTOT,PRE_HIS,PRE_CCUSTO,PRE_EMI,CAST(PRE_DIA AS INTEGER),PRE_CCUSTO2,PRE_PLA2
 FROM CDPREPAG
 WHERE (PRE_ATU < "TODAY" OR PRE_ATU IS NULL)
 AND NOT PRE_EMI IS NULL
 INTO :wPRE_COD, :wPRE_FOR,:wPRE_FRE,:wPRE_TIP,:wPRE_PAR,:wPRE_VAL,:wPRE_CON,:wPRE_DAT,:wPRE_PLA,:wPRE_ATU,:wPRE_ANT,:wPRE_PARTOT,:wPRE_HIS,:wPRE_CCUSTO,:wPRE_EMI,:wPRE_DIA,:wPRE_CCUSTO2,:wPRE_PLA2
 DO
 BEGIN
 wDTLIMITE = CAST("TODAY" AS DATE) + wPRE_ANT;
 wDTVENC = wPRE_DAT;
 wDTEMISSAO = wPRE_EMI;
 wPARCELASRESTANTES = wPRE_PAR;
 wPARCELAS = 1;
 WHILE ((wPARCELAS <= wPRE_PAR) AND (wDTLIMITE > wDTVENC)) DO
 BEGIN
 SELECT p_liber_prev FROM parametfin INTO Wp_liber_prev;
 IF (wPARCELASRESTANTES = 999) THEN
 BEGIN
 IF (Wp_liber_prev='E') THEN
 BEGIN
 EXECUTE PROCEDURE DecodeDate(wDTEMISSAO) RETURNING_VALUES(wYear, wMonth, wDay);
 END
 ELSE
 BEGIN
 EXECUTE PROCEDURE DecodeDate(wDTVENC) RETURNING_VALUES(wYear, wMonth, wDay);
 END
 IF (wPRE_FRE = 'DIA') THEN
 wMSG = CAST(wDay AS VARCHAR(2)) || "/" || CAST(wMonth AS VARCHAR(2)) || "/" || CAST(wYear AS CHAR(4));
 ELSE IF (wPRE_FRE = 'QUI') THEN
 BEGIN
 IF (wDay > 15) THEN
 wMSG = CAST(wMonth AS VARCHAR(2)) || "/" || CAST(wYear AS CHAR(4)) || '-' || 'A';
 ELSE
 wMSG = CAST(wMonth AS VARCHAR(2)) || "/" || CAST(wYear AS CHAR(4)) || '-' || 'B';
 END
 ELSE IF (wPRE_FRE = 'SMA') THEN
 BEGIN
 IF (wDay < 8) THEN
 wMSG = CAST(wMonth AS VARCHAR(2)) || "/" || CAST(wYear AS CHAR(4)) || '-' || 'A';
 ELSE IF (wDay < 15) THEN
 wMSG = CAST(wMonth AS VARCHAR(2)) || "/" || CAST(wYear AS CHAR(4)) || '-' || 'B';
 ELSE IF (wDay < 22) THEN
 wMSG = CAST(wMonth AS VARCHAR(2)) || "/" || CAST(wYear AS CHAR(4)) || '-' || 'C';
 ELSE IF (wDay < 29) THEN
 wMSG = CAST(wMonth AS VARCHAR(2)) || "/" || CAST(wYear AS CHAR(4)) || '-' || 'D';
 ELSE
 wMSG = CAST(wMonth AS VARCHAR(2)) || "/" || CAST(wYear AS CHAR(4)) || '-' || 'E';
 END
 ELSE
 wMSG = CAST(wMonth AS VARCHAR(2)) || "/" || CAST(wYear AS CHAR(4));
 END
 ELSE
 BEGIN
 wMSG = CAST( CAST(wPRE_PARTOT - wPARCELASRESTANTES + 1 AS INTEGER) AS VARCHAR(5) ) || "/" || CAST(wPRE_PARTOT AS VARCHAR(3));
 END
 IF (EXISTS(SELECT PAG_COD FROM MVCOPAG)) THEN
 SELECT MAX(PAG_COD)+1 FROM MVCOPAG INTO :wPROXNR;
 ELSE
 wPROXNR = 1;
 IF (EXISTS(SELECT TABELA FROM CODIGO WHERE UPPER(TABELA)="MVCOPAG")) THEN
 UPDATE CODIGO SET ULTIMOCODIGO = :wPROXNR WHERE UPPER(TABELA)="MVCOPAG";
 ELSE
 INSERT INTO CODIGO (TABELA, ULTIMOCODIGO) VALUES ("MVCOPAG", :wPROXNR);
 INSERT INTO MVCOPAG ( PAG_COD, PAG_DOC, PAG_CCUSTO, PAG_DAT, PAG_TIP, PAG_VEC, PAG_VAL, PAG_MOE, PAG_CON, PAG_FOR,
 PAG_EMI, PAG_OBS, PAG_BAI, PAG_TOT, PAG_DFP, PAG_CHEQUE,
 PAG_PLA, PAG_DESAGIO, DAT_CAD, DAT_ATU, ATIVO, PAG_VOG, PAG_BAIVER, PAG_CCUSTO2, PAG_PLA2)
 VALUES (:wPROXNR, :wMSG, :wPRE_CCUSTO, NULL, :wPRE_TIP,:wDTVENC,:wPRE_VAL,NULL, :wPRE_CON, :wPRE_FOR,
 :wDTEMISSAO,:wPRE_HIS,"N", NULL, "P",NULL,
 :wPRE_PLA, NULL, "NOW", "NOW", "A", :wDTVENC, 'S', :wPRE_CCUSTO2, :wPRE_PLA2);
 EXECUTE PROCEDURE ADD_FREQUENCIA ( wDTVENC, wPRE_FRE) RETURNING_VALUES :wDTVENC;
 EXECUTE PROCEDURE DecodeDate(wDTVENC) RETURNING_VALUES(wYear, wMonth, wDay);
 EXECUTE PROCEDURE DAYSOFMONTH (wYear, wMonth) RETURNING_VALUES (wDIA_MES);
 IF ((wDIA_MES >= wPRE_DIA) AND (wDay <> wPRE_DIA) AND (wPRE_FRE<>'DIA') AND (wPRE_FRE<>'QUI') AND (wPRE_FRE<>'SMA') ) THEN
 EXECUTE PROCEDURE EncodeDate(wYear, wMonth, wPRE_DIA) RETURNING_VALUES(wDTVENC);
 EXECUTE PROCEDURE ADD_FREQUENCIA ( wDTEMISSAO, wPRE_FRE) RETURNING_VALUES :wDTEMISSAO;
 IF (wPARCELASRESTANTES<>999) THEN
 wPARCELASRESTANTES = wPARCELASRESTANTES - 1;
 wPARCELAS = wPARCELAS + 1;
 END
 IF (wPARCELASRESTANTES=0) THEN
 DELETE FROM CDPREPAG WHERE PRE_COD=:wPRE_COD;
 ELSE
 UPDATE CDPREPAG SET
 PRE_DAT = :wDTVENC,
 PRE_EMI = :wDTEMISSAO,
 PRE_PAR = :wPARCELASRESTANTES,
 PRE_ATU = "TODAY"
 WHERE PRE_COD=:wPRE_COD;
 END
 delete from mvcopag where pag_dat < '01/01/1900';
 END
^

ALTER PROCEDURE ATZ_PREV_REC
AS
 DECLARE VARIABLE WDTLIMITE DATE;
 DECLARE VARIABLE WDTEMISSAO DATE;
 DECLARE VARIABLE WDTVENC DATE;
 DECLARE VARIABLE WPARCELAS INTEGER;
 DECLARE VARIABLE WPARCELASRESTANTES INTEGER;
 DECLARE VARIABLE WMSG VARCHAR(30);
 DECLARE VARIABLE WYEAR INTEGER;
 DECLARE VARIABLE WMONTH INTEGER;
 DECLARE VARIABLE WDAY INTEGER;
 DECLARE VARIABLE WPROXNR INTEGER;
 DECLARE VARIABLE WPRE_COD INTEGER;
 DECLARE VARIABLE WPRE_CLI INTEGER;
 DECLARE VARIABLE WPRE_FRE VARCHAR(3);
 DECLARE VARIABLE WPRE_TIP INTEGER;
 DECLARE VARIABLE WPRE_PAR INTEGER;
 DECLARE VARIABLE WPRE_VAL DOUBLE PRECISION;
 DECLARE VARIABLE WPRE_CON INTEGER;
 DECLARE VARIABLE WPRE_DAT DATE;
 DECLARE VARIABLE WPRE_PLA VARCHAR(40);
 DECLARE VARIABLE WPRE_ATU DATE;
 DECLARE VARIABLE WPRE_ANT INTEGER;
 DECLARE VARIABLE WPRE_PARTOT INTEGER;
 DECLARE VARIABLE WPRE_HIS VARCHAR(60);
 DECLARE VARIABLE WPRE_CCUSTO VARCHAR(40);
 DECLARE VARIABLE WPRE_EMI DATE;
 DECLARE VARIABLE WPRE_CAR INTEGER;
 DECLARE VARIABLE WPRE_DIA INTEGER;
 DECLARE VARIABLE WDIA_MES INTEGER;
 DECLARE VARIABLE WP_LIBER_PREV VARCHAR(1);
 DECLARE VARIABLE WPRE_CCUSTO2 VARCHAR(40);
 DECLARE VARIABLE WPRE_PLA2 VARCHAR(40);
 BEGIN
 FOR
 SELECT PRE_COD, PRE_CLI, PRE_FRE, PRE_TIP, PRE_PAR, PRE_VAL, PRE_CON,
 PRE_DAT, PRE_PLA, PRE_ATU, PRE_ANT, PRE_PARTOT, PRE_HIS, PRE_CCUSTO,
 PRE_EMI, PRE_CAR,
 CAST ((SELECT RESULT FROM REMOVE_INV_CHAR( CDPREREC.PRE_DIA )) AS INTEGER),
 PRE_CCUSTO2, PRE_PLA2
 FROM CDPREREC
 WHERE (PRE_ATU < "TODAY" OR PRE_ATU IS NULL)
 AND NOT PRE_EMI IS NULL
 ORDER BY PRE_COD
 INTO :wPRE_COD, :wPRE_CLI,:wPRE_FRE,:wPRE_TIP,:wPRE_PAR,:wPRE_VAL,:wPRE_CON,
 :wPRE_DAT, :wPRE_PLA,:wPRE_ATU,:wPRE_ANT,:wPRE_PARTOT,:wPRE_HIS,:wPRE_CCUSTO,
 :wPRE_EMI,:wPRE_CAR,:wPRE_DIA, :WPRE_CCUSTO2, :WPRE_PLA2
 DO
 BEGIN
 wDTLIMITE = CAST("TODAY" AS DATE) + wPRE_ANT;
 wDTVENC = wPRE_DAT;
 wDTEMISSAO = wPRE_EMI;
 wPARCELASRESTANTES = wPRE_PAR;
 wPARCELAS = 1;
 
 WHILE ((wPARCELAS <= wPRE_PAR) AND (wDTLIMITE > wDTVENC)) DO
 BEGIN
 SELECT p_liber_prev FROM parametfin INTO Wp_liber_prev;
 IF (wPARCELASRESTANTES = 999) THEN
 BEGIN
 IF (Wp_liber_prev='E') THEN
 BEGIN
 EXECUTE PROCEDURE DecodeDate(wDTEMISSAO) RETURNING_VALUES(wYear, wMonth, wDay);
 END
 ELSE
 BEGIN
 EXECUTE PROCEDURE DecodeDate(wDTVENC) RETURNING_VALUES(wYear, wMonth, wDay);
 END
 IF (wPRE_FRE = 'DIA') THEN
 wMSG = CAST(wDay AS VARCHAR(2)) || "/" || CAST(wMonth AS VARCHAR(2)) || "/" || CAST(wYear AS CHAR(4));
 ELSE IF (wPRE_FRE = 'QUI') THEN
 BEGIN
 IF (wDay < 16) THEN
 wMSG = CAST(wMonth AS VARCHAR(2)) || "/" || CAST(wYear AS CHAR(4)) || '-' || 'A';
 ELSE
 wMSG = CAST(wMonth AS VARCHAR(2)) || "/" || CAST(wYear AS CHAR(4)) || '-' || 'B';
 END
 ELSE IF (wPRE_FRE = 'SMA') THEN
 BEGIN
 IF (wDay < 8) THEN
 wMSG = CAST(wMonth AS VARCHAR(2)) || "/" || CAST(wYear AS CHAR(4)) || '-' || 'A';
 ELSE IF (wDay < 15) THEN
 wMSG = CAST(wMonth AS VARCHAR(2)) || "/" || CAST(wYear AS CHAR(4)) || '-' || 'B';
 ELSE IF (wDay < 22) THEN
 wMSG = CAST(wMonth AS VARCHAR(2)) || "/" || CAST(wYear AS CHAR(4)) || '-' || 'C';
 ELSE IF (wDay < 29) THEN
 wMSG = CAST(wMonth AS VARCHAR(2)) || "/" || CAST(wYear AS CHAR(4)) || '-' || 'D';
 ELSE
 wMSG = CAST(wMonth AS VARCHAR(2)) || "/" || CAST(wYear AS CHAR(4)) || '-' || 'E';
 END
 ELSE
 wMSG = CAST(wMonth AS VARCHAR(2)) || "/" || CAST(wYear AS CHAR(4));
 END
 ELSE
 wMSG = CAST( CAST(wPRE_PARTOT - wPARCELASRESTANTES + 1 AS INTEGER) AS VARCHAR(5) ) || "/" || CAST(wPRE_PARTOT AS VARCHAR(3));
 
 IF (EXISTS(SELECT REC_COD FROM MVCOREC)) THEN
 SELECT MAX(REC_COD)+1 FROM MVCOREC INTO :wPROXNR;
 ELSE
 wPROXNR = 1;
 
 IF (EXISTS(SELECT TABELA FROM CODIGO WHERE UPPER(TABELA)="MVCOREC")) THEN
 UPDATE CODIGO SET ULTIMOCODIGO = :wPROXNR WHERE UPPER(TABELA)="MVCOREC";
 ELSE
 INSERT INTO CODIGO (TABELA, ULTIMOCODIGO) VALUES ("MVCOREC", :wPROXNR);
 
 INSERT INTO MVCOREC ( REC_COD, REC_DOC, REC_CCUSTO, REC_DAT, REC_TIP, REC_VEC, REC_VAL, REC_MOE, REC_COB, REC_CON, REC_CLI,
 REC_CAR, REC_EMI, REC_OBS, REC_BAI, REC_TOT, REC_EMINOM, REC_EMICPF, REC_EMIRG, REC_EMITEL, REC_DFP, REC_BOR, CLI_FIL, REC_COBRAVEL,
 REC_PLA, REC_DESAGIO, DAT_CAD, DAT_ATU, ATIVO, REC_BAIVER, REC_BAIFIL, REC_ORI, REC_VD1COD, REC_VOG, REC_CCUSTO2, REC_PLA2)
 VALUES (:wPROXNR, :wMSG, :wPRE_CCUSTO, NULL, :wPRE_TIP,:wDTVENC,:wPRE_VAL,NULL,NULL, :wPRE_CON, :wPRE_CLI,
 :wPRE_CAR,:wDTEMISSAO,:wPRE_HIS,"N", "T", NULL, NULL, NULL, NULL, "P",NULL, 1, "T",
 :wPRE_PLA, NULL, CAST("TODAY" AS DATE), CAST("TODAY" AS DATE), "A", "S", "N", (SELECT ALM_COD FROM CDALM2), 0, :wDTVENC, :WPRE_CCUSTO2, :WPRE_PLA2);
 
 EXECUTE PROCEDURE ADD_FREQUENCIA ( wDTVENC, wPRE_FRE) RETURNING_VALUES :wDTVENC;
 EXECUTE PROCEDURE DecodeDate(wDTVENC) RETURNING_VALUES(wYear, wMonth, wDay);
 EXECUTE PROCEDURE DAYSOFMONTH (wYear, wMonth) RETURNING_VALUES (wDIA_MES);
 
 IF ((wDIA_MES >= wPRE_DIA) AND (wDay <> wPRE_DIA) AND (wPRE_FRE<>'DIA') AND (wPRE_FRE<>'QUI') AND (wPRE_FRE<>'SMA') ) THEN
 EXECUTE PROCEDURE EncodeDate(wYear, wMonth, wPRE_DIA) RETURNING_VALUES(wDTVENC);
 
 EXECUTE PROCEDURE ADD_FREQUENCIA ( wDTEMISSAO, wPRE_FRE) RETURNING_VALUES :wDTEMISSAO;
 
 IF (wPARCELASRESTANTES<>999) THEN
 wPARCELASRESTANTES = wPARCELASRESTANTES - 1;
 wPARCELAS = wPARCELAS + 1;
 END
 
 IF (wPARCELASRESTANTES=0) THEN
 DELETE FROM CDPREREC WHERE PRE_COD=:wPRE_COD;
 ELSE
 UPDATE CDPREREC SET
 PRE_DAT = :wDTVENC,
 PRE_EMI = :wDTEMISSAO,
 PRE_PAR = :wPARCELASRESTANTES,
 PRE_ATU = "TODAY"
 WHERE PRE_COD=:wPRE_COD;
 
 END
 END
^

ALTER PROCEDURE BALANCETE_INDICE_DO_MES (
    PDATAINI TIMESTAMP,
    PDATAVALOR TIMESTAMP)
RETURNS (
    INDICE INTEGER)
AS
 DECLARE VARIABLE VDATA DATE;
 DECLARE VARIABLE VDIA VARCHAR(10);
 DECLARE VARIABLE VMES VARCHAR(10);
 DECLARE VARIABLE VANO VARCHAR(10);
 begin
 Indice = 0;
 if ((pDataIni is not null) and (pDataValor is not null) and (pDataIni <= pDataValor) and (pDataIni + 366 >= pDataValor)) then
 begin
 vDIA = '01';
 vData = pDataIni;
 while ((vDATA <= pDataValor) and (Indice <= 12)) do
 begin
 Indice = Indice + 1;
 if (extract(month from vData) = 12) then
 begin
 vMes = '01';
 vAno = Cast(cast(extract(year from vData)+1 as integer) as varchar(4));
 end
 else
 begin
 if (extract(month from vData) + 1 >= 10) then
 vMes = Cast(extract(month from vData) + 1 as integer);
 else
 vMes = '0' || Cast(extract(month from vData) + 1 as integer);
 vAno = Cast(extract(year from vData) as varchar(4));
 end
 vData = Cast(vMes || '/' || vDia || '/' || vAno as date);
 end
 end
 Suspend;
 end
^

ALTER PROCEDURE BALANCETE_MES_A_MES (
    PPLANO VARCHAR(40),
    PPROJETO VARCHAR(60),
    PFORNECATE VARCHAR(75),
    PFORNECDE VARCHAR(75),
    PCLIENTEATE VARCHAR(75),
    PCLIENTEDE VARCHAR(75),
    PCONTADE VARCHAR(30),
    PCONTAATE VARCHAR(30),
    PCCUSTODE VARCHAR(40),
    PCCUSTOATE VARCHAR(40),
    PDATAINI TIMESTAMP,
    PDATAFIN TIMESTAMP)
RETURNS (
    RMESES INTEGER,
    RMES1 DOUBLE PRECISION,
    RMES2 DOUBLE PRECISION,
    RMES3 DOUBLE PRECISION,
    RMES4 DOUBLE PRECISION,
    RMES5 DOUBLE PRECISION,
    RMES6 DOUBLE PRECISION,
    RMES7 DOUBLE PRECISION,
    RMES8 DOUBLE PRECISION,
    RMES9 DOUBLE PRECISION,
    RMES10 DOUBLE PRECISION,
    RMES11 DOUBLE PRECISION,
    RMES12 DOUBLE PRECISION,
    RTOTAL DOUBLE PRECISION)
AS
 DECLARE VARIABLE VDIA INTEGER;
 DECLARE VARIABLE VMES INTEGER;
 DECLARE VARIABLE VANO INTEGER;
 DECLARE VARIABLE VCNT INTEGER;
 DECLARE VARIABLE VSOMA DOUBLE PRECISION;
 DECLARE VARIABLE VTOTAL DOUBLE PRECISION;
 DECLARE VARIABLE VDATAINI DATE;
 DECLARE VARIABLE VDATAFIN DATE;
 BEGIN
 IF (pContaAte IS NULL) THEN
 pContaAte = pContaDe;
 IF (pCCustoAte IS NULL) THEN
 pCCustoAte = pCCustoDe;
 IF (pClienteAte IS NULL) THEN
 pClienteAte = pClienteDe;
 IF (pFornecAte IS NULL) THEN
 pFornecAte = pFornecDe;
 rMes1 = 0;
 rMes2 = 0;
 rMes3 = 0;
 rMes4 = 0;
 rMes5 = 0;
 rMes6 = 0;
 rMes7 = 0;
 rMes8 = 0;
 rMes9 = 0;
 rMes10 = 0;
 rMes11 = 0;
 rMes12 = 0;
 rTotal = 0;
 vCnt = 0;
 EXECUTE PROCEDURE DecodeDate(pDataIni) RETURNING_VALUES(vAno, vMes, vDia);
 EXECUTE PROCEDURE EncodeDate(vAno, vMes, 01) RETURNING_VALUES(vDataIni);
 WHILE (vDataIni <= pDataFin) DO
 BEGIN
 vTotal = 0;
 vCnt = vCnt + 1;
 EXECUTE PROCEDURE DecodeDate(vDataIni) RETURNING_VALUES(vAno, vMes, vDia);
 EXECUTE PROCEDURE DaysOfMonth(vAno, vMes) RETURNING_VALUES(vDia);
 EXECUTE PROCEDURE EncodeDate(vAno, vMes, vDia) RETURNING_VALUES(vDataFin);
 FOR
 SELECT SUM(lge_val)
 FROM MVLGE
 WHERE (MVLGE.LGE_TIP <> "D" OR MVLGE.LGE_TIP IS NULL)
 AND MVLGE.LGE_PLA LIKE :pPLANO || "%"
 AND MVLGE.LGE_OPE >= :vDATAINI
 AND MVLGE.LGE_OPE <= :vDATAFIN
 AND ((:pContaDe IS NULL) OR (lge_con IN (SELECT con_cod FROM cdcon WHERE con_nom >= :pContaDe AND con_nom <= :pContaAte)))
 AND ((:pCCustoDe IS NULL) OR ((mvlge.lge_ccusto >= :pCCustoDe) AND (mvlge.lge_ccusto <= :pCCustoAte)))
 AND ((:pClienteDe IS NULL) OR (lge_cli IN (SELECT cli_cod FROM cdcli WHERE cli_red >= :pClienteDe AND cli_red <= :pClienteAte)))
 AND ((:pFornecDe IS NULL) OR (lge_for IN (SELECT for_cod FROM cdfor WHERE for_red >= :pFornecDe AND for_red <= :pFornecAte)))
 AND ((:pProjeto IS NULL) OR (lge_proj2 IN (SELECT proj2_cod FROM MVLGE,cdproj2,cdproj WHERE lge_proj2 = proj2_cod AND proj_nom = :pProjeto AND proj2_proj = proj_cod)))
 UNION ALL
 SELECT SUM(dob_val)
 FROM MVLGED
 WHERE MVLGED.DOB_PLA LIKE :pPLANO || "%"
 AND MVLGED.DOB_OPE >= :vDATAINI
 AND MVLGED.DOB_OPE <= :vDATAFIN
 AND ((:pContaDe IS NULL) OR (dob_con IN (SELECT con_cod FROM cdcon WHERE con_nom >= :pContaDe AND con_nom <= :pContaAte)))
 AND ((:pCCustoDe IS NULL) OR ((mvlged.dob_ccusto >= :pCCustoDe) AND (mvlged.dob_ccusto <= :pCCustoAte)))
 AND ((:pClienteDe IS NULL) OR (dob_cli IN (SELECT cli_cod FROM cdcli WHERE cli_red >= :pClienteDe AND cli_red <= :pClienteAte)))
 AND ((:pFornecDe IS NULL) OR (dob_for IN (SELECT for_cod FROM cdfor WHERE for_red >= :pFornecDe AND for_red <= :pFornecAte)))
 AND ((:pProjeto IS NULL) OR (dob_proj2 IN (SELECT proj2_cod FROM mvlged,cdproj2,cdproj WHERE dob_proj2 = proj2_cod AND proj_nom = :pProjeto AND proj2_proj = proj_cod)))
 UNION ALL
 SELECT SUM(lge_val)
 FROM MORLGE
 WHERE (MORLGE.LGE_TIP <> "D" OR MORLGE.LGE_TIP IS NULL)
 AND MORLGE.LGE_PLA LIKE :pPLANO || "%"
 AND MORLGE.LGE_OPE >= :vDATAINI
 AND MORLGE.LGE_OPE <= :vDATAFIN
 AND ((:pContaDe IS NULL) OR (lge_con IN (SELECT con_cod FROM cdcon WHERE con_nom >= :pContaDe AND con_nom <= :pContaAte)))
 AND ((:pCCustoDe IS NULL) OR ((morlge.lge_ccusto >= :pCCustoDe) AND (morlge.lge_ccusto <= :pCCustoAte)))
 AND ((:pClienteDe IS NULL) OR (lge_cli IN (SELECT cli_cod FROM cdcli WHERE cli_red >= :pClienteDe AND cli_red <= :pClienteAte)))
 AND ((:pFornecDe IS NULL) OR (lge_for IN (SELECT for_cod FROM cdfor WHERE for_red >= :pFornecDe AND for_red <= :pFornecAte)))
 AND ((:pProjeto IS NULL) OR (lge_proj2 IN (SELECT proj2_cod FROM morlge,cdproj2,cdproj WHERE lge_proj2 = proj2_cod AND proj_nom = :pProjeto AND proj2_proj = proj_cod)))
 UNION ALL
 SELECT SUM(dob_val)
 FROM MORLGED
 WHERE MORLGED.DOB_PLA LIKE :pPLANO || "%"
 AND MORLGED.DOB_OPE >= :vDATAINI
 AND MORLGED.DOB_OPE <= :vDATAFIN
 AND ((:pContaDe IS NULL) OR (dob_con IN (SELECT con_cod FROM cdcon WHERE con_nom >= :pContaDe AND con_nom <= :pContaAte)))
 AND ((:pCCustoDe IS NULL) OR ((morlged.dob_ccusto >= :pCCustoDe) AND (morlged.dob_ccusto <= :pCCustoAte)))
 AND ((:pClienteDe IS NULL) OR (dob_cli IN (SELECT cli_cod FROM cdcli WHERE cli_red >= :pClienteDe AND cli_red <= :pClienteAte)))
 AND ((:pFornecDe IS NULL) OR (dob_for IN (SELECT for_cod FROM cdfor WHERE for_red >= :pFornecDe AND for_red <= :pFornecAte)))
 AND ((:pProjeto IS NULL) OR (dob_proj2 IN (SELECT proj2_cod FROM morlged,cdproj2,cdproj WHERE dob_proj2 = proj2_cod AND proj_nom = :pProjeto AND proj2_proj = proj_cod)))
 INTO vSoma DO
 IF (NOT vSoma IS NULL) THEN
 vTotal = vSoma + vTotal;
 IF (vCnt = 1) THEN
 rMes1 = vTotal;
 ELSE IF (vCnt = 2) THEN
 rMes2 = vTotal;
 ELSE IF (vCnt = 3) THEN
 rMes3 = vTotal;
 ELSE IF (vCnt = 4) THEN
 rMes4 = vTotal;
 ELSE IF (vCnt = 5) THEN
 rMes5 = vTotal;
 ELSE IF (vCnt = 6) THEN
 rMes6 = vTotal;
 ELSE IF (vCnt = 7) THEN
 rMes7 = vTotal;
 ELSE IF (vCnt = 8) THEN
 rMes8 = vTotal;
 ELSE IF (vCnt = 9) THEN
 rMes9 = vTotal;
 ELSE IF (vCnt = 10) THEN
 rMes10 = vTotal;
 ELSE IF (vCnt = 11) THEN
 rMes11 = vTotal;
 ELSE IF (vCnt = 12) THEN
 rMes12 = vTotal;
 rTotal = rTotal + vTotal;
 vDataIni = vDataFin + 1;
 rMeses = vCnt;
 END
 SUSPEND;
 END
^

ALTER PROCEDURE BALANCETE_MES_A_MES_EMI (
    PPLANO VARCHAR(40),
    PPROJETO VARCHAR(60),
    PFORNECATE VARCHAR(75),
    PFORNECDE VARCHAR(75),
    PCLIENTEATE VARCHAR(75),
    PCLIENTEDE VARCHAR(75),
    PCONTADE VARCHAR(30),
    PCONTAATE VARCHAR(30),
    PCCUSTODE VARCHAR(40),
    PCCUSTOATE VARCHAR(40),
    PDATAINI TIMESTAMP,
    PDATAFIN TIMESTAMP)
RETURNS (
    RMESES INTEGER,
    RMES1 DOUBLE PRECISION,
    RMES2 DOUBLE PRECISION,
    RMES3 DOUBLE PRECISION,
    RMES4 DOUBLE PRECISION,
    RMES5 DOUBLE PRECISION,
    RMES6 DOUBLE PRECISION,
    RMES7 DOUBLE PRECISION,
    RMES8 DOUBLE PRECISION,
    RMES9 DOUBLE PRECISION,
    RMES10 DOUBLE PRECISION,
    RMES11 DOUBLE PRECISION,
    RMES12 DOUBLE PRECISION,
    RTOTAL DOUBLE PRECISION)
AS
 DECLARE VARIABLE VDIA INTEGER;
 DECLARE VARIABLE VMES INTEGER;
 DECLARE VARIABLE VANO INTEGER;
 DECLARE VARIABLE VCNT INTEGER;
 DECLARE VARIABLE VSOMA DOUBLE PRECISION;
 DECLARE VARIABLE VTOTAL DOUBLE PRECISION;
 DECLARE VARIABLE VDATAINI DATE;
 DECLARE VARIABLE VDATAFIN DATE;
 BEGIN
 IF (pContaAte IS NULL) THEN
 pContaAte = pContaDe;
 IF (pCCustoAte IS NULL) THEN
 pCCustoAte = pCCustoDe;
 IF (pClienteAte IS NULL) THEN
 pClienteAte = pClienteDe;
 IF (pFornecAte IS NULL) THEN
 pFornecAte = pFornecDe;
 rMes1 = 0;
 rMes2 = 0;
 rMes3 = 0;
 rMes4 = 0;
 rMes5 = 0;
 rMes6 = 0;
 rMes7 = 0;
 rMes8 = 0;
 rMes9 = 0;
 rMes10 = 0;
 rMes11 = 0;
 rMes12 = 0;
 rTotal = 0;
 vCnt = 0;
 EXECUTE PROCEDURE DecodeDate(pDataIni) RETURNING_VALUES(vAno, vMes, vDia);
 EXECUTE PROCEDURE EncodeDate(vAno, vMes, 01) RETURNING_VALUES(vDataIni);
 WHILE (vDataIni <= pDataFin) DO
 BEGIN
 vTotal = 0;
 vCnt = vCnt + 1;
 EXECUTE PROCEDURE DecodeDate(vDataIni) RETURNING_VALUES(vAno, vMes, vDia);
 EXECUTE PROCEDURE DaysOfMonth(vAno, vMes) RETURNING_VALUES(vDia);
 EXECUTE PROCEDURE EncodeDate(vAno, vMes, vDia) RETURNING_VALUES(vDataFin);
 FOR
 SELECT SUM(lge_val)
 FROM MVLGE
 WHERE (MVLGE.LGE_TIP <> "D" OR MVLGE.LGE_TIP IS NULL)
 AND MVLGE.LGE_PLA LIKE :pPLANO || "%"
 AND MVLGE.LGE_EMI >= :vDATAINI
 AND MVLGE.LGE_EMI <= :vDATAFIN
 AND ((:pContaDe IS NULL) OR (lge_con IN (SELECT con_cod FROM cdcon WHERE con_nom >= :pContaDe AND con_nom <= :pContaAte)))
 AND ((:pCCustoDe IS NULL) OR ((mvlge.lge_ccusto >= :pCCustoDe) AND (mvlge.lge_ccusto <= :pCCustoAte)))
 AND ((:pClienteDe IS NULL) OR (lge_cli IN (SELECT cli_cod FROM cdcli WHERE cli_red >= :pClienteDe AND cli_red <= :pClienteAte)))
 AND ((:pFornecDe IS NULL) OR (lge_for IN (SELECT for_cod FROM cdfor WHERE for_red >= :pFornecDe AND for_red <= :pFornecAte)))
 AND ((:pProjeto IS NULL) OR (lge_proj2 IN (SELECT proj2_cod FROM MVLGE,cdproj2,cdproj WHERE lge_proj2 = proj2_cod AND proj_nom = :pProjeto AND proj2_proj = proj_cod)))
 UNION ALL
 SELECT SUM(dob_val)
 FROM MVLGED
 WHERE MVLGED.DOB_PLA LIKE :pPLANO || "%"
 AND MVLGED.DOB_EMI >= :vDATAINI
 AND MVLGED.DOB_EMI <= :vDATAFIN
 AND ((:pContaDe IS NULL) OR (dob_con IN (SELECT con_cod FROM cdcon WHERE con_nom >= :pContaDe AND con_nom <= :pContaAte)))
 AND ((:pCCustoDe IS NULL) OR ((mvlged.dob_ccusto >= :pCCustoDe) AND (mvlged.dob_ccusto <= :pCCustoAte)))
 AND ((:pClienteDe IS NULL) OR (dob_cli IN (SELECT cli_cod FROM cdcli WHERE cli_red >= :pClienteDe AND cli_red <= :pClienteAte)))
 AND ((:pFornecDe IS NULL) OR (dob_for IN (SELECT for_cod FROM cdfor WHERE for_red >= :pFornecDe AND for_red <= :pFornecAte)))
 AND ((:pProjeto IS NULL) OR (dob_proj2 IN (SELECT proj2_cod FROM mvlged,cdproj2,cdproj WHERE dob_proj2 = proj2_cod AND proj_nom = :pProjeto AND proj2_proj = proj_cod)))
 UNION ALL
 SELECT SUM(lge_val)
 FROM MORLGE
 WHERE (MORLGE.LGE_TIP <> "D" OR MORLGE.LGE_TIP IS NULL)
 AND MORLGE.LGE_PLA LIKE :pPLANO || "%"
 AND MORLGE.LGE_EMI >= :vDATAINI
 AND MORLGE.LGE_EMI <= :vDATAFIN
 AND ((:pContaDe IS NULL) OR (lge_con IN (SELECT con_cod FROM cdcon WHERE con_nom >= :pContaDe AND con_nom <= :pContaAte)))
 AND ((:pCCustoDe IS NULL) OR ((morlge.lge_ccusto >= :pCCustoDe) AND (morlge.lge_ccusto <= :pCCustoAte)))
 AND ((:pClienteDe IS NULL) OR (lge_cli IN (SELECT cli_cod FROM cdcli WHERE cli_red >= :pClienteDe AND cli_red <= :pClienteAte)))
 AND ((:pFornecDe IS NULL) OR (lge_for IN (SELECT for_cod FROM cdfor WHERE for_red >= :pFornecDe AND for_red <= :pFornecAte)))
 AND ((:pProjeto IS NULL) OR (lge_proj2 IN (SELECT proj2_cod FROM morlge,cdproj2,cdproj WHERE lge_proj2 = proj2_cod AND proj_nom = :pProjeto AND proj2_proj = proj_cod)))
 UNION ALL
 SELECT SUM(dob_val)
 FROM MORLGED
 WHERE MORLGED.DOB_PLA LIKE :pPLANO || "%"
 AND MORLGED.DOB_EMI >= :vDATAINI
 AND MORLGED.DOB_EMI <= :vDATAFIN
 AND ((:pContaDe IS NULL) OR (dob_con IN (SELECT con_cod FROM cdcon WHERE con_nom >= :pContaDe AND con_nom <= :pContaAte)))
 AND ((:pCCustoDe IS NULL) OR ((morlged.dob_ccusto >= :pCCustoDe) AND (morlged.dob_ccusto <= :pCCustoAte)))
 AND ((:pClienteDe IS NULL) OR (dob_cli IN (SELECT cli_cod FROM cdcli WHERE cli_red >= :pClienteDe AND cli_red <= :pClienteAte)))
 AND ((:pFornecDe IS NULL) OR (dob_for IN (SELECT for_cod FROM cdfor WHERE for_red >= :pFornecDe AND for_red <= :pFornecAte)))
 AND ((:pProjeto IS NULL) OR (dob_proj2 IN (SELECT proj2_cod FROM morlged,cdproj2,cdproj WHERE dob_proj2 = proj2_cod AND proj_nom = :pProjeto AND proj2_proj = proj_cod)))
 UNION ALL
 SELECT SUM(REC_VAL)
 FROM MVCOREC
 WHERE MVCOREC.REC_PLA LIKE :PPLANO || "%"
 AND MVCOREC.REC_EMI >= :VDATAINI
 AND MVCOREC.REC_EMI <= :VDATAFIN
 AND ((:PCONTADE IS NULL) OR (REC_CON IN (SELECT CON_COD FROM CDCON WHERE CON_NOM >= :PCONTADE AND CON_NOM <= :PCONTAATE)))
 AND ((:PCCUSTODE IS NULL) OR ((MVCOREC.REC_CCUSTO >= :PCCUSTODE) AND (MVCOREC.REC_CCUSTO <= :PCCUSTOATE)))
 AND ((:PCLIENTEDE IS NULL) OR (REC_CLI IN (SELECT CLI_COD FROM CDCLI WHERE CLI_RED >= :PCLIENTEDE AND CLI_RED <= :PCLIENTEATE)))
 AND ((:PPROJETO IS NULL) OR (REC_PROJ2 IN (SELECT PROJ2_COD FROM MVCOREC,CDPROJ2,CDPROJ WHERE REC_PROJ2 = PROJ2_COD AND PROJ_NOM = :PPROJETO AND PROJ2_PROJ = PROJ_COD)))
 UNION ALL
 SELECT SUM(PAG_VAL)*-1
 FROM MVCOPAG
 WHERE MVCOPAG.PAG_PLA LIKE :PPLANO || "%"
 AND MVCOPAG.PAG_EMI >= :VDATAINI
 AND MVCOPAG.PAG_EMI <= :VDATAFIN
 AND ((:PCONTADE IS NULL) OR (PAG_CON IN (SELECT CON_COD FROM CDCON WHERE CON_NOM >= :PCONTADE AND CON_NOM <= :PCONTAATE)))
 AND ((:PCCUSTODE IS NULL) OR ((MVCOPAG.PAG_CCUSTO >= :PCCUSTODE) AND (MVCOPAG.PAG_CCUSTO <= :PCCUSTOATE)))
 AND ((:PFORNECDE IS NULL) OR (PAG_FOR IN (SELECT FOR_COD FROM CDFOR WHERE FOR_RED >= :PFORNECDE AND FOR_RED <= :PFORNECATE)))
 AND ((:PPROJETO IS NULL) OR (PAG_PROJ2 IN (SELECT PROJ2_COD FROM MVCOPAG,CDPROJ2,CDPROJ WHERE PAG_PROJ2 = PROJ2_COD AND PROJ_NOM = :PPROJETO AND PROJ2_PROJ = PROJ_COD)))
 INTO vSoma DO
 IF (NOT vSoma IS NULL) THEN
 vTotal = vSoma + vTotal;
 IF (vCnt = 1) THEN
 rMes1 = vTotal;
 ELSE IF (vCnt = 2) THEN
 rMes2 = vTotal;
 ELSE IF (vCnt = 3) THEN
 rMes3 = vTotal;
 ELSE IF (vCnt = 4) THEN
 rMes4 = vTotal;
 ELSE IF (vCnt = 5) THEN
 rMes5 = vTotal;
 ELSE IF (vCnt = 6) THEN
 rMes6 = vTotal;
 ELSE IF (vCnt = 7) THEN
 rMes7 = vTotal;
 ELSE IF (vCnt = 8) THEN
 rMes8 = vTotal;
 ELSE IF (vCnt = 9) THEN
 rMes9 = vTotal;
 ELSE IF (vCnt = 10) THEN
 rMes10 = vTotal;
 ELSE IF (vCnt = 11) THEN
 rMes11 = vTotal;
 ELSE IF (vCnt = 12) THEN
 rMes12 = vTotal;
 rTotal = rTotal + vTotal;
 vDataIni = vDataFin + 1;
 rMeses = vCnt;
 END
 suspend;
 END
^

ALTER PROCEDURE BALANCETE_RESUMIDO (
    PPROJETODE VARCHAR(60),
    PPROJETOATE VARCHAR(60),
    PPLANODE VARCHAR(40),
    PPLANOATE VARCHAR(40),
    PPLANO2DE VARCHAR(40),
    PPLANO2ATE VARCHAR(40),
    PFORNECATE VARCHAR(75),
    PFORNECDE VARCHAR(75),
    PCLIENTEATE VARCHAR(75),
    PCLIENTEDE VARCHAR(75),
    PCONTADE VARCHAR(30),
    PCONTAATE VARCHAR(30),
    PCCUSTODE VARCHAR(40),
    PCCUSTOATE VARCHAR(40),
    PCCUSTO2DE VARCHAR(40),
    PCCUSTO2ATE VARCHAR(40),
    PDATAINI TIMESTAMP,
    PDATAFIN TIMESTAMP,
    PCOMPETENCIA INTEGER,
    PUSAPLANO2 INTEGER,
    PQUEBRACUSTOPROJ INTEGER,
    PFILTRONIVEL INTEGER,
    PMESAMES INTEGER)
RETURNS (
    PLA_COD VARCHAR(40),
    PLA_NOM VARCHAR(30),
    CUS_NOM VARCHAR(60),
    TOTAL DOUBLE PRECISION,
    NMESES INTEGER,
    RMES1 DOUBLE PRECISION,
    RMES2 DOUBLE PRECISION,
    RMES3 DOUBLE PRECISION,
    RMES4 DOUBLE PRECISION,
    RMES5 DOUBLE PRECISION,
    RMES6 DOUBLE PRECISION,
    RMES7 DOUBLE PRECISION,
    RMES8 DOUBLE PRECISION,
    RMES9 DOUBLE PRECISION,
    RMES10 DOUBLE PRECISION,
    RMES11 DOUBLE PRECISION,
    RMES12 DOUBLE PRECISION)
AS
 declare variable vtotalabs double precision;
 declare variable vsoma double precision;
 declare variable vpla_cod varchar(40);
 declare variable vpla_nom varchar(30);
 declare variable vcus_nom varchar(60);
 declare variable vradical varchar(40);
 declare variable vnivel integer;
 declare variable vdata date;
 declare variable vacum1 double precision;
 declare variable vacum2 double precision;
 declare variable vacum3 double precision;
 declare variable vacum4 double precision;
 declare variable vacum5 double precision;
 declare variable vacum6 double precision;
 declare variable vacum7 double precision;
 declare variable vacum8 double precision;
 declare variable vacum9 double precision;
 declare variable vacum10 double precision;
 declare variable vacumabs1 double precision;
 declare variable vacumabs2 double precision;
 declare variable vacumabs3 double precision;
 declare variable vacumabs4 double precision;
 declare variable vacumabs5 double precision;
 declare variable vacumabs6 double precision;
 declare variable vacumabs7 double precision;
 declare variable vacumabs8 double precision;
 declare variable vacumabs9 double precision;
 declare variable vacumabs10 double precision;
 declare variable vacum1_m1 double precision;
 declare variable vacum2_m1 double precision;
 declare variable vacum3_m1 double precision;
 declare variable vacum4_m1 double precision;
 declare variable vacum5_m1 double precision;
 declare variable vacum6_m1 double precision;
 declare variable vacum7_m1 double precision;
 declare variable vacum8_m1 double precision;
 declare variable vacum9_m1 double precision;
 declare variable vacum10_m1 double precision;
 declare variable vacum1_m2 double precision;
 declare variable vacum2_m2 double precision;
 declare variable vacum3_m2 double precision;
 declare variable vacum4_m2 double precision;
 declare variable vacum5_m2 double precision;
 declare variable vacum6_m2 double precision;
 declare variable vacum7_m2 double precision;
 declare variable vacum8_m2 double precision;
 declare variable vacum9_m2 double precision;
 declare variable vacum10_m2 double precision;
 declare variable vacum1_m3 double precision;
 declare variable vacum2_m3 double precision;
 declare variable vacum3_m3 double precision;
 declare variable vacum4_m3 double precision;
 declare variable vacum5_m3 double precision;
 declare variable vacum6_m3 double precision;
 declare variable vacum7_m3 double precision;
 declare variable vacum8_m3 double precision;
 declare variable vacum9_m3 double precision;
 declare variable vacum10_m3 double precision;
 declare variable vacum1_m4 double precision;
 declare variable vacum2_m4 double precision;
 declare variable vacum3_m4 double precision;
 declare variable vacum4_m4 double precision;
 declare variable vacum5_m4 double precision;
 declare variable vacum6_m4 double precision;
 declare variable vacum7_m4 double precision;
 declare variable vacum8_m4 double precision;
 declare variable vacum9_m4 double precision;
 declare variable vacum10_m4 double precision;
 declare variable vacum1_m5 double precision;
 declare variable vacum2_m5 double precision;
 declare variable vacum3_m5 double precision;
 declare variable vacum4_m5 double precision;
 declare variable vacum5_m5 double precision;
 declare variable vacum6_m5 double precision;
 declare variable vacum7_m5 double precision;
 declare variable vacum8_m5 double precision;
 declare variable vacum9_m5 double precision;
 declare variable vacum10_m5 double precision;
 declare variable vacum1_m6 double precision;
 declare variable vacum2_m6 double precision;
 declare variable vacum3_m6 double precision;
 declare variable vacum4_m6 double precision;
 declare variable vacum5_m6 double precision;
 declare variable vacum6_m6 double precision;
 declare variable vacum7_m6 double precision;
 declare variable vacum8_m6 double precision;
 declare variable vacum9_m6 double precision;
 declare variable vacum10_m6 double precision;
 declare variable vacum1_m7 double precision;
 declare variable vacum2_m7 double precision;
 declare variable vacum3_m7 double precision;
 declare variable vacum4_m7 double precision;
 declare variable vacum5_m7 double precision;
 declare variable vacum6_m7 double precision;
 declare variable vacum7_m7 double precision;
 declare variable vacum8_m7 double precision;
 declare variable vacum9_m7 double precision;
 declare variable vacum10_m7 double precision;
 declare variable vacum1_m8 double precision;
 declare variable vacum2_m8 double precision;
 declare variable vacum3_m8 double precision;
 declare variable vacum4_m8 double precision;
 declare variable vacum5_m8 double precision;
 declare variable vacum6_m8 double precision;
 declare variable vacum7_m8 double precision;
 declare variable vacum8_m8 double precision;
 declare variable vacum9_m8 double precision;
 declare variable vacum10_m8 double precision;
 declare variable vacum1_m9 double precision;
 declare variable vacum2_m9 double precision;
 declare variable vacum3_m9 double precision;
 declare variable vacum4_m9 double precision;
 declare variable vacum5_m9 double precision;
 declare variable vacum6_m9 double precision;
 declare variable vacum7_m9 double precision;
 declare variable vacum8_m9 double precision;
 declare variable vacum9_m9 double precision;
 declare variable vacum10_m9 double precision;
 declare variable vacum1_m10 double precision;
 declare variable vacum2_m10 double precision;
 declare variable vacum3_m10 double precision;
 declare variable vacum4_m10 double precision;
 declare variable vacum5_m10 double precision;
 declare variable vacum6_m10 double precision;
 declare variable vacum7_m10 double precision;
 declare variable vacum8_m10 double precision;
 declare variable vacum9_m10 double precision;
 declare variable vacum10_m10 double precision;
 declare variable vacum1_m11 double precision;
 declare variable vacum2_m11 double precision;
 declare variable vacum3_m11 double precision;
 declare variable vacum4_m11 double precision;
 declare variable vacum5_m11 double precision;
 declare variable vacum6_m11 double precision;
 declare variable vacum7_m11 double precision;
 declare variable vacum8_m11 double precision;
 declare variable vacum9_m11 double precision;
 declare variable vacum10_m11 double precision;
 declare variable vacum1_m12 double precision;
 declare variable vacum2_m12 double precision;
 declare variable vacum3_m12 double precision;
 declare variable vacum4_m12 double precision;
 declare variable vacum5_m12 double precision;
 declare variable vacum6_m12 double precision;
 declare variable vacum7_m12 double precision;
 declare variable vacum8_m12 double precision;
 declare variable vacum9_m12 double precision;
 declare variable vacum10_m12 double precision;
 declare variable vhabilitaplano1 varchar(10);
 declare variable vhabilitaplano2 varchar(10);
 declare variable vhabilitacusto1 varchar(10);
 declare variable vhabilitacusto2 varchar(10);
 declare variable vhabilitaprojeto varchar(10);
 declare variable vindice integer;
 Begin
 if (pPlanoAte is Null) then
 pPlanoAte = pPlanoDe;
 if (pPlano2Ate is Null) then
 pPlano2Ate = pPlano2De;
 if (pCCustoAte is Null) then
 pCCustoAte = pCCustoDe;
 if (pCCusto2Ate is Null) then
 pCCusto2Ate = pCCusto2De;
 if (pContaAte is Null) then
 pContaAte = pContaDe;
 if (pClienteAte is Null) then
 pClienteAte = pClienteDe;
 if (pFornecAte is Null) then
 pFornecAte = pFornecDe;
 if (pProjetoAte is Null) then
 pProjetoAte = pProjetoDe;
 if (pCompetencia is Null) then
 pCompetencia = 0;
 if (pMESAMES is Null) then
 pMESAMES = 0;
 
 
 if ((pFiltroNivel is null) or (pFiltroNivel < 1) or (pFiltroNivel > 10)) then
 pFiltroNivel = 10;
 
 VHABILITAPLANO2 = null;
 VHABILITAPLANO1 = null;
 if (pusaplano2 = 1) then
 VHABILITAPLANO2 = '';
 else
 VHABILITAPLANO1 = '';
 
 VHABILITACUSTO1 = null;
 VHABILITACUSTO2 = null;
 VHABILITAPROJETO = null;
 if (PQUEBRACUSTOPROJ = 1) then
 VHABILITACUSTO1 = '';
 if (PQUEBRACUSTOPROJ = 2) then
 VHABILITACUSTO2 = '';
 if (PQUEBRACUSTOPROJ = 3) then
 VHABILITAPROJETO = '';
 
 Total = 0;
 vTotalAbs = 0;
 vAcum1 = 0;
 vAcum2 = 0;
 vAcum3 = 0;
 vAcum4 = 0;
 vAcum5 = 0;
 vAcum6 = 0;
 vAcum7 = 0;
 vAcum8 = 0;
 vAcum9 = 0;
 vAcum10 = 0;
 
 vAcumAbs1 = 0;
 vAcumAbs2 = 0;
 vAcumAbs3 = 0;
 vAcumAbs4 = 0;
 vAcumAbs5 = 0;
 vAcumAbs6 = 0;
 vAcumAbs7 = 0;
 vAcumAbs8 = 0;
 vAcumAbs9 = 0;
 vAcumAbs10 = 0;
 
 if (pMESAMES = 1) then
 begin
 vAcum1_M1 = 0;
 vAcum2_M1 = 0;
 vAcum3_M1 = 0;
 vAcum4_M1 = 0;
 vAcum5_M1 = 0;
 vAcum6_M1 = 0;
 vAcum7_M1 = 0;
 vAcum8_M1 = 0;
 vAcum9_M1 = 0;
 vAcum9_M1 = 0;
 vAcum10_M1 = 0;
 
 vAcum1_M2 = 0;
 vAcum2_M2 = 0;
 vAcum3_M2 = 0;
 vAcum4_M2 = 0;
 vAcum5_M2 = 0;
 vAcum6_M2 = 0;
 vAcum7_M2 = 0;
 vAcum8_M2 = 0;
 vAcum9_M2 = 0;
 vAcum9_M2 = 0;
 vAcum10_M2 = 0;
 
 vAcum1_M3 = 0;
 vAcum2_M3 = 0;
 vAcum3_M3 = 0;
 vAcum4_M3 = 0;
 vAcum5_M3 = 0;
 vAcum6_M3 = 0;
 vAcum7_M3 = 0;
 vAcum8_M3 = 0;
 vAcum9_M3 = 0;
 vAcum9_M3 = 0;
 vAcum10_M3 = 0;
 
 vAcum1_M4 = 0;
 vAcum2_M4 = 0;
 vAcum3_M4 = 0;
 vAcum4_M4 = 0;
 vAcum5_M4 = 0;
 vAcum6_M4 = 0;
 vAcum7_M4 = 0;
 vAcum8_M4 = 0;
 vAcum9_M4 = 0;
 vAcum9_M4 = 0;
 vAcum10_M4 = 0;
 
 vAcum1_M5 = 0;
 vAcum2_M5 = 0;
 vAcum3_M5 = 0;
 vAcum4_M5 = 0;
 vAcum5_M5 = 0;
 vAcum6_M5 = 0;
 vAcum7_M5 = 0;
 vAcum8_M5 = 0;
 vAcum9_M5 = 0;
 vAcum9_M5 = 0;
 vAcum10_M5 = 0;
 
 vAcum1_M6 = 0;
 vAcum2_M6 = 0;
 vAcum3_M6 = 0;
 vAcum4_M6 = 0;
 vAcum5_M6 = 0;
 vAcum6_M6 = 0;
 vAcum7_M6 = 0;
 vAcum8_M6 = 0;
 vAcum9_M6 = 0;
 vAcum9_M6 = 0;
 vAcum10_M6 = 0;
 
 vAcum1_M7 = 0;
 vAcum2_M7 = 0;
 vAcum3_M7 = 0;
 vAcum4_M7 = 0;
 vAcum5_M7 = 0;
 vAcum6_M7 = 0;
 vAcum7_M7 = 0;
 vAcum8_M7 = 0;
 vAcum9_M7 = 0;
 vAcum9_M7 = 0;
 vAcum10_M7 = 0;
 
 vAcum1_M8 = 0;
 vAcum2_M8 = 0;
 vAcum3_M8 = 0;
 vAcum4_M8 = 0;
 vAcum5_M8 = 0;
 vAcum6_M8 = 0;
 vAcum7_M8 = 0;
 vAcum8_M8 = 0;
 vAcum9_M8 = 0;
 vAcum9_M8 = 0;
 vAcum10_M8 = 0;
 
 vAcum1_M9 = 0;
 vAcum2_M9 = 0;
 vAcum3_M9 = 0;
 vAcum4_M9 = 0;
 vAcum5_M9 = 0;
 vAcum6_M9 = 0;
 vAcum7_M9 = 0;
 vAcum8_M9 = 0;
 vAcum9_M9 = 0;
 vAcum9_M9 = 0;
 vAcum10_M9 = 0;
 
 vAcum1_M10 = 0;
 vAcum2_M10 = 0;
 vAcum3_M10 = 0;
 vAcum4_M10 = 0;
 vAcum5_M10 = 0;
 vAcum6_M10 = 0;
 vAcum7_M10 = 0;
 vAcum8_M10 = 0;
 vAcum9_M10 = 0;
 vAcum9_M10 = 0;
 vAcum10_M10 = 0;
 
 vAcum1_M11 = 0;
 vAcum2_M11 = 0;
 vAcum3_M11 = 0;
 vAcum4_M11 = 0;
 vAcum5_M11 = 0;
 vAcum6_M11 = 0;
 vAcum7_M11 = 0;
 vAcum8_M11 = 0;
 vAcum9_M11 = 0;
 vAcum9_M11 = 0;
 vAcum10_M11 = 0;
 
 vAcum1_M12 = 0;
 vAcum2_M12 = 0;
 vAcum3_M12 = 0;
 vAcum4_M12 = 0;
 vAcum5_M12 = 0;
 vAcum6_M12 = 0;
 vAcum7_M12 = 0;
 vAcum8_M12 = 0;
 vAcum9_M12 = 0;
 vAcum9_M12 = 0;
 vAcum10_M12 = 0;
 
 end
 
 Execute procedure balancete_indice_do_mes(pDataIni, pDataFin) returning_values(nMESES);
 
 rMes1 = 0;
 rMes2 = 0;
 rMes3 = 0;
 rMes4 = 0;
 rMes5 = 0;
 rMes6 = 0;
 rMes7 = 0;
 rMes8 = 0;
 rMes9 = 0;
 rMes9 = 0;
 rMes10 = 0;
 rMes11 = 0;
 rMes12 = 0;
 
 vRadical = '';
 vNivel = 0;
 
 For
 Select Cast(Coalesce(p1.pla_ord || :VHABILITAPLANO1, '') || Coalesce(p2.pla_ord || :VHABILITAPLANO2, '') as Varchar(40)),
 Cast('' as varchar(30)),
 Cast(Coalesce(c1.cus_nom || :VHABILITACUSTO1, '') || Coalesce(c2.cus_nom || :VHABILITACUSTO2, '') || Coalesce(PRJ1.proj_nom || :VHABILITAPROJETO, '') as varchar(60)),
 Cast((Case :pCompetencia when 1 then LGE_EMI else LGE_OPE end) as date),
 Coalesce(lge_val,0)
 From MVLGE A
 left join CDPLA P1 on (P1.pla_cod = A.lge_pla)
 left join CDPLAAUX P2 on (P2.pla_cod = A.lge_pla2)
 left join CDCCUST C1 on (C1.cus_cod = A.lge_ccusto)
 left join cdccustaux C2 on (C2.cus_cod = A.lge_ccusto2)
 left join cdproj2 PRJ2 on (PRJ2.proj2_cod = A.lge_proj2)
 left join cdproj PRJ1 on (PRJ1.proj_cod = PRJ2.proj2_proj)
 Where A.LGE_PLA not in ('1', '2')
 and (A.LGE_TIP <> "D" or A.LGE_TIP is null)
 and ((:pCOMPETENCIA = 1) or (:pDATAINI is null) or (A.LGE_OPE >= :pDATAINI and A.LGE_OPE <= :pDATAFIN))
 and ((:pCOMPETENCIA <> 1) or (:pDATAINI is null) or (A.LGE_EMI >= :pDATAINI and A.LGE_EMI <= :pDATAFIN))
 and ((:pPLANODE is null) or (P1.PLA_ORD >= :pPLANODE and P1.PLA_ORD <= :pPLANOATE))
 and ((:pPLANO2DE is null) or (P2.PLA_ORD >= :pPLANO2DE and P2.PLA_ORD <= :pPLANO2ATE))
 and ((:pCCustoDe is Null) or ((C1.cus_ord >= :pCCustoDe) and (C1.cus_ord <= :pCCustoAte)))
 and ((:pCCusto2De is Null) or ((C2.cus_ord >= :pCCusto2De) and (C2.cus_ord <= :pCCusto2Ate)))
 and ((:pContaDe is Null) or (Exists (Select con_cod From cdcon Where con_cod = A.lge_con and con_nom >= :pContaDe and con_nom <= :pContaAte)))
 and ((:pClienteDe is Null) or (Exists (Select cli_cod From cdcli Where cli_cod = A.lge_cli and cli_red >= :pClienteDe and cli_red <= :pClienteAte)))
 and ((:pFornecDe is Null) or (exists (Select for_cod From cdfor Where for_cod = A.lge_for and for_red >= :pFornecDe and for_red <= :pFornecAte)))
 and ((:pProjetode is Null) or (Exists (Select proj2_cod from cdproj2, cdproj where A.lge_proj2 = proj2_cod and proj2_proj = proj_cod and proj_nom >= :pprojetode and proj_nom <= :pprojetoate)))
 Union All
 Select Cast(Coalesce(p1.pla_ord || :VHABILITAPLANO1, '') || Coalesce(p2.pla_ord || :VHABILITAPLANO2, '') as Varchar(40)),
 Cast('' as varchar(30)),
 Cast(Coalesce(c1.cus_nom || :VHABILITACUSTO1, '') || Coalesce(c2.cus_nom || :VHABILITACUSTO2, '') || Coalesce(PRJ1.proj_nom || :VHABILITAPROJETO, '') as varchar(60)),
 Cast((Case :pCompetencia when 1 then DOB_EMI else DOB_OPE end) as date),
 Coalesce(dob_val,0)
 From MVLGED A
 left join CDPLA P1 on (P1.pla_cod = A.dob_pla)
 left join CDPLAAUX P2 on (P2.pla_cod = A.dob_pla2)
 left join CDCCUST C1 on (C1.cus_cod = A.dob_ccusto)
 left join cdccustaux C2 on (C2.cus_cod = A.dob_ccusto2)
 left join cdproj2 PRJ2 on (PRJ2.proj2_cod = A.dob_proj2)
 left join cdproj PRJ1 on (PRJ1.proj_cod = PRJ2.proj2_proj),
 MVLGE
 Where DOB_PLA not in ('1', '2')
 and A.DOB_FLAG = MVLGE.LGE_COD
 and ((:pCOMPETENCIA = 1) or (:pDATAINI is null) or (A.DOB_OPE >= :pDATAINI and A.DOB_OPE <= :pDATAFIN))
 and ((:pCOMPETENCIA <> 1) or (:pDATAINI is null) or (A.DOB_EMI >= :pDATAINI and A.DOB_EMI <= :pDATAFIN))
 and ((:pPLANODE is null) or (P1.PLA_ORD >= :pPLANODE and P1.PLA_ORD <= :pPLANOATE))
 and ((:pPLANO2DE is null) or (P2.PLA_ORD >= :pPLANO2DE and P2.PLA_ORD <= :pPLANO2ATE))
 and ((:pCCustoDe is Null) or ((C1.cus_ord >= :pCCustoDe) and (C1.cus_ord <= :pCCustoAte)))
 and ((:pCCusto2De is Null) or ((C2.cus_ord >= :pCCusto2De) and (C2.cus_ord <= :pCCusto2Ate)))
 and ((:pContaDe is Null) or (Exists (Select con_cod From cdcon Where con_cod = A.dob_con and con_nom >= :pContaDe and con_nom <= :pContaAte)))
 and ((:pClienteDe is Null) or (Exists (Select cli_cod From cdcli Where cli_cod = A.dob_cli and cli_red >= :pClienteDe and cli_red <= :pClienteAte)))
 and ((:pFornecDe is Null) or (Exists (Select for_cod From cdfor Where for_cod = A.dob_for and for_red >= :pFornecDe and for_red <= :pFornecAte)))
 and ((:pProjetode is Null) or (Exists (Select proj2_cod from cdproj2, cdproj where A.dob_proj2 = proj2_cod and proj2_proj = proj_cod and proj_nom >= :pprojetode and proj_nom <= :pprojetoate)))
 Union All
 Select Cast(Coalesce(p1.pla_ord || :VHABILITAPLANO1, '') || Coalesce(p2.pla_ord || :VHABILITAPLANO2, '') as Varchar(40)),
 Cast('' as varchar(30)),
 Cast(Coalesce(c1.cus_nom || :VHABILITACUSTO1, '') || Coalesce(c2.cus_nom || :VHABILITACUSTO2, '') || Coalesce(PRJ1.proj_nom || :VHABILITAPROJETO, '') as varchar(60)),
 Cast((Case :pCompetencia when 1 then LGE_EMI else LGE_OPE end) as date),
 Coalesce(lge_val,0)
 From MORLGE A
 left join CDPLA P1 on (P1.pla_cod = A.lge_pla)
 left join CDPLAAUX P2 on (P2.pla_cod = A.lge_pla2)
 left join CDCCUST C1 on (C1.cus_cod = A.lge_ccusto)
 left join cdccustaux C2 on (C2.cus_cod = A.lge_ccusto2)
 left join cdproj2 PRJ2 on (PRJ2.proj2_cod = A.lge_proj2)
 left join cdproj PRJ1 on (PRJ1.proj_cod = PRJ2.proj2_proj)
 Where A.LGE_PLA not in ('1', '2')
 and (A.LGE_TIP <> "D" or A.LGE_TIP is null)
 and ((:pCOMPETENCIA = 1) or (:pDATAINI is null) or (A.LGE_OPE >= :pDATAINI and A.LGE_OPE <= :pDATAFIN))
 and ((:pCOMPETENCIA <> 1) or (:pDATAINI is null) or (A.LGE_EMI >= :pDATAINI and A.LGE_EMI <= :pDATAFIN))
 and ((:pPLANODE is null) or (P1.PLA_ORD >= :pPLANODE and P1.PLA_ORD <= :pPLANOATE))
 and ((:pPLANO2DE is null) or (P2.PLA_ORD >= :pPLANO2DE and P2.PLA_ORD <= :pPLANO2ATE))
 and ((:pCCustoDe is Null) or ((C1.cus_ord >= :pCCustoDe) and (C1.cus_ord <= :pCCustoAte)))
 and ((:pCCusto2De is Null) or ((C2.cus_ord >= :pCCusto2De) and (C2.cus_ord <= :pCCusto2Ate)))
 and ((:pContaDe is Null) or (Exists (Select con_cod From cdcon Where con_cod = A.lge_con and con_nom >= :pContaDe and con_nom <= :pContaAte)))
 and ((:pClienteDe is Null) or (Exists (Select cli_cod From cdcli Where cli_cod = A.lge_cli and cli_red >= :pClienteDe and cli_red <= :pClienteAte)))
 and ((:pFornecDe is Null) or (exists (Select for_cod From cdfor Where for_cod = A.lge_for and for_red >= :pFornecDe and for_red <= :pFornecAte)))
 and ((:pProjetode is Null) or (Exists (Select proj2_cod from cdproj2, cdproj where A.lge_proj2 = proj2_cod and proj2_proj = proj_cod and proj_nom >= :pprojetode and proj_nom <= :pprojetoate)))
 Union All
 Select Cast(Coalesce(p1.pla_ord || :VHABILITAPLANO1, '') || Coalesce(p2.pla_ord || :VHABILITAPLANO2, '') as Varchar(40)),
 Cast('' as varchar(30)),
 Cast(Coalesce(c1.cus_nom || :VHABILITACUSTO1, '') || Coalesce(c2.cus_nom || :VHABILITACUSTO2, '') || Coalesce(PRJ1.proj_nom || :VHABILITAPROJETO, '') as varchar(60)),
 Cast((Case :pCompetencia when 1 then DOB_EMI else DOB_OPE end) as date),
 Coalesce(dob_val,0)
 From MORLGED A
 left join CDPLA P1 on (P1.pla_cod = A.dob_pla)
 left join CDPLAAUX P2 on (P2.pla_cod = A.dob_pla2)
 left join CDCCUST C1 on (C1.cus_cod = A.dob_ccusto)
 left join cdccustaux C2 on (C2.cus_cod = A.dob_ccusto2)
 left join cdproj2 PRJ2 on (PRJ2.proj2_cod = A.dob_proj2)
 left join cdproj PRJ1 on (PRJ1.proj_cod = PRJ2.proj2_proj),
 MORLGE
 Where DOB_PLA not in ('1', '2')
 and A.DOB_FLAG = MORLGE.LGE_COD
 and ((:pCOMPETENCIA = 1) or (:pDATAINI is null) or (A.DOB_OPE >= :pDATAINI and A.DOB_OPE <= :pDATAFIN))
 and ((:pCOMPETENCIA <> 1) or (:pDATAINI is null) or (A.DOB_EMI >= :pDATAINI and A.DOB_EMI <= :pDATAFIN))
 and ((:pPLANODE is null) or (P1.PLA_ORD >= :pPLANODE and P1.PLA_ORD <= :pPLANOATE))
 and ((:pPLANO2DE is null) or (P2.PLA_ORD >= :pPLANO2DE and P2.PLA_ORD <= :pPLANO2ATE))
 and ((:pCCustoDe is Null) or ((C1.cus_ord >= :pCCustoDe) and (C1.cus_ord <= :pCCustoAte)))
 and ((:pCCusto2De is Null) or ((C2.cus_ord >= :pCCusto2De) and (C2.cus_ord <= :pCCusto2Ate)))
 and ((:pContaDe is Null) or (Exists (Select con_cod From cdcon Where con_cod = A.dob_con and con_nom >= :pContaDe and con_nom <= :pContaAte)))
 and ((:pClienteDe is Null) or (Exists (Select cli_cod From cdcli Where cli_cod = A.dob_cli and cli_red >= :pClienteDe and cli_red <= :pClienteAte)))
 and ((:pFornecDe is Null) or (Exists (Select for_cod From cdfor Where for_cod = A.dob_for and for_red >= :pFornecDe and for_red <= :pFornecAte)))
 and ((:pProjetode is Null) or (Exists (Select proj2_cod from cdproj2, cdproj where A.dob_proj2 = proj2_cod and proj2_proj = proj_cod and proj_nom >= :pprojetode and proj_nom <= :pprojetoate)))
 Union all
 
 SELECT
 Cast(Coalesce(p1.pla_ord || :VHABILITAPLANO1, '') || Coalesce(p2.pla_ord || :VHABILITAPLANO2, '') as Varchar(40)),
 Cast('' as varchar(30)),
 Cast(Coalesce(c1.cus_nom || :VHABILITACUSTO1, '') || Coalesce(c2.cus_nom || :VHABILITACUSTO2, '') || Coalesce(PRJ1.proj_nom || :VHABILITAPROJETO, '') as varchar(60)),
 PAG_EMI,
 Coalesce(PAG_VAL* -1,0)
 FROM MVCOPAG A
 left join CDPLA P1 on (P1.pla_cod = A.pag_pla)
 left join CDPLAAUX P2 on (P2.pla_cod = A.pag_pla2)
 left join CDCCUST C1 on (C1.cus_cod = A.pag_ccusto)
 left join cdccustaux C2 on (C2.cus_cod = A.pag_ccusto2)
 left join cdproj2 PRJ2 on (PRJ2.proj2_cod = A.pag_proj2)
 left join cdproj PRJ1 on (PRJ1.proj_cod = PRJ2.proj2_proj)
 WHERE (:pcompetencia = 1)
 and A.PAG_PLA not in ('1', '2')
 and ((:pDATAINI is null) or (A.PAG_EMI >= :pDATAINI and A.PAG_EMI <= :pDATAFIN))
 and ((:pPLANODE is null) or (P1.PLA_ORD >= :pPLANODE and P1.PLA_ORD <= :pPLANOATE))
 and ((:pPLANO2DE is null) or (P2.PLA_ORD >= :pPLANO2DE and P2.PLA_ORD <= :pPLANO2ATE))
 and ((:pCCustoDe is Null) or ((C1.cus_ord >= :pCCustoDe) and (C1.cus_ord <= :pCCustoAte)))
 and ((:pCCusto2De is Null) or ((C2.cus_ord >= :pCCusto2De) and (C2.cus_ord <= :pCCusto2Ate)))
 and ((:pContaDe is Null) or (Exists (Select con_cod From cdcon Where con_cod = A.pag_con and con_nom >= :pContaDe and con_nom <= :pContaAte)))
 and ((:pFornecDe is Null) or (Exists (Select for_cod From cdfor Where for_cod = A.pag_for and for_red >= :pFornecDe and for_red <= :pFornecAte)))
 and ((:pProjetode is Null) or (Exists (Select proj2_cod from cdproj2, cdproj where A.pag_proj2 = proj2_cod and proj2_proj = proj_cod and proj_nom >= :pprojetode and proj_nom <= :pprojetoate)))
 Union all
 
 SELECT
 Cast(Coalesce(p1.pla_ord || :VHABILITAPLANO1, '') || Coalesce(p2.pla_ord || :VHABILITAPLANO2, '') as Varchar(40)),
 Cast('' as varchar(30)),
 Cast(Coalesce(c1.cus_nom || :VHABILITACUSTO1, '') || Coalesce(c2.cus_nom || :VHABILITACUSTO2, '') || Coalesce(PRJ1.proj_nom || :VHABILITAPROJETO, '') as varchar(60)),
 REC_EMI,
 Coalesce(REC_VAL,0)
 FROM MVCOREC A
 left join CDPLA P1 on (P1.pla_cod = A.REC_pla)
 left join CDPLAAUX P2 on (P2.pla_cod = A.REC_pla2)
 left join CDCCUST C1 on (C1.cus_cod = A.REC_ccusto)
 left join cdccustaux C2 on (C2.cus_cod = A.REC_ccusto2)
 left join cdproj2 PRJ2 on (PRJ2.proj2_cod = A.REC_proj2)
 left join cdproj PRJ1 on (PRJ1.proj_cod = PRJ2.proj2_proj)
 WHERE (:pcompetencia = 1)
 and A.REC_PLA not in ('1', '2')
 and ((:pDATAINI is null) or (A.REC_EMI >= :pDATAINI and A.REC_EMI <= :pDATAFIN))
 and ((:pPLANODE is null) or (P1.PLA_ORD >= :pPLANODE and P1.PLA_ORD <= :pPLANOATE))
 and ((:pPLANO2DE is null) or (P2.PLA_ORD >= :pPLANO2DE and P2.PLA_ORD <= :pPLANO2ATE))
 and ((:pCCustoDe is Null) or ((C1.cus_ord >= :pCCustoDe) and (C1.cus_ord <= :pCCustoAte)))
 and ((:pCCusto2De is Null) or ((C2.cus_ord >= :pCCusto2De) and (C2.cus_ord <= :pCCusto2Ate)))
 and ((:pContaDe is Null) or (Exists (Select con_cod From cdcon Where con_cod = A.REC_con and con_nom >= :pContaDe and con_nom <= :pContaAte)))
 and ((:pClienteDe is Null) or (Exists (Select cli_cod From cdcli Where cli_cod = A.rec_cli and cli_red >= :pClienteDe and cli_red <= :pClienteAte)))
 and ((:pProjetode is Null) or (Exists (Select proj2_cod from cdproj2, cdproj where A.REC_proj2 = proj2_cod and proj2_proj = proj_cod and proj_nom >= :pprojetode and proj_nom <= :pprojetoate)))
 Union all
 
 Select pla_ord, pla_nom, Cast('' as varchar(60)), Cast(null as date), 0.0
 from cdpla
 Where (:vHabilitaPlano1 = '')
 and (:VHABILITACUSTO1 is null)
 and (:VHABILITACUSTO2 is null)
 and (:VHABILITAPROJETO is null)
 and PLA_COD not in ('1', '2')
 Union all
 
 Select pla_ord, pla_nom, Cast(c1.cus_nom as varchar(60)), Cast(null as date), 0.0
 from cdpla, cdccust C1
 Where (:vHabilitaPlano1 = '')
 and (:VHABILITACUSTO1 = '')
 and PLA_COD not in ('1', '2')
 Union all
 
 Select pla_ord, pla_nom, Cast(c2.cus_nom as varchar(60)), Cast(null as date), 0.0
 from cdpla, cdccustaux C2
 Where (:vHabilitaPlano1 = '')
 and (:VHABILITACUSTO2 = '')
 and PLA_COD not in ('1', '2')
 Union all
 
 Select pla_ord, pla_nom, Cast(PRJ1.proj_nom as varchar(60)), Cast(null as date), 0.0
 from cdpla, cdproj2 PRJ2, cdproj PRJ1
 Where (:vHabilitaPlano1 = '')
 and (:VHABILITAPROJETO = '')
 and prj1.proj_cod = prj2.proj2_proj
 and PLA_COD not in ('1', '2')
 Union all
 
 Select pla_ord, pla_nom, Cast('' as varchar(60)), Cast(null as date), 0.0
 from cdplaaux
 Where (:vHabilitaPlano2 = '')
 and (:VHABILITACUSTO1 is null)
 and (:VHABILITACUSTO2 is null)
 and (:VHABILITAPROJETO is null)
 Union all
 
 Select pla_ord, pla_nom, Cast(c1.cus_nom as varchar(60)), Cast(null as date), 0.0
 from cdplaaux, cdccust C1
 Where (:VHABILITACUSTO1 = '')
 And (:vHabilitaPlano2 = '')
 Union all
 
 Select pla_ord, pla_nom, Cast(c2.cus_nom as varchar(60)), Cast(null as date), 0.0
 from cdplaaux, cdccustaux C2
 Where (:vHabilitaPlano2 = '')
 And (:VHABILITACUSTO2 = '')
 Union all
 
 Select pla_ord, pla_nom, Cast(PRJ1.proj_nom as varchar(60)), Cast(null as date), 0.0
 from cdplaaux, cdproj2 PRJ2, cdproj PRJ1
 Where (:vHabilitaPlano2 = '')
 And (:VHABILITAPROJETO = '')
 and prj1.proj_cod = prj2.proj2_proj
 
 Union all
 Select pla_ord, pla_nom, Cast('' as varchar(60)), Cast(null as date), 0.0
 from cdpla
 Where (:vHabilitaPlano1 = '')
 
 Union all
 Select pla_ord, pla_nom, Cast('' as varchar(60)), Cast(null as date), 0.0
 from cdplaaux
 Where (:vHabilitaPlano2 = '')
 
 order by 3 desc, 1 desc
 Into vPla_Cod, vPla_nom, vCus_nom, vData, vSoma do
 
 begin
 if ((vPla_Cod = pla_cod) and ((vCus_nom is null) or (vCus_nom = '') or (vCus_nom = cus_nom))) then
 begin
 Total = Coalesce(vSoma,0) + Total;
 vTotalAbs = Coalesce(Abs(vSoma),0) + vTotalAbs;
 if ((vData is not null) and (pMESAMES = 1)) then
 begin
 Execute procedure balancete_indice_do_mes(pDATAINI, vData) returning_values (vINDICE);
 IF (vINDICE = 1) THEN
 rMes1 = rMes1 + Coalesce(vSoma,0);
 ELSE IF (vINDICE = 2) THEN
 rMes2 = rMes2 + Coalesce(vSoma,0);
 ELSE IF (vINDICE = 3) THEN
 rMes3 = rMes3 + Coalesce(vSoma,0);
 ELSE IF (vINDICE = 4) THEN
 rMes4 = rMes4 + Coalesce(vSoma,0);
 ELSE IF (vINDICE = 5) THEN
 rMes5 = rMes5 + Coalesce(vSoma,0);
 ELSE IF (vINDICE = 6) THEN
 rMes6 = rMes6 + Coalesce(vSoma,0);
 ELSE IF (vINDICE = 7) THEN
 rMes7 = rMes7 + Coalesce(vSoma,0);
 ELSE IF (vINDICE = 8) THEN
 rMes8 = rMes8 + Coalesce(vSoma,0);
 ELSE IF (vINDICE = 9) THEN
 rMes9 = rMes9 + Coalesce(vSoma,0);
 ELSE IF (vINDICE = 10) THEN
 rMes10 = rMes10 + Coalesce(vSoma,0);
 ELSE IF (vINDICE = 11) THEN
 rMes11 = rMes11 + Coalesce(vSoma,0);
 ELSE IF (vINDICE = 12) THEN
 rMes12 = rMes12 + Coalesce(vSoma,0);
 end
 end
 else
 begin
 if (Pla_Cod is not null) then
 begin
 execute procedure extrai_radical_plano_de_contas(PLA_COD) returning_values (VRADICAL, VNIVEL);
 execute procedure BALANCETE_SOMA_COM_ACUM(Total, VNIVEL, VACUM1, VACUM2, VACUM3, VACUM4, VACUM5, VACUM6, VACUM7, VACUM8, VACUM9, VACUM10) returning_values (VACUM1, VACUM2, VACUM3, VACUM4, VACUM5, VACUM6, VACUM7, VACUM8, VACUM9, VACUM10, TOTAL);
 execute procedure BALANCETE_SOMA_COM_ACUM(vTotalAbs, VNIVEL, VACUMABS1, VACUMABS2, VACUMABS3, VACUMABS4, VACUMABS5, VACUMABS6, VACUMABS7, VACUMABS8, VACUMABS9, VACUMABS10) returning_values (VACUMABS1, VACUMABS2, VACUMABS3, VACUMABS4, VACUMABS5, VACUMABS6, VACUMABS7, VACUMABS8, VACUMABS9, VACUMABS10, vTOTALABS);
 
 if (pMESAMES = 1) then
 begin
 execute procedure BALANCETE_SOMA_COM_ACUM(rMes1, VNIVEL, VACUM1_M1, VACUM2_M1, VACUM3_M1, VACUM4_M1, VACUM5_M1, VACUM6_M1, VACUM7_M1, VACUM8_M1, VACUM9_M1, VACUM10_M1) returning_values (VACUM1_M1, VACUM2_M1, VACUM3_M1, VACUM4_M1, VACUM5_M1, VACUM6_M1, VACUM7_M1, VACUM8_M1, VACUM9_M1, VACUM10_M1, rMes1);
 execute procedure BALANCETE_SOMA_COM_ACUM(rMes2, VNIVEL, VACUM1_M2, VACUM2_M2, VACUM3_M2, VACUM4_M2, VACUM5_M2, VACUM6_M2, VACUM7_M2, VACUM8_M2, VACUM9_M2, VACUM10_M2) returning_values (VACUM1_M2, VACUM2_M2, VACUM3_M2, VACUM4_M2, VACUM5_M2, VACUM6_M2, VACUM7_M2, VACUM8_M2, VACUM9_M2, VACUM10_M2, rMes2);
 execute procedure BALANCETE_SOMA_COM_ACUM(rMes3, VNIVEL, VACUM1_M3, VACUM2_M3, VACUM3_M3, VACUM4_M3, VACUM5_M3, VACUM6_M3, VACUM7_M3, VACUM8_M3, VACUM9_M3, VACUM10_M3) returning_values (VACUM1_M3, VACUM2_M3, VACUM3_M3, VACUM4_M3, VACUM5_M3, VACUM6_M3, VACUM7_M3, VACUM8_M3, VACUM9_M3, VACUM10_M3, rMes3);
 execute procedure BALANCETE_SOMA_COM_ACUM(rMes4, VNIVEL, VACUM1_M4, VACUM2_M4, VACUM3_M4, VACUM4_M4, VACUM5_M4, VACUM6_M4, VACUM7_M4, VACUM8_M4, VACUM9_M4, VACUM10_M4) returning_values (VACUM1_M4, VACUM2_M4, VACUM3_M4, VACUM4_M4, VACUM5_M4, VACUM6_M4, VACUM7_M4, VACUM8_M4, VACUM9_M4, VACUM10_M4, rMes4);
 execute procedure BALANCETE_SOMA_COM_ACUM(rMes5, VNIVEL, VACUM1_M5, VACUM2_M5, VACUM3_M5, VACUM4_M5, VACUM5_M5, VACUM6_M5, VACUM7_M5, VACUM8_M5, VACUM9_M5, VACUM10_M5) returning_values (VACUM1_M5, VACUM2_M5, VACUM3_M5, VACUM4_M5, VACUM5_M5, VACUM6_M5, VACUM7_M5, VACUM8_M5, VACUM9_M5, VACUM10_M5, rMes5);
 execute procedure BALANCETE_SOMA_COM_ACUM(rMes6, VNIVEL, VACUM1_M6, VACUM2_M6, VACUM3_M6, VACUM4_M6, VACUM5_M6, VACUM6_M6, VACUM7_M6, VACUM8_M6, VACUM9_M6, VACUM10_M6) returning_values (VACUM1_M6, VACUM2_M6, VACUM3_M6, VACUM4_M6, VACUM5_M6, VACUM6_M6, VACUM7_M6, VACUM8_M6, VACUM9_M6, VACUM10_M6, rMes6);
 execute procedure BALANCETE_SOMA_COM_ACUM(rMes7, VNIVEL, VACUM1_M7, VACUM2_M7, VACUM3_M7, VACUM4_M7, VACUM5_M7, VACUM6_M7, VACUM7_M7, VACUM8_M7, VACUM9_M7, VACUM10_M7) returning_values (VACUM1_M7, VACUM2_M7, VACUM3_M7, VACUM4_M7, VACUM5_M7, VACUM6_M7, VACUM7_M7, VACUM8_M7, VACUM9_M7, VACUM10_M7, rMes7);
 execute procedure BALANCETE_SOMA_COM_ACUM(rMes8, VNIVEL, VACUM1_M8, VACUM2_M8, VACUM3_M8, VACUM4_M8, VACUM5_M8, VACUM6_M8, VACUM7_M8, VACUM8_M8, VACUM9_M8, VACUM10_M8) returning_values (VACUM1_M8, VACUM2_M8, VACUM3_M8, VACUM4_M8, VACUM5_M8, VACUM6_M8, VACUM7_M8, VACUM8_M8, VACUM9_M8, VACUM10_M8, rMes8);
 execute procedure BALANCETE_SOMA_COM_ACUM(rMes9, VNIVEL, VACUM1_M9, VACUM2_M9, VACUM3_M9, VACUM4_M9, VACUM5_M9, VACUM6_M9, VACUM7_M9, VACUM8_M9, VACUM9_M9, VACUM10_M9) returning_values (VACUM1_M9, VACUM2_M9, VACUM3_M9, VACUM4_M9, VACUM5_M9, VACUM6_M9, VACUM7_M9, VACUM8_M9, VACUM9_M9, VACUM10_M9, rMes9);
 execute procedure BALANCETE_SOMA_COM_ACUM(rMes10, VNIVEL, VACUM1_M10, VACUM2_M10, VACUM3_M10, VACUM4_M10, VACUM5_M10, VACUM6_M10, VACUM7_M10, VACUM8_M10, VACUM9_M10, VACUM10_M10) returning_values (VACUM1_M10, VACUM2_M10, VACUM3_M10, VACUM4_M10, VACUM5_M10, VACUM6_M10, VACUM7_M10, VACUM8_M10, VACUM9_M10, VACUM10_M10, rMes10);
 execute procedure BALANCETE_SOMA_COM_ACUM(rMes11, VNIVEL, VACUM1_M11, VACUM2_M11, VACUM3_M11, VACUM4_M11, VACUM5_M11, VACUM6_M11, VACUM7_M11, VACUM8_M11, VACUM9_M11, VACUM10_M11) returning_values (VACUM1_M11, VACUM2_M11, VACUM3_M11, VACUM4_M11, VACUM5_M11, VACUM6_M11, VACUM7_M11, VACUM8_M11, VACUM9_M11, VACUM10_M11, rMes11);
 execute procedure BALANCETE_SOMA_COM_ACUM(rMes12, VNIVEL, VACUM1_M12, VACUM2_M12, VACUM3_M12, VACUM4_M12, VACUM5_M12, VACUM6_M12, VACUM7_M12, VACUM8_M12, VACUM9_M12, VACUM10_M12) returning_values (VACUM1_M12, VACUM2_M12, VACUM3_M12, VACUM4_M12, VACUM5_M12, VACUM6_M12, VACUM7_M12, VACUM8_M12, VACUM9_M12, VACUM10_M12, rMes12);
 end
 end
 if ((Pla_Cod is not null) and (vTotalAbs <> 0) and (pFiltroNivel >= vNivel)) then
 suspend;
 
 Total = Coalesce(vSoma,0);
 vTotalAbs = Coalesce(Abs(vSoma),0);
 
 rMes1 = 0;
 rMes2 = 0;
 rMes3 = 0;
 rMes4 = 0;
 rMes5 = 0;
 rMes6 = 0;
 rMes7 = 0;
 rMes8 = 0;
 rMes9 = 0;
 rMes9 = 0;
 rMes10 = 0;
 rMes11 = 0;
 rMes12 = 0;
 
 if ((vData is not null) and (pMESAMES = 1)) then
 begin
 Execute procedure balancete_indice_do_mes(pDATAINI, vData) returning_values (vINDICE);
 IF (vINDICE = 1) THEN
 rMes1 = Coalesce(vSoma,0);
 ELSE IF (vINDICE = 2) THEN
 rMes2 = Coalesce(vSoma,0);
 ELSE IF (vINDICE = 3) THEN
 rMes3 = Coalesce(vSoma,0);
 ELSE IF (vINDICE = 4) THEN
 rMes4 = Coalesce(vSoma,0);
 ELSE IF (vINDICE = 5) THEN
 rMes5 = Coalesce(vSoma,0);
 ELSE IF (vINDICE = 6) THEN
 rMes6 = Coalesce(vSoma,0);
 ELSE IF (vINDICE = 7) THEN
 rMes7 = Coalesce(vSoma,0);
 ELSE IF (vINDICE = 8) THEN
 rMes8 = Coalesce(vSoma,0);
 ELSE IF (vINDICE = 9) THEN
 rMes9 = Coalesce(vSoma,0);
 ELSE IF (vINDICE = 10) THEN
 rMes10 = Coalesce(vSoma,0);
 ELSE IF (vINDICE = 11) THEN
 rMes11 = Coalesce(vSoma,0);
 ELSE IF (vINDICE = 12) THEN
 rMes12 = Coalesce(vSoma,0);
 end
 end
 if ((VCUS_NOM <> '') and (VCUS_NOM is not null)) then
 begin
 if (VCUS_NOM <> CUS_NOM) then
 begin
 vAcum1 = 0;
 vAcum2 = 0;
 vAcum3 = 0;
 vAcum4 = 0;
 vAcum5 = 0;
 vAcum6 = 0;
 vAcum7 = 0;
 vAcum8 = 0;
 vAcum9 = 0;
 vAcum9 = 0;
 vAcum10 = 0;
 
 vAcumAbs1 = 0;
 vAcumAbs2 = 0;
 vAcumAbs3 = 0;
 vAcumAbs4 = 0;
 vAcumAbs5 = 0;
 vAcumAbs6 = 0;
 vAcumAbs7 = 0;
 vAcumAbs8 = 0;
 vAcumAbs9 = 0;
 vAcumAbs9 = 0;
 vAcumAbs10 = 0;
 
 if (pMESAMES = 1) then
 begin
 vAcum1_M1 = 0;
 vAcum2_M1 = 0;
 vAcum3_M1 = 0;
 vAcum4_M1 = 0;
 vAcum5_M1 = 0;
 vAcum6_M1 = 0;
 vAcum7_M1 = 0;
 vAcum8_M1 = 0;
 vAcum9_M1 = 0;
 vAcum9_M1 = 0;
 vAcum10_M1 = 0;
 
 vAcum1_M2 = 0;
 vAcum2_M2 = 0;
 vAcum3_M2 = 0;
 vAcum4_M2 = 0;
 vAcum5_M2 = 0;
 vAcum6_M2 = 0;
 vAcum7_M2 = 0;
 vAcum8_M2 = 0;
 vAcum9_M2 = 0;
 vAcum9_M2 = 0;
 vAcum10_M2 = 0;
 
 vAcum1_M3 = 0;
 vAcum2_M3 = 0;
 vAcum3_M3 = 0;
 vAcum4_M3 = 0;
 vAcum5_M3 = 0;
 vAcum6_M3 = 0;
 vAcum7_M3 = 0;
 vAcum8_M3 = 0;
 vAcum9_M3 = 0;
 vAcum9_M3 = 0;
 vAcum10_M3 = 0;
 
 vAcum1_M4 = 0;
 vAcum2_M4 = 0;
 vAcum3_M4 = 0;
 vAcum4_M4 = 0;
 vAcum5_M4 = 0;
 vAcum6_M4 = 0;
 vAcum7_M4 = 0;
 vAcum8_M4 = 0;
 vAcum9_M4 = 0;
 vAcum9_M4 = 0;
 vAcum10_M4 = 0;
 
 vAcum1_M5 = 0;
 vAcum2_M5 = 0;
 vAcum3_M5 = 0;
 vAcum4_M5 = 0;
 vAcum5_M5 = 0;
 vAcum6_M5 = 0;
 vAcum7_M5 = 0;
 vAcum8_M5 = 0;
 vAcum9_M5 = 0;
 vAcum9_M5 = 0;
 vAcum10_M5 = 0;
 
 vAcum1_M6 = 0;
 vAcum2_M6 = 0;
 vAcum3_M6 = 0;
 vAcum4_M6 = 0;
 vAcum5_M6 = 0;
 vAcum6_M6 = 0;
 vAcum7_M6 = 0;
 vAcum8_M6 = 0;
 vAcum9_M6 = 0;
 vAcum9_M6 = 0;
 vAcum10_M6 = 0;
 
 vAcum1_M7 = 0;
 vAcum2_M7 = 0;
 vAcum3_M7 = 0;
 vAcum4_M7 = 0;
 vAcum5_M7 = 0;
 vAcum6_M7 = 0;
 vAcum7_M7 = 0;
 vAcum8_M7 = 0;
 vAcum9_M7 = 0;
 vAcum9_M7 = 0;
 vAcum10_M7 = 0;
 
 vAcum1_M8 = 0;
 vAcum2_M8 = 0;
 vAcum3_M8 = 0;
 vAcum4_M8 = 0;
 vAcum5_M8 = 0;
 vAcum6_M8 = 0;
 vAcum7_M8 = 0;
 vAcum8_M8 = 0;
 vAcum9_M8 = 0;
 vAcum9_M8 = 0;
 vAcum10_M8 = 0;
 
 vAcum1_M9 = 0;
 vAcum2_M9 = 0;
 vAcum3_M9 = 0;
 vAcum4_M9 = 0;
 vAcum5_M9 = 0;
 vAcum6_M9 = 0;
 vAcum7_M9 = 0;
 vAcum8_M9 = 0;
 vAcum9_M9 = 0;
 vAcum9_M9 = 0;
 vAcum10_M9 = 0;
 
 vAcum1_M10 = 0;
 vAcum2_M10 = 0;
 vAcum3_M10 = 0;
 vAcum4_M10 = 0;
 vAcum5_M10 = 0;
 vAcum6_M10 = 0;
 vAcum7_M10 = 0;
 vAcum8_M10 = 0;
 vAcum9_M10 = 0;
 vAcum9_M10 = 0;
 vAcum10_M10 = 0;
 
 vAcum1_M11 = 0;
 vAcum2_M11 = 0;
 vAcum3_M11 = 0;
 vAcum4_M11 = 0;
 vAcum5_M11 = 0;
 vAcum6_M11 = 0;
 vAcum7_M11 = 0;
 vAcum8_M11 = 0;
 vAcum9_M11 = 0;
 vAcum9_M11 = 0;
 vAcum10_M11 = 0;
 
 vAcum1_M12 = 0;
 vAcum2_M12 = 0;
 vAcum3_M12 = 0;
 vAcum4_M12 = 0;
 vAcum5_M12 = 0;
 vAcum6_M12 = 0;
 vAcum7_M12 = 0;
 vAcum8_M12 = 0;
 vAcum9_M12 = 0;
 vAcum9_M12 = 0;
 vAcum10_M12 = 0;
 end
 end
 CUS_NOM = VCUS_NOM;
 end
 if ((VPLA_NOM <> '') and (VPLA_NOM is not null)) then
 PLA_NOM = VPLA_NOM;
 PLA_COD = VPLA_COD;
 end
 if (Pla_Cod is not null) then
 begin
 execute procedure extrai_radical_plano_de_contas(PLA_COD) returning_values (VRADICAL, VNIVEL);
 execute procedure BALANCETE_SOMA_COM_ACUM(Total, VNIVEL, VACUM1, VACUM2, VACUM3, VACUM4, VACUM5, VACUM6, VACUM7, VACUM8, VACUM9, VACUM10) returning_values (VACUM1, VACUM2, VACUM3, VACUM4, VACUM5, VACUM6, VACUM7, VACUM8, VACUM9, VACUM10, TOTAL);
 execute procedure BALANCETE_SOMA_COM_ACUM(vTotalAbs, VNIVEL, VACUMABS1, VACUMABS2, VACUMABS3, VACUMABS4, VACUMABS5, VACUMABS6, VACUMABS7, VACUMABS8, VACUMABS9, VACUMABS10) returning_values (VACUMABS1, VACUMABS2, VACUMABS3, VACUMABS4, VACUMABS5, VACUMABS6, VACUMABS7, VACUMABS8, VACUMABS9, VACUMABS10, vTOTALABS);
 
 if (pMESAMES = 1) then
 begin
 execute procedure BALANCETE_SOMA_COM_ACUM(rMes1, VNIVEL, VACUM1_M1, VACUM2_M1, VACUM3_M1, VACUM4_M1, VACUM5_M1, VACUM6_M1, VACUM7_M1, VACUM8_M1, VACUM9_M1, VACUM10_M1) returning_values (VACUM1_M1, VACUM2_M1, VACUM3_M1, VACUM4_M1, VACUM5_M1, VACUM6_M1, VACUM7_M1, VACUM8_M1, VACUM9_M1, VACUM10_M1, rMes1);
 execute procedure BALANCETE_SOMA_COM_ACUM(rMes2, VNIVEL, VACUM2_M1, VACUM2_M2, VACUM3_M2, VACUM4_M2, VACUM5_M2, VACUM6_M2, VACUM7_M2, VACUM8_M2, VACUM9_M2, VACUM10_M2) returning_values (VACUM2_M1, VACUM2_M2, VACUM3_M2, VACUM4_M2, VACUM5_M2, VACUM6_M2, VACUM7_M2, VACUM8_M2, VACUM9_M2, VACUM10_M2, rMes2);
 execute procedure BALANCETE_SOMA_COM_ACUM(rMes3, VNIVEL, VACUM3_M1, VACUM2_M3, VACUM3_M3, VACUM4_M3, VACUM5_M3, VACUM6_M3, VACUM7_M3, VACUM8_M3, VACUM9_M3, VACUM10_M3) returning_values (VACUM3_M1, VACUM2_M3, VACUM3_M3, VACUM4_M3, VACUM5_M3, VACUM6_M3, VACUM7_M3, VACUM8_M3, VACUM9_M3, VACUM10_M3, rMes3);
 execute procedure BALANCETE_SOMA_COM_ACUM(rMes4, VNIVEL, VACUM4_M1, VACUM2_M4, VACUM3_M4, VACUM4_M4, VACUM5_M4, VACUM6_M4, VACUM7_M4, VACUM8_M4, VACUM9_M4, VACUM10_M4) returning_values (VACUM4_M1, VACUM2_M4, VACUM3_M4, VACUM4_M4, VACUM5_M4, VACUM6_M4, VACUM7_M4, VACUM8_M4, VACUM9_M4, VACUM10_M4, rMes4);
 execute procedure BALANCETE_SOMA_COM_ACUM(rMes5, VNIVEL, VACUM5_M1, VACUM2_M5, VACUM3_M5, VACUM4_M5, VACUM5_M5, VACUM6_M5, VACUM7_M5, VACUM8_M5, VACUM9_M5, VACUM10_M5) returning_values (VACUM5_M1, VACUM2_M5, VACUM3_M5, VACUM4_M5, VACUM5_M5, VACUM6_M5, VACUM7_M5, VACUM8_M5, VACUM9_M5, VACUM10_M5, rMes5);
 execute procedure BALANCETE_SOMA_COM_ACUM(rMes6, VNIVEL, VACUM6_M1, VACUM2_M6, VACUM3_M6, VACUM4_M6, VACUM5_M6, VACUM6_M6, VACUM7_M6, VACUM8_M6, VACUM9_M6, VACUM10_M6) returning_values (VACUM6_M1, VACUM2_M6, VACUM3_M6, VACUM4_M6, VACUM5_M6, VACUM6_M6, VACUM7_M6, VACUM8_M6, VACUM9_M6, VACUM10_M6, rMes6);
 execute procedure BALANCETE_SOMA_COM_ACUM(rMes7, VNIVEL, VACUM7_M1, VACUM2_M7, VACUM3_M7, VACUM4_M7, VACUM5_M7, VACUM6_M7, VACUM7_M7, VACUM8_M7, VACUM9_M7, VACUM10_M7) returning_values (VACUM7_M1, VACUM2_M7, VACUM3_M7, VACUM4_M7, VACUM5_M7, VACUM6_M7, VACUM7_M7, VACUM8_M7, VACUM9_M7, VACUM10_M7, rMes7);
 execute procedure BALANCETE_SOMA_COM_ACUM(rMes8, VNIVEL, VACUM8_M1, VACUM2_M8, VACUM3_M8, VACUM4_M8, VACUM5_M8, VACUM6_M8, VACUM7_M8, VACUM8_M8, VACUM9_M8, VACUM10_M8) returning_values (VACUM8_M1, VACUM2_M8, VACUM3_M8, VACUM4_M8, VACUM5_M8, VACUM6_M8, VACUM7_M8, VACUM8_M8, VACUM9_M8, VACUM10_M8, rMes8);
 execute procedure BALANCETE_SOMA_COM_ACUM(rMes9, VNIVEL, VACUM9_M1, VACUM2_M9, VACUM3_M9, VACUM4_M9, VACUM5_M9, VACUM6_M9, VACUM7_M9, VACUM8_M9, VACUM9_M9, VACUM10_M9) returning_values (VACUM9_M1, VACUM2_M9, VACUM3_M9, VACUM4_M9, VACUM5_M9, VACUM6_M9, VACUM7_M9, VACUM8_M9, VACUM9_M9, VACUM10_M9, rMes9);
 execute procedure BALANCETE_SOMA_COM_ACUM(rMes10, VNIVEL, VACUM1_M10, VACUM2_M10, VACUM3_M10, VACUM4_M10, VACUM5_M10, VACUM6_M10, VACUM7_M10, VACUM8_M10, VACUM9_M10, VACUM10_M10) returning_values (VACUM1_M10, VACUM2_M10, VACUM3_M10, VACUM4_M10, VACUM5_M10, VACUM6_M10, VACUM7_M10, VACUM8_M10, VACUM9_M10, VACUM10_M10, rMes10);
 execute procedure BALANCETE_SOMA_COM_ACUM(rMes11, VNIVEL, VACUM1_M11, VACUM2_M11, VACUM3_M11, VACUM4_M11, VACUM5_M11, VACUM6_M11, VACUM7_M11, VACUM8_M11, VACUM9_M11, VACUM10_M11) returning_values (VACUM1_M11, VACUM2_M11, VACUM3_M11, VACUM4_M11, VACUM5_M11, VACUM6_M11, VACUM7_M11, VACUM8_M11, VACUM9_M11, VACUM10_M11, rMes11);
 execute procedure BALANCETE_SOMA_COM_ACUM(rMes12, VNIVEL, VACUM1_M12, VACUM2_M12, VACUM3_M12, VACUM4_M12, VACUM5_M12, VACUM6_M12, VACUM7_M12, VACUM8_M12, VACUM9_M12, VACUM10_M12) returning_values (VACUM1_M12, VACUM2_M12, VACUM3_M12, VACUM4_M12, VACUM5_M12, VACUM6_M12, VACUM7_M12, VACUM8_M12, VACUM9_M12, VACUM10_M12, rMes12);
 end
 end
 if ((Pla_Cod is not null) and (vTotalAbs <> 0) and (pFiltroNivel >= vNivel)) then
 suspend;
 End
^

ALTER PROCEDURE BALANCETE_RESUMIDO_EMI (
    PPROJETO VARCHAR(60),
    PPLANO VARCHAR(40),
    PFORNECATE VARCHAR(75),
    PFORNECDE VARCHAR(75),
    PCLIENTEATE VARCHAR(75),
    PCLIENTEDE VARCHAR(75),
    PCONTADE VARCHAR(30),
    PCONTAATE VARCHAR(30),
    PCCUSTODE VARCHAR(40),
    PCCUSTOATE VARCHAR(40),
    PDATAINI TIMESTAMP,
    PDATAFIN TIMESTAMP)
RETURNS (
    RTOTAL DOUBLE PRECISION)
AS
DECLARE VARIABLE VSOMA DOUBLE PRECISION;
 BEGIN
 IF (pContaAte IS NULL) THEN
 pContaAte = pContaDe;
 IF (pCCustoAte IS NULL) THEN
 pCCustoAte = pCCustoDe;
 IF (pClienteAte IS NULL) THEN
 pClienteAte = pClienteDe;
 IF (pFornecAte IS NULL) THEN
 pFornecAte = pFornecDe;
 rTotal = 0;
 FOR
 SELECT SUM(lge_val)
 FROM MVLGE
 WHERE (MVLGE.LGE_TIP <> "D" OR MVLGE.LGE_TIP IS NULL)
 AND MVLGE.LGE_PLA LIKE :pPLANO || "%"
 AND MVLGE.LGE_EMI >= :pDATAINI
 AND MVLGE.LGE_EMI <= :pDATAFIN
 AND ((:pContaDe IS NULL) OR (lge_con IN (SELECT con_cod FROM cdcon WHERE con_nom >= :pContaDe AND con_nom <= :pContaAte)))
 AND ((:pCCustoDe IS NULL) OR ((mvlge.lge_ccusto >= :pCCustoDe) AND (mvlge.lge_ccusto <= :pCCustoAte)))
 AND ((:pClienteDe IS NULL) OR (lge_cli IN (SELECT cli_cod FROM cdcli WHERE cli_red >= :pClienteDe AND cli_red <= :pClienteAte)))
 AND ((:pFornecDe IS NULL) OR (lge_for IN (SELECT for_cod FROM cdfor WHERE for_red >= :pFornecDe AND for_red <= :pFornecAte)))
 AND ((:pProjeto IS NULL) OR (lge_proj2 IN (SELECT proj2_cod FROM MVLGE,cdproj2,cdproj WHERE lge_proj2 = proj2_cod AND proj_nom = :pProjeto AND proj2_proj = proj_cod)))
 UNION ALL
 SELECT SUM(dob_val)
 FROM MVLGED
 WHERE MVLGED.DOB_PLA LIKE :pPLANO || "%"
 AND MVLGED.DOB_EMI >= :pDATAINI
 AND MVLGED.DOB_EMI <= :pDATAFIN
 AND ((:pContaDe IS NULL) OR (dob_con IN (SELECT con_cod FROM cdcon WHERE con_nom >= :pContaDe AND con_nom <= :pContaAte)))
 AND ((:pCCustoDe IS NULL) OR ((mvlged.dob_ccusto >= :pCCustoDe) AND (mvlged.dob_ccusto <= :pCCustoAte)))
 AND ((:pClienteDe IS NULL) OR (dob_cli IN (SELECT cli_cod FROM cdcli WHERE cli_red >= :pClienteDe AND cli_red <= :pClienteAte)))
 AND ((:pFornecDe IS NULL) OR (dob_for IN (SELECT for_cod FROM cdfor WHERE for_red >= :pFornecDe AND for_red <= :pFornecAte)))
 AND ((:pProjeto IS NULL) OR (dob_proj2 IN (SELECT proj2_cod FROM MVLGEd,cdproj2,cdproj WHERE dob_proj2 = proj2_cod AND proj_nom = :pProjeto AND proj2_proj = proj_cod)))
 UNION ALL
 SELECT SUM(lge_val)
 FROM MORLGE
 WHERE (MORLGE.LGE_TIP <> "D" OR MORLGE.LGE_TIP IS NULL)
 AND MORLGE.LGE_PLA LIKE :pPLANO || "%"
 AND MORLGE.LGE_EMI >= :pDATAINI
 AND MORLGE.LGE_EMI <= :pDATAFIN
 AND ((:pContaDe IS NULL) OR (lge_con IN (SELECT con_cod FROM cdcon WHERE con_nom >= :pContaDe AND con_nom <= :pContaAte)))
 AND ((:pCCustoDe IS NULL) OR ((morlge.lge_ccusto >= :pCCustoDe) AND (morlge.lge_ccusto <= :pCCustoAte)))
 AND ((:pClienteDe IS NULL) OR (lge_cli IN (SELECT cli_cod FROM cdcli WHERE cli_red >= :pClienteDe AND cli_red <= :pClienteAte)))
 AND ((:pFornecDe IS NULL) OR (lge_for IN (SELECT for_cod FROM cdfor WHERE for_red >= :pFornecDe AND for_red <= :pFornecAte)))
 AND ((:pProjeto IS NULL) OR (lge_proj2 IN (SELECT proj2_cod FROM morlge,cdproj2,cdproj WHERE lge_proj2 = proj2_cod AND proj_nom = :pProjeto AND proj2_proj = proj_cod)))
 UNION ALL
 SELECT SUM(dob_val)
 FROM MORLGED
 WHERE MORLGED.DOB_PLA LIKE :pPLANO || "%"
 AND MORLGED.DOB_EMI >= :pDATAINI
 AND MORLGED.DOB_EMI <= :pDATAFIN
 AND ((:pContaDe IS NULL) OR (dob_con IN (SELECT con_cod FROM cdcon WHERE con_nom >= :pContaDe AND con_nom <= :pContaAte)))
 AND ((:pCCustoDe IS NULL) OR ((morlged.dob_ccusto >= :pCCustoDe) AND (morlged.dob_ccusto <= :pCCustoAte)))
 AND ((:pClienteDe IS NULL) OR (dob_cli IN (SELECT cli_cod FROM cdcli WHERE cli_red >= :pClienteDe AND cli_red <= :pClienteAte)))
 AND ((:pFornecDe IS NULL) OR (dob_for IN (SELECT for_cod FROM cdfor WHERE for_red >= :pFornecDe AND for_red <= :pFornecAte)))
 AND ((:pProjeto IS NULL) OR (dob_proj2 IN (SELECT proj2_cod FROM morlged,cdproj2,cdproj WHERE dob_proj2 = proj2_cod AND proj_nom = :pProjeto AND proj2_proj = proj_cod)))
 UNION ALL
 SELECT SUM(REC_VAL)
 FROM MVCOREC
 WHERE MVCOREC.REC_PLA LIKE :pPLANO || "%"
 AND MVCOREC.REC_EMI >= :pDATAINI
 AND MVCOREC.REC_EMI <= :pDATAFIN
 AND ((:pContaDe IS NULL) OR (REC_CON IN (SELECT con_cod FROM cdcon WHERE con_nom >= :pContaDe AND con_nom <= :pContaAte)))
 AND ((:pCCustoDe IS NULL) OR ((MVCOREC.REC_CCUSTO >= :pCCustoDe) AND (MVCOREC.REC_ccusto <= :pCCustoAte)))
 AND ((:pClienteDe IS NULL) OR (REC_CLI IN (SELECT CLI_COD FROM cdcli WHERE CLI_RED >= :pClienteDe AND CLI_RED <= :pClienteAte)))
 AND ((:pProjeto IS NULL) OR (REC_PROJ2 IN (SELECT PROJ2_COD FROM MVCOREC, CDPROJ2, CDPROJ WHERE REC_PROJ2 = PROJ2_COD AND PROJ_NOM = :pProjeto AND proj2_proj = proj_cod)))
 UNION ALL
 SELECT SUM(PAG_VAL)*-1
 FROM MVCOPAG
 WHERE MVCOPAG.PAG_PLA LIKE :pPLANO || "%"
 AND MVCOPAG.PAG_EMI >= :pDATAINI
 AND MVCOPAG.PAG_EMI <= :pDATAFIN
 AND ((:pContaDe IS NULL) OR (PAG_CON IN (SELECT con_cod FROM cdcon WHERE con_nom >= :pContaDe AND con_nom <= :pContaAte)))
 AND ((:pCCustoDe IS NULL) OR ((MVCOPAG.PAG_CCUSTO >= :pCCustoDe) AND (MVCOPAG.PAG_ccusto <= :pCCustoAte)))
 AND ((:pFornecDe IS NULL) OR (PAG_FOR IN (SELECT FOR_COD FROM cdfor WHERE FOR_RED >= :pFornecDe AND FOR_RED <= :pFornecAte)))
 AND ((:pProjeto IS NULL) OR (PAG_PROJ2 IN (SELECT PROJ2_COD FROM MVCOREC, CDPROJ2, CDPROJ WHERE REC_PROJ2 = PROJ2_COD AND PROJ_NOM = :pProjeto AND proj2_proj = proj_cod)))
 INTO vSoma DO
 IF (NOT vSoma IS NULL) THEN
 rTotal = vSoma + rTotal;
 END
^

ALTER PROCEDURE BALANCETE_SOMA_COM_ACUM (
    VALOR DOUBLE PRECISION,
    INDICE INTEGER,
    PACUM1 DOUBLE PRECISION,
    PACUM2 DOUBLE PRECISION,
    PACUM3 DOUBLE PRECISION,
    PACUM4 DOUBLE PRECISION,
    PACUM5 DOUBLE PRECISION,
    PACUM6 DOUBLE PRECISION,
    PACUM7 DOUBLE PRECISION,
    PACUM8 DOUBLE PRECISION,
    PACUM9 DOUBLE PRECISION,
    PACUM10 DOUBLE PRECISION)
RETURNS (
    RACUM1 DOUBLE PRECISION,
    RACUM2 DOUBLE PRECISION,
    RACUM3 DOUBLE PRECISION,
    RACUM4 DOUBLE PRECISION,
    RACUM5 DOUBLE PRECISION,
    RACUM6 DOUBLE PRECISION,
    RACUM7 DOUBLE PRECISION,
    RACUM8 DOUBLE PRECISION,
    RACUM9 DOUBLE PRECISION,
    RACUM10 DOUBLE PRECISION,
    RVALOR DOUBLE PRECISION)
AS
 begin
 
 if (INDICE = 1) then
 VALOR = VALOR + PACUM2;
 if (INDICE = 2) then
 VALOR = VALOR + PACUM3;
 if (INDICE = 3) then
 VALOR = VALOR + PACUM4;
 if (INDICE = 4) then
 VALOR = VALOR + PACUM5;
 if (INDICE = 5) then
 VALOR = VALOR + PACUM6;
 if (INDICE = 6) then
 VALOR = VALOR + PACUM7;
 if (INDICE = 7) then
 VALOR = VALOR + PACUM8;
 if (INDICE = 8) then
 VALOR = VALOR + PACUM9;
 if (INDICE = 9) then
 VALOR = VALOR + PACUM10;
 
 if (INDICE = 1) then
 PACUM2 = 0;
 if (INDICE = 2) then
 PACUM3 = 0;
 if (INDICE = 3) then
 PACUM4 = 0;
 if (INDICE = 4) then
 PACUM5 = 0;
 if (INDICE = 5) then
 PACUM6 = 0;
 if (INDICE = 6) then
 PACUM7 = 0;
 if (INDICE = 7) then
 PACUM8 = 0;
 if (INDICE = 8) then
 PACUM9 = 0;
 if (INDICE = 9) then
 PACUM10 = 0;
 
 if (INDICE = 1) then
 PACUM1 = PACUM1 + VALOR;
 if (INDICE = 2) then
 PACUM2 = PACUM2 + VALOR;
 if (INDICE = 3) then
 PACUM3 = PACUM3 + VALOR;
 if (INDICE = 4) then
 PACUM4 = PACUM4 + VALOR;
 if (INDICE = 5) then
 PACUM5 = PACUM5 + VALOR;
 if (INDICE = 6) then
 PACUM6 = PACUM6 + VALOR;
 if (INDICE = 7) then
 PACUM7 = PACUM7 + VALOR;
 if (INDICE = 8) then
 PACUM8 = PACUM8 + VALOR;
 if (INDICE = 9) then
 PACUM9 = PACUM9 + VALOR;
 if (INDICE = 10) then
 PACUM10 = PACUM10 + VALOR;
 
 RVALOR = VALOR;
 RACUM1 = PACUM1;
 RACUM2 = PACUM2;
 RACUM3 = PACUM3;
 RACUM4 = PACUM4;
 RACUM5 = PACUM5;
 RACUM6 = PACUM6;
 RACUM7 = PACUM7;
 RACUM8 = PACUM8;
 RACUM9 = PACUM9;
 RACUM10 = PACUM10;
 
 suspend;
 end
^

ALTER PROCEDURE CALC_DEVOLU (
    PALM INTEGER,
    PCLI INTEGER)
RETURNS (
    VD1_COD VARCHAR(13),
    VD1_CAD TIMESTAMP,
    VD1_ALM INTEGER,
    VD2_COR VARCHAR(3),
    VD2_MED VARCHAR(3),
    VD2_QTD DOUBLE PRECISION,
    VD2_VLR DOUBLE PRECISION,
    VD2_VLRTOT DOUBLE PRECISION,
    PRO_NOM VARCHAR(100),
    COR_NOM VARCHAR(30),
    MED_NOM VARCHAR(30),
    VD1_NOT INTEGER,
    STATUS VARCHAR(20),
    ALM_FANT VARCHAR(20),
    TRA_NOM VARCHAR(40),
    VD2_PRO INTEGER,
    VD1_CLI INTEGER,
    CLI_RED VARCHAR(75))
AS
 DECLARE VARIABLE WCAD DATE;
 DECLARE VARIABLE WALM INTEGER;
 DECLARE VARIABLE WCOR VARCHAR(3);
 DECLARE VARIABLE WMED VARCHAR(3);
 DECLARE VARIABLE WBOL VARCHAR(13);
 DECLARE VARIABLE WQTD DOUBLE PRECISION;
 DECLARE VARIABLE WVLR DOUBLE PRECISION;
 DECLARE VARIABLE WVLRTOT DOUBLE PRECISION;
 DECLARE VARIABLE WPRO_NOM VARCHAR(100);
 DECLARE VARIABLE WCOR_NOM VARCHAR(30);
 DECLARE VARIABLE WMED_NOM VARCHAR(30);
 DECLARE VARIABLE WNOT INTEGER;
 DECLARE VARIABLE WSTAT VARCHAR(20);
 DECLARE VARIABLE WFANT VARCHAR(20);
 DECLARE VARIABLE WTRANOM VARCHAR(40);
 DECLARE VARIABLE WPRO INTEGER;
 DECLARE VARIABLE WCLI INTEGER;
 DECLARE VARIABLE WUSACOR VARCHAR(3);
 DECLARE VARIABLE WUSAMED VARCHAR(3);
 DECLARE VARIABLE WACHOU VARCHAR(1);
 BEGIN
 FOR SELECT VD1_CLI, VD1_COD, VD1_CAD, VD1_ALM, VD2_PRO, VD2_COR, VD2_MED ,VD2_QTD, VD2_VLR, (VD2_QTD*VD2_VLR) ,VD1_NOT, STATUS, ALM_FANT, TRA_NOM
 FROM ESTMVVD1, ESTMVVD2, CDTRA1, CDALM
 WHERE ( (VD1_CLI=:PCLI) OR (:PCLI IS NULL) ) AND ( (VD1_ALM=:PALM) OR (:PALM IS NULL) ) AND TRA_COD=VD1_TRA AND ALM_COD=VD1_ALM
 AND VD1_CANC<>"C" AND VD2_BOL=VD1_COD AND TRA_TIP_TRA="TRC"
 INTO WCLI, WBOL ,WCAD ,WALM, WPRO, WCOR ,WMED , WQTD, WVLR, WVLRTOT, WNOT, WSTAT, WFANT, WTRANOM
 DO
 BEGIN
 
 SELECT PRO_NOM FROM CDPRO WHERE PRO_COD=:WPRO INTO WPRO_NOM;
 SELECT COR_NOM FROM CDCOR WHERE COR_COD=:WCOR INTO WCOR_NOM;
 SELECT MED_NOM FROM CDMED WHERE MED_COD=:WMED INTO WMED_NOM;
 SELECT CLI_RED FROM CDCLI WHERE CLI_COD=:WCLI INTO CLI_RED;
 SELECT P_USA_COR, P_USA_MEDIDA FROM PARAMET INTO WUSACOR, WUSAMED;
 WACHOU='F';
 
 IF ((WUSACOR='T') OR (WUSAMED='T')) THEN
 BEGIN
 IF (NOT EXISTS (SELECT VD10_PRO FROM ESTMVVD10, ESTMVVD9 WHERE VD10_PRO=:WPRO AND VD10_COR=:WCOR AND VD10_MED=:WMED AND VD9_BOL=:WBOL AND VD10_VD9=VD9_COD) ) THEN
 WACHOU='T';
 END
 ELSE
 BEGIN
 IF (NOT EXISTS (SELECT VD10_PRO FROM ESTMVVD10, ESTMVVD9 WHERE VD10_PRO=:WPRO AND VD9_BOL=:WBOL AND VD10_VD9=VD9_COD) ) THEN
 WACHOU='T';
 END
 
 IF (:WACHOU='T') THEN
 BEGIN
 VD1_COD=:WBOL; VD1_CAD=WCAD;
 VD1_ALM=WALM; VD2_COR=WCOR;
 VD2_mED=WMED; VD2_QTD=WQTD;
 VD2_VLR=WVLR; VD2_VLRTOT=WVLRTOT;
 PRO_NOM=WPRO_NOM; COR_NOM=WCOR_NOM;
 MED_NOM=WMED_NOM; VD1_NOT=WNOT;
 STATUS=WSTAT; ALM_FANT=WFANT; VD1_CLI=WCLI;
 TRA_NOM=WTRANOM; PRO_NOM=WPRO_NOM; VD2_PRO=WPRO;
 SUSPEND;
 END
 
 END
 END
^

ALTER PROCEDURE CALC_SALDO (
    PSANT DOUBLE PRECISION,
    POPE TIMESTAMP,
    PCON INTEGER)
RETURNS (
    X NUMERIC(15,1))
AS
DECLARE VARIABLE WCOD INTEGER;
DECLARE VARIABLE WCON INTEGER;
DECLARE VARIABLE WVAL DOUBLE PRECISION;
DECLARE VARIABLE WSAL DOUBLE PRECISION;
DECLARE VARIABLE SATU DOUBLE PRECISION;
BEGIN
    FOR SELECT LGE_COD, LGE_CON, LGE_VAL, LGE_SAL FROM MVLGE
               WHERE LGE_CON = :PCON AND
                     LGE_OPE >= :POPE
               ORDER BY LGE_OPE, LGE_VAL DESC, LGE_COD
    INTO WCOD, WCON, WVAL, WSAL
    DO
      BEGIN
        SATU = PSANT + WVAL;
        UPDATE MVLGE
           SET LGE_SAL = :SATU
           WHERE LGE_COD = :WCOD;
        PSANT = SATU;
    END
END
^

ALTER PROCEDURE CALC_VLRLIQ (
    PBOL VARCHAR(13),
    PDESCP DOUBLE PRECISION,
    PDESCV DOUBLE PRECISION)
RETURNS (
    LIQUIDO DOUBLE PRECISION)
AS
 DECLARE VARIABLE WVLRVD2LIQ DOUBLE PRECISION;
 DECLARE VARIABLE WVLRVD2LIQTOT DOUBLE PRECISION;
 BEGIN
 WVLRVD2LIQTOT=0;
 FOR SELECT ((VD2_VLR-(VD2_VLR*(DESCONTOITEM/100)))*VD2_QTD)
 FROM ESTMVVD2 WHERE VD2_BOL=:pBol
 INTO WVLRVD2LIQ
 DO
 BEGIN
 WVLRVD2LIQTOT=WVLRVD2LIQTOT+Coalesce(WVLRVD2LIQ,0);
 END
 WVLRVD2LIQTOT=WVLRVD2LIQTOT-((PDESCP/100)*WVLRVD2LIQTOT);
 WVLRVD2LIQTOT=WVLRVD2LIQTOT-PDESCV;
 LIQUIDO=WVLRVD2LIQTOT;
 SUSPEND;
 END
^

ALTER PROCEDURE CALCULA_ESTOQUE (
    VPARAMCOR INTEGER,
    VPARAMMED INTEGER,
    VCASAS_DECIMAIS INTEGER,
    VDATA TIMESTAMP,
    VPRODUTO INTEGER,
    VCOR VARCHAR(3),
    VMEDIDA VARCHAR(3),
    VALM INTEGER,
    VCOMPCONT INTEGER,
    VFILTROATIVO INTEGER)
RETURNS (
    VVD2CAD TIMESTAMP,
    VPROANT INTEGER,
    VALMANT INTEGER,
    VMEDANT VARCHAR(5),
    VCORANT VARCHAR(5),
    VSALDO DOUBLE PRECISION,
    VULTCUSTO DOUBLE PRECISION,
    VCUSTOMEDIO DOUBLE PRECISION,
    VSALDO_SEM_CONTAGEM DOUBLE PRECISION)
AS
DECLARE VARIABLE VPROCOD INTEGER;
DECLARE VARIABLE VPRO_FAT_CMP DOUBLE PRECISION;
DECLARE VARIABLE VPRO_FAT_VND DOUBLE PRECISION;
DECLARE VARIABLE VPRO_FAT_USO DOUBLE PRECISION;
DECLARE VARIABLE VVD2ALM INTEGER;
DECLARE VARIABLE VVD2MED VARCHAR(3);
DECLARE VARIABLE VVD2COR VARCHAR(3);
DECLARE VARIABLE VVD1ORI VARCHAR(3);
DECLARE VARIABLE VTRAINF VARCHAR(1);
DECLARE VARIABLE VTRAINFCUS VARCHAR(1);
DECLARE VARIABLE VTRAPROUNI VARCHAR(20);
DECLARE VARIABLE VUSADIMENSAO VARCHAR(1);
DECLARE VARIABLE VUNIUSADIMPRECO VARCHAR(1);
DECLARE VARIABLE VVD2VLR DOUBLE PRECISION;
DECLARE VARIABLE VVD2QTD DOUBLE PRECISION;
DECLARE VARIABLE VQUANTIDADEMOVIMENTADA DOUBLE PRECISION;
DECLARE VARIABLE VVD2CMP DOUBLE PRECISION;
DECLARE VARIABLE VVD2LRG DOUBLE PRECISION;
DECLARE VARIABLE VVD2ALT DOUBLE PRECISION;
DECLARE VARIABLE VVD2UCUS DOUBLE PRECISION;
DECLARE VARIABLE VDIMENSAO DOUBLE PRECISION;
DECLARE VARIABLE VARREDONDA INTEGER;
DECLARE VARIABLE VDATAU DATE;
DECLARE VARIABLE VDATAI DATE;
DECLARE VARIABLE VIGNORA_COR VARCHAR(1);
DECLARE VARIABLE VIGNORA_MED VARCHAR(1);
DECLARE VARIABLE VCONTALM INTEGER;
DECLARE VARIABLE VCNT INTEGER;
DECLARE VARIABLE VCONTEST INTEGER;
DECLARE VARIABLE VDATAALM DATE;
DECLARE VARIABLE VDATAUX DATE;
DECLARE VARIABLE VALIQIPI DOUBLE PRECISION;
DECLARE VARIABLE VALIQICMS DOUBLE PRECISION;
DECLARE VARIABLE VSEMESTOQUE VARCHAR(1);
DECLARE VARIABLE VVD2BOL VARCHAR(13);
DECLARE VARIABLE VFATOR DOUBLE PRECISION;
begin
 if (vCasas_Decimais = 0) then
 vArredonda = 1;
 else if (vCasas_Decimais = 1) then
 vArredonda = 10;
 else if (vCasas_Decimais = 2) then
 vArredonda = 100;
 else if (vCasas_Decimais = 3) then
 vArredonda = 1000;
 else if (vCasas_Decimais = 4) then
 vArredonda = 10000;
 else if (vCasas_Decimais = 5) then
 vArredonda = 100000;
 else if (vCasas_Decimais = 6) then
 vArredonda = 1000000;
 
 if (vFiltroAtivo is null) then
 vFiltroAtivo = 0;
 if (vCompCont is null) then
 vCompCont = 0;
 if (vParamCor = 1) then
 vIgnora_Cor = '';
 else
 vCor = null;
 if (vParamMed = 1) then
 vIgnora_Med = '';
 else
 vMedida = null;
 if (vData is null) then
 vData = cast('today' as date);
 
 if (vAlm is null) then
 begin
 Select count(alm_cod)from cdalm Where ativo = 'A' and exists(Select first 1 est_alm from mvestdat where est_alm = cdalm.alm_cod)into vcontalm;
 for
 select distinct est_dat
 from mvestdat, cdalm
 where cdalm.alm_cod = mvestdat.est_alm
 and cdalm.ativo = 'A'
 and mvestdat.est_dat <= :vData
 order by 1 desc
 Into vDataAlm do
 begin
 vContest = 0;
 for
 Select est_alm
 from mvestdat, cdalm
 where cdalm.alm_cod = mvestdat.est_alm
 and cdalm.ativo = 'A'
 and est_dat = :vDataAlm
 group by est_alm
 into :vcnt do
 vContest = vContest + 1;
 if (vContest = vContalm) then
 begin
 vDataU = vdataAlm;
 break;
 end
 end
 end
 else
 select max(est_dat)
 from mvestdat
 where est_dat <= :vData
 and est_alm = :vAlm
 into vDataU;
 
 if (vDataU is Null) then
 select Min(vd2_cad)
 from estmvvd2
 into vDataI;
 else
 vDataI = vDataU + 1;
 
 select p_usa_dimensao
 from PARAMETPRO
 into :vusadimensao;
 
 vProAnt = -1;
 vCorAnt = '000';
 vMedAnt = '000';
 vAlmAnt = -1;
 for
 Select vd2_cad, vd2_pro, vd2_med || :vIgnora_Med, vd2_cor || :vIgnora_Cor,
 vd2_alm, tra_inf, tra_inf_cus,
 vd2_vlr, Sum(vd2_qtd), vd2_cmp, vd2_lrg, vd2_alt,
 vd1_origem, uni_usa_dim_no_preco, vd2_aliquota_ipi, vd2_aliquota_icms, vd2_vlr,
 coalesce(cdpro.pro_sem_estoque, 'F'), vd2_bol,
 PRO_FAT_VND, PRO_FAT_CMP, PRO_FAT_USO, TRA_PRO_UNIDADE
 from estmvvd1
 left outer join cdtra1 on(tra_cod = vd1_tra and (tra_lay_pdv = 'PS' or tra_lay_pdv = 'PRO'))
 inner join estmvvd2 on(vd1_alm = vd2_alm and vd1_cad = vd2_cad and vd1_cod = vd2_bol)
 left join cdpro on(pro_cod = vd2_pro)
 left join cdunidade on (cdunidade.codigo = ( case when ( :vusadimensao = 'T' ) then pro_unm else pro_uni end))
 where((vd1_canc <> 'C') and (vd1_canc <> 'CF') and (vd1_canc <> 'TP'))
 and ((vd2_ser = 0) or (vd2_ser is null))
 and vd2_cad between :vDataI and :vData
 and ((vd2_alm = :vAlm) or (:vAlm is null))
 and ((vd2_pro = :vproduto) or ( :vproduto is null))
 and ((vd2_cor = :vcor) or (:vcor is null))
 and ((vd2_med = :vmedida) or (:vmedida is null))
 and ((:vfiltroativo <> 1) or (cdpro.ativo = 'A'))
 and ((:vfiltroativo <> 1) or (:vParamCor <> 1) or (:vParamMed <> 1) or
 exists(select ativo from cdprocm where(estmvvd2.vd2_pro = pro_pro and
 estmvvd2.vd2_cor = pro_cor and estmvvd2.vd2_med = pro_med and ativo = 'A')))
 Group By 1, 2, 3, 4,
 5, 6, 7, 8, 10, 11, 12,
 13, 14, 15, 16, 18, 19, 20, 21, 22, 23
 union all
 Select est_dat, est_pro, est_tam || :vIgnora_Med, est_cor || :vIgnora_Cor,
 est_alm, cast('+' as varchar(1)), cast('S' as varchar(1)), est_cmed, est_sal,
 cast(1 as double precision), cast(1 as double precision), cast(1 as double precision),
 cast('000' as varchar(3)), cast('F' as varchar(1)), cast(0 as double precision),
 cast(0 as double precision), est_ucus, coalesce(cdpro.pro_sem_estoque, 'F'),
 cast('' as varchar(13)), cast(0 as double precision), cast(0 as double precision), cast(0 as double precision), cast('PRO_UNM' as VARCHAR(20))
 from mvestdat
 left join cdpro on(est_pro = cdpro.pro_cod)
 where est_dat = :vDataU
 and ((est_alm = :vAlm) or (:vAlm is null))
 and ((est_pro = :vproduto) or (:vproduto is null))
 and ((est_cor = :vcor) or (:vcor is null))
 and ((est_tam = :vmedida) or (:vmedida is null))
 and ((:vfiltroativo <> 1) or (cdpro.ativo = 'A'))
 and ((:vfiltroativo <> 1) or (:vParamCor <> 1) or (:vParamMed <> 1) or
 Exists(select ativo from cdprocm where(mvestdat.est_pro = pro_pro and
 mvestdat.est_cor = pro_cor and mvestdat.est_tam = pro_med and ativo = 'A')))
 order By 5 Asc, 2 Asc, 4 Asc, 3 Asc, 1 Asc, 13 desc
 Into vDatAux, vProCod, vVd2Med, vVd2Cor, vVd2Alm, vTraInf, vTraInfCus,
 vVd2Vlr, vVd2Qtd, vVd2Cmp, vVd2Lrg, vVd2Alt, vVd1Ori, vUniUsaDimPreco,
 vAliqIpi, vAliqIcms, vVd2UCus, vSemEstoque, vvd2bol, VPRO_FAT_VND, VPRO_FAT_CMP, VPRO_FAT_USO, vTraProUni
 do begin
 
 if (vProCod = 181 and vVd2Cor = '868' and vVd2Med = '005') then
 vusadimensao = vusadimensao;
 
 if (vParamCor = 0) then
 vVd2Cor = '000';
 
 if (vParamMed = 0) then
 vVd2Med = '000';
 
 if ((vProAnt <> vProCod) or (Coalesce(vCorAnt, '') <> Coalesce(vVd2Cor, '')) or (Coalesce(vMedAnt, '') <> Coalesce(vVd2Med, '')) or (vAlmAnt <> vVd2Alm)) then
 begin
 if (vProAnt > 0) then
 suspend;
 vUltCusto = 0;
 vCustoMedio = 0;
 vSaldo = 0;
 vSaldo_Sem_Contagem = 0;
 end
 vProAnt = vProCod;
 vCorAnt = vVd2Cor;
 vMedAnt = vVd2Med;
 vAlmAnt = vVd2Alm;
 vVd2Cad = vDatAux;
 if (vVd1Ori = '000') then
 vCustoMedio = vVd2Vlr;
 if (vCustoMedio is null) then
 vCustoMedio = 0;
 if (vAliqIPI is null) then
 vAliqIPI = 0;
 if (vAliqICMS is null) then
 vAliqICMS = 0;
 if (vSaldo is null) then
 begin
 vSaldo = 0;
 vSaldo_Sem_Contagem = 0;
 end
 if ((vUsaDimensao = 'T') and (vUniUsaDimPreco = 'T')) then
 vDimensao = (case when nullif(vvd2cmp, 0) is null then 1 else vvd2cmp end) *
 (case when nullif(vvd2lrg, 0) is null then 1 else vvd2lrg end) *
 (case when nullif(vvd2alt, 0) is null then 1 else vvd2alt end);
 else
 vDimensao = 1;
 if (vSemEstoque = 'T') then
 vQuantidadeMovimentada = 0;
 else if ((vTraInf = '+') or (vVd1Ori = 'CNT')) then
 vQuantidadeMovimentada = vVd2Qtd * vDimensao;
 else if (vTraInf = '-') then
 vQuantidadeMovimentada = (vVd2Qtd * -1) * vDimensao;
 else
 vQuantidadeMovimentada = 0;
 
 if ((vTraInf <> 'N') and ((vTraInfCus = 'S') or (vTraInfCus = 'C') or (vTraInfCus = 'P') or (vTraInfCus = 'T'))) then
 begin
 if (vVd2Vlr is Null) then
 vUltCusto = 0;
 else
 begin
 vUltCusto = cast(vVd2UCus * vArredonda as integer) / vArredonda;
 if ((vTraInfCus = 'T') or (vTraInfCus = 'C')) then
 vUltCusto = vUltCusto - Cast(((vVd2Vlr * vAliqICMS / 100) * vArredonda) as integer) / vArredonda;
 if ((vTraInfCus = 'T') or (vTraInfCus = 'P')) then
 vUltCusto = vUltCusto + Cast(((vVd2Vlr * vAliqIPI / 100) * vArredonda) as integer) / vArredonda;
 end
 if (((vSaldo + vVd2Qtd) > 0) and ((vCustoMedio + vVd2Vlr) > 0)) then
 vCustoMedio = (((vCustoMedio * vSaldo) + (vVd2Vlr * vVd2Qtd)) / (vVd2Qtd + vSaldo));
 end
 vCustoMedio = Cast((vCustoMedio * vArredonda) as integer) / vArredonda;
 
 if (vUsaDimensao = 'T') then
 vTraProUni = 'PRO_UNM';
 
 if ((vUsaDimensao <> 'T' ) and ( vTraProUni <> 'PRO_UNI_USO' ) and
 (VPRO_FAT_USO <> 0.0 ) and (vQuantidadeMovimentada <> 0.0 ) ) then
 begin
 if ( vTraProUni = 'PRO_UNI' ) then
 begin
 if ( VPRO_FAT_VND <> 0.0 ) then
 vFator = ( VPRO_FAT_VND / VPRO_FAT_USO);
 end
 else
 begin
 if ( VPRO_FAT_CMP <> 0.0 ) then
 vFator = (VPRO_FAT_CMP / VPRO_FAT_USO);
 end
 vQuantidadeMovimentada = vQuantidadeMovimentada * vFator;
 end
 
 if (vSaldo is Null) then
 begin
 vSaldo = vQuantidadeMovimentada;
 vSaldo_Sem_Contagem = vSaldo;
 end
 else
 if (vVd1Ori = 'CNT') then
 begin
 vSaldo = vQuantidadeMovimentada;
 if ((vCompCont <> 1) or (vDatAux <> vData)) then
 vSaldo_Sem_Contagem = vSaldo;
 end
 else
 begin
 vSaldo = vQuantidadeMovimentada + vSaldo;
 vSaldo_Sem_Contagem = vSaldo;
 end
 end
 if (vproant > 0) then
 suspend;
 end
^

ALTER PROCEDURE CALCULA_ESTOQUE_BASE (
    VPARAMCOR INTEGER,
    VPARAMMED INTEGER,
    VCASAS_DECIMAIS INTEGER,
    VDATA_DE TIMESTAMP,
    VDATA_ATE TIMESTAMP,
    VALM_DE VARCHAR(20),
    VALM_ATE VARCHAR(20),
    VPRODUTO_DE VARCHAR(100),
    VPRODUTO_ATE VARCHAR(100),
    VCOR_DE VARCHAR(30),
    VCOR_ATE VARCHAR(30),
    VMEDIDA_DE VARCHAR(30),
    VMEDIDA_ATE VARCHAR(30),
    VCAT_DE VARCHAR(30),
    VCAT_ATE VARCHAR(30),
    VTIP_DE VARCHAR(30),
    VTIP_ATE VARCHAR(30),
    VMAR_DE VARCHAR(30),
    VMAR_ATE VARCHAR(30),
    VGRU_DE VARCHAR(30),
    VGRU_ATE VARCHAR(30),
    VSUBGRU_DE VARCHAR(30),
    VSUBGRU_ATE VARCHAR(30),
    VUNI_DE VARCHAR(5),
    VUNI_ATE VARCHAR(5),
    VTABPRECO VARCHAR(10),
    VFILTROATIVO INTEGER,
    VSO_COM_CONTAGEM INTEGER)
RETURNS (
    VD2_CAD TIMESTAMP,
    PRO_COD INTEGER,
    PRO_NOM VARCHAR(100),
    PRO_INT VARCHAR(15),
    PRO_BAR VARCHAR(15),
    PRO_CODCM VARCHAR(21),
    ALM_COD INTEGER,
    ALM_FANT VARCHAR(20),
    MED_COD VARCHAR(3),
    MED_NOM VARCHAR(30),
    MED_ORDEM VARCHAR(40),
    COR_COD VARCHAR(3),
    COR_NOM VARCHAR(30),
    CAT_COD INTEGER,
    CAT_NOM VARCHAR(30),
    CAT_ORD VARCHAR(40),
    TIP_COD INTEGER,
    TIP_NOM VARCHAR(30),
    TIP_ORD VARCHAR(40),
    MAR_COD INTEGER,
    MAR_NOM VARCHAR(30),
    MAR_ORD VARCHAR(40),
    GRU_COD INTEGER,
    GRU_NOM VARCHAR(30),
    GRU_ORD VARCHAR(40),
    SUBGRU_COD INTEGER,
    SUBGRU_NOM VARCHAR(30),
    SUBGRU_ORD VARCHAR(40),
    VPRECO DOUBLE PRECISION,
    VSALDO DOUBLE PRECISION,
    VULTCUSTO DOUBLE PRECISION,
    VCUSTOMEDIO DOUBLE PRECISION,
    VSALDO_SEM_CONTAGEM DOUBLE PRECISION,
    SIGLA VARCHAR(5))
AS
 declare variable vprocod integer;
 declare variable vvd2cad date;
 declare variable vvd2alm integer;
 declare variable vvd2med varchar(3);
 declare variable vvd2cor varchar(3);
 declare variable vpronom varchar(100);
 declare variable valmfant varchar(20);
 declare variable vmednom varchar(30);
 declare variable vmedordem varchar(40);
 declare variable vcornom varchar(30);
 declare variable vcatcod integer;
 declare variable vcatnom varchar(30);
 declare variable vcatde varchar(40);
 declare variable vcatate varchar(40);
 declare variable vcatord varchar(40);
 declare variable vtipcod integer;
 declare variable vtipnom varchar(30);
 declare variable vtipde varchar(40);
 declare variable vtipate varchar(40);
 declare variable vtipord varchar(40);
 declare variable vmarcod integer;
 declare variable vmarnom varchar(30);
 declare variable vmarde varchar(40);
 declare variable vmarate varchar(40);
 declare variable vmarord varchar(40);
 declare variable vgrucod integer;
 declare variable vgrunom varchar(30);
 declare variable vgrude varchar(40);
 declare variable vgruate varchar(40);
 declare variable vgruord varchar(40);
 declare variable vsubgrucod integer;
 declare variable vsubgrunom varchar(30);
 declare variable vsubgrude varchar(40);
 declare variable vsubgruate varchar(40);
 declare variable vsubgruord varchar(40);
 declare variable vvd1ori varchar(3);
 declare variable vtrainf varchar(1);
 declare variable vtrainfcus varchar(1);
 declare variable vvd2vlr double precision;
 declare variable vvd2qtd double precision;
 declare variable vquantidademovimentada double precision;
 declare variable varredonda integer;
 declare variable vdatau date;
 declare variable vdatai date;
 declare variable vignora_cor varchar(1);
 declare variable vignora_med varchar(1);
 declare variable vcomsaldo integer;
 declare variable vsemmovimento integer;
 declare variable vproint varchar(15);
 declare variable vprobar varchar(15);
 declare variable vprocodcm varchar(21);
 declare variable vcontagem integer;
 declare variable vpro_tba double precision;
 declare variable vpro_tbb double precision;
 declare variable vpro_tbc double precision;
 declare variable vpro_tbd double precision;
 declare variable vpro_tbe double precision;
 declare variable vpro_tbf double precision;
 declare variable vpro_tbg double precision;
 declare variable vpro_tbh double precision;
 declare variable vpro_tbi double precision;
 declare variable vpro_tbj double precision;
 declare variable vpro_tbk double precision;
 declare variable vpro_tbl double precision;
 declare variable vpro_tbm double precision;
 declare variable vpro_tbn double precision;
 declare variable vpro_tbo double precision;
 declare variable vpro_tbp double precision;
 declare variable vpro_tbq double precision;
 declare variable vpro_tbr double precision;
 declare variable vpro_tbs double precision;
 declare variable vpro_tbt double precision;
 declare variable vpro_tbu double precision;
 declare variable vpro_tbv double precision;
 declare variable vpro_tbw double precision;
 declare variable vpro_tbx double precision;
 declare variable vpro_tby double precision;
 declare variable vpro_tbz double precision;
 declare variable vdataalm date;
 declare variable vcontest integer;
 declare variable vcontalm integer;
 declare variable vprecocor varchar(1);
 declare variable vprecomedida varchar(1);
 declare variable vunidade varchar(5);
 declare variable vauxcontalm integer;
 declare variable vsemestoque varchar(1);
 Begin
 if (vCasas_Decimais = 0) then
 vArredonda = 1;
 else if (vCasas_Decimais = 1) then
 vArredonda = 10;
 else if (vCasas_Decimais = 2) then
 vArredonda = 100;
 else if (vCasas_Decimais = 3) then
 vArredonda = 1000;
 else if (vCasas_Decimais = 4) then
 vArredonda = 10000;
 else if (vCasas_Decimais = 5) then
 vArredonda = 100000;
 else if (vCasas_Decimais = 6) then
 vArredonda = 1000000;
 if (vFiltroAtivo is null) then
 vFiltroAtivo = 0;
 if (vSo_com_Contagem is null) then
 vSo_com_Contagem = 0;
 if (vParamCor = 1) then
 vIgnora_Cor = "";
 else
 begin
 vCor_De = null;
 vCor_Ate = null;
 end
 if (vParamMed = 1) then
 vIgnora_Med = "";
 else
 begin
 vMedida_De = null;
 vMedida_Ate = null;
 end
 if (vData_de is null) then
 select min(con_dat)
 from mvcontest1
 into vData_de;
 if (vData_de is null) then
 vData_de = cast("today" as date);
 if (vData_ate is null) then
 vData_ate = cast("today" as date);
 
 Select PRECO_COR, PRECO_MEDIDA
 From PARAMET into :VPRECOCOR, :VPRECOMEDIDA;
 
 if (vData_de is not null) then
 begin
 vcontalm = 0;
 For Select distinct est_alm from mvestdat into vauxcontalm do vcontalm = vcontalm + 1;
 For
 Select distinct est_dat
 From mvestdat
 where est_dat < :vData_de
 order by 1 desc
 Into vDataAlm do
 begin
 Select count(distinct est_alm) from mvestdat where est_dat = :vDataAlm into :vcontest;
 if (vContest = vContalm) then
 begin
 vDataU = vdataAlm;
 break;
 end
 end
 end
 
 
 if (vDataU Is Null) then
 Select Min(vd2_cad)
 From estmvvd2
 Into vDataI;
 else
 vDataI = vDataU+1;
 
 VMARDE = null;
 VMARATE = null;
 if (:vmar_de is not null)then
 begin
 SELECT MAR_ORD FROM CDMAR WHERE MAR_NOM = :VMAR_DE INTO :VMARDE;
 SELECT MAR_ORD FROM CDMAR WHERE MAR_NOM = :VMAR_ATE INTO :VMARATE;
 end
 
 VTIPDE = null;
 VTIPATE = NULL;
 IF (:vtip_de is not null)THEN
 begin
 SELECT TIP_ORD FROM CDTIPP WHERE TIP_NOM = :VTIP_DE INTO :VTIPDE;
 SELECT TIP_ORD FROM CDTIPP WHERE TIP_NOM = :VTIP_ATE INTO :VTIPATE;
 END
 
 VCATDE = NULL;
 VCATATE = NULL;
 IF (:vcat_de is not null) THEN
 BEGIN
 SELECT CAT_ORD FROM CDCATPRO WHERE CAT_NOM = :VCAT_DE INTO :VCATDE;
 SELECT CAT_ORD FROM CDCATPRO WHERE CAT_NOM = :VCAT_ATE INTO :VCATATE;
 END
 
 VGRUDE = NULL;
 VGRUATE = NULL;
 IF (:vgru_de is not null) THEN
 BEGIN
 SELECT GRU_ORD FROM CDGRUP WHERE GRU_NOM = :VGRU_DE INTO :VGRUDE;
 SELECT GRU_ORD FROM CDGRUP WHERE GRU_NOM = :VGRU_ATE INTO :VGRUATE;
 END
 
 VSUBGRUDE = NULL;
 VSUBGRUATE = NULL;
 IF (:vsubgru_de is not null) THEN
 BEGIN
 SELECT GRU_ORD FROM CDSUBGRUP WHERE GRU_NOM = :VSUBGRU_DE INTO :VSUBGRUDE;
 SELECT GRU_ORD FROM CDSUBGRUP WHERE GRU_NOM = :VSUBGRU_ATE INTO :VSUBGRUATE;
 END
 
 PRO_COD = -1;
 COR_COD = "000";
 MED_COD = "000";
 ALM_COD = -1;
 vContagem = 0;
 For
 Select vd2_cad, vd2_pro, vd2_med || :vIgnora_Med, vd2_cor || :vIgnora_Cor,
 vd2_alm, tra_inf, tra_inf_cus, vd2_vlr, vd2_qtd, vd1_origem ,
 alm_fant, pro_nom, cor_nom || :vIgnora_Cor, med_nom || :vIgnora_Med, MED_ORDEM, cat_cod,
 cat_nom, CAT_ORD, tip_cod, tip_nom, TIP_ORD, mar_cod, mar_nom, MAR_ORD,
 cdgrup.gru_cod, cdgrup.gru_nom, CDGRUP.gru_ord,
 cdsubgrup.gru_cod, cdsubgrup.gru_nom, CDSUBGRUP.gru_ord, cdpro.pro_int, cdpro.pro_bar, cdprocm.pro_cod,
 pro_tba, pro_tbb, pro_tbc, pro_tbd, pro_tbe, pro_tbf,
 pro_tbg, pro_tbh, pro_tbi, pro_tbj, pro_tbk, pro_tbl,
 pro_tbm, pro_tbn, pro_tbo, pro_tbp, pro_tbq, pro_tbr,
 pro_tbs, pro_tbt, pro_tbu, pro_tbv, pro_tbw, pro_tbx,
 pro_tby, pro_tbz, cdunidade.sigla, coalesce(cdpro.pro_sem_estoque, 'F')
 from estmvvd1
 inner join estmvvd2 on (vd1_alm = vd2_alm and vd1_cad = vd2_cad and vd1_cod = vd2_bol)
 left join cdtra1 on (tra_cod = vd1_tra and ( tra_lay_pdv = "PS" or tra_lay_pdv = "PRO" ))
 inner join cdalm on (estmvvd2.vd2_alm = alm_cod)
 inner join cdpro on (estmvvd2.vd2_pro = pro_cod)
 left outer join cdcor on (estmvvd2.vd2_cor = cor_cod)
 left outer join cdmed on (estmvvd2.vd2_med = med_cod)
 left outer join cdmar on (cdpro.pro_mar = mar_cod)
 left outer join cdtipp on (cdpro.pro_tip = tip_cod)
 left outer join cdcatpro on (cdpro.pro_cat = cat_cod)
 left outer join cdgrup on (cdpro.pro_gru = gru_cod)
 left outer join cdsubgrup on (cdpro.pro_subgru = gru_cod)
 left outer join cdprocm on (estmvvd2.vd2_pro = cdprocm.pro_pro and estmvvd2.vd2_cor = cdprocm.pro_cor and estmvvd2.vd2_med = cdprocm.pro_med)
 left outer join cdpropre on (estmvvd2.vd2_pro = cdpropre.pro_pro and ((:vprecocor <> 'T' and :vprecomedida <> 'T') or (estmvvd2.vd2_cor = cdpropre.pro_cor and estmvvd2.vd2_med = cdpropre.pro_med)))
 left outer join cdunidade on (cdpro.pro_uni = cdunidade.codigo)
 Where ((vd1_canc <> 'C') and (vd1_canc <> 'CF'))
 and ( (vd2_ser = 0) or (vd2_ser is null) )
 and vd2_cad between :vDataI and :vData_ate
 and ((:vAlm_de is null) or (alm_fant between :vAlm_de and :vAlm_ate))
 and ((:vProduto_De is null) or (pro_nom between :vProduto_De and :vProduto_Ate))
 and ((:vcor_de is null) or (cor_nom between :vcor_de and :vcor_ate))
 and ((:vmedida_de is null) or (med_nom between :vmedida_de and :vmedida_ate))
 and ((:vmarde is null) or (mar_ord between :vmarde and :vmarate))
 and ((:vtipde is null) or (tip_ord between :vtipde and :vtipate))
 and ((:vcatde is null) or (cat_ord between :vcatde and :vcatate))
 and ((:vgrude is null) or (gru_ord between :vgrude and :vgruate))
 and ((:vsubgrude is null) or (gru_ord between :vsubgrude and :vsubgruate))
 and ((:vfiltroativo <> 1) or (cdpro.ativo = "A"))
 and ((:vfiltroativo <> 1) or (:vParamCor <> 1) or (:vParamMed <> 1) or (cdprocm.ativo = "A"))
 and ((:vfiltroativo <> 1) or (:vParamCor <> 1) or (:vParamMed <> 1) or
 Exists(select ativo from cdprocm where (estmvvd2.vd2_pro = pro_pro and
 estmvvd2.vd2_cor = pro_cor and estmvvd2.vd2_med = pro_med and ativo = "A")))
 union all
 Select est_dat, est_pro, est_tam || :vIgnora_Med, est_cor || :vIgnora_Cor,
 est_alm, cast("+" as varchar(1)), cast("N" as varchar(1)), est_cmed, est_sal,
 cast("000" as varchar(3)) ,
 alm_fant, pro_nom, cor_nom || :vIgnora_Cor, med_nom || :vIgnora_Med, MED_ORDEM, cat_cod,
 cat_nom, cat_ord, tip_cod, tip_nom, tip_ord, mar_cod, mar_nom, mar_ord,
 cdgrup.gru_cod, cdgrup.gru_nom, cdgrup.gru_ord,
 cdsubgrup.gru_cod, cdsubgrup.gru_nom, cdsubgrup.gru_ord, cdpro.pro_int, cdpro.pro_bar, cdprocm.pro_cod,
 pro_tba, pro_tbb, pro_tbc, pro_tbd, pro_tbe, pro_tbf,
 pro_tbg, pro_tbh, pro_tbi, pro_tbj, pro_tbk, pro_tbl,
 pro_tbm, pro_tbn, pro_tbo, pro_tbp, pro_tbq, pro_tbr,
 pro_tbs, pro_tbt, pro_tbu, pro_tbv, pro_tbw, pro_tbx,
 pro_tby, pro_tbz, cdunidade.sigla, coalesce(cdpro.pro_sem_estoque, 'F')
 from mvestdat X
 inner join cdpro on (X.est_pro = pro_cod)
 left outer join cdalm on (X.est_alm = alm_cod)
 left outer join cdcor on (X.est_cor = cor_cod)
 left outer join cdmed on (X.est_tam = med_cod)
 left outer join cdmar on (cdpro.pro_mar = mar_cod)
 left outer join cdtipp on (cdpro.pro_tip = tip_cod)
 left outer join cdcatpro on (cdpro.pro_cat = cat_cod)
 left outer join cdgrup on (cdpro.pro_gru = gru_cod)
 left outer join cdsubgrup on (cdpro.pro_subgru = gru_cod)
 left outer join cdprocm on (X.est_pro = cdprocm.pro_pro and X.est_cor = cdprocm.pro_cor and X.est_tam = cdprocm.pro_med)
 left outer join cdpropre on (X.est_pro = cdpropre.pro_pro and ((:vprecocor <> 'T' and :vprecomedida <> 'T') or (X.est_cor = cdpropre.pro_cor and X.est_tam = cdpropre.pro_med)))
 left outer join cdunidade on (cdpro.pro_uni = cdunidade.codigo)
 where est_dat = :vDataU
 and ((:vAlm_de is null) or (alm_fant between :vAlm_de and :vAlm_ate))
 and ((:vProduto_De is null) or (pro_nom between :vProduto_De and :vProduto_Ate))
 and ((:vcor_de is null) or (cor_nom between :vcor_de and :vcor_ate))
 and ((:vmedida_de is null) or (med_nom between :vmedida_de and :vmedida_ate))
 and ((:vmarde is null) or (mar_ord between :vmarde and :vmarate))
 and ((:vtipde is null) or (tip_ord between :vtipde and :vtipate))
 and ((:vcatde is null) or (cat_ord between :vcatde and :vcatate))
 and ((:vgrude is null) or (gru_ord between :vgrude and :vgruate))
 and ((:vsubgrude is null) or (gru_ord between :vsubgrude and :vsubgruate))
 and ((:vfiltroativo <> 1) or (cdpro.ativo = "A"))
 and ((:vfiltroativo <> 1) or (:vParamCor <> 1) or (:vParamMed <> 1) or (cdprocm.ativo = "A"))
 Order By 11 Asc, 12 Asc, 13 Asc, 14 Asc, 1 Asc, 10 desc
 Into vVD2CAD, vPROCOD, vVd2Med, vVd2Cor, vVd2Alm, vTraInf, vTraInfCus, vVd2Vlr,
 vVd2Qtd, vVd1Ori, vALMFANT, VPRONOM, VCORNOM, VMEDNOM, VMEDORDEM, VCATCOD, VCATNOM, VCATORD,
 VTIPCOD, VTIPNOM, VTIPORD, VMARCOD, VMARNOM, VMARORD, VGRUCOD, VGRUNOM, VGRUORD,
 VSUBGRUCOD, VSUBGRUNOM, VSUBGRUORD, VPROINT, VPROBAR, VPROCODCM, VPRO_TBA, VPRO_TBB,
 VPRO_TBC, VPRO_TBD, VPRO_TBE, VPRO_TBF, VPRO_TBG, VPRO_TBH, VPRO_TBI, VPRO_TBJ, VPRO_TBK,
 VPRO_TBL, VPRO_TBM, VPRO_TBN, VPRO_TBO, VPRO_TBP, VPRO_TBQ, VPRO_TBR, VPRO_TBS, VPRO_TBT,
 VPRO_TBU, VPRO_TBV, VPRO_TBW, VPRO_TBX, VPRO_TBY, VPRO_TBZ, VUNIDADE, VSEMESTOQUE
 Do Begin
 if (vParamCor = 0) then
 vVd2Cor = "000";
 if (vParamMed = 0) then
 vVd2Med = "000";
 if ((PRO_COD <> vProCod) or (COR_COD <> vVd2Cor) or (MED_COD <> vVd2Med) or (ALM_COD <> vVd2Alm)) then
 begin
 if ((PRO_COD > 0) and (VD2_CAD >= vData_de) and ((vSo_Com_contagem <> 1) or (vContagem = 1))) then
 suspend;
 vUltCusto = 0;
 vCustoMedio = 0;
 vSaldo = 0;
 vSaldo_Sem_Contagem = 0;
 vContagem = 0;
 VPRECO = -1;
 if (VTABPRECO = "PRO_TBA") then VPRECO = VPRO_TBA;
 if (VTABPRECO = "PRO_TBB") then VPRECO = VPRO_TBB;
 if (VTABPRECO = "PRO_TBC") then VPRECO = VPRO_TBC;
 if (VTABPRECO = "PRO_TBD") then VPRECO = VPRO_TBD;
 if (VTABPRECO = "PRO_TBE") then VPRECO = VPRO_TBE;
 if (VTABPRECO = "PRO_TBF") then VPRECO = VPRO_TBF;
 if (VTABPRECO = "PRO_TBG") then VPRECO = VPRO_TBG;
 if (VTABPRECO = "PRO_TBH") then VPRECO = VPRO_TBH;
 if (VTABPRECO = "PRO_TBI") then VPRECO = VPRO_TBI;
 if (VTABPRECO = "PRO_TBJ") then VPRECO = VPRO_TBJ;
 if (VTABPRECO = "PRO_TBK") then VPRECO = VPRO_TBK;
 if (VTABPRECO = "PRO_TBL") then VPRECO = VPRO_TBL;
 if (VTABPRECO = "PRO_TBM") then VPRECO = VPRO_TBM;
 if (VTABPRECO = "PRO_TBN") then VPRECO = VPRO_TBN;
 if (VTABPRECO = "PRO_TBO") then VPRECO = VPRO_TBO;
 if (VTABPRECO = "PRO_TBP") then VPRECO = VPRO_TBP;
 if (VTABPRECO = "PRO_TBQ") then VPRECO = VPRO_TBQ;
 if (VTABPRECO = "PRO_TBR") then VPRECO = VPRO_TBR;
 if (VTABPRECO = "PRO_TBS") then VPRECO = VPRO_TBS;
 if (VTABPRECO = "PRO_TBT") then VPRECO = VPRO_TBT;
 if (VTABPRECO = "PRO_TBU") then VPRECO = VPRO_TBU;
 if (VTABPRECO = "PRO_TBV") then VPRECO = VPRO_TBV;
 if (VTABPRECO = "PRO_TBW") then VPRECO = VPRO_TBW;
 if (VTABPRECO = "PRO_TBX") then VPRECO = VPRO_TBX;
 if (VTABPRECO = "PRO_TBY") then VPRECO = VPRO_TBY;
 if (VTABPRECO = "PRO_TBZ") then VPRECO = VPRO_TBZ;
 end
 else
 if ((vSo_Com_contagem <> 1) or (vContagem = 1)) then
 begin
 if (VD2_CAD >= vData_de) then
 begin
 suspend;
 vSaldo_sem_contagem = vSaldo;
 end
 vContagem = 0;
 end
 VD2_CAD = vVd2Cad;
 PRO_COD = vProCod;
 COR_COD = vVd2Cor;
 MED_COD = vVd2Med;
 ALM_COD = vVd2Alm;
 ALM_FANT = vALMFANT;
 PRO_NOM = vPRONOM;
 COR_NOM = vCORNOM;
 MED_NOM = vMEDNOM;
 MED_ORDEM = VMEDORDEM;
 CAT_COD = vCATCOD;
 CAT_NOM = vCATNOM;
 CAT_ORD = VCATORD;
 TIP_COD = vTIPCOD;
 TIP_NOM = vTIPNOM;
 TIP_ORD = VTIPORD;
 MAR_COD = vMARCOD;
 MAR_NOM = vMARNOM;
 MAR_ORD = VMARORD;
 GRU_COD = vGRUCOD;
 GRU_NOM = vGRUNOM;
 GRU_ORD = VGRUORD;
 SUBGRU_COD = vSUBGRUCOD;
 SUBGRU_NOM = vSUBGRUNOM;
 SUBGRU_ORD = VSUBGRUORD;
 PRO_INT = vPROINT;
 PRO_BAR = vPROBAR;
 PRO_CODCM = vPROCODCM;
 SIGLA = VUNIDADE;
 if (vVd1Ori = "000") then
 vCustoMedio = vVd2Vlr;
 if (vCustoMedio is null) then
 vCustoMedio = 0;
 if (vSaldo is null) then
 begin
 vSaldo = 0;
 vSaldo_Sem_Contagem = 0;
 end
 if (vSemEstoque = 'T') then
 vQuantidadeMovimentada = 0;
 else if ((vTraInf = "+") or (vVd1Ori = "CNT")) then
 vQuantidadeMovimentada = vVd2Qtd;
 else if (vTraInf = "-") then
 vQuantidadeMovimentada = (vVd2Qtd * -1);
 else
 vQuantidadeMovimentada = 0;
 if ((vTraInf <> "N") and (vTraInfCus = "S")) Then
 begin
 if (vVd2Vlr Is Null) then
 vUltCusto = 0;
 else
 vUltCusto = Cast((vVd2Vlr * vArredonda) as integer)/vArredonda;
 if (( (vSaldo + vVd2Qtd) > 0 ) And ( (vCustoMedio + vVd2Vlr) > 0 )) Then
 vCustoMedio = (((vCustoMedio * vSaldo) + (vVd2Vlr * vVd2Qtd)) / (vVd2Qtd + vSaldo));
 end
 vCustoMedio = Cast((vCustoMedio * vArredonda) as integer)/vArredonda;
 if (vSaldo Is Null) then
 begin
 vSaldo = vQuantidadeMovimentada;
 vSaldo_Sem_Contagem = vSaldo;
 end
 else
 if (vVd1Ori = "CNT") then
 begin
 vSaldo = vQuantidadeMovimentada;
 if (vvd2Cad >= vData_de) then
 vContagem = 1;
 else
 vSaldo_Sem_Contagem = vSaldo;
 end
 else
 begin
 vSaldo = vQuantidadeMovimentada + vSaldo;
 vSaldo_Sem_Contagem = vSaldo;
 end
 if (VTABPRECO = "PRO_ULTC") then VPRECO = vUltCusto;
 if (VTABPRECO = "PRO_CUSM") then VPRECO = vCustoMedio;
 end
 if ((PRO_COD > 0) and (vVd2Cad >= vData_de) and ((vSo_Com_contagem <> 1) or (vContagem = 1))) then
 suspend;
 end
^

ALTER PROCEDURE CHAR_LOWER (
    PCHAR VARCHAR(1))
RETURNS (
    RESULT VARCHAR(1))
AS
 BEGIN
 IF (PCHAR = 'A') THEN
 RESULT = 'a';
 ELSE IF (PCHAR = 'B') THEN
 RESULT = 'b';
 ELSE IF (PCHAR = 'C') THEN
 RESULT = 'c';
 ELSE IF (PCHAR = 'D') THEN
 RESULT = 'd';
 ELSE IF (PCHAR = 'E') THEN
 RESULT = 'e';
 ELSE IF (PCHAR = 'F') THEN
 RESULT = 'f';
 ELSE IF (PCHAR = 'G') THEN
 RESULT = 'g';
 ELSE IF (PCHAR = 'H') THEN
 RESULT = 'h';
 ELSE IF (PCHAR = 'I') THEN
 RESULT = 'i';
 ELSE IF (PCHAR = 'J') THEN
 RESULT = 'j';
 ELSE IF (PCHAR = 'K') THEN
 RESULT = 'k';
 ELSE IF (PCHAR = 'L') THEN
 RESULT = 'l';
 ELSE IF (PCHAR = 'M') THEN
 RESULT = 'm';
 ELSE IF (PCHAR = 'N') THEN
 RESULT = 'n';
 ELSE IF (PCHAR = 'O') THEN
 RESULT = 'o';
 ELSE IF (PCHAR = 'P') THEN
 RESULT = 'p';
 ELSE IF (PCHAR = 'Q') THEN
 RESULT = 'q';
 ELSE IF (PCHAR = 'R') THEN
 RESULT = 'r';
 ELSE IF (PCHAR = 'S') THEN
 RESULT = 's';
 ELSE IF (PCHAR = 'T') THEN
 RESULT = 't';
 ELSE IF (PCHAR = 'U') THEN
 RESULT = 'u';
 ELSE IF (PCHAR = 'V') THEN
 RESULT = 'v';
 ELSE IF (PCHAR = 'W') THEN
 RESULT = 'w';
 ELSE IF (PCHAR = 'X') THEN
 RESULT = 'x';
 ELSE IF (PCHAR = 'Y') THEN
 RESULT = 'y';
 ELSE IF (PCHAR = 'Z') THEN
 RESULT = 'z';
 
 ELSE IF (PCHAR = 'À') THEN
 RESULT = 'à';
 ELSE IF (PCHAR = 'Á') THEN
 RESULT = 'á';
 ELSE IF (PCHAR = 'Ã') THEN
 RESULT = 'ã';
 ELSE IF (PCHAR = 'Â') THEN
 RESULT = 'â';
 
 ELSE IF (PCHAR = 'Ç') THEN
 RESULT = 'ç';
 
 ELSE IF (PCHAR = 'É') THEN
 RESULT = 'é';
 ELSE IF (PCHAR = 'Ê') THEN
 RESULT = 'ê';
 
 ELSE IF (PCHAR = 'Í') THEN
 RESULT = 'í';
 
 ELSE IF (PCHAR = 'Ó') THEN
 RESULT = 'ó';
 ELSE IF (PCHAR = 'Õ') THEN
 RESULT = 'õ';
 
 ELSE IF (PCHAR = 'Ú') THEN
 RESULT = 'ú';
 
 ELSE IF (PCHAR = 'Ñ') THEN
 RESULT = 'ñ';
 ELSE
 RESULT = PCHAR;
 SUSPEND;
 END
^

ALTER PROCEDURE CHAR_UPPER (
    PCHAR VARCHAR(1))
RETURNS (
    RESULT VARCHAR(1))
AS
 BEGIN
 IF (PCHAR = 'a') THEN
 RESULT = 'A';
 ELSE IF (PCHAR = 'b') THEN
 RESULT = 'B';
 ELSE IF (PCHAR = 'c') THEN
 RESULT = 'C';
 ELSE IF (PCHAR = 'd') THEN
 RESULT = 'D';
 ELSE IF (PCHAR = 'e') THEN
 RESULT = 'E';
 ELSE IF (PCHAR = 'f') THEN
 RESULT = 'F';
 ELSE IF (PCHAR = 'g') THEN
 RESULT = 'G';
 ELSE IF (PCHAR = 'h') THEN
 RESULT = 'H';
 ELSE IF (PCHAR = 'i') THEN
 RESULT = 'I';
 ELSE IF (PCHAR = 'j') THEN
 RESULT = 'J';
 ELSE IF (PCHAR = 'k') THEN
 RESULT = 'K';
 ELSE IF (PCHAR = 'l') THEN
 RESULT = 'L';
 ELSE IF (PCHAR = 'm') THEN
 RESULT = 'M';
 ELSE IF (PCHAR = 'n') THEN
 RESULT = 'N';
 ELSE IF (PCHAR = 'o') THEN
 RESULT = 'O';
 ELSE IF (PCHAR = 'p') THEN
 RESULT = 'P';
 ELSE IF (PCHAR = 'q') THEN
 RESULT = 'Q';
 ELSE IF (PCHAR = 'r') THEN
 RESULT = 'R';
 ELSE IF (PCHAR = 's') THEN
 RESULT = 'S';
 ELSE IF (PCHAR = 't') THEN
 RESULT = 'T';
 ELSE IF (PCHAR = 'u') THEN
 RESULT = 'U';
 ELSE IF (PCHAR = 'v') THEN
 RESULT = 'V';
 ELSE IF (PCHAR = 'w') THEN
 RESULT = 'W';
 ELSE IF (PCHAR = 'x') THEN
 RESULT = 'X';
 ELSE IF (PCHAR = 'y') THEN
 RESULT = 'Y';
 ELSE IF (PCHAR = 'z') THEN
 RESULT = 'Z';
 
 ELSE IF (PCHAR = 'à') THEN
 RESULT = 'À';
 ELSE IF (PCHAR = 'á') THEN
 RESULT = 'Á';
 ELSE IF (PCHAR = 'ã') THEN
 RESULT = 'Ã';
 ELSE IF (PCHAR = 'â') THEN
 RESULT = 'Â';
 
 ELSE IF (PCHAR = 'ç') THEN
 RESULT = 'Ç';
 
 ELSE IF (PCHAR = 'é') THEN
 RESULT = 'É';
 ELSE IF (PCHAR = 'ê') THEN
 RESULT = 'Ê';
 
 ELSE IF (PCHAR = 'í') THEN
 RESULT = 'Í';
 
 ELSE IF (PCHAR = 'ó') THEN
 RESULT = 'Ó';
 ELSE IF (PCHAR = 'õ') THEN
 RESULT = 'Õ';
 
 ELSE IF (PCHAR = 'ú') THEN
 RESULT = 'Ú';
 
 ELSE IF (PCHAR = 'ñ') THEN
 RESULT = 'Ñ';
 ELSE
 RESULT = PCHAR;
 SUSPEND;
 END
^

ALTER PROCEDURE CHECASALDODACONTA (
    PCON INTEGER)
RETURNS (
    WSALDO1 DOUBLE PRECISION,
    WSALDO2 DOUBLE PRECISION,
    WULTDIA TIMESTAMP,
    WPRIDIA TIMESTAMP,
    WCONTNOM VARCHAR(30),
    WCONTA INTEGER,
    WCONPRISAL DOUBLE PRECISION)
AS
 DECLARE VARIABLE WSALFEC DOUBLE PRECISION;
 DECLARE VARIABLE WSALDO DOUBLE PRECISION;
 DECLARE VARIABLE WFLAG INTEGER;
 DECLARE VARIABLE WDATA DATE;
 BEGIN
 
 FOR SELECT CON_COD, CON_NOM, CON_PRIMEIRO_SALDO FROM CDCON WHERE ((CON_COD = :PCON) or (:PCON is null))
 INTO WCONTA, WCONTNOM, WCONPRISAL DO
 
 BEGIN
 
 SELECT CON_FEC, CON_SAL SALDO_FEC FROM CDCON
 WHERE CON_COD = :WCONTA
 INTO WDATA, WSALFEC;
 
 SELECT SUM(lge_val) FROM MORLGE where lge_con = :WCONTA and lge_ope = :WDATA
 INTO WSaldo;
 
 EXECUTE PROCEDURE SALDO_DA_CONTA_NA_DATA(:WCONTNOM,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,:WDATA - 1) RETURNING_VALUES(WSaldo1,WFLAG);
 
 IF (not WSaldo is NULL) then
 begin
 WSaldo1 = (Cast( ((WSaldo1+WSaldo)*100) As integer)/100.0);
 end
 else
 begin
 WSaldo1 = (Cast( (WSALDO1*100) As Integer)/100.0);
 end
 
 WSaldo2 = (Cast((WSALFEC*100) As Integer)/100.0);
 
 WULTDIA = :WDATA;
 WPRIDIA = :WDATA+1;
 
 IF (WSaldo1 <> WSaldo2) then
 BEGIN
 SUSPEND;
 END
 
 END
 
 END
^

ALTER PROCEDURE COMPLETA_STRING (
    PTEXTO VARCHAR(100),
    PCARACTER VARCHAR(1),
    PCASAS INTEGER,
    PSENTIDO INTEGER)
RETURNS (
    RESULT VARCHAR(100))
AS
 DECLARE VARIABLE VCNT INTEGER;
 begin
 vCNT = 0;
 RESULT = PTEXTO;
 while (vCNT < pCASAS) do
 begin
 if (Substring(PTEXTO from 1 for 1) = "") then
 if (PSENTIDO > 0) then
 RESULT = RESULT || PCARACTER;
 else
 RESULT = PCARACTER || RESULT;
 else
 PTEXTO = Substring(PTEXTO from 2 for 100);
 vCNT = vCNT + 1;
 end
 suspend;
 end
^

ALTER PROCEDURE CONCATENAR_RESULTADOS (
    PSQL VARCHAR(1000),
    PSEPARADOR VARCHAR(10))
RETURNS (
    RESULT VARCHAR(1000))
AS
 declare variable vtemp varchar(100);
 begin
 Result = '';
 For
 Execute statement :PSQL
 Into vTemp do
 begin
 if (Result <> '') then
 Result = Result || pSeparador;
 Result = Result || rtrim(ltrim(vTemp));
 end
 suspend;
 end
^

ALTER PROCEDURE CONFERENCIA_ESTOQUE (
    VPARAMCOR INTEGER,
    VPARAMMED INTEGER,
    VCASAS_DECIMAIS INTEGER,
    PALM_DE VARCHAR(20),
    PALM_ATE VARCHAR(20),
    PDATA_DE TIMESTAMP,
    PDATA_ATE TIMESTAMP,
    PSODIFERENCA INTEGER)
RETURNS (
    ALM_FANT VARCHAR(20),
    DAT_INI TIMESTAMP,
    DAT_FIN TIMESTAMP,
    EST_ANT DOUBLE PRECISION,
    TOT_MOV DOUBLE PRECISION,
    TOT_AJST DOUBLE PRECISION,
    SOMA DOUBLE PRECISION,
    EST_FIN DOUBLE PRECISION,
    DIFERENCA DOUBLE PRECISION)
AS
 declare variable vdia integer;
 declare variable vmes integer;
 declare variable vano integer;
 declare variable valm_fant varchar(20);
 declare variable valm_cod integer;
 begin
 if (pAlm_ate is null) then
 pAlm_ate = pAlm_de;
 if (PSODIFERENCA is null) then
 PSODIFERENCA = 0;
 if (pData_de is not null) then
 begin
 Execute Procedure DecodeDate(pData_De) Returning_values(vAno, vMes, vDia);
 Execute Procedure EncodeDate(vAno, vMes, 1) Returning_values(pData_De);
 pData_De = pData_de - 1;
 end
 else
 Select min(est_dat) from mvestdat into pData_de;
 if (pData_ate is null) then
 pData_ate = cast('today' as Date);
 For
 Select coalesce(Sum(EST_SAL),0), ALM_FANT, ALM_COD, EST_DAT
 From CDALM, MVESTDAT
 Where EST_ALM = ALM_COD
 and ((:PALM_DE is null) or ((ALM_FANT >= :PALM_DE) and (ALM_FANT <= :PALM_ATE)))
 and ((:PDATA_DE is null) or ((EST_DAT >= :PDATA_DE) and (EST_DAT <= :PDATA_ATE)))
 Group by ALM_FANT, ALM_COD, EST_DAT
 Order by ALM_FANT, EST_DAT
 Into EST_FIN, VALM_FANT, VALM_COD, DAT_FIN do
 begin
 if (VALM_FANT = ALM_FANT) then
 begin
 Select COALESCE(Sum(case TRA_INF
 when '+' then VD2_QTD
 when '-' then VD2_QTD * -1
 else 0
 end),0)
 from ESTMVVD1, ESTMVVD2, CDTRA1
 Where VD2_ALM = :VALM_COD
 and VD1_COD = VD2_BOL
 and VD1_TRA = TRA_COD
 and VD2_CAD between :DAT_INI+1 and :DAT_FIN
 and VD1_CANC <> 'C'
 Into TOT_MOV;
 Select COALESCE(Sum(VSALDO - VSALDO_SEM_CONTAGEM),0)
 From CALCULA_ESTOQUE_BASE(:VPARAMCOR, :VPARAMMED, :VCASAS_DECIMAIS, :DAT_INI+1,
 :DAT_FIN, :VALM_FANT,
 :VALM_FANT, null, null, null, null,
 null, null, null, null, null, null,
 null, null, null, null, null, null,
 null, null, '', 0, 1)
 Into TOT_AJST;
 
 SOMA = EST_ANT + TOT_MOV + TOT_AJST;
 
 DIFERENCA = SOMA - EST_FIN;
 if ((PSODIFERENCA <> 1) or (DIFERENCA <> 0)) then
 suspend;
 end
 DAT_INI = DAT_FIN;
 ALM_FANT = VALM_FANT;
 EST_ANT = EST_FIN;
 end
 end
^

ALTER PROCEDURE CONFIGURA_TAMANHODAFONTE (
    PSTRING VARCHAR(100),
    PMODO VARCHAR(3))
RETURNS (
    RESULT VARCHAR(100))
AS
 DECLARE VARIABLE FLAG INTEGER;
 DECLARE VARIABLE WTAMANHO INTEGER;
 DECLARE VARIABLE WCHAR VARCHAR(1);
 DECLARE VARIABLE WCHAR2 VARCHAR(1);
 DECLARE VARIABLE WTEXTO VARCHAR(100);
 BEGIN
 IF (PMODO = 'MM') THEN
 BEGIN
 WTEXTO = '';
 SELECT RESULT FROM STR_LENGTH(:PSTRING) INTO WTAMANHO;
 WHILE (WTAMANHO > 0) DO
 BEGIN
 SELECT FIRST 1 SUBSTRING(:PSTRING FROM 1 FOR 1) FROM LINHAS(1) INTO WCHAR2;
 SELECT FIRST 1 SUBSTRING(:PSTRING FROM 2 FOR 100) FROM LINHAS(1) INTO PSTRING;
 SELECT RESULT FROM CHAR_UPPER(:WCHAR2) INTO WCHAR;
 WTEXTO = WTEXTO || :WCHAR;
 WTAMANHO = WTAMANHO - 1;
 END
 RESULT = :WTEXTO;
 END
 
 ELSE IF (PMODO = 'Mm') THEN
 BEGIN
 FLAG = 1;
 WTEXTO = '';
 SELECT RESULT FROM STR_LENGTH(:PSTRING) INTO WTAMANHO;
 WHILE (WTAMANHO > 0) DO
 BEGIN
 SELECT FIRST 1 SUBSTRING(:PSTRING FROM 1 FOR 1) FROM LINHAS(1) INTO WCHAR2;
 SELECT FIRST 1 SUBSTRING(:PSTRING FROM 2 FOR 100) FROM LINHAS(1) INTO PSTRING;
 SELECT RESULT FROM CHAR_LOWER(:WCHAR2) INTO WCHAR;
 IF (FLAG = 1) THEN
 BEGIN
 WCHAR = UPPER(:WCHAR);
 FLAG = 0;
 END
 IF ((WCHAR = '') OR (WCHAR = ' ')) THEN
 FLAG = 1;
 WTEXTO = WTEXTO || :WCHAR;
 WTAMANHO = WTAMANHO - 1;
 END
 RESULT = :WTEXTO;
 END
 SUSPEND;
 END
^

ALTER PROCEDURE CONVERTE_INDICE (
    PDATA TIMESTAMP,
    PVALOR DOUBLE PRECISION,
    PMOEORI INTEGER,
    PMOEDEST INTEGER)
RETURNS (
    RESULT DOUBLE PRECISION,
    RET_FLAG INTEGER)
AS
 DECLARE VARIABLE VANO INTEGER;
 DECLARE VARIABLE VINI INTEGER;
 DECLARE VARIABLE VVLIN DOUBLE PRECISION;
 DECLARE VARIABLE VVLFI DOUBLE PRECISION;
 DECLARE VARIABLE VNAC VARCHAR(1);
 begin
 VINI = extract(month from :pdata);
 VANO = extract(year from :pdata);
 RET_FLAG = 1;
 Select result, MOE_NAC
 from CDMOE, retorna_taxadiaria(:pmoeori,:pdata)
 where moe_cod = :pmoeori
 into vvlin, vnac;

 if (vNac = "N") then
 vvlin = 1;
 else
 if (vvlin is null) then
 RET_FLAG = 0;

 Select result, MOE_NAC
 from CDMOE, retorna_taxadiaria(:pmoedest,:pdata)
 where moe_cod = :pmoedest
 into vvlfi, vnac;

 if (vNac = "N") then
 vvlfi = 1;
 else
 if (vvlfi is null) then
 RET_FLAG = 0;

 if ((:vvlin <> 0) and (:vvlfi <> 0)) then
 RESULT = (PVALOR * vvlin / vvlfi);
 else
 RESULT = PVALOR;
 RESULT = cast(RESULT as Numeric(15,5));
 suspend;
 end
^

ALTER PROCEDURE CONVERTE_INDICE_PARA_RELATORIOS (
    PDATA TIMESTAMP,
    PVALOR DOUBLE PRECISION,
    PMOEDEST INTEGER)
RETURNS (
    RVALOR DOUBLE PRECISION,
    RDATA TIMESTAMP)
AS
 DECLARE VARIABLE WVALOR DOUBLE PRECISION;
 DECLARE VARIABLE WFLAG INTEGER;
 BEGIN
 
 SELECT RESULT, RET_FLAG FROM CONVERTE_INDICE(:PDATA, :PVALOR,
 (SELECT MOE_COD FROM CDMOE WHERE MOE_NAC = 'N'), :PMOEDEST)
 INTO WVALOR, WFLAG;
 
 IF ((WVALOR = :PVALOR) AND (WFLAG = 0)) THEN
 BEGIN
 SELECT CAST((SELECT FIRST 1 (SELECT MAX(B.IND_MES) FROM CDINDICE B WHERE B.IND_ANO = A.IND_ANO AND IND_MOE = :PMOEDEST)
 ||'/01/'||A.IND_ANO FROM CDINDICE A
 WHERE A.IND_ANO = (SELECT MAX(C.IND_ANO) FROM CDINDICE C WHERE IND_MOE = :PMOEDEST)) AS DATE) FROM PARAMETFIN
 INTO PDATA;
 
 SELECT RESULT FROM CONVERTE_INDICE(:PDATA, :PVALOR,
 (SELECT MOE_COD FROM CDMOE WHERE MOE_NAC = 'N'), :PMOEDEST)
 INTO WVALOR;
 END
 
 RVALOR = :WVALOR;
 RDATA = :PDATA;
 
 SUSPEND;
 END
^

ALTER PROCEDURE CONVERTE_VALOR_UNIDADE (
    PPROCOD INTEGER,
    PVALOR DOUBLE PRECISION,
    PCAMPO_UNI_ORI VARCHAR(20),
    PCAMPO_UNI_DEST VARCHAR(20))
RETURNS (
    RESULT DOUBLE PRECISION)
AS
 declare variable vindiceori double precision;
 declare variable vindicedest double precision;
 begin
 if (PCAMPO_UNI_ORI = 'PRO_UNI_USO') then
 Select PRO_FAT_USO from cdpro where pro_cod = :pPROCOD into vIndiceOri;
 else if (PCAMPO_UNI_ORI = 'PRO_UNI_CMP') then
 Select PRO_FAT_CMP from cdpro where pro_cod = :pPROCOD into vIndiceOri;
 else if (PCAMPO_UNI_ORI = 'PRO_UNI') then
 Select PRO_FAT_VND from cdpro where pro_cod = :pPROCOD into vIndiceOri;
 
 if (PCAMPO_UNI_DEST = 'PRO_UNI_USO') then
 Select PRO_FAT_USO from cdpro where pro_cod = :pPROCOD into vIndiceDest;
 else if (PCAMPO_UNI_DEST = 'PRO_UNI_CMP') then
 Select PRO_FAT_CMP from cdpro where pro_cod = :pPROCOD into vIndiceDest;
 else if (PCAMPO_UNI_DEST = 'PRO_UNI') then
 Select PRO_FAT_VND from cdpro where pro_cod = :pPROCOD into vIndiceDest;
 
 if (vIndiceOri <> 0) then
 Result = pValor * vIndiceDest / vIndiceOri;
 else
 Result = pValor;
 
 suspend;
 end
^

ALTER PROCEDURE CONVERTER_MESES_EM_ANOS_MESES (
    PMESES INTEGER,
    PAGRUPAR_ANOS INTEGER)
RETURNS (
    RESULT VARCHAR(1000))
AS
 declare variable vanos integer;
 declare variable vmeses integer;
 declare variable vresultano varchar(100);
 begin
 if (Coalesce(pagrupar_anos,0) = 1) then
 begin
 VMESES = mod(PMESES, 12);
 VANOS = (PMESES - VMESES) / 12;
 end
 else
 VMESES = PMESES;
 RESULT = '';
 if (VMESES > 0) then
 begin
 if (VMESES = 1) then
 RESULT = '1 Mês';
 else
 RESULT = Cast(VMESES as integer) || ' Meses';
 end
 if (VANOS > 0) then
 begin
 if (VANOS = 1) then
 VRESULTANO = '1 Ano';
 else
 VRESULTANO = Cast(VANOS as integer) || ' Anos';
 if (RESULT <> '') then
 RESULT = VRESULTANO || ' e ' || RESULT;
 else
 RESULT = VRESULTANO;
 end
 suspend;
 end
^

ALTER PROCEDURE CONVERTER_MESES_EM_FREQUENCIA (
    PMESES INTEGER)
RETURNS (
    RESULT VARCHAR(1000))
AS
 begin
 Select RESULT From CONVERTER_MESES_EM_ANOS_MESES(:PMESES, 0) Into RESULT;
 if (RESULT = '1 Mês') then
 RESULT = 'Mensal';
 else if (RESULT = '2 Meses') then
 RESULT = 'Bimestral';
 else if (RESULT = '3 Meses') then
 RESULT = 'Trimestral';
 else if (RESULT = '6 Meses') then
 RESULT = 'Semestral';
 else if ((RESULT = '1 Ano') or (RESULT = '12 Meses')) then
 RESULT = 'Anual';
 else if ((RESULT = '2 Anos') or (RESULT = '24 Meses')) then
 RESULT = 'Bienal';
 suspend;
 end
^

ALTER PROCEDURE CORRIGIR_CODIGO_EAN (
    PPROCOD INTEGER,
    PNOVOCODIGO VARCHAR(21))
RETURNS (
    VCODIGO VARCHAR(21))
AS
 declare variable vdigito integer;
 declare variable vprobar varchar(15);
 declare variable vproint varchar(15);
 declare variable vreferencia varchar(15);
 declare variable vgeracodcormed varchar(1);
 begin
 vCodigo = pNovoCodigo;
 Select PRO_INT, PRO_BAR, Coalesce(P_USACODCORMEDIDA, 'C')
 From CDPRO, PARAMET
 Where CDPRO.PRO_COD = :pPROCOD
 Into vPROINT, vPROBAR, vGeraCodCorMed;
 
 if (vGeraCodCorMed = 'I') then
 vReferencia = vPROINT;
 else if (vGeraCodCorMed = 'B') then
 vReferencia = vPROBAR;
 else
 vReferencia = '';
 
 while (strlen(vcodigo) < 12) do
 begin
 vcodigo = '9' || vcodigo;
 if (strlen(vReferencia) < 6) then
 vreferencia = '9' || vreferencia;
 end
 
 vcodigo = substr(vcodigo, 1, 12);
 
 select digito from digitoean13(:vcodigo) into vdigito;
 
 vcodigo = vcodigo || vdigito;
 
 if ((vGeraCodCorMed = 'I') and (vReferencia <> vPROINT)) then
 update cdpro set pro_int = :vReferencia where pro_cod = :pPROCOD;
 else if ((vGeraCodCorMed = 'B') and (vReferencia <> vPROBAR)) then
 update cdpro set pro_bar = :vReferencia where pro_cod = :pPROCOD;
 
 suspend;
 end
^

ALTER PROCEDURE CORRIGIR_CODIGOS
AS
 declare variable vcodigoean varchar(21);
 declare variable vnovocodigoean varchar(21);
 declare variable vprocod integer;
 declare variable vprocor varchar(3);
 declare variable vpromed varchar(3);
 begin
 for
 Select CDPROCM.PRO_COD, CDPROCM.PRO_PRO,
 CDPROCM.PRO_COR, CDPROCM.PRO_MED
 From CDPROCM
 where strlen(CDPROCM.PRO_COD) < 13
 and CDPROCM.PRO_COD is not null
 into vcodigoean, vprocod, vprocor, vpromed do
 begin
 Select vcodigo From corrigir_codigo_ean(:vprocod, :vcodigoean) into :VNOVOCODIGOEAN;
 
 update cdprocm set pro_cod = :VNOVOCODIGOEAN, dat_atu = 'today'
 where pro_pro = :vprocod
 and pro_cor = :vprocor
 and pro_med = :vpromed;
 end
 suspend;
 end
^

ALTER PROCEDURE CRIA_LOCALIZACAO (
    PMODELO VARCHAR(1))
AS
 DECLARE VARIABLE WALM INTEGER;
 DECLARE VARIABLE WPRO INTEGER;
 DECLARE VARIABLE WCOR VARCHAR(3);
 DECLARE VARIABLE WMED VARCHAR(3);
 DECLARE VARIABLE WUSACOR VARCHAR(1);
 DECLARE VARIABLE WUSAMED VARCHAR(1);
 BEGIN
 SELECT P_USA_COR, P_USA_MEDIDA FROM PARAMET INTO WUSACOR, WUSAMED;
 
 IF (pModelo = "M") THEN
 BEGIN
 
 IF ( WUSACOR="T" OR WUSAMED="T" ) THEN
 BEGIN
 FOR SELECT PRO_PRO, PRO_COR, PRO_MED FROM CDPROPRE INTO :WPRO, :WCOR, :WMED DO
 BEGIN
 IF ( NOT EXISTS( SELECT * FROM CDPROCM WHERE PRO_PRO = :WPRO AND PRO_COR = :WCOR AND PRO_MED = :WMED ) ) THEN
 BEGIN
 DELETE FROM CDPROMAXMIN WHERE PRO_PRO = :WPRO AND PRO_COR = :WCOR AND PRO_MED = :WMED;
 END
 END
 END
 ELSE
 BEGIN
 Delete from CDPROMAXMIN Where pro_pro Not In ( Select pro_cod From cdpro );
 END
 
 FOR SELECT ALM_COD FROM CDALM
 INTO WALM
 DO
 BEGIN
 IF ( WUSACOR="T" OR WUSAMED="T" ) THEN
 BEGIN
 
 INSERT INTO CDPROMAXMIN
 SELECT :WALM, cdprocm.pro_PRO, cdprocm.PRO_COR, cdprocm.PRO_MED,"Today","Today","A",0,0,0,0
 FROM cdprocm WHERE not exists( select * from CDPROMAXMIN where CDPROMAXMIN.pro_pro=CDPROCM.pro_PRO
 and CDPROMAXMIN.pro_cor=cdprocm.pro_cor
 and CDPROMAXMIN.pro_med=cdprocm.pro_med and CDPROMAXMIN.pro_alm=:WALM)
 and (pro_cor<>"" and pro_med<>"");
 
 END
 ELSE
 BEGIN
 
 INSERT INTO CDPROMAXMIN
 SELECT :WALM,CDPRO.PRO_COD,"","","Today","Today","A",0,0,0,0
 FROM CDPRO WHERE CDPRO.pro_cod <> 0
 and not exists( select * from CDPROMAXMIN where CDPROMAXMIN.pro_pro=cdpro.pro_cod and CDPROMAXMIN.pro_alm=:WALM);
 
 END
 
 END
 
 END
 
 IF (pModelo = "L") THEN
 BEGIN
 
 IF ( WUSACOR="T" OR WUSAMED="T" ) THEN
 BEGIN
 FOR SELECT PRO_PRO, PRO_COR, PRO_MED FROM CDPROPRE INTO :WPRO, :WCOR, :WMED DO
 BEGIN
 IF ( NOT EXISTS( SELECT * FROM CDPROCM WHERE PRO_PRO = :WPRO AND PRO_COR = :WCOR AND PRO_MED = :WMED ) ) THEN
 BEGIN
 DELETE FROM CDPROESTLO WHERE PRO_PRO = :WPRO AND PRO_COR = :WCOR AND PRO_MED = :WMED;
 END
 END
 END
 ELSE
 BEGIN
 Delete from cdproestlo Where pro_pro Not In ( Select pro_cod From cdpro );
 END
 
 FOR SELECT ALM_COD FROM CDALM WHERE ALM_COD IN (SELECT ALM_USO FROM CDALM3)
 OR ALM_COD IN (SELECT ALM_COD FROM CDALM2)
 INTO WALM
 DO
 BEGIN
 IF ( WUSACOR="T" OR WUSAMED="T" ) THEN
 BEGIN
 INSERT INTO CDPROESTLO
 SELECT :WALM, cdprocm.pro_PRO, cdprocm.PRO_COR, cdprocm.PRO_MED,"","","","", "Today","Today","A"
 FROM cdprocm WHERE not exists( select * from CDPROESTLO where CDPROESTLO.pro_pro=CDPROCM.pro_PRO
 and CDPROESTLO.pro_cor=cdprocm.pro_cor
 and CDPROESTLO.pro_med=cdprocm.pro_med)
 and (pro_cor<>"" and pro_med<>"");
 END
 ELSE
 BEGIN
 INSERT INTO CDPROESTLO
 SELECT :WALM,CDPRO.PRO_COD,"","","","","","","Today","Today","A"
 FROM CDPRO WHERE CDPRO.pro_cod <> 0
 and not exists( select * from CDPROESTLO where CDPROESTLO.pro_pro=cdpro.pro_cod);
 END
 
 END
 
 END
 
 END
^

ALTER PROCEDURE CRIAR_CUPOM (
    PALMOXARIFADO INTEGER,
    PCADASTRO TIMESTAMP,
    PTRANSACAO INTEGER,
    PCLIENTE INTEGER,
    PREPRESENTANTE INTEGER,
    PFORNECEDOR INTEGER,
    PTRANSPORTADORA INTEGER,
    PCLIENTE2 INTEGER,
    PVENDEDOR INTEGER,
    PCAIXA INTEGER,
    PCOMPRADOR INTEGER,
    PPRESTADORSERVICO INTEGER,
    PDESCONTOPERCENTUAL DOUBLE PRECISION,
    PDESCONTOVALOR DOUBLE PRECISION,
    PQUANTIDADE DOUBLE PRECISION,
    PTOTALBRUTO DOUBLE PRECISION,
    PTOTALSEMDESCONTO DOUBLE PRECISION,
    PTOTALLIQUIDO DOUBLE PRECISION,
    PSERVICOLIQUIDO DOUBLE PRECISION,
    PSERVICOBRUTO DOUBLE PRECISION,
    PPRODUTOLIQUIDO DOUBLE PRECISION,
    PPRODUTOBRUTO DOUBLE PRECISION,
    PCFOP INTEGER,
    PPRESTACAOSERVICO INTEGER,
    PFRETE DOUBLE PRECISION,
    PFRETEPORCONTA VARCHAR(1),
    PORIGEM VARCHAR(3),
    PESPECIE VARCHAR(20),
    PMARCA VARCHAR(20),
    PNUMERO VARCHAR(20),
    PPLACAVEICULO VARCHAR(20),
    PUFVEICULO VARCHAR(20),
    PPESOBRUTO DOUBLE PRECISION,
    PPESOLIQUIDO DOUBLE PRECISION,
    PBASEICMS DOUBLE PRECISION,
    PVALORICMS DOUBLE PRECISION,
    PISS DOUBLE PRECISION,
    PVALORSEGURO DOUBLE PRECISION,
    POUTRASDESPESAS DOUBLE PRECISION,
    PSEUNUMERO VARCHAR(30),
    PVALORIPI DOUBLE PRECISION,
    POBSERVACAO BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    POBSERVACAO2 BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    POBSERVACAO3 BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    POBSERVACAO4 BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    PSTATUS VARCHAR(2),
    PIRRF DOUBLE PRECISION,
    PINSS DOUBLE PRECISION,
    PIMPOSTO3 DOUBLE PRECISION,
    PIMPOSTO4 DOUBLE PRECISION,
    PIMPOSTO5 DOUBLE PRECISION,
    PIMPOSTO6 DOUBLE PRECISION,
    PUSUARIO INTEGER,
    PDATA TIMESTAMP)
RETURNS (
    VNOVOCOD VARCHAR(13))
AS
 declare variable vvd1not integer;
 declare variable vvd4cod integer;
 declare variable vvd4alm integer;
 declare variable vvd4vec date;
 declare variable vvd4val double precision;
 declare variable vvd4tip integer;
 declare variable vvd4finan integer;
 declare variable vvd4item integer;
 declare variable vvd4boleto varchar(2);
 declare variable vvd4banco integer;
 declare variable vvd4agencia varchar(6);
 declare variable vvd4conta varchar(12);
 declare variable vvd4numdoc varchar(20);
 declare variable vvd4antecipado varchar(1);
 declare variable vvd4doc varchar(20);
 declare variable vcnt integer;
 declare variable vformcod integer;
 begin
 Select VCODIGO From maxcodestmvvd1 Into vNovoCod;
 
 Select form_cod
 from cdtra3, cdform
 where tra_form = form_cod
 and tra_tra = :ptransacao
 and form_alm = :palmoxarifado
 into vFormCod;
 
 SELECT MAX(COALESCE(VD1_NOT,0)) AS SERIE
 FROM ESTMVVD1, CDFORM, CDTRA1, CDTRA3
 WHERE VD1_TRA = TRA_COD
 AND (VD1_ORIGEM <> 'DDS' AND VD1_ORIGEM <> 'DDO' )
 AND CDTRA1.TRA_COD = CDTRA3.TRA_TRA
 AND CDFORM.FORM_COD = CDTRA3.TRA_FORM
 AND CDTRA3.TRA_TRA = ESTMVVD1.VD1_TRA
 AND CDFORM.FORM_ALM = ESTMVVD1.VD1_ALM
 AND ((TRA_SERIE_IGNORA_FILIAL = 'T' AND TRA_COD = (SELECT TRA_TRA FROM cdtra3 WHERE TRA_FORM = :vFormCod))
 OR (((FORM_SERIE IS NOT NULL AND FORM_SERIE = (SELECT FORM_SERIE FROM CDFORM WHERE FORM_COD = :vFormCod))
 OR (FORM_SERIE IS NULL AND FORM_COD = :vFormCod))))
 Into vVd1Not;
 
 if (vVd1Not is null) then
 vVd1Not = 0;
 vVd1Not = vVd1Not + 1;
 
 Insert Into ESTMVVD1
 (
 vd1_alm, vd1_cad, vd1_cod, vd1_not, vd1_tra, vd1_ven, vd1_cai, vd1_pgt,
 vd1_desc_p, vd1_desc_v, vd1_acresc, vd1_cli, vd1_rep, vd1_transf, vd1_for,
 vd1_trs, vd1_ent, vd1_valor_totalb, vd1_quantpecas, vd1_valor_totall, cli_fil,
 vd1_cfop, vd1_valor_frete, vd1_frete_porconta, vd1_origem, vd1_tipo_formulario,
 vd1_pedido, vd1_especie, vd1_marca, vd1_numero, vd1_pesobruto, vd1_pesoliquido,
 vd1_placadoveiculo, vd1_ufdoveiculo, vd1_retirada, vd1_base_icms,
 vd1_valor_icms, vd1_cfop_tributado, vd1_iss, vd1_comp, vd1_valor_seguro,
 vd1_outras_despesas, vd1_cli2, vd1_gar, vd1_sit, vd1_vis, vd1_hora, vd1_imo,
 vd1_user, vd1_eqp, vd1_seu_numero, vd1_pai, vd1_valor_ipi, vd1_atualizado,
 vd1_filho, vd1_totall_servico, vd1_obs, vd1_obs2, vd1_obs3, vd1_obs4,
 vd1_total_nota_semdescto, vd1_quantidade, vd1_totalb_produto, vd1_canc,
 vd1_totall_produto, vd1_totalb_servico, vd1_quantservi, vd1_cli_cons_rev,
 vd1_obsd, vd1_cara, vd1_proc, vd1_pedi, vd1_horaf, vd1_prestser, vd1_gernf,
 vd1_contato, vd1_irrf, vd1_inss, vd1_alm_transf, vd1_prestador, vd1_ecf,
 vd1_alm_digita, vd1_imposto3, vd1_imposto4, vd1_imposto5, vd1_imposto6,
 vd1_use_set_cmp, vd1_qtdfun, vd1_contrato, vd1_atu, vd1_user_cad, vd1_user_atu,
 vd1_use_cad, vd1_use_atu, vd1_vei, vd1_obs_aprov, vd1_datsai, vd1_horsai,
 vd1_cli_iss, vd1_pla, vd1_pla2, vd1_ccust, vd1_ccust2, vd1_proj, vd1_proj2,
 vd1_alm_alter, vd1_dat_emissao
 )
 Values (
 :palmoxarifado, :pdata, :vNovoCod, :vVd1Not,
 :pTransacao, :pVendedor, :pCaixa, null,
 :pDescontoPercentual, :pDescontoValor, 0, :pCliente, :pRepresentante, null, :pFornecedor,
 :pTransportadora, :pData, :pTotalBruto, :pQuantidade, :pTotalLiquido, :pAlmoxarifado,
 :pCfop, :pFrete, :pFretePorConta, :pOrigem, :vFormCod ,
 null, :pEspecie, :pMarca, :pNumero, :pPesoBruto, :pPesoLiquido,
 :pPlacaVeiculo, :pUFVeiculo, :pData, :pBaseICMS,
 :pValorICMS, (Select CFO_TRI From CDCFO Where CFO_COD = :pCFOP), :pISS, :pComprador, :pValorSeguro,
 :pOutrasDespesas, :pCliente2, null, null, null, null, null,
 :pUsuario, null, :pSeuNumero, null, :pISS, :pUsuario,
 null, :pServicoLiquido, :pObservacao, :pObservacao2, :pObservacao3, :pObservacao4,
 :pTotalSemDesconto, :pQuantidade, :pProdutoBruto, :pStatus,
 :pProdutoLiquido, :pServicoBruto, :pQuantidade, (Select CLI_CONS_REV from CDCLI Where cli_cod = :pCliente),
 null, null, null, null, null, :pPrestacaoServico, null,
 null, :pIRRF, :pINSS, null, :pPrestadorServico, null,
 :pAlmoxarifado, :pImposto3, :pImposto4, :pImposto5, :pImposto6,
 :pUsuario, null, null, cast('today' as date), :pUsuario, :pUsuario,
 :pUsuario, :pUsuario, null, null, null, null,
 (Select CLI_ISS from CDCLI Where cli_cod = :pCliente), null, null, null, null, null, null,
 :pUsuario, :pData);
 suspend;
 end
^

ALTER PROCEDURE CRIAR_ITEM_CUPOM (
    PCODIGO VARCHAR(13),
    PPRODUTO INTEGER,
    PSERVICO INTEGER,
    PDESCRICAO VARCHAR(255),
    PCOR VARCHAR(3),
    PMEDIDA VARCHAR(3),
    PVALORUNITARIO DOUBLE PRECISION,
    PQUANTIDADE DOUBLE PRECISION,
    PIPI DOUBLE PRECISION,
    PISS DOUBLE PRECISION,
    PICMS DOUBLE PRECISION,
    PREDUCAOICMS DOUBLE PRECISION,
    PDESCONTO DOUBLE PRECISION,
    PUNIDADE INTEGER,
    PCLASSIFICACAOFISCAL INTEGER,
    PSITUACAOTRIBUTARIA INTEGER,
    PFINALIDADE INTEGER,
    POBSERVACAO1 VARCHAR(100),
    POBSERVACAO2 VARCHAR(100),
    POBSERVACAO3 VARCHAR(100),
    POBSERVACAO4 VARCHAR(100),
    POBSERVACAOBLOB BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    PUNIDADEMEDIDA INTEGER,
    PALTURA DOUBLE PRECISION,
    PCOMPRIMENTO DOUBLE PRECISION,
    PLARGURA DOUBLE PRECISION,
    PNUMEROSERIE VARCHAR(100),
    PAMBIENTE INTEGER,
    PSUBSTITUICAOTRIBUTARIA DOUBLE PRECISION,
    PCOMISSAO DOUBLE PRECISION,
    PCFOP VARCHAR(20))
AS
 declare variable vdata date;
 declare variable valmoxarifado integer;
 begin
 Select vd1_cad, vd1_alm From ESTMVVD1 Where vd1_cod = :pCodigo Into :vData, :vAlmoxarifado;
 
 Insert Into ESTMVVD2
 (
 vd2_cod, vd2_bol, vd2_alm, vd2_cad, vd2_pro, vd2_vlr, vd2_qtd, vd2_ent,
 vd2_cor, vd2_med, vd2_ser, vd2_item, vd2_aliquota_ipi, vd2_aliquota_icms,
 vd2_descricao, vd2_aliquota_iss, reducaobaseicms, descontoitem, unidade,
 classificacaofiscal, vd2_materia_aplicada, vd2_situacaotributaria,
 vd2_finalidade, vd2_tipo, vd2_obs1, vd2_obs2, vd2_obs3, vd2_obs4, vd2_unm,
 vd2_alt, vd2_cmp, vd2_lrg, vd2_gar, vd2_nserie, vd2_ambiente,
 vd2_obs_blob, vd2_sub_tributa, vd2_comissao, vd2_cfop
 )
 Values((Select VCODIGO From maxtabelacodigo('ESTMVVD2','VD2_COD')),
 :pCodigo, :vAlmoxarifado, :vData, :pProduto, :pValorUnitario, :pQuantidade, 'N',
 :pCor, :pMedida, :pServico, Coalesce((Select max(vd2_item)+1 from estmvvd2 where vd2_bol = :pCodigo),1), :pIPI, :pICMS,
 :pDescricao, :pISS, :pReducaoICMS, :pDesconto, :pUnidade,
 :pClassificacaoFiscal, null, :pSituacaoTributaria,
 :pFinalidade, '', :pObservacao1, :pObservacao2, :pObservacao3, :pObservacao4, :pUnidadeMedida,
 :pAltura, :pComprimento, :pLargura, null, :pNumeroSerie, :pAmbiente,
 :pObservacaoBlob, :pSubstituicaoTributaria, :pComissao, :pCFOP);
 end
^

ALTER PROCEDURE CRIAR_PAGAMENTO_CUPOM (
    PCODIGO VARCHAR(13),
    PCONDICAO INTEGER,
    PDESCONTOVALOR DOUBLE PRECISION,
    PDESCONTOPERC DOUBLE PRECISION)
AS
 declare variable vdata date;
 declare variable valmoxarifado integer;
 declare variable vtotal double precision;
 begin
 Select vd1_cad, vd1_alm, vd1_total_nota_semdescto From ESTMVVD1 Where vd1_cod = :pCodigo Into :vData, :vAlmoxarifado, :vTotal;
 
 if (vTotal <> 0) then
 begin
 if (pDescontoPerc > 0) then
 vTotal = vTotal - (vTotal / 100.00 * pDescontoValor);
 if (pDescontoValor > 0) then
 vTotal = vTotal - pDescontoValor;
 end
 
 Insert Into ESTMVVD3
 (vd3_cod, vd3_alm, vd3_cad, vd3_bol, vd3_pgt, vd3_dsv, vd3_dsp, vd3_vlrl,
 vd3_item, vd3_dest)
 Values((Select VCODIGO From maxtabelacodigo('ESTMVVD3','VD3_COD')),
 :vAlmoxarifado, :vData, :pCodigo, :pCondicao, :pDescontoValor, :pDescontoPerc,
 :vTotal, 0, '');
 
 end
^

ALTER PROCEDURE CRIAR_PARCELAS_CUPOM (
    PCODIGO VARCHAR(13),
    PTIPO INTEGER)
AS
 declare variable vvalortotal double precision;
 declare variable vvalorparcela double precision;
 declare variable vdocumento varchar(10);
 declare variable vparc integer;
 declare variable valmoxarifado integer;
 declare variable vdata date;
 declare variable vdataref date;
 declare variable vdatavec date;
 declare variable vdias integer;
 declare variable vitem integer;
 declare variable vdocref varchar(10);
 declare variable vdiafatur integer;
 declare variable vtipoparcelas varchar(1);
 declare variable vdiasmes integer;
 declare variable vtipfin varchar(1);
 declare variable vvd4cod integer;
 begin
 Select
 COALESCE(NULLIF(VD1_SEU_NUMERO, ''), CAST(VD1_NOT AS VARCHAR(10))),
 COALESCE(VD1_ENT, VD1_CAD),
 Case
 when pgt_parcelas = 'D' then 1
 when pgt_parcelas in ('V', 'N') then 0
 when pgt_pa36 is not null then 36
 when pgt_pa35 is not null then 35
 when pgt_pa34 is not null then 34
 when pgt_pa33 is not null then 33
 when pgt_pa32 is not null then 32
 when pgt_pa31 is not null then 31
 when pgt_pa30 is not null then 30
 when pgt_pa29 is not null then 29
 when pgt_pa28 is not null then 28
 when pgt_pa27 is not null then 27
 when pgt_pa26 is not null then 26
 when pgt_pa25 is not null then 25
 when pgt_pa24 is not null then 24
 when pgt_pa23 is not null then 23
 when pgt_pa22 is not null then 22
 when pgt_pa21 is not null then 21
 when pgt_pa20 is not null then 20
 when pgt_pa19 is not null then 19
 when pgt_pa18 is not null then 18
 when pgt_pa17 is not null then 17
 when pgt_pa16 is not null then 16
 when pgt_pa15 is not null then 15
 when pgt_pa14 is not null then 14
 when pgt_pa13 is not null then 13
 when pgt_pa12 is not null then 12
 when pgt_pa11 is not null then 11
 when pgt_pa10 is not null then 10
 when pgt_pa9 is not null then 9
 when pgt_pa8 is not null then 8
 when pgt_pa7 is not null then 7
 when pgt_pa6 is not null then 6
 when pgt_pa5 is not null then 5
 when pgt_pa4 is not null then 4
 when pgt_pa3 is not null then 3
 when pgt_pa2 is not null then 2
 when pgt_pa1 is not null then 1
 else 0
 end
 From ESTMVVD1, ESTMVVD3, CDPGT
 Where ESTMVVD1.VD1_COD = ESTMVVD3.VD3_BOL
 And ESTMVVD3.VD3_PGT = PGT_COD
 And ESTMVVD1.VD1_COD = :PCODIGO
 Into :VDOCREF, :VDATAREF, :VPARC;
 
 For
 Select
 i, case When :VPARC <= 1 then :VDOCREF When i > 26 then :VDOCREF || '/' || 'A' || ASCII_CHAR(64+i-26) else :VDOCREF || '/' || ASCII_CHAR(64+i) end DOCUMENTO,
 ESTMVVD3.VD3_CAD, ESTMVVD3.VD3_ALM, ESTMVVD3.VD3_VLRL, CDPGT.PGT_PARCELAS, CDPGT.PGT_DIA_FATUR,
 Case
 when i = 1 then CDPGT.PGT_PA1
 when i = 2 then CDPGT.PGT_PA2
 when i = 3 then CDPGT.PGT_PA3
 when i = 4 then CDPGT.PGT_PA4
 when i = 5 then CDPGT.PGT_PA5
 when i = 6 then CDPGT.PGT_PA6
 when i = 7 then CDPGT.PGT_PA7
 when i = 8 then CDPGT.PGT_PA8
 when i = 9 then CDPGT.PGT_PA9
 when i = 10 then CDPGT.PGT_PA10
 when i = 11 then CDPGT.PGT_PA11
 when i = 12 then CDPGT.PGT_PA12
 when i = 13 then CDPGT.PGT_PA13
 when i = 14 then CDPGT.PGT_PA14
 when i = 15 then CDPGT.PGT_PA15
 when i = 16 then CDPGT.PGT_PA16
 when i = 17 then CDPGT.PGT_PA17
 when i = 18 then CDPGT.PGT_PA18
 when i = 19 then CDPGT.PGT_PA19
 when i = 20 then CDPGT.PGT_PA20
 when i = 21 then CDPGT.PGT_PA21
 when i = 22 then CDPGT.PGT_PA22
 when i = 23 then CDPGT.PGT_PA23
 when i = 24 then CDPGT.PGT_PA24
 when i = 25 then CDPGT.PGT_PA25
 when i = 26 then CDPGT.PGT_PA26
 when i = 27 then CDPGT.PGT_PA27
 when i = 28 then CDPGT.PGT_PA28
 when i = 29 then CDPGT.PGT_PA29
 when i = 30 then CDPGT.PGT_PA30
 when i = 31 then CDPGT.PGT_PA31
 when i = 32 then CDPGT.PGT_PA32
 when i = 33 then CDPGT.PGT_PA33
 when i = 34 then CDPGT.PGT_PA34
 when i = 35 then CDPGT.PGT_PA35
 when i = 36 then CDPGT.PGT_PA36
 end,
 Case
 when i = 1 then Coalesce(ESTMVVD3.VD3_VLRL / 100.00 * pgt_po1, ESTMVVD3.VD3_VLRL / :VPARC)
 when i = 2 then Coalesce(ESTMVVD3.VD3_VLRL / 100.00 * pgt_po2, ESTMVVD3.VD3_VLRL / :VPARC)
 when i = 3 then Coalesce(ESTMVVD3.VD3_VLRL / 100.00 * pgt_po3, ESTMVVD3.VD3_VLRL / :VPARC)
 when i = 4 then Coalesce(ESTMVVD3.VD3_VLRL / 100.00 * pgt_po4, ESTMVVD3.VD3_VLRL / :VPARC)
 when i = 5 then Coalesce(ESTMVVD3.VD3_VLRL / 100.00 * pgt_po5, ESTMVVD3.VD3_VLRL / :VPARC)
 when i = 6 then Coalesce(ESTMVVD3.VD3_VLRL / 100.00 * pgt_po6, ESTMVVD3.VD3_VLRL / :VPARC)
 when i = 7 then Coalesce(ESTMVVD3.VD3_VLRL / 100.00 * pgt_po7, ESTMVVD3.VD3_VLRL / :VPARC)
 when i = 8 then Coalesce(ESTMVVD3.VD3_VLRL / 100.00 * pgt_po8, ESTMVVD3.VD3_VLRL / :VPARC)
 when i = 9 then Coalesce(ESTMVVD3.VD3_VLRL / 100.00 * pgt_po9, ESTMVVD3.VD3_VLRL / :VPARC)
 when i = 10 then Coalesce(ESTMVVD3.VD3_VLRL / 100.00 * pgt_po10, ESTMVVD3.VD3_VLRL / :VPARC)
 when i = 11 then Coalesce(ESTMVVD3.VD3_VLRL / 100.00 * pgt_po11, ESTMVVD3.VD3_VLRL / :VPARC)
 when i = 12 then Coalesce(ESTMVVD3.VD3_VLRL / 100.00 * pgt_po12, ESTMVVD3.VD3_VLRL / :VPARC)
 when i = 13 then Coalesce(ESTMVVD3.VD3_VLRL / 100.00 * pgt_po13, ESTMVVD3.VD3_VLRL / :VPARC)
 when i = 14 then Coalesce(ESTMVVD3.VD3_VLRL / 100.00 * pgt_po14, ESTMVVD3.VD3_VLRL / :VPARC)
 when i = 15 then Coalesce(ESTMVVD3.VD3_VLRL / 100.00 * pgt_po15, ESTMVVD3.VD3_VLRL / :VPARC)
 when i = 16 then Coalesce(ESTMVVD3.VD3_VLRL / 100.00 * pgt_po16, ESTMVVD3.VD3_VLRL / :VPARC)
 when i = 17 then Coalesce(ESTMVVD3.VD3_VLRL / 100.00 * pgt_po17, ESTMVVD3.VD3_VLRL / :VPARC)
 when i = 18 then Coalesce(ESTMVVD3.VD3_VLRL / 100.00 * pgt_po18, ESTMVVD3.VD3_VLRL / :VPARC)
 when i = 19 then Coalesce(ESTMVVD3.VD3_VLRL / 100.00 * pgt_po19, ESTMVVD3.VD3_VLRL / :VPARC)
 when i = 20 then Coalesce(ESTMVVD3.VD3_VLRL / 100.00 * pgt_po20, ESTMVVD3.VD3_VLRL / :VPARC)
 when i = 21 then Coalesce(ESTMVVD3.VD3_VLRL / 100.00 * pgt_po21, ESTMVVD3.VD3_VLRL / :VPARC)
 when i = 22 then Coalesce(ESTMVVD3.VD3_VLRL / 100.00 * pgt_po22, ESTMVVD3.VD3_VLRL / :VPARC)
 when i = 23 then Coalesce(ESTMVVD3.VD3_VLRL / 100.00 * pgt_po23, ESTMVVD3.VD3_VLRL / :VPARC)
 when i = 24 then Coalesce(ESTMVVD3.VD3_VLRL / 100.00 * pgt_po24, ESTMVVD3.VD3_VLRL / :VPARC)
 when i = 25 then Coalesce(ESTMVVD3.VD3_VLRL / 100.00 * pgt_po25, ESTMVVD3.VD3_VLRL / :VPARC)
 when i = 26 then Coalesce(ESTMVVD3.VD3_VLRL / 100.00 * pgt_po26, ESTMVVD3.VD3_VLRL / :VPARC)
 when i = 27 then Coalesce(ESTMVVD3.VD3_VLRL / 100.00 * pgt_po27, ESTMVVD3.VD3_VLRL / :VPARC)
 when i = 28 then Coalesce(ESTMVVD3.VD3_VLRL / 100.00 * pgt_po28, ESTMVVD3.VD3_VLRL / :VPARC)
 when i = 29 then Coalesce(ESTMVVD3.VD3_VLRL / 100.00 * pgt_po29, ESTMVVD3.VD3_VLRL / :VPARC)
 when i = 30 then Coalesce(ESTMVVD3.VD3_VLRL / 100.00 * pgt_po30, ESTMVVD3.VD3_VLRL / :VPARC)
 when i = 31 then Coalesce(ESTMVVD3.VD3_VLRL / 100.00 * pgt_po31, ESTMVVD3.VD3_VLRL / :VPARC)
 when i = 32 then Coalesce(ESTMVVD3.VD3_VLRL / 100.00 * pgt_po32, ESTMVVD3.VD3_VLRL / :VPARC)
 when i = 33 then Coalesce(ESTMVVD3.VD3_VLRL / 100.00 * pgt_po33, ESTMVVD3.VD3_VLRL / :VPARC)
 when i = 34 then Coalesce(ESTMVVD3.VD3_VLRL / 100.00 * pgt_po34, ESTMVVD3.VD3_VLRL / :VPARC)
 when i = 35 then Coalesce(ESTMVVD3.VD3_VLRL / 100.00 * pgt_po35, ESTMVVD3.VD3_VLRL / :VPARC)
 when i = 36 then Coalesce(ESTMVVD3.VD3_VLRL / 100.00 * pgt_po36, ESTMVVD3.VD3_VLRL / :VPARC)
 end
 From
 ESTMVVD3, CDPGT, Linhas(:VPARC)
 Where ESTMVVD3.VD3_PGT = PGT_COD
 And ESTMVVD3.VD3_BOL = :PCODIGO
 Order By i
 Into vitem, vdocumento, vdata, valmoxarifado, vvalortotal, vTipoParcelas, vdiafatur, vdias, vvalorparcela do
 begin
 if (vTipoParcelas = 'D') then
 begin
 vdataref = cast('today' as date);
 if (vdiafatur < extract(day from vdataref)) then
 vdataref = addmonth(vdataref, 1);
 execute procedure daysofmonth(extract(year from vdataref),
 extract(month from vdataref)) returning_values(vdiasmes);
 if (vdiasmes < vdiafatur ) then
 vdiafatur = vdiasmes;
 execute procedure encodedate(extract(year from vdataref),
 extract(month from vdataref),
 vdiafatur) returning_values (vdatavec);
 end
 else
 vdatavec = addday(:vdataref, :vdias);
 Select VCODIGO From maxtabelacodigo('ESTMVVD4','VD4_COD') into vvd4cod;
 insert into estmvvd4 (vd4_cod, vd4_alm, vd4_cad, vd4_bol, vd4_vec, vd4_val, vd4_doc, vd4_tip, vd4_finan, vd4_item, vd4_antecipado)
 values (:vvd4cod, :valmoxarifado, :vdata, :pcodigo, :vdatavec, :vvalorparcela, :vdocumento, :ptipo, 0, :vItem, 'F');
 Select tip_fin from cdtipd where tip_cod = :ptipo into vtipfin;
 if (vtipfin = 'S') then
 execute procedure atualizar_financeiro_vd4(:vvd4cod);
 end
 end
^

ALTER PROCEDURE DAYOFWEEK (
    ADATE TIMESTAMP)
RETURNS (
    RESULT INTEGER)
AS
DECLARE VARIABLE Elapsed INTEGER;
BEGIN
  EXECUTE PROCEDURE ElapsedDays("1.1.96", ADate) RETURNING_VALUES Elapsed;
  EXECUTE PROCEDURE Modulus(Elapsed, 7) RETURNING_VALUES Result;
END
^

ALTER PROCEDURE DAYOFYEAR (
    ADATE TIMESTAMP)
RETURNS (
    RESULT INTEGER)
AS
DECLARE VARIABLE WorkYear   INTEGER;
DECLARE VARIABLE WorkMonth  INTEGER;
DECLARE VARIABLE I          INTEGER;
BEGIN
  Result = 0;
  EXECUTE PROCEDURE vYear(ADate) RETURNING_VALUES(WorkYear);
  EXECUTE PROCEDURE vMonth(ADate) RETURNING_VALUES(WorkMonth);
  WorkMonth = WorkMonth-1;
  WHILE (WorkMonth > 0) DO
  BEGIN
    EXECUTE PROCEDURE DaysOfMonth(WorkYear, WorkMonth) RETURNING_VALUES(I);
    Result = Result+I;
    WorkMonth = WorkMonth-1;
  END
  EXECUTE PROCEDURE vDay(ADate) RETURNING_VALUES(I);
  Result = Result +I;
END
^

ALTER PROCEDURE DAYSOFMONTH (
    AYEAR INTEGER,
    AMONTH INTEGER)
RETURNS (
    RESULT INTEGER)
AS
 BEGIN
 Result = extract(day from AddDay(AddMonth(AMonth || '/01/' || AYear , 1), -1));
 SUSPEND;
 END
^

ALTER PROCEDURE DECODEDATE (
    ADATE TIMESTAMP)
RETURNS (
    WYEAR INTEGER,
    WMONTH INTEGER,
    WDAY INTEGER)
AS
 BEGIN
 EXECUTE PROCEDURE vYear(ADate) RETURNING_VALUES wYear;
 EXECUTE PROCEDURE vMonth(ADate) RETURNING_VALUES wMonth;
 EXECUTE PROCEDURE vDay(ADate) RETURNING_VALUES wDay;
 suspend;
 END
^

ALTER PROCEDURE DELET_CUPOM (
    PCOD VARCHAR(6),
    PCAD TIMESTAMP,
    PALM INTEGER)
AS
/*DECLARE VARIABLE STATUS VARCHAR(1);*/
BEGIN
    DELETE FROM ESTMVVD1 WHERE VD1_COD = :PCOD AND VD1_CAD = :PCAD AND VD1_ALM = :PALM;
    DELETE FROM ESTMVVD2 WHERE VD2_BOL = :PCOD;
    DELETE FROM ESTMVVD4 WHERE VD4_BOL = :PCOD;
END
^

ALTER PROCEDURE DIGITOEAN13 (
    CODIGO VARCHAR(12))
RETURNS (
    DIGITO INTEGER)
AS
 declare variable i integer;
 declare variable soma integer;
 declare variable valor integer;
 declare variable vcarac varchar(10);
 begin
 soma = 0;
 i = 0;
 while (i < 12) do
 begin
 i = i + 1;
 vCarac = substr(codigo, i, i);
 if ((i / 2.0) <> div(i, 2)) then
 Valor = cast(vCarac as integer);
 else
 valor = (cast(vCarac as integer) * 3);
 Soma = Soma + Valor;
 end
 digito = 10 - mod(Soma,10);
 if (digito >= 10) then
 digito = digito - 10;
 suspend;
 end
^

ALTER PROCEDURE DIVIDIR (
    PVALOR1 DOUBLE PRECISION,
    PVALOR2 DOUBLE PRECISION)
RETURNS (
    RESULT DOUBLE PRECISION)
AS
 begin
 if (pValor2 <> 0) then
 Result = pValor1 / pValor2;
 suspend;
 end
^

ALTER PROCEDURE DUR_EST_GRUPO (
    PTIPO INTEGER,
    PDATADE TIMESTAMP,
    PDATAATE TIMESTAMP,
    PPRODE VARCHAR(100),
    PPROATE VARCHAR(100),
    PALMDE VARCHAR(50),
    PALMATE VARCHAR(50),
    PMARDE VARCHAR(40),
    PMARATE VARCHAR(40),
    PGRUDE VARCHAR(40),
    PGRUATE VARCHAR(40),
    PSGRUDE VARCHAR(40),
    PSGRUATE VARCHAR(40),
    PTIPDE VARCHAR(40),
    PTIPATE VARCHAR(40),
    PTRADE VARCHAR(40),
    PTRAATE VARCHAR(40),
    PCATDE VARCHAR(40),
    PCATATE VARCHAR(40),
    PUSACOR INTEGER,
    PUSAMEDIDA INTEGER)
RETURNS (
    CUPOM VARCHAR(6),
    MOVIMENTO DOUBLE PRECISION,
    FATURAMENTO DOUBLE PRECISION,
    EST_SAL DOUBLE PRECISION,
    PRO_COD INTEGER,
    PRO_INT VARCHAR(15),
    PRO_BAR VARCHAR(15),
    PRO_NOM VARCHAR(100),
    COR_NOM VARCHAR(30),
    MED_NOM VARCHAR(30),
    CODIGO VARCHAR(21),
    GRUPO VARCHAR(30))
AS
 begin
 IF (PTIPO=0) THEN
 BEGIN
 For
 Select Distinct
 Count(vd1_cod), Sum(vd2_qtd), Sum(Faturamento), est_sal, pro_cod, pro_int,
 pro_bar, pro_nom, procm AS CODIGO, med_nom, cor_nom
 from dur_est_selecao(:pdatade, :pdataate, :pprode, :pproate, :palmde,
 :palmate, :pmarde, :pmarate, :pgrude, :pgruate, :psgrude,
 :psgruate, :ptipde, :ptipate, :ptrade, :ptraate, :pcatde, :pcatate,
 :pusacor, :pusamedida)
 Group by pro_cod, pro_int, pro_bar, pro_nom, procm, med_nom, cor_nom, est_sal
 INTO :CUPOM,:MOVIMENTO,:FATURAMENTO,:EST_SAL,:PRO_COD,:PRO_INT,:PRO_BAR,:PRO_NOM, :CODIGO, :MED_NOM, COR_NOM DO
 SUSPEND;
 END
 IF (PTIPO=1) THEN
 BEGIN
 For
 Select Distinct
 Count(vd1_cod), Sum(vd2_qtd), Sum(Faturamento), est_sal, pro_cod, pro_int,
 pro_bar, pro_nom, mar_nom, procm AS CODIGO, med_nom, cor_nom
 from dur_est_selecao(:pdatade, :pdataate, :pprode, :pproate, :palmde,
 :palmate, :pmarde, :pmarate, :pgrude, :pgruate, :psgrude,
 :psgruate, :ptipde, :ptipate, :ptrade, :ptraate, :pcatde, :pcatate,
 :pusacor, :pusamedida)
 Group by pro_cod, pro_int, pro_bar, pro_nom, mar_nom, procm, med_nom, cor_nom, est_sal
 INTO :CUPOM,:MOVIMENTO,:FATURAMENTO,:EST_SAL,:PRO_COD,:PRO_INT,:PRO_BAR,:PRO_NOM,:GRUPO, :CODIGO, :MED_NOM, COR_NOM DO
 SUSPEND;
 END
 IF (PTIPO=2) THEN
 BEGIN
 For
 Select Distinct
 Count(vd1_cod), Sum(vd2_qtd), Sum(Faturamento), est_sal, pro_cod, pro_int,
 pro_bar, pro_nom, tip_nom, procm AS CODIGO, med_nom, cor_nom
 from dur_est_selecao(:pdatade, :pdataate, :pprode, :pproate, :palmde,
 :palmate, :pmarde, :pmarate, :pgrude, :pgruate, :psgrude,
 :psgruate, :ptipde, :ptipate, :ptrade, :ptraate, :pcatde, :pcatate,
 :pusacor, :pusamedida)
 Group by pro_cod, pro_int, pro_bar, pro_nom, tip_nom, procm, med_nom, cor_nom, est_sal
 INTO :CUPOM,:MOVIMENTO,:FATURAMENTO,:EST_SAL,:PRO_COD,:PRO_INT,:PRO_BAR,:PRO_NOM,:GRUPO, :CODIGO, :MED_NOM, COR_NOM DO
 SUSPEND;
 END
 IF (PTIPO=3) THEN
 BEGIN
 For
 Select Distinct
 Count(vd1_cod), Sum(vd2_qtd), Sum(Faturamento), est_sal, pro_cod, pro_int,
 pro_bar, pro_nom, gru_nom, procm AS CODIGO, med_nom, cor_nom
 from dur_est_selecao(:pdatade, :pdataate, :pprode, :pproate, :palmde,
 :palmate, :pmarde, :pmarate, :pgrude, :pgruate, :psgrude,
 :psgruate, :ptipde, :ptipate, :ptrade, :ptraate, :pcatde, :pcatate,
 :pusacor, :pusamedida)
 Group by pro_cod, pro_int, pro_bar, pro_nom, gru_nom, procm, med_nom, cor_nom, est_sal
 INTO :CUPOM,:MOVIMENTO,:FATURAMENTO,:EST_SAL,:PRO_COD,:PRO_INT,:PRO_BAR,:PRO_NOM,:GRUPO, :CODIGO, :MED_NOM, COR_NOM DO
 SUSPEND;
 END
 IF (PTIPO=4) THEN
 BEGIN
 For
 Select Distinct
 Count(vd1_cod), Sum(vd2_qtd), Sum(Faturamento), est_sal, pro_cod, pro_int,
 pro_bar, pro_nom, subgrupo, procm AS CODIGO, med_nom, cor_nom
 from dur_est_selecao(:pdatade, :pdataate, :pprode, :pproate, :palmde,
 :palmate, :pmarde, :pmarate, :pgrude, :pgruate, :psgrude,
 :psgruate, :ptipde, :ptipate, :ptrade, :ptraate, :pcatde, :pcatate,
 :pusacor, :pusamedida)
 Group by pro_cod, pro_int, pro_bar, pro_nom, subgrupo, procm, med_nom, cor_nom, est_sal
 INTO :CUPOM,:MOVIMENTO,:FATURAMENTO,:EST_SAL,:PRO_COD,:PRO_INT,:PRO_BAR,:PRO_NOM,:GRUPO, :CODIGO, :MED_NOM, COR_NOM DO
 SUSPEND;
 END
 IF (PTIPO=5) THEN
 BEGIN
 For
 Select Distinct
 Count(vd1_cod), Sum(vd2_qtd), Sum(Faturamento), est_sal, pro_cod, pro_int,
 pro_bar, pro_nom, cat_nom, procm AS CODIGO, med_nom, cor_nom
 from dur_est_selecao(:pdatade, :pdataate, :pprode, :pproate, :palmde,
 :palmate, :pmarde, :pmarate, :pgrude, :pgruate, :psgrude,
 :psgruate, :ptipde, :ptipate, :ptrade, :ptraate, :pcatde, :pcatate,
 :pusacor, :pusamedida)
 Group by pro_cod, pro_int, pro_bar, pro_nom, cat_nom, procm, med_nom, cor_nom, est_sal
 INTO :CUPOM,:MOVIMENTO,:FATURAMENTO,:EST_SAL,:PRO_COD,:PRO_INT,:PRO_BAR,:PRO_NOM,:GRUPO, :CODIGO, :MED_NOM, COR_NOM DO
 SUSPEND;
 END
 END
^

ALTER PROCEDURE DUR_EST_LISTAGEM (
    PDATADE TIMESTAMP,
    PDATAATE TIMESTAMP,
    PTIPO INTEGER,
    PPRODE VARCHAR(100),
    PPROATE VARCHAR(100),
    PALMDE VARCHAR(50),
    PALMATE VARCHAR(50),
    PMARDE VARCHAR(40),
    PMARATE VARCHAR(40),
    PGRUDE VARCHAR(40),
    PGRUATE VARCHAR(40),
    PSGRUDE VARCHAR(40),
    PSGRUATE VARCHAR(40),
    PTIPDE VARCHAR(40),
    PTIPATE VARCHAR(40),
    PTRADE VARCHAR(40),
    PTRAATE VARCHAR(40),
    PCATDE VARCHAR(40),
    PCATATE VARCHAR(40),
    PUSACOR INTEGER,
    PUSAMEDIDA INTEGER)
RETURNS (
    CUPOM VARCHAR(6),
    MOVIMENTO DOUBLE PRECISION,
    FATURAMENTO DOUBLE PRECISION,
    EST_SAL DOUBLE PRECISION,
    PRO_COD INTEGER,
    PRO_INT VARCHAR(15),
    PRO_BAR VARCHAR(15),
    PRO_NOM VARCHAR(100),
    DURACAO DOUBLE PRECISION,
    COR_NOM VARCHAR(30),
    MED_NOM VARCHAR(30),
    CODIGO VARCHAR(21),
    GRUPO VARCHAR(30),
    PDIAS INTEGER)
AS
 begin
 if (pDataDe is null) then
 begin
 Select Min(VD1_CAD) from estmvvd1 into :pDataDe;
 pDataAte = Cast("today" as date);
 end
 if (pDataAte is null) then
 pDataAte = pDataDe;
 pDias = pDataAte - pDataDe;
 For
 Select CUPOM,MOVIMENTO,FATURAMENTO,EST_SAL,PRO_COD,PRO_INT,PRO_BAR,PRO_NOM, CODIGO, MED_NOM, COR_NOM, GRUPO
 from dur_est_grupo(:pTipo, :pdatade, :pdataate, :pprode, :pproate, :palmde, :palmate,
 :pmarde, :pmarate, :pgrude, :pgruate, :psgrude, :psgruate, :ptipde, :ptipate,
 :ptrade, :ptraate, :pcatde, :pcatate, :pusacor, :pusamedida)
 INTO :CUPOM,:MOVIMENTO,:FATURAMENTO,:EST_SAL,:PRO_COD,:PRO_INT,:PRO_BAR,:PRO_NOM, :CODIGO, :MED_NOM, COR_NOM, GRUPO
 DO
 BEGIN
 IF (:MOVIMENTO>0) THEN
 BEGIN
 DURACAO = ( est_sal / (:MOVIMENTO/:pDIAS) );
 DURACAO = (CAST((DURACAO * 100) as integer) / 100);
 END
 ELSE
 DURACAO = 0;
 SUSPEND;
 END
 END
^

ALTER PROCEDURE DUR_EST_SELECAO (
    PDATADE TIMESTAMP,
    PDATAATE TIMESTAMP,
    PPRODE VARCHAR(100),
    PPROATE VARCHAR(100),
    PALMDE VARCHAR(50),
    PALMATE VARCHAR(50),
    PMARDE VARCHAR(40),
    PMARATE VARCHAR(40),
    PGRUDE VARCHAR(40),
    PGRUATE VARCHAR(40),
    PSGRUDE VARCHAR(40),
    PSGRUATE VARCHAR(40),
    PTIPDE VARCHAR(40),
    PTIPATE VARCHAR(40),
    PTRADE VARCHAR(40),
    PTRAATE VARCHAR(40),
    PCATDE VARCHAR(40),
    PCATATE VARCHAR(40),
    PUSACOR INTEGER,
    PUSAMEDIDA INTEGER)
RETURNS (
    VD1_COD VARCHAR(13),
    VD2_QTD DOUBLE PRECISION,
    FATURAMENTO DOUBLE PRECISION,
    EST_SAL DOUBLE PRECISION,
    PRO_COD INTEGER,
    PRO_INT VARCHAR(15),
    PRO_BAR VARCHAR(15),
    PRO_NOM VARCHAR(100),
    PROCM VARCHAR(21),
    COR_NOM VARCHAR(30),
    MED_NOM VARCHAR(30),
    TIP_NOM VARCHAR(30),
    MAR_NOM VARCHAR(30),
    GRU_NOM VARCHAR(30),
    SUBGRUPO VARCHAR(30),
    CAT_NOM VARCHAR(30))
AS
 begin
 if (pUsaCor is null) then
 pUsaCor = 0;
 if (pUsaMedida is null) then
 pUsaMedida = 0;
 For
 Select vd1_cod,
 vd2_qtd,
 vd2_vlr * vd2_qtd,
 (Select Sum(est_sal) From mvest, cdalm
 Where alm_cod = est_alm
 and est_pro=estmvvd2.vd2_pro
 and ((:pUsaCor is null) or (:pUsaCor = 0) or (est_cor = estmvvd2.vd2_cor))
 and ((:pUsaMedida is null) or (:pUsaMedida = 0) or (est_tam=estmvvd2.vd2_med))
 and ((:palmde is null) or ((alm_fant >= :palmde) and (alm_fant <= :palmate)))
 ) as est_sal,
 cdpro.pro_cod,cdpro.pro_int,cdpro.pro_bar,cdpro.pro_nom,
 cdprocm.pro_cod AS CODIGO, cdmed.med_nom, cdcor.cor_nom,
 tip_nom, mar_nom, cat_nom, cdgrup.gru_nom, cdsubgrup.gru_nom
 From
 estmvvd1,cdtra1, CDALM,
 cdpro left outer join cdtipp on cdpro.pro_tip = cdtipp.tip_cod
 left outer join cdcatpro on cdpro.pro_cat = cdcatpro.cat_cod
 left outer join cdmar on cdpro.pro_mar = cdmar.mar_cod
 left outer join cdgrup on cdpro.pro_gru = cdgrup.gru_cod
 left outer join cdsubgrup on cdpro.pro_subgru = cdsubgrup.gru_cod,
 estmvvd2 left outer join cdprocm on (estmvvd2.vd2_pro = cdprocm.pro_pro and estmvvd2.vd2_cor = cdprocm.pro_cor and estmvvd2.vd2_med = cdprocm.pro_med and
 ((:pUsaMedida <> 0) or (:pUsaCor <> 0)))
 left outer join cdmed on ((:pUsaMedida <> 0) and estmvvd2.vd2_med = cdmed.med_cod)
 left outer join cdcor on ((:pUsaCor <> 0) and estmvvd2.vd2_cor = cdcor.cor_cod)
 Where vd2_pro = cdpro.pro_cod
 and vd2_bol = vd1_cod
 and vd1_canc <> "C"
 and vd2_alm = alm_cod
 and TRA_TIP_TRA = "VND"
 and vd1_tra = tra_cod
 and ESTMVVD1.VD1_CAD >= :PDATADE and ESTMVVD1.VD1_CAD <= :PDATAATE
 and ( (CDPRO.PRO_NOM >= :PPRODE and CDPRO.PRO_NOM <= :PPROATE) OR (:PPRODE IS NULL) )
 and ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 and ( (CDMAR.MAR_ORD >= :PMARDE and CDMAR.MAR_ORD <= :PMARATE) OR (:PMARDE IS NULL) )
 and ( (CDGRUP.GRU_ORD >= :PGRUDE and CDGRUP.GRU_ORD <= :PGRUATE) OR (:PGRUDE IS NULL) )
 and ( (CDSUBGRUP.GRU_ORD >= :PSGRUDE and CDSUBGRUP.GRU_ORD <= :PSGRUATE) OR (:PSGRUDE IS NULL) )
 and ( (CDTIPP.TIP_ORD >= :PTIPDE and CDTIPP.TIP_ORD <= :PTIPATE) OR (:PTIPDE IS NULL) )
 and ( (CDCATPRO.CAT_ORD >= :PCATDE and CDCATPRO.CAT_ORD <= :PCATATE) OR (:PCATDE IS NULL) )
 and ( (CDTRA1.TRA_NOM >= :PTRADE and CDTRA1.TRA_NOM <= :PTRAATE) OR (:PTRADE IS NULL) )
 into VD1_COD, VD2_QTD, FATURAMENTO, EST_SAL, PRO_COD, PRO_INT, PRO_BAR,
 PRO_NOM, PROCM, MED_NOM, COR_NOM, TIP_NOM, MAR_NOM, CAT_NOM, GRU_NOM,
 SUBGRUPO do
 suspend;
 end
^

ALTER PROCEDURE ELAPSEDDAYS (
    DATE1 TIMESTAMP,
    DATE2 TIMESTAMP)
RETURNS (
    RESULT INTEGER)
AS
BEGIN
  Result = Date2-Date1;
END
^

ALTER PROCEDURE ENCODEDATE (
    WYEAR INTEGER,
    WMONTH INTEGER,
    WDAY INTEGER)
RETURNS (
    RESULT TIMESTAMP)
AS
 declare variable vdias integer;
 BEGIN
 Select result From daysofmonth(:wyear, :wmonth) into vDias;
 if (vDias < wDay) then
 wDay = vDias;
 Result = wDay || "." || wMonth || "." || wYear;
 suspend;
 END
^

ALTER PROCEDURE ENVIA_AVISO (
    USUARIO INTEGER,
    TITULO VARCHAR(30),
    DESCRICAO VARCHAR(50),
    FORMULARIO VARCHAR(30),
    ADICIONAL VARCHAR(10))
AS
 begin
 insert into MVAVISOS (AVI_USE,AVI_TIT,AVI_DES,AVI_CLA,AVI_ADI)
 Select :USUARIO, :TITULO, :DESCRICAO, :FORMULARIO, :ADICIONAL
 From RDB$DATABASE
 Where not Exists (select * from mvavisos where avi_use = :USUARIO and avi_tit = :TITULO);
 end
^

ALTER PROCEDURE ESPIAOVD1
RETURNS (
    ITEM VARCHAR(13),
    PROXIMO VARCHAR(13),
    ALM_COD VARCHAR(3),
    SALTO DOUBLE PRECISION,
    VD1_COD VARCHAR(16),
    VD1_CAD TIMESTAMP)
AS
 BEGIN
 FOR
 SELECT
 SUBSTRING( VD1_COD FROM 1 FOR 10 ),
 Cast((SELECT RESULT FROM COMPLETA_STRING(estmvvd1.VD1_ALM_DIGITA,"0",3,-1)) as varchar(3)), VD1_CAD
 FROM estmvvd1 WHERE VD1_ALM_DIGITA IS NOT NULL ORDER BY 2,1
 INTO :PROXIMO, :ALM_COD, :VD1_CAD
 DO
 BEGIN
 
 IF( (ITEM IS NOT NULL) AND (PROXIMO IS NOT NULL) AND
 (CAST(PROXIMO AS DOUBLE PRECISION) > CAST(ITEM AS DOUBLE PRECISION)) ) THEN
 BEGIN
 
 SALTO = CAST((CAST(PROXIMO AS DOUBLE PRECISION) - CAST(ITEM AS DOUBLE PRECISION)) AS INTEGER);
 
 IF ( SALTO > 1 ) THEN
 SUSPEND;
 END
 
 ITEM = PROXIMO;
 VD1_COD = ITEM || ALM_COD;
 
 END
 END
^

ALTER PROCEDURE ESTOQUE_ABERTO (
    P_ALM_FANT_DE VARCHAR(20),
    P_ALM_FANT_ATE VARCHAR(20),
    P_PRO_NOM_DE VARCHAR(100),
    P_PRO_NOM_ATE VARCHAR(100),
    P_COR_NOM_DE VARCHAR(30),
    P_COR_NOM_ATE VARCHAR(30),
    P_MED_NOM_DE VARCHAR(20),
    P_MED_NOM_ATE VARCHAR(20),
    P_MAR_ORD_DE VARCHAR(40),
    P_MAR_ORD_ATE VARCHAR(40),
    P_TIP_ORD_DE VARCHAR(40),
    P_TIP_ORD_ATE VARCHAR(40),
    P_CAT_ORD_DE VARCHAR(40),
    P_CAT_ORD_ATE VARCHAR(40),
    P_GRU_ORD_DE VARCHAR(40),
    P_GRU_ORD_ATE VARCHAR(40),
    P_SUB_GRU_ORD_DE VARCHAR(40),
    P_SUB_GRU_ORD_ATE VARCHAR(40))
RETURNS (
    PRO_COD INTEGER,
    PRO_INT VARCHAR(15),
    PRO_BAR VARCHAR(15),
    PRO_NOM VARCHAR(100),
    EST_SAL DOUBLE PRECISION,
    COR_COD VARCHAR(3),
    COR_NOM VARCHAR(30),
    COR_SIG VARCHAR(5),
    MED_COD VARCHAR(3),
    MED_NOM VARCHAR(30),
    MED_ORD VARCHAR(10),
    MED_SIG VARCHAR(5),
    PROCM_COD VARCHAR(21),
    ALM_COD INTEGER,
    ALM_FANT VARCHAR(20))
AS
 begin
 if (P_ALM_FANT_ATE is Null) then
 P_ALM_FANT_ATE = P_ALM_FANT_DE;
 if (P_PRO_NOM_ATE is Null) then
 P_PRO_NOM_ATE = P_PRO_NOM_DE;
 if (P_COR_NOM_ATE is Null) then
 P_COR_NOM_ATE = P_COR_NOM_DE;
 if (P_MED_NOM_ATE is Null) then
 P_MED_NOM_ATE = P_MED_NOM_DE;
 if (P_MAR_ORD_ATE is Null) then
 P_MAR_ORD_ATE = P_MAR_ORD_DE;
 if (P_TIP_ORD_ATE is Null) then
 P_TIP_ORD_ATE = P_TIP_ORD_DE;
 if (P_CAT_ORD_ATE is Null) then
 P_CAT_ORD_ATE = P_CAT_ORD_DE;
 if (P_GRU_ORD_ATE is Null) then
 P_GRU_ORD_ATE = P_GRU_ORD_DE;
 if (P_SUB_GRU_ORD_ATE is Null) then
 P_SUB_GRU_ORD_ATE = P_SUB_GRU_ORD_DE;
 For
 Select
 CDPRO.PRO_COD,
 PRO_INT,
 PRO_BAR,
 PRO_NOM,
 coalesce((Select sum(EST_SAL) from MVEST where CDPRO.PRO_COD = MVEST.EST_PRO and Coalesce(CDPROCM.PRO_COR, '000') = MVEST.EST_COR and Coalesce(CDPROCM.PRO_MED, '000') = MVEST.EST_TAM and CDALM.ALM_COD = MVEST.EST_ALM),0),
 CDCOR.COR_COD,
 CDCOR.COR_NOM,
 CDCOR.COR_SIG,
 CDMED.MED_COD,
 CDMED.MED_NOM,
 CDMED.MED_SIG,
 CDMED.MED_ORDEM,
 CDPROCM.PRO_COD as CODIGO,
 ALM_FANT,
 ALM_COD
 From
 CDALM,
 CDPRO
 left join CDPROCM on (CDPROCM.PRO_PRO = CDPRO.PRO_COD)
 left join CDMED on (CDPROCM.PRO_MED = CDMED.MED_COD)
 left join CDCOR on (CDPROCM.PRO_COR = CDCOR.COR_COD),
 CDMAR,
 CDTIPP,
 CDSUBGRUP,
 CDGRUP,
 CDCATPRO
 Where CDPRO.PRO_MAR = CDMAR.MAR_COD
 and CDPRO.PRO_TIP = CDTIPP.TIP_COD
 and CDPRO.PRO_GRU = CDGRUP.GRU_COD
 and CDPRO.PRO_SUBGRU = CDSUBGRUP.GRU_COD
 and CDPRO.PRO_CAT = CDCATPRO.CAT_COD
 and ((:P_ALM_FANT_DE is Null) or ((ALM_FANT >= :P_ALM_FANT_DE) and (ALM_FANT <= :P_ALM_FANT_ATE)))
 and ((:P_PRO_NOM_DE is Null) or ((PRO_NOM >= :P_PRO_NOM_DE) and (PRO_NOM <= :P_PRO_NOM_ATE)))
 and ((:P_COR_NOM_DE is Null) or ((COR_NOM >= :P_COR_NOM_DE) and (COR_NOM <= :P_COR_NOM_ATE)))
 and ((:P_MED_NOM_DE is Null) or ((MED_NOM >= :P_MED_NOM_DE) and (MED_NOM <= :P_MED_NOM_ATE)))
 and ((:P_MAR_ORD_DE is Null) or ((MAR_ORD >= :P_MAR_ORD_DE) and (MAR_ORD <= :P_MAR_ORD_ATE)))
 and ((:P_TIP_ORD_DE is Null) or ((TIP_ORD >= :P_TIP_ORD_DE) and (TIP_ORD <= :P_TIP_ORD_ATE)))
 and ((:P_CAT_ORD_DE is Null) or ((CAT_ORD >= :P_CAT_ORD_DE) and (CAT_ORD <= :P_CAT_ORD_ATE)))
 and ((:P_GRU_ORD_DE is Null) or ((CDGRUP.GRU_ORD >= :P_GRU_ORD_DE) and (CDGRUP.GRU_ORD <= :P_GRU_ORD_ATE)))
 and ((:P_SUB_GRU_ORD_DE is Null) or ((CDSUBGRUP.GRU_ORD >= :P_SUB_GRU_ORD_DE) and (CDSUBGRUP.GRU_ORD <= :P_SUB_GRU_ORD_ATE)))
 Into PRO_COD, PRO_INT, PRO_BAR, PRO_NOM, EST_SAL, COR_COD, COR_NOM, COR_SIG,
 MED_COD, MED_NOM, MED_SIG, MED_ORD, PROCM_COD, ALM_FANT, ALM_COD do
 suspend;
 end
^

ALTER PROCEDURE ESTOQUE_ABERTO_ORDENADO (
    PMODELO VARCHAR(3),
    P_ALM_FANT_DE VARCHAR(20),
    P_ALM_FANT_ATE VARCHAR(20),
    P_PRO_NOM_DE VARCHAR(100),
    P_PRO_NOM_ATE VARCHAR(100),
    P_COR_NOM_DE VARCHAR(30),
    P_COR_NOM_ATE VARCHAR(30),
    P_MED_NOM_DE VARCHAR(20),
    P_MED_NOM_ATE VARCHAR(20),
    P_MAR_ORD_DE VARCHAR(40),
    P_MAR_ORD_ATE VARCHAR(40),
    P_TIP_ORD_DE VARCHAR(40),
    P_TIP_ORD_ATE VARCHAR(40),
    P_CAT_ORD_DE VARCHAR(40),
    P_CAT_ORD_ATE VARCHAR(40),
    P_GRU_ORD_DE VARCHAR(40),
    P_GRU_ORD_ATE VARCHAR(40),
    P_SUB_GRU_ORD_DE VARCHAR(40),
    P_SUB_GRU_ORD_ATE VARCHAR(40))
RETURNS (
    PRO_COD INTEGER,
    PRO_INT VARCHAR(15),
    PRO_BAR VARCHAR(15),
    PRO_NOM VARCHAR(100),
    EST_SAL DOUBLE PRECISION,
    QUEBRA_COD VARCHAR(10),
    QUEBRA VARCHAR(30),
    COLUNA_COD VARCHAR(10),
    COLUNA VARCHAR(30),
    PROCM_COD VARCHAR(21),
    LINHA_COD VARCHAR(10),
    LINHA VARCHAR(30))
AS
 begin
 if (pModelo = "ACM") then
 For
 Select PRO_COD, PRO_INT, PRO_BAR, PRO_NOM, EST_SAL, COR_COD, COR_NOM, MED_COD,
 MED_SIG, PROCM_COD, ALM_COD, ALM_FANT
 From estoque_aberto(:p_alm_fant_de, :p_alm_fant_ate,
 :p_pro_nom_de, :p_pro_nom_ate, :p_cor_nom_de, :p_cor_nom_ate,
 :p_med_nom_de, :p_med_nom_ate, :p_mar_ord_de, :p_mar_ord_ate,
 :p_tip_ord_de, :p_tip_ord_ate, :p_cat_ord_de, :p_cat_ord_ate,
 :p_gru_ord_de, :p_gru_ord_ate, :p_sub_gru_ord_de, :p_sub_gru_ord_ate)
 Order by PRO_NOM, ALM_FANT, COR_NOM, MED_ORD, MED_NOM
 Into :PRO_COD, :PRO_INT, :PRO_BAR, :PRO_NOM, :EST_SAL, :LINHA_COD, :LINHA,
 :COLUNA_COD, :COLUNA, :PROCM_COD, :QUEBRA_COD, :QUEBRA do
 suspend;
 if (pModelo = "AMC") then
 For
 Select PRO_COD, PRO_INT, PRO_BAR, PRO_NOM, EST_SAL, COR_COD, COR_SIG, MED_COD,
 MED_NOM, PROCM_COD, ALM_COD, ALM_FANT
 From estoque_aberto(:p_alm_fant_de, :p_alm_fant_ate,
 :p_pro_nom_de, :p_pro_nom_ate, :p_cor_nom_de, :p_cor_nom_ate,
 :p_med_nom_de, :p_med_nom_ate, :p_mar_ord_de, :p_mar_ord_ate,
 :p_tip_ord_de, :p_tip_ord_ate, :p_cat_ord_de, :p_cat_ord_ate,
 :p_gru_ord_de, :p_gru_ord_ate, :p_sub_gru_ord_de, :p_sub_gru_ord_ate)
 Order by PRO_NOM, ALM_FANT, MED_ORD, MED_NOM, COR_NOM
 Into :PRO_COD, :PRO_INT, :PRO_BAR, :PRO_NOM, :EST_SAL, :COLUNA_COD, :COLUNA,
 :LINHA_COD, :LINHA, :PROCM_COD, :QUEBRA_COD, :QUEBRA do
 suspend;
 if (pModelo = "CAM") then
 For
 Select PRO_COD, PRO_INT, PRO_BAR, PRO_NOM, EST_SAL, COR_COD, COR_NOM, MED_COD,
 MED_SIG, PROCM_COD, ALM_COD, ALM_FANT
 From estoque_aberto(:p_alm_fant_de, :p_alm_fant_ate,
 :p_pro_nom_de, :p_pro_nom_ate, :p_cor_nom_de, :p_cor_nom_ate,
 :p_med_nom_de, :p_med_nom_ate, :p_mar_ord_de, :p_mar_ord_ate,
 :p_tip_ord_de, :p_tip_ord_ate, :p_cat_ord_de, :p_cat_ord_ate,
 :p_gru_ord_de, :p_gru_ord_ate, :p_sub_gru_ord_de, :p_sub_gru_ord_ate)
 Order by PRO_NOM, COR_NOM, ALM_FANT, MED_ORD, MED_NOM
 Into :PRO_COD, :PRO_INT, :PRO_BAR, :PRO_NOM, :EST_SAL, :QUEBRA_COD, :QUEBRA,
 :COLUNA_COD, :COLUNA, :PROCM_COD, :LINHA_COD, :LINHA do
 suspend;
 if (pModelo = "CMA") then
 For
 Select PRO_COD, PRO_INT, PRO_BAR, PRO_NOM, EST_SAL, COR_COD, COR_NOM, MED_COD,
 MED_NOM, PROCM_COD, ALM_COD, ALM_FANT
 From estoque_aberto(:p_alm_fant_de, :p_alm_fant_ate,
 :p_pro_nom_de, :p_pro_nom_ate, :p_cor_nom_de, :p_cor_nom_ate,
 :p_med_nom_de, :p_med_nom_ate, :p_mar_ord_de, :p_mar_ord_ate,
 :p_tip_ord_de, :p_tip_ord_ate, :p_cat_ord_de, :p_cat_ord_ate,
 :p_gru_ord_de, :p_gru_ord_ate, :p_sub_gru_ord_de, :p_sub_gru_ord_ate)
 Order by PRO_NOM, COR_NOM, MED_ORD, MED_NOM, ALM_FANT
 Into :PRO_COD, :PRO_INT, :PRO_BAR, :PRO_NOM, :EST_SAL, :QUEBRA_COD, :QUEBRA,
 :LINHA_COD, :LINHA, :PROCM_COD, :COLUNA_COD, :COLUNA do
 suspend;
 if (pModelo = "MAC") then
 For
 Select PRO_COD, PRO_INT, PRO_BAR, PRO_NOM, EST_SAL, COR_COD, COR_SIG, MED_COD,
 MED_NOM, PROCM_COD, ALM_COD, ALM_FANT
 From estoque_aberto(:p_alm_fant_de, :p_alm_fant_ate,
 :p_pro_nom_de, :p_pro_nom_ate, :p_cor_nom_de, :p_cor_nom_ate,
 :p_med_nom_de, :p_med_nom_ate, :p_mar_ord_de, :p_mar_ord_ate,
 :p_tip_ord_de, :p_tip_ord_ate, :p_cat_ord_de, :p_cat_ord_ate,
 :p_gru_ord_de, :p_gru_ord_ate, :p_sub_gru_ord_de, :p_sub_gru_ord_ate)
 Order by PRO_NOM, MED_ORD, MED_NOM, ALM_FANT, COR_NOM
 Into :PRO_COD, :PRO_INT, :PRO_BAR, :PRO_NOM, :EST_SAL, :COLUNA_COD, :COLUNA,
 :QUEBRA_COD, :QUEBRA, :PROCM_COD, :LINHA_COD, :LINHA do
 suspend;
 if (pModelo = "MCA") then
 For
 Select PRO_COD, PRO_INT, PRO_BAR, PRO_NOM, EST_SAL, COR_COD, COR_NOM, MED_COD,
 MED_NOM, PROCM_COD, ALM_COD, ALM_FANT
 From estoque_aberto(:p_alm_fant_de, :p_alm_fant_ate,
 :p_pro_nom_de, :p_pro_nom_ate, :p_cor_nom_de, :p_cor_nom_ate,
 :p_med_nom_de, :p_med_nom_ate, :p_mar_ord_de, :p_mar_ord_ate,
 :p_tip_ord_de, :p_tip_ord_ate, :p_cat_ord_de, :p_cat_ord_ate,
 :p_gru_ord_de, :p_gru_ord_ate, :p_sub_gru_ord_de, :p_sub_gru_ord_ate)
 Order by PRO_NOM, MED_ORD, MED_NOM, COR_NOM, ALM_FANT
 Into :PRO_COD, :PRO_INT, :PRO_BAR, :PRO_NOM, :EST_SAL, :LINHA_COD, :LINHA,
 :QUEBRA_COD, :QUEBRA, :PROCM_COD, :COLUNA_COD, :COLUNA do
 suspend;
 end
^

ALTER PROCEDURE ESTOQUE_ANTES_CONTAGEM (
    DATA TIMESTAMP,
    PRODUTO INTEGER,
    COR VARCHAR(3),
    MEDIDA VARCHAR(3),
    ALMOX INTEGER,
    USACOR INTEGER,
    USAMEDIDA INTEGER,
    CASASDECIMAIS INTEGER)
RETURNS (
    ESTOQUE DOUBLE PRECISION)
AS
 begin
 select vSaldo_Sem_Contagem
 from calcula_estoque(:USACOR,:USAMEDIDA,:CASASDECIMAIS,:DATA,:PRODUTO,:COR,:MEDIDA,:ALMOX,1,0)
 into estoque;
 Suspend;
 end
^

ALTER PROCEDURE ESTOQUE_NA_DATA (
    VPARAMCOR INTEGER,
    VPARAMMED INTEGER,
    VDATA TIMESTAMP,
    VALMOX INTEGER,
    VPRODUTO INTEGER,
    VCOR VARCHAR(3),
    VMED VARCHAR(3),
    VCASAS_DECIMAIS INTEGER)
RETURNS (
    CUSTO_MEDIO DOUBLE PRECISION,
    SALDO DOUBLE PRECISION)
AS
 Begin
 Select sum(vSaldo), max(vUltCusto)
 from calcula_estoque(:vParamcor,:vParammed,:vCasas_decimais,:vData,:vproduto,:vcor,:vmed,:valmox,0,0)
 Into :saldo, :custo_medio;
 Suspend;
 End
^

ALTER PROCEDURE ESTORNA_PEDIDOS (
    PBOLETA VARCHAR(13))
AS
 DECLARE VARIABLE WVD9_ASC VARCHAR(13);
 DECLARE VARIABLE WVD9_BOL VARCHAR(13);
 DECLARE VARIABLE WVD9_COD INTEGER;
 DECLARE VARIABLE QTDBAIXA INTEGER;
 DECLARE VARIABLE QTDPEDIDO INTEGER;
 BEGIN
 FOR SELECT VD9_ASC, VD9_BOL, VD9_COD FROM ESTMVVD9
 WHERE VD9_BOL=:pBoleta
 INTO WVD9_ASC, WVD9_BOL, WVD9_COD
 DO
 BEGIN
 
 SELECT SUM(VD10_QTD) FROM ESTMVVD10 WHERE VD10_VD9=:WVD9_COD INTO QTDBAIXA;
 
 SELECT SUM(VD2_QTD) FROM ESTMVVD2 WHERE VD2_BOL=:WVD9_ASC INTO QTDPEDIDO;
 
 IF ( (((QTDPEDIDO-QTDBAIXA)+QTDBAIXA)=QTDPEDIDO) AND (NOT EXISTS(SELECT VD9_BOL FROM ESTMVVD9 WHERE VD9_ASC=:WVD9_ASC AND VD9_COD<>:WVD9_COD)) ) THEN
 BEGIN
 UPDATE ESTMVVD1 SET VD1_CANC='FN', STATUS='FINALIZADO'
 WHERE VD1_COD=:WVD9_ASC;
 END
 ELSE IF ( (EXISTS(SELECT VD9_BOL FROM ESTMVVD9 WHERE VD9_ASC=:WVD9_ASC AND VD9_COD<>:WVD9_COD)) ) THEN
 BEGIN
 IF (EXISTS(SELECT VD1_COD FROM ESTMVVD1 WHERE VD1_COD=:WVD9_ASC AND ( (VD1_CANC='BT') OR (VD1_CANC='BP')) ) ) THEN
 BEGIN
 UPDATE ESTMVVD1 SET VD1_CANC='BP', STATUS='BAIXA PARCIAL'
 WHERE VD1_COD=:WVD9_ASC;
 END
 ELSE
 BEGIN
 UPDATE ESTMVVD1 SET VD1_CANC='FN', STATUS='FINALIZADO'
 WHERE VD1_COD=:WVD9_ASC;
 END
 END
 ELSE
 BEGIN
 IF (EXISTS(SELECT VD1_COD FROM ESTMVVD1 WHERE VD1_COD=:WVD9_ASC AND ( (VD1_CANC='BT') OR (VD1_CANC='BP')) ) ) THEN
 BEGIN
 UPDATE ESTMVVD1 SET VD1_CANC='BP', STATUS='BAIXA PARCIAL'
 WHERE VD1_COD=:WVD9_ASC;
 END
 ELSE
 BEGIN
 UPDATE ESTMVVD1 SET VD1_CANC='FN', STATUS='FINALIZADO'
 WHERE VD1_COD=:WVD9_ASC;
 END
 END
 
 
 DELETE FROM ESTMVVD10 WHERE VD10_VD9=:WVD9_COD;
 DELETE FROM ESTMVVD9 WHERE VD9_COD=:WVD9_COD;
 
 END
 END
^

ALTER PROCEDURE EXCLUIPRODUTOSVELHOS (
    PUSACORMEDIDA VARCHAR(1))
AS
 DECLARE VARIABLE WPRO INTEGER;
 DECLARE VARIABLE WCOR VARCHAR(3);
 DECLARE VARIABLE WMED VARCHAR(3);
 DECLARE VARIABLE WREGPROPRE INTEGER;
 DECLARE VARIABLE WREGPRO INTEGER;
 DECLARE VARIABLE WREGPROCM INTEGER;
 DECLARE VARIABLE WEXECUTAPROC VARCHAR(1);
 BEGIN

 wExecutaProc="F";

 SELECT COUNT(PRO_PRO) FROM CDPROCM INTO :wRegProcm;
 SELECT COUNT(PRO_COD) AS REGISTROS FROM CDPRO INTO :wRegPro;
 SELECT COUNT(PRO_PRO) FROM CDPROPRE INTO :wRegPropre;

 IF (PUSACORMEDIDA="S") THEN
 BEGIN
 IF (wRegPropre <> wRegProcm) THEN
 wExecutaProc = "T";
 END
 ELSE
 BEGIN
 IF (wRegPropre <> wRegPro) THEN
 wExecutaProc = "T";
 END

 IF (wExecutaProc = "T") THEN
 BEGIN
 IF (PUSACORMEDIDA="S") THEN
 BEGIN
 FOR SELECT PRO_PRO, PRO_COR, PRO_MED FROM CDPROPRE INTO :WPRO, :WCOR, :WMED DO
 BEGIN
 IF ( NOT EXISTS( SELECT * FROM CDPROCM WHERE PRO_PRO = :WPRO AND PRO_COR = :WCOR AND PRO_MED = :WMED ) ) THEN
 BEGIN
 DELETE FROM CDPROPRE WHERE PRO_PRO = :WPRO AND PRO_COR = :WCOR AND PRO_MED = :WMED;
 END
 END
 END

 Delete from cdpropre Where pro_pro Not In ( Select pro_cod From cdpro );
 Delete from cdprocm Where pro_pro Not In ( Select pro_cod From cdpro );

 IF (PUSACORMEDIDA="S") THEN
 DELETE FROM CDPROPRE WHERE (PRO_COR IS NULL OR PRO_COR="") OR (PRO_MED IS NULL OR PRO_COR="");

 IF (PUSACORMEDIDA<>"S") THEN
 BEGIN
 DELETE FROM CDPROPRE WHERE PRO_PRO IN (SELECT PRO_PRO
 FROM CDPROPRE
 GROUP BY PRO_PRO
 HAVING COUNT(PRO_PRO) > 1);
 END

 INSERT INTO CDPROHIS(PRO_TAB,PRO_ANT,PRO_DEP,PRO_DAT,PRO_HIS) VALUES( "CDPROCM", :wRegProcm, (SELECT COUNT(PRO_PRO) FROM CDPROCM), CAST("TODAY" AS DATE), "PROCEDURE EXCLUIPRODUTOSVELHOS" );
 INSERT INTO CDPROHIS(PRO_TAB,PRO_ANT,PRO_DEP,PRO_DAT,PRO_HIS) VALUES( "CDPROPRE", :wRegPropre, (SELECT COUNT(PRO_PRO) FROM CDPROPRE), CAST("TODAY" AS DATE), "PROCEDURE EXCLUIPRODUTOSVELHOS" );
 INSERT INTO CDPROHIS(PRO_TAB,PRO_ANT,PRO_DEP,PRO_DAT,PRO_HIS) VALUES( "CDPRO", :wRegPro, (SELECT COUNT(PRO_COD) FROM CDPRO), CAST("TODAY" AS DATE), "PROCEDURE EXCLUIPRODUTOSVELHOS" );

 END
 END
^

ALTER PROCEDURE EXCLUIR_MOVIMENTOS_FILIAL
AS
 declare variable vvd1cod varchar(13);
 begin
 For
 Select estmvvd1.vd1_cod
 From estmvvd1, cdtra1, cdalm2, cdalm
 Where estmvvd1.vd1_tra = cdtra1.tra_cod
 and estmvvd1.vd1_alm = cdalm2.alm_cod
 and cdalm2.alm_cod = cdalm.alm_cod
 and coalesce(cdalm.alm_matriz, 'F') <> 'M'
 and cdtra1.tra_exclui_pdv > 0
 and cdtra1.tra_tip_tra <> 'CGE' and cdtra1.tra_tip_tra <> 'CGS'
 and cdtra1.tra_ped <> 'S' and cdtra1.tra_ped <> 'E'
 and estmvvd1.vd1_cad < ( cast('today' as date) - cdtra1.tra_exclui_pdv )
 and estmvvd1.vd1_cad < ( Coalesce((Select Max(est_dat) From mvestdat),cast(null as date)) - cdtra1.tra_exclui_pdv )
 Into vVD1COD do
 begin
 delete from estmvvd2 where vd2_bol = :vVd1Cod;
 delete from estmvvd3 where vd3_bol = :vVd1Cod;
 delete from estmvvd4 where vd4_bol = :vVd1Cod;
 delete from estmvvd5 where vd5_bol = :vVd1Cod;
 delete from estmvvd10 where (Select vd9_bol from estmvvd9 where vd9_cod = estmvvd10.vd10_vd9) = :vVd1Cod;
 delete from estmvvd9 where vd9_bol = :vVd1Cod;
 delete from estmvvd11 where vd11_bol = :vVd1Cod;
 delete from estmvvd12 where vd12_bol = :vVd1Cod;
 delete from estmvvd13 where vd13_bol = :vVd1Cod;
 delete from estmvvd14 where vd14_bol = :vVd1Cod;
 delete from estmvvd1 where vd1_cod = :vVd1Cod;
 end
 end
^

ALTER PROCEDURE EXTRAI_RADICAL_PLANO_DE_CONTAS (
    PLA_COD VARCHAR(40))
RETURNS (
    RADICAL VARCHAR(40),
    NIVEL INTEGER)
AS
 begin
 if (PLA_COD is null) then
 PLA_COD = '0000000000000000000000000000000000000000';
 NIVEL = 1;
 if (substring(PLA_COD from 5 for 4) = '0000') then
 begin
 Radical = substring(PLA_COD from 1 for 4);
 NIVEL = 1;
 end
 else if (substring(PLA_COD from 9 for 4) = '0000') then
 begin
 Radical = substring(PLA_COD from 1 for 8);
 NIVEL = 2;
 end
 else if (substring(PLA_COD from 13 for 4) = '0000') then
 begin
 Radical = substring(PLA_COD from 1 for 12);
 NIVEL = 3;
 end
 else if (substring(PLA_COD from 17 for 4) = '0000') then
 begin
 Radical = substring(PLA_COD from 1 for 16);
 NIVEL = 4;
 end
 else if (substring(PLA_COD from 21 for 4) = '0000') then
 begin
 Radical = substring(PLA_COD from 1 for 20);
 NIVEL = 5;
 end
 else if (substring(PLA_COD from 25 for 4) = '0000') then
 begin
 Radical = substring(PLA_COD from 1 for 24);
 NIVEL = 6;
 end
 else if (substring(PLA_COD from 29 for 4) = '0000') then
 begin
 Radical = substring(PLA_COD from 1 for 28);
 NIVEL = 7;
 end
 else if (substring(PLA_COD from 33 for 4) = '0000') then
 begin
 Radical = substring(PLA_COD from 1 for 32);
 NIVEL = 8;
 end
 else if (substring(PLA_COD from 37 for 4) = '0000') then
 begin
 Radical = substring(PLA_COD from 1 for 36);
 NIVEL = 9;
 end
 else
 begin
 Radical = substring(PLA_COD from 1 for 40);
 NIVEL = 10;
 end
 suspend;
 end
^

ALTER PROCEDURE EXTRATO_CONSIGNACAO (
    NOM_CLIENTE_DE VARCHAR(75),
    NOM_CLIENTE_ATE VARCHAR(75),
    NOM_VENDEDOR_DE VARCHAR(75),
    NOM_VENDEDOR_ATE VARCHAR(75),
    NOM_FORNECEDOR_DE VARCHAR(75),
    NOM_FORNECEDOR_ATE VARCHAR(75),
    FANT_ALMOXARIFADO_DE VARCHAR(20),
    FANT_ALMOXARIFADO_ATE VARCHAR(20),
    NOM_TRANSACAO_DE VARCHAR(40),
    NOM_TRANSACAO_ATE VARCHAR(40),
    TIPO_CONSIGNACAO VARCHAR(3),
    DATA_DE TIMESTAMP,
    DATA_ATE TIMESTAMP)
RETURNS (
    PRO_COD INTEGER,
    PRO_NOM VARCHAR(255),
    COR_COD VARCHAR(3),
    COR_NOM VARCHAR(30),
    MED_COD VARCHAR(3),
    MED_NOM VARCHAR(30),
    PRO_CMP DOUBLE PRECISION,
    PRO_LRG DOUBLE PRECISION,
    PRO_ALT DOUBLE PRECISION,
    AREA INTEGER,
    QUANTIDADE DOUBLE PRECISION,
    SALDO DOUBLE PRECISION,
    VALOR DOUBLE PRECISION,
    ENTIDADE_NOM VARCHAR(75),
    ENTIDADE_COD INTEGER,
    VENDEDOR_NOM VARCHAR(75),
    VENDEDOR_COD INTEGER,
    TRA_NOM VARCHAR(40),
    TRA_SIG VARCHAR(10),
    TRA_COD INTEGER,
    VD1_CAD TIMESTAMP,
    VD1_NOT INTEGER,
    ALM_COD INTEGER,
    ALM_FANT VARCHAR(40))
AS
 declare variable vvd1cad date;
 declare variable vvd1not integer;
 declare variable vtracod integer;
 declare variable vtranom varchar(40);
 declare variable vtrasig varchar(10);
 declare variable vprocod integer;
 declare variable vpronom varchar(255);
 declare variable vcorcod varchar(3);
 declare variable vcornom varchar(30);
 declare variable vmedcod varchar(3);
 declare variable vmednom varchar(30);
 declare variable vvd2cmp double precision;
 declare variable vvd2lrg double precision;
 declare variable vvd2alt double precision;
 declare variable vvd2qtd double precision;
 declare variable vvd2cod integer;
 declare variable vvd2vlr double precision;
 declare variable ventcod integer;
 declare variable ventnom varchar(75);
 declare variable vvencod integer;
 declare variable vvennom varchar(75);
 declare variable vparamdim varchar(1);
 declare variable valmcod integer;
 declare variable valmfant varchar(20);
 declare variable vusacor varchar(1);
 declare variable vusamed varchar(1);
 begin
 if (NOM_CLIENTE_DE = '') then
 NOM_CLIENTE_DE = null;
 if ((NOM_CLIENTE_ATE = '') or (NOM_CLIENTE_ATE is Null)) then
 NOM_CLIENTE_ATE = NOM_CLIENTE_DE;
 if (NOM_FORNECEDOR_DE = '') then
 NOM_FORNECEDOR_DE = null;
 if ((NOM_FORNECEDOR_ATE = '') or (NOM_FORNECEDOR_ATE is Null)) then
 NOM_FORNECEDOR_ATE = NOM_FORNECEDOR_DE;
 if (NOM_TRANSACAO_DE = '') then
 NOM_TRANSACAO_DE = null;
 if ((NOM_TRANSACAO_ATE = '') or (NOM_TRANSACAO_ATE is Null)) then
 NOM_TRANSACAO_ATE = NOM_TRANSACAO_DE;
 if (NOM_VENDEDOR_DE = '') then
 NOM_VENDEDOR_DE = null;
 if ((NOM_VENDEDOR_ATE = '') or (NOM_VENDEDOR_ATE is Null)) then
 NOM_VENDEDOR_ATE = NOM_VENDEDOR_DE;
 if (FANT_ALMOXARIFADO_DE = '') then
 FANT_ALMOXARIFADO_DE = null;
 if ((FANT_ALMOXARIFADO_ATE = '') or (FANT_ALMOXARIFADO_ATE is Null)) then
 FANT_ALMOXARIFADO_ATE = FANT_ALMOXARIFADO_DE;
 if (TIPO_CONSIGNACAO = '') then
 TIPO_CONSIGNACAO = null;
 IF (DATA_DE is Null) then
 DATA_DE = '01/01/1900';
 if (DATA_ATE is Null) then
 DATA_ATE = 'today';
 
 SALDO = 0;
 VALOR = 0;
 
 SELECT P_USA_DIMENSAO FROM PARAMETPRO INTO VPARAMDIM;
 Select P_USA_COR, P_USA_MEDIDA From PARAMET Into VUSACOR, VUSAMED;
 
 FOR
 SELECT VD1_CAD, VD1_NOT, TRA_COD, TRA_NOM, TRA_SIG, VD2_PRO, VD2_DESCRICAO,
 ALM_COD, ALM_FANT, FUN_COD, FUN_NOM, VD2_CMP, VD2_LRG, VD2_ALT, VD2_COD,
 COR_COD, COR_NOM, MED_COD, MED_NOM,
 CASE
 WHEN TRA_INF = '+' THEN VD2_QTD * -1
 WHEN TRA_INF = '-' THEN VD2_QTD
 ELSE 0
 END,
 (CASE
 WHEN TRA_INF = '+' THEN VD2_VLR * VD2_QTD
 WHEN TRA_INF = '-' THEN VD2_VLR * VD2_QTD * -1
 ELSE 0
 END) *
 (CASE
 WHEN ((:VPARAMDIM = 'T') AND
 ((SELECT UNI_USA_DIM_NO_PRECO FROM CDUNIDADE, CDPRO WHERE PRO_COD = ESTMVVD2.VD2_PRO AND CODIGO=PRO_UNM) = 'T')) THEN
 (CASE WHEN (COALESCE(VD2_LRG,0) <> 0) THEN VD2_LRG ELSE 1 END) *
 (CASE WHEN (COALESCE(VD2_CMP,0) <> 0) THEN VD2_CMP ELSE 1 END) *
 (CASE WHEN (COALESCE(VD2_ALT,0) <> 0) THEN VD2_ALT ELSE 1 END)
 ELSE 1 END),
 CASE
 WHEN VD1_CLI <> 0 THEN VD1_CLI
 WHEN VD1_FOR <> 0 THEN VD1_FOR
 END,
 CASE
 WHEN VD1_CLI <> 0 THEN CLI_RED
 WHEN VD1_FOR <> 0 THEN FOR_RED
 END
 FROM ESTMVVD1
 INNER JOIN ESTMVVD2 ON (VD2_BOL = VD1_COD)
 INNER JOIN CDTRA1 ON (TRA_COD = VD1_TRA AND (CDTRA1.TRA_TIP_TRA = 'CGE' or CDTRA1.TRA_TIP_TRA = 'CGS'))
 INNER JOIN CDALM ON (ALM_COD = VD1_ALM)
 LEFT JOIN CDFUN ON (FUN_COD = VD1_VEN)
 LEFT JOIN CDCLI ON (CLI_COD = ESTMVVD1.VD1_CLI)
 LEFT JOIN CDFOR ON (FOR_COD = ESTMVVD1.VD1_FOR)
 LEFT JOIN CDCOR ON (COR_COD = ESTMVVD2.VD2_COR)
 LEFT JOIN CDMED ON (MED_COD = ESTMVVD2.VD2_MED)
 WHERE (VD1_CANC = 'FN' or VD1_CANC = 'BP' or VD1_CANC = 'BT')
 AND VD1_CAD <= :DATA_ATE
 AND ((:NOM_CLIENTE_DE IS NULL) OR (CLI_RED BETWEEN :NOM_CLIENTE_DE AND :NOM_CLIENTE_ATE))
 AND ((:NOM_VENDEDOR_DE IS NULL) OR (FUN_NOM BETWEEN :NOM_VENDEDOR_DE AND :NOM_VENDEDOR_ATE))
 AND ((:NOM_FORNECEDOR_DE IS NULL) OR (FOR_RED BETWEEN :NOM_FORNECEDOR_DE AND :NOM_FORNECEDOR_ATE))
 AND ((:NOM_TRANSACAO_DE IS NULL) OR (TRA_NOM BETWEEN :NOM_TRANSACAO_DE AND :NOM_TRANSACAO_ATE))
 AND ((:FANT_ALMOXARIFADO_DE IS NULL) OR (ALM_FANT BETWEEN :FANT_ALMOXARIFADO_DE AND :FANT_ALMOXARIFADO_ATE))
 UNION
 SELECT VD1_CAD, VD1_NOT, TRA.TRA_COD, TRA.TRA_NOM, TRA.TRA_SIG, VD2_PRO, VD2_DESCRICAO,
 ALM_COD, ALM_FANT, FUN_COD, FUN_NOM, VD2_CMP, VD2_LRG, VD2_ALT, VD2_COD,
 COR_COD, COR_NOM, MED_COD, MED_NOM,
 CASE
 WHEN TCON.TRA_INF = '+' THEN VD2_QTD
 WHEN TCON.TRA_INF = '-' THEN VD2_QTD * -1
 ELSE 1000
 END,
 (CASE
 WHEN TRA.TRA_INF = '+' THEN VD2_VLR * VD2_QTD
 WHEN TRA.TRA_INF = '-' THEN VD2_VLR * VD2_QTD * -1
 ELSE 0
 END) *
 (CASE
 WHEN ((:VPARAMDIM = 'T') AND
 ((SELECT UNI_USA_DIM_NO_PRECO FROM CDUNIDADE, CDPRO WHERE PRO_COD = ESTMVVD2.VD2_PRO AND CODIGO=PRO_UNM) = 'T')) THEN
 (CASE WHEN (COALESCE(VD2_LRG,0) <> 0) THEN VD2_LRG ELSE 1 END) *
 (CASE WHEN (COALESCE(VD2_CMP,0) <> 0) THEN VD2_CMP ELSE 1 END) *
 (CASE WHEN (COALESCE(VD2_ALT,0) <> 0) THEN VD2_ALT ELSE 1 END)
 ELSE 1 END),
 CASE
 WHEN VD1_CLI <> 0 THEN VD1_CLI
 WHEN VD1_FOR <> 0 THEN VD1_FOR
 END,
 CASE
 WHEN VD1_CLI <> 0 THEN CLI_RED
 WHEN VD1_FOR <> 0 THEN FOR_RED
 END
 FROM ESTMVVD1
 INNER JOIN ESTMVVD9 ON (ESTMVVD1.VD1_COD = ESTMVVD9.vd9_bol)
 INNER JOIN ESTMVVD2 ON (VD2_BOL = VD1_COD)
 INNER JOIN CDTRA1 TRA ON (TRA.TRA_COD = ESTMVVD1.VD1_TRA)
 INNER JOIN CDTRA1 TCON ON ((TCON.TRA_COD = (SELECT FIRST 1 VD1_TRA FROM estmvvd1, estmvvd10 WHERE VD1_COD = ESTMVVD9.vd9_asc and vd10_vd9 = estmvvd9.vd9_cod and vd10_pro = estmvvd2.vd2_pro and ((coalesce(:vUsaCor,'F') <> 'T') or (estmvvd2.vd2_cor = estmvvd10.vd10_cor)) and ((coalesce(:vUsaMed,'F') <> 'T') or (estmvvd2.vd2_med = estmvvd10.vd10_med)))) AND (TCON.TRA_TIP_TRA = 'CGE' or TCON.TRA_TIP_TRA = 'CGS'))
 INNER JOIN CDALM ON (ALM_COD = VD1_ALM)
 LEFT JOIN CDFUN ON (FUN_COD = VD1_VEN)
 LEFT JOIN CDCLI ON (CLI_COD = ESTMVVD1.VD1_CLI)
 LEFT JOIN CDFOR ON (FOR_COD = ESTMVVD1.VD1_FOR)
 LEFT JOIN CDCOR ON (COR_COD = ESTMVVD2.VD2_COR)
 LEFT JOIN CDMED ON (MED_COD = ESTMVVD2.VD2_MED)
 WHERE (VD1_CANC = 'FN' OR VD1_CANC = 'F' or VD1_CANC = 'P')
 AND VD1_CAD <= :DATA_ATE
 AND ((:NOM_CLIENTE_DE IS NULL) OR (CLI_RED BETWEEN :NOM_CLIENTE_DE AND :NOM_CLIENTE_ATE))
 AND ((:NOM_VENDEDOR_DE IS NULL) OR (FUN_NOM BETWEEN :NOM_VENDEDOR_DE AND :NOM_VENDEDOR_ATE))
 AND ((:NOM_FORNECEDOR_DE IS NULL) OR (FOR_RED BETWEEN :NOM_FORNECEDOR_DE AND :NOM_FORNECEDOR_ATE))
 AND ((:NOM_TRANSACAO_DE IS NULL) OR (TRA_NOM BETWEEN :NOM_TRANSACAO_DE AND :NOM_TRANSACAO_ATE))
 AND ((:FANT_ALMOXARIFADO_DE IS NULL) OR (ALM_FANT BETWEEN :FANT_ALMOXARIFADO_DE AND :FANT_ALMOXARIFADO_ATE))
 ORDER BY 10, 5, 1, 2
 INTO VVD1CAD, VVD1NOT, VTRACOD, VTRANOM, VTRASIG, VPROCOD, VPRONOM, VALMCOD,
 VALMFANT, VVENCOD, VVENNOM, VVD2CMP, VVD2LRG, VVD2ALT, VVD2COD,
 VCORCOD, VCORNOM, VMEDCOD, VMEDNOM,
 VVD2QTD, VVD2VLR, VENTCOD, VENTNOM DO
 BEGIN
 IF ((PRO_COD IS NOT NULL) and ((PRO_COD <> VPROCOD) or (ENTIDADE_NOM <> VENTNOM))) then
 begin
 if ((SALDO <> 0) and
 ((PRO_COD <> VPROCOD) or (ENTIDADE_COD <> VENTCOD) or (VVD1CAD >= DATA_DE)) and
 (VD1_CAD < DATA_DE)) then
 BEGIN
 VD1_NOT = null;
 VD1_CAD = DATA_DE;
 TRA_NOM = 'SALDO ANTERIOR';
 SUSPEND;
 END
 SALDO = 0;
 VALOR = 0;
 end
 if (VD1_CAD >= DATA_DE) then
 begin
 SALDO = VVD2QTD;
 VALOR = VVD2VLR;
 end
 else
 begin
 SALDO = SALDO + VVD2QTD;
 VALOR = VALOR + VVD2VLR;
 end
 PRO_COD = VPROCOD;
 PRO_NOM = VPRONOM;
 COR_COD = VCORCOD;
 COR_NOM = VCORNOM;
 MED_COD = VMEDCOD;
 MED_NOM = VMEDNOM;
 PRO_CMP = VVD2CMP;
 PRO_LRG = VVD2LRG;
 PRO_ALT = VVD2ALT;
 AREA = Coalesce(NullIf(VVD2CMP,0),1) * Coalesce(NullIf(VVD2LRG,0),1) *
 Coalesce(NullIf(VVD2ALT,0),1);
 QUANTIDADE = VVD2QTD;
 ENTIDADE_NOM = VENTNOM;
 ENTIDADE_COD = VENTCOD;
 VENDEDOR_NOM = VVENNOM;
 VENDEDOR_COD = VVENCOD;
 TRA_NOM = VTRANOM;
 TRA_SIG = VTRASIG;
 TRA_COD = VTRACOD;
 VD1_CAD = VVD1CAD;
 VD1_NOT = VVD1NOT;
 if (VD1_CAD >= DATA_DE) then
 SUSPEND;
 END
 IF ((PRO_COD IS NOT NULL) and (VD1_CAD < DATA_DE)) then
 BEGIN
 VD1_NOT = null;
 VD1_CAD = DATA_DE;
 TRA_NOM = 'SALDO ANTERIOR';
 SUSPEND;
 END
 end
^

ALTER PROCEDURE FECHA_ESTOQUE_MES (
    VPARAMCOR INTEGER,
    VPARAMMED INTEGER,
    VDATA TIMESTAMP,
    VCASAS_DECIMAIS INTEGER)
RETURNS (
    RESULT INTEGER)
AS
 declare variable vcustomedio double precision;
 declare variable vsaldo double precision;
 declare variable vultcusto double precision;
 declare variable vdia integer;
 declare variable vmes integer;
 declare variable vano integer;
 declare variable vdataf date;
 declare variable vvd2cad date;
 declare variable vproant integer;
 declare variable valmant integer;
 declare variable vmedant varchar(3);
 declare variable valm integer;
 declare variable vcorant varchar(3);
 Begin
 execute procedure fecha_estoque_mes_geral(0,vparamcor, vparammed,vdata,vcasas_decimais) returning_values(result);
 SUSPEND;
 End
^

ALTER PROCEDURE FECHA_ESTOQUE_MES_GERAL (
    VALM INTEGER,
    VPARAMCOR INTEGER,
    VPARAMMED INTEGER,
    VDATA TIMESTAMP,
    VCASAS_DECIMAIS INTEGER)
RETURNS (
    RESULT INTEGER)
AS
 declare variable vcustomedio double precision;
 declare variable vsaldo double precision;
 declare variable vultcusto double precision;
 declare variable vdia integer;
 declare variable vmes integer;
 declare variable vano integer;
 declare variable vdataf date;
 declare variable vvd2cad date;
 declare variable vproant integer;
 declare variable valmant integer;
 declare variable vmedant varchar(3);
 declare variable vcorant varchar(3);
 Begin
 if (coalesce(valm, 0) = 0) then
 Select alm_cod from cdalm2 into vAlm;
 Execute Procedure DecodeDate(vData) Returning_values(vAno, vMes, vDia);
 Execute Procedure Daysofmonth(vAno, vMes) Returning_values(vDia);
 Execute Procedure EncodeDate(vAno, vMes, vDia) Returning_values(vDataF);
 delete from mvestdat where est_dat = :vDataF and est_alm = :vAlm;
 For
 Select vProAnt, vAlmAnt, vCorAnt, vMedAnt, vSaldo, vUltCusto, vCustoMedio, vVd2Cad
 from calcula_estoque(:vParamcor,:vParammed,:vCasas_decimais,:vDataF,null,null,null,:vAlm,0,0)
 Into :vProAnt, :vAlmAnt, :vCorAnt, :vMedAnt, :vSaldo, :vUltCusto, :vCustoMedio, :vVd2Cad
 Do
 Insert into MVESTDAT (est_pro, est_alm, est_cor, est_tam, est_sal, est_ucus, est_cmed, est_dat)
 values (:vProAnt, :vAlmAnt, :vCorAnt, :vMedAnt, :vSaldo, :vUltCusto, :vCustoMedio, :vDataF);
 RESULT = 1;
 SUSPEND;
 End
^

ALTER PROCEDURE FLOAT_TO_STRING (
    VAL DOUBLE PRECISION)
RETURNS (
    RESULT VARCHAR(18))
AS
 begin
 if (Val is null) then
 Result = "";
 else
 Result = cast(Val as varchar(18));
 suspend;
 end
^

ALTER PROCEDURE FLUXO_DE_CAIXA_POR_DIA (
    PDATADE TIMESTAMP,
    PDATAATE TIMESTAMP,
    PCLIENTE INTEGER,
    PFORNECEDOR INTEGER,
    PPLANODECONTA INTEGER)
RETURNS (
    DATA TIMESTAMP,
    PLA_COD VARCHAR(40),
    PLA_NOM VARCHAR(60),
    PLA_ORD VARCHAR(42),
    ENT_RED VARCHAR(75),
    ENT_TIP VARCHAR(5),
    VALOR DOUBLE PRECISION,
    DIA VARCHAR(20))
AS
 declare variable vvalor double precision;
 declare variable vsaldo double precision;
 declare variable vtotal double precision;
 declare variable vtotaldespesas double precision;
 declare variable vtotalreceitas double precision;
 declare variable vcont integer;
 declare variable num_dias integer;
 declare variable vdata date;
 declare variable vplacod varchar(40);
 declare variable vplanom varchar(60);
 declare variable vplaord varchar(42);
 declare variable ventred varchar(75);
 declare variable venttip varchar(5);
 declare variable vdia varchar(20);
 begin
 vvalor = 0;
 vtotal = 0;
 vtotaldespesas = 0;
 vtotalreceitas = 0;
 vdata = null;
 vplacod = '';
 vplanom = '';
 vplaord = '';
 ventred = '';
 venttip = '';
 vdia = '';
 
 NUM_DIAS = (PDATAATE - PDATADE) + 1;
 VCONT = 0;
 Select rsaldo
 from saldo_da_conta_na_data(null, null, 'A', null, null, null, null,
 null, null, null, null, null, :pdatade)
 Into vSaldo;
 while (VCONT < NUM_DIAS) do
 begin
 vData = addday(:pdatade,:vcont);
 Select data From formatdata(:vData,'D','M','A','/') into vDia;
 DATA = vData;
 DIA = vDia;
 PLA_COD = '0';
 PLA_ORD = '0';
 PLA_NOM = 'SALDO';
 ENT_RED = '';
 ENT_TIP = 'A';
 VALOR = COALESCE(vSaldo,0);
 Suspend;
 VALOR = 0;
 vTotal = 0;
 vtotaldespesas = 0;
 vtotalreceitas = 0;
 For
 Select PLA_COD, ltrim(rtrim(PLA_NOM)), PLA_ORD, ltrim(rtrim(FOR_RED)), 'FOR', sum(PAG_VAL * -1)
 From mvcopag
 left join cdpla on ((coalesce(:pplanodeconta, 0) = 1) and (pag_pla = pla_cod))
 left join cdfor on ((coalesce(:pfornecedor, 0) = 1) and (pag_for = for_cod))
 Where pag_vec = :DATA
 Group by 1, 2, 3, 4, 5
 Order by 3, 2, 5, 4
 Into vPlaCod, vPlaNom, vPlaOrd, vEntRed, vEntTip, vValor do
 begin
 if ((vPlaCod <> PLA_COD) or (vEntRed <> ENT_RED)) then
 begin
 if (PLA_COD <> '0') then
 Suspend;
 VALOR = 0;
 end
 vTotal = vTotal + vValor;
 vTotalDespesas = vTotalDespesas + vValor;
 VALOR = VALOR + vValor;
 PLA_COD = vPlaCod;
 PLA_NOM = '  ' || vPlaNom;
 PLA_ORD = vPlaOrd;
 ENT_RED = vEntRed;
 ENT_TIP = vEntTip;
 end
 Suspend;
 
 PLA_COD = '0';
 PLA_ORD = Substr(PLA_ORD, 1, 4) || '9';
 PLA_NOM = 'TOTAL DE DESPESAS';
 ENT_RED = '';
 ENT_TIP = 'FT';
 VALOR = COALESCE(vTotalDespesas,0);
 Suspend;
 
 For
 Select PLA_COD, ltrim(rtrim(PLA_NOM)), PLA_ORD, ltrim(rtrim(CLI_RED)), 'CLI', sum(REC_VAL)
 From mvcorec
 left join cdpla on ((coalesce(:pplanodeconta, 0) = 1) and (rec_pla = pla_cod))
 left join cdcli on ((coalesce(:pcliente, 0) = 1) and (rec_cli = cli_cod))
 Where rec_vec = :DATA
 Group by 1, 2, 3, 4, 5
 Order by 3, 2, 5, 4
 Into vPlaCod, vPlaNom, vPlaOrd, vEntRed, vEntTip, vValor do
 begin
 if ((vPlaCod <> PLA_COD) or (vEntRed <> ENT_RED)) then
 begin
 if (PLA_COD <> '0') then
 Suspend;
 VALOR = 0;
 end
 vTotal = vTotal + vValor;
 vTotalReceitas = vTotalReceitas + vValor;
 VALOR = VALOR + vValor;
 PLA_COD = vPlaCod;
 PLA_NOM = '  ' || vPlaNom;
 PLA_ORD = vPlaOrd;
 ENT_RED = vEntRed;
 ENT_TIP = vEntTip;
 end
 Suspend;
 
 PLA_COD = '0';
 PLA_ORD = Substr(PLA_ORD, 1, 4) || '9';
 PLA_NOM = 'TOTAL DE RECEITAS';
 ENT_RED = '';
 ENT_TIP = 'CT';
 VALOR = COALESCE(vTotalReceitas,0);
 Suspend;
 
 PLA_COD = '0';
 PLA_ORD = '9';
 PLA_NOM = 'TOTAL';
 ENT_RED = '';
 ENT_TIP = 'Z';
 VALOR = COALESCE(vTotal,0);
 Suspend;
 vSaldo = vSaldo + vTotal;
 VCONT = VCONT + 1;
 end
 end
^

ALTER PROCEDURE FORMATARFLOAT (
    VALOR DOUBLE PRECISION,
    CASASDECIMAIS INTEGER)
RETURNS (
    RESULT DOUBLE PRECISION)
AS
 DECLARE VARIABLE VALOR_FINAL DOUBLE PRECISION;
 DECLARE VARIABLE PRECISAO DOUBLE PRECISION;
 DECLARE VARIABLE RESTO INTEGER;
 BEGIN
 
 PRECISAO = 10;
 RESTO = 0;
 
 IF(VALOR IS NULL)THEN
 VALOR = 0;
 
 IF(CASASDECIMAIS > 0)THEN
 BEGIN
 SELECT FIRST 1 DPOWER(10, :CASASDECIMAIS + 1) FROM LINHAS(1) INTO PRECISAO;
 END
 
 VALOR_FINAL = (VALOR * PRECISAO);
 VALOR_FINAL = CAST(VALOR_FINAL AS INTEGER);
 
 SELECT MOD(:VALOR_FINAL, 10) FROM LINHAS(1) INTO RESTO;
 
 VALOR_FINAL = VALOR_FINAL - RESTO;
 
 VALOR_FINAL = (VALOR_FINAL / PRECISAO);
 RESULT = VALOR_FINAL;
 SUSPEND;
 END
^

ALTER PROCEDURE FORMATDATA (
    PDATA TIMESTAMP,
    P1 VARCHAR(1),
    P2 VARCHAR(1),
    P3 VARCHAR(1),
    PSEP VARCHAR(5))
RETURNS (
    DATA VARCHAR(20))
AS
declare variable i integer;
declare variable vTipo varchar(1);
declare variable Aux varchar(20);
begin
   i = 0;
   while (i < 3) do
   begin
      Aux = '';
      i = i + 1;
      if (i = 1) then
        vTipo = Upper(p1);
      else
         if (i = 2) then
            vTipo = Upper(p2);
         else
            if (i = 3) then
               vTipo = Upper(p3);
      if (vTipo = 'D') then
         if (extract(day from pData) > 9) then
            Aux = cast(extract(day from pData) as varchar(2));
         else
            Aux = '0' || extract(day from pData);
      else
         if (vTipo = 'M') then
            if (extract(month from pData) > 9) then
               Aux = cast(extract(month from pData) as varchar(2));
            else
               Aux = '0' || extract(month from pData);
         else
            if (vTipo = 'A') then
               Aux = cast(extract(year from pData) as varchar(4));
      if (i = 1) then
         Data = Aux;
      else
         if (Aux <> '') then
            Data = Data || pSep || Aux;
   end
   Suspend;
end
^

ALTER PROCEDURE GERA_CABECALHO_CUPOM (
    PCUPOM VARCHAR(13))
RETURNS (
    VTITULO1 VARCHAR(50),
    VTITULO2 VARCHAR(50),
    VTITULO3 VARCHAR(50),
    VCOLUNA1 VARCHAR(4000),
    VCOLUNA2 VARCHAR(4000),
    VCOLUNA3 VARCHAR(4000),
    VQUEBRA VARCHAR(1))
AS
begin
 For Select VTITULO1, VTITULO2, VTITULO3, VCOLUNA1, VCOLUNA2, VCOLUNA3, VQUEBRA
 From GERA_CABECALHO_CUPOM_LOTE(:PCUPOM,0)
 Into :VTITULO1, :VTITULO2, :VTITULO3, :VCOLUNA1, :VCOLUNA2, :VCOLUNA3, :VQUEBRA do
 Suspend;
 end
^

ALTER PROCEDURE GERA_CABECALHO_CUPOM_LOTE (
    PCUPOM VARCHAR(13),
    PLOTE INTEGER)
RETURNS (
    VTITULO1 VARCHAR(50),
    VTITULO2 VARCHAR(50),
    VTITULO3 VARCHAR(50),
    VCOLUNA1 VARCHAR(4000),
    VCOLUNA2 VARCHAR(4000),
    VCOLUNA3 VARCHAR(4000),
    VQUEBRA VARCHAR(1))
AS
 declare variable vtracod integer;
 declare variable vtratiptra varchar(3);
 declare variable vtracli varchar(1);
 declare variable vtracont varchar(1);
 declare variable vtraend varchar(1);
 declare variable vtracai varchar(1);
 declare variable vtraven varchar(1);
 declare variable vtracomp varchar(1);
 declare variable vtraprest varchar(1);
 declare variable vtrarep varchar(1);
 declare variable vtrares varchar(1);
 declare variable vtratrs varchar(1);
 declare variable vtrausesetcmp varchar(1);
 declare variable vtravei varchar(1);
 declare variable vtranatureza varchar(1);
 declare variable vtrapreser varchar(1);
 declare variable vtraseunumero varchar(1);
 declare variable vtrapraent integer;
 declare variable vtrapraretirada integer;
 declare variable vtrapla varchar(1);
 declare variable vtrapla2 varchar(1);
 declare variable vtraccust varchar(1);
 declare variable vtraccust2 varchar(1);
 declare variable vtraproj varchar(1);
 declare variable vtralaypdv varchar(3);
 declare variable vtracupomobs1 varchar(1);
 declare variable vtracupomobs2 varchar(1);
 declare variable vtracupomobs3 varchar(1);
 declare variable vtracupomobs4 varchar(1);
 declare variable vtraobs1cup varchar(15);
 declare variable vtraobs2cup varchar(15);
 declare variable vtraobs3cup varchar(15);
 declare variable vtraobs4cup varchar(15);
 declare variable vtraped varchar(1);
 declare variable vvd1cli integer;
 declare variable vvd1for integer;
 declare variable vvd1contato varchar(40);
 declare variable vvd1cai integer;
 declare variable vvd1ven integer;
 declare variable vvd1comp integer;
 declare variable vvd1prestador integer;
 declare variable vvd1rep integer;
 declare variable vvd1trs integer;
 declare variable vvd1usesetcmp integer;
 declare variable vvd1vei integer;
 declare variable vvd1cfop integer;
 declare variable vvd1prestser integer;
 declare variable vvd1seunumero varchar(30);
 declare variable vvd1ent date;
 declare variable vvd1retirada date;
 declare variable vvd1pla varchar(40);
 declare variable vvd1pla2 integer;
 declare variable vvd1ccust varchar(40);
 declare variable vvd1ccust2 integer;
 declare variable vvd1proj integer;
 declare variable vvd1almtransf integer;
 declare variable vvd1alm integer;
 declare variable vvd1obs1 varchar(4000);
 declare variable vvd1obs2 varchar(4000);
 declare variable vvd1obs3 varchar(4000);
 declare variable vvd1obs4 varchar(4000);
 declare variable vcnpj varchar(21);
 declare variable vies varchar(21);
 declare variable vtelefone varchar(30);
 declare variable vpessoa varchar(1);
 declare variable vemail varchar(100);
 declare variable vclicodigo integer;
 declare variable vimpresso varchar(30);
 declare variable vtipform varchar(15);
 declare variable vimpflag varchar(3);
 declare variable vpedido varchar(20);
 declare variable vendereco varchar(4000);
 declare variable ventregalote varchar(1000);
 declare variable vnfesstatus varchar(10);
 declare variable vnfesverificacao varchar(10);
 declare variable vnfesdata varchar(10);
 declare variable vnfesnumero integer;
 declare variable vvd5nom varchar(100);
 declare variable vvd1clileasing integer;
 begin
 Select
 VD1_CLI, VD1_FOR, VD1_CONTATO, VD1_CAI, VD1_VEN, VD1_COMP, VD1_PRESTADOR,
 VD1_REP, VD1_TRS, VD1_USE_SET_CMP, VD1_VEI, VD1_CFOP, VD1_PRESTSER,
 VD1_SEU_NUMERO, VD1_ENT, VD1_RETIRADA, VD1_PLA, VD1_PLA2,
 VD1_CCUST, VD1_CCUST2, VD1_PROJ, VD1_ALM_TRANSF, VD1_ALM, VD1_CLI_LEASING,
 Substring(VD1_OBS from 1 for 4000),
 Substring(VD1_OBS2 from 1 for 4000),
 Substring(VD1_OBS3 from 1 for 4000),
 Substring(VD1_OBS4 from 1 for 4000),
 TRA_COD, TRA_CLI, TRA_CONT, TRA_END, TRA_CAI, TRA_VEN, TRA_COMP, TRA_LAY_PDV,
 TRA_PRESTSERV, TRA_REP, TRA_TRS, TRA_USE_SET_CMP, TRA_VEI, TRA_NATUREZA,
 TRA_PRESER, TRA_SEU_NUMERO, TRA_PRA_ENT, TRA_PRA_RETIRADA, TRA_PLA,
 TRA_PLA2, TRA_CCUST, TRA_CCUST2, TRA_PROJ, TRA_TIP_TRA,
 TRA_CUPOMOBS1, TRA_CUPOMOBS2, TRA_CUPOMOBS3, TRA_CUPOMOBS4,
 TRA_OBS1_CUP, TRA_OBS2_CUP, TRA_OBS3_CUP, TRA_OBS4_CUP, TRA_PED
 From estmvvd1, CDTRA1
 Where vd1_cod = :pcupom
 and vd1_tra = tra_cod
 Into
 vVd1Cli, vVd1For, vVd1Contato, vVd1Cai, vVd1Ven, vVd1Comp, vVd1Prestador,
 vVd1Rep, vVd1Trs, vVd1UseSetCmp, vVd1Vei, vVd1Cfop, vVd1PrestSer,
 vVd1SeuNumero, vVd1Ent, vVd1Retirada, vVd1Pla, vVd1Pla2, vVd1CCust,
 vVd1CCust2, vVd1Proj, vVd1AlmTransf, vVd1Alm, vVd1CliLeasing,
 vVd1Obs1, vVd1Obs2, vVd1Obs3, vVd1Obs4,
 vTraCod, vTraCli, vTraCont, vTraEnd, vTraCai, vTraVen, vTraComp, vTraLayPdv,
 vTraPrest, vTraRep, vTraTrs, vTraUseSetCmp, vTraVei, vTraNatureza, vTraPreSer,
 vTraSeuNumero, vTraPraEnt, vTraPraRetirada, vTraPla, vTraPla2, vTraCCust,
 vTraCCust2, vTraProj, vTraTipTra,
 vTraCupomObs1, vTraCupomObs2, vTraCupomObs3, vTraCupomObs4,
 vTraObs1Cup, vTraObs2Cup, vTraObs3Cup, vTraObs4Cup, vTraPed;
 
 vColuna1 = '';
 vColuna2 = '';
 vColuna3 = '';
 
 vQuebra = 'F';
 
 Select distinct Nome, TipoForm
 From cdtra3, cdform, cdimpreso
 Where tra_form = form_cod
 and form_impresso = nome
 and tra_tra = :vTraCod
 and form_alm = :vVd1Alm
 Into vImpresso, vTipForm;
 
 if (vtipform = 'NFES') then
 begin
 Select First 1
 NFES_STATUS, NFES_NUMERO, NFES_VERIFICACAO,
 (Select DATA From FORMATDATA(MVNFES.NFES_DATA_HORA,'D','M','A','/'))
 From MVNFES
 Where NFES_VD1 = :PCUPOM
 Into vnfesstatus, vnfesnumero, vnfesverificacao, vnfesdata;
 if ((vnfesstatus = 'REG') or (vnfesstatus = 'CANC')) then
 begin
 if (vnfesstatus = 'REG') then
 begin
 vColuna1 = 'Nº ' || vnfesnumero ||
 '  em ' || vnfesdata || '  - Código de verificação: ' || vnfesverificacao;
 vTitulo1 = 'NF-e gerada';
 end
 if (vnfesstatus = 'CANC') then
 begin
 vColuna1 = 'Nº ' || vnfesnumero ||
 '  em ' || vnfesdata || '  - Código de verificação: ' || vnfesverificacao;
 vTitulo1 = 'NF-e cancelada';
 end
 suspend;
 vTitulo1 = '';
 vTitulo2 = '';
 vTitulo3 = '';
 vColuna1 = '';
 vColuna2 = '';
 vColuna3 = '';
 end
 end
 
 if (pLote = 1) then
 begin
 Select FIRST 1 VD1.VD1_NOT, VD1.VD1_ENT
 From estmvvd14 vd14, estmvvd1 vd1
 Where vd1.VD1_COD = vd14.VD14_ORI
 And (vd14.VD14_BOL = :PCUPOM or vd14.VD14_ORI = :PCUPOM)
 into vColuna1, vVd1Ent;
 vTitulo1 = 'Lote';
 suspend;
 if (vTraPraEnt = 1) then
 begin
 Select DATA From FormatData(:vVd1Ent,'D','M','A','/') into vEntregaLote;
 For
 Select distinct (Select DATA From FormatData(VD1.VD1_ENT,'D','M','A','/'))
 From estmvvd14 vd14, estmvvd1 vd1
 Where vd1.VD1_COD = vd14.VD14_BOL
 And (vd14.VD14_ORI = :PCUPOM or vd14.VD14_ORI = (Select VD14_ORI FROM ESTMVVD14 A where A.vd14_bol = :PCUPOM))
 Order by VD1_ENT
 Into vColuna1 do
 if (not (vEntregaLote containing vColuna1)) then
 vEntregaLote = vEntregaLote || ', ' || vColuna1;
 vColuna1 = vEntregaLote;
 vTitulo1 = 'Entrega';
 suspend;
 end
 vQuebra = 'T';
 end
 else
 begin
 Select FIRST 1 VD1_NOT || '(' || CAST(CASE WHEN VD1_COD = :PCUPOM THEN 1 ELSE VD14_ITEM+1 END AS INTEGER) || '/' ||
 CAST((SELECT COUNT(VD14_ITEM)+1 FROM ESTMVVD14 WHERE VD14_ORI = ESTMVVD1.VD1_COD) AS INTEGER) || ')'
 From estmvvd14, estmvvd1
 Where VD1_COD = VD14_ORI
 And (VD14_BOL = :PCUPOM
 Or VD14_ORI = :PCUPOM)
 into vColuna1;
 vTitulo1 = 'Lote';
 if ((vColuna1 <> '') or (vColuna2 <> '') or (vColuna3 <> '')) then
 begin
 suspend;
 vQuebra = 'T';
 end
 end
 vTitulo1 = '';
 vTitulo2 = '';
 vTitulo3 = '';
 vColuna1 = '';
 vColuna2 = '';
 vColuna3 = '';
 
 if ((vVd1CliLeasing is not null) and (vVd1CliLeasing <> 0)) then
 begin
 Select CLI_NOM From CDCLI Where CLI_COD = :vVd1Cli into :vColuna1;
 vTitulo1 = 'Arrendatario';
 suspend;
 vTitulo1 = '';
 vTitulo2 = '';
 vTitulo3 = '';
 vColuna1 = '';
 vColuna2 = '';
 vColuna3 = '';
 end
 
 if (vTraCli = 'C') then
 begin
 if ((vVd1CliLeasing is not null) and (vVd1CliLeasing <> 0)) then
 vTitulo1 = 'Leasing';
 else
 select DIC_TIT
 from dic01
 where DIC_NOM = 'CDCLI'
 into vTitulo1;
 
 select CLI_NOM, CLI_CODIGO, CLI_CPF, CLI_RG, CLI_TEL, CLI_FIS, CLI_EMA
 from cdcli
 where CLI_COD = :VVD1CLI
 into vColuna1, vCliCodigo, vCNPJ, vIES, vTELEFONE, vPessoa, vEmail;
 
 Select outros
 From cdimpreso
 Where nome = :vimpresso
 and campo_int = 'Imprimir_Codigo_no_Nome_do_Cliente'
 Into vImpFlag;
 
 if (vImpFlag <> 'Sim') then
 vCliCodigo = 0;
 
 if (vCliCodigo > 0) then
 vColuna1 = vCliCodigo || ' - ' || vColuna1;
 
 Select outros
 From cdimpreso
 Where nome = :vimpresso
 and campo_int = 'Imprimir_Telefone_do_Cliente'
 Into vImpFlag;
 end
 if (vTraCli = 'F') then
 begin
 select DIC_TIT
 from dic01
 where DIC_NOM = 'CDFOR'
 into vTitulo1;
 
 select FOR_RZS, FOR_CGC, FOR_IES, FOR_TEL, FOR_FIS, FOR_EMA
 from cdfor
 where FOR_COD = :VVD1FOR
 into vColuna1, vCNPJ, vIES, vTELEFONE, vPessoa, vEmail;
 
 Select outros
 From cdimpreso
 Where nome = :vimpresso
 and campo_int = 'Imprimir_Telefone_do_Fornecedor'
 Into vImpFlag;
 end
 if ((vImpFlag = 'Sim') and (vTelefone is not null) and (vTelefone <> '')) then
 begin
 vColuna2 = vTelefone;
 vTitulo2 = 'Tel.';
 end
 if (vTraCont = 'T') then
 begin
 vTitulo3 = 'Contato';
 vColuna3 = Coalesce(vVD1CONTATO, '');
 end
 
 if (vTraCli = 'C') then
 begin
 Select outros
 From cdimpreso
 Where nome = :vimpresso
 and campo_int = 'Imprimir_Endereco_do_Cliente'
 Into vImpFlag;
 
 if (vImpFlag = 'Sim') then
 Select first 1
 vd5_nom, vd5_cnp, vd5_ies,
 Coalesce(vd5_end,'') ||
 Coalesce('  ' || vd5_num,'') ||
 Coalesce('  ' || vd5_cop,'') ||
 Coalesce('  ' || vd5_Bai,'') ||
 Coalesce(' - ' || vd5_cid,'') ||
 Coalesce(' - ' || vd5_est,'') ||
 Coalesce(' - CEP: ' || vd5_CEP,'')
 From estmvvd5
 Where vd5_bol = :pcupom
 and vd5_tip = 'FAT'
 Into vVD5NOM, vCNPJ, vIES, vEndereco;
 if ((vvd5nom is not null) and (vvd5nom <> '')) then
 vColuna1 = vvd5nom;
 if (vCliCodigo > 0) then
 vColuna1 = vCliCodigo || ' - ' || vColuna1;
 end
 
 if ((vColuna1 <> '') or (vColuna2 <> '') or (vColuna3 <> '')) then
 suspend;
 vQuebra = 'F';
 vTitulo1 = '';
 vTitulo2 = '';
 vTitulo3 = '';
 vColuna1 = '';
 vColuna2 = '';
 vColuna3 = '';
 
 if (vTraCli = 'F') then
 begin
 Select outros
 From cdimpreso
 Where nome = :vimpresso
 and campo_int = 'Imprimir_Endereco_do_Fornecedor'
 Into vImpFlag;
 
 if (vImpFlag = 'Sim') then
 Select first 1
 Coalesce(vd5_end,'') ||
 Coalesce('  ' || vd5_num,'') ||
 Coalesce('  ' || vd5_cop,'') ||
 Coalesce('  ' || vd5_Bai,'') ||
 Coalesce(' - ' || vd5_cid,'') ||
 Coalesce(' - ' || vd5_est,'') ||
 Coalesce(' - CEP: ' || vd5_CEP,'')
 From estmvvd5
 Where vd5_bol = :pcupom
 And vd5_tip <> 'ENT'
 Into vendereco;
 end
 if ((vendereco is not null) and (vendereco <> '')) then
 vColuna1 = vEndereco;
 vTitulo1 = 'Endereço';
 if ((vColuna1 <> '') or (vColuna2 <> '') or (vColuna3 <> '')) then
 suspend;
 vTitulo1 = '';
 vTitulo2 = '';
 vTitulo3 = '';
 vColuna1 = '';
 vColuna2 = '';
 vColuna3 = '';
 
 if (vTraCli = 'C') then
 begin
 Select outros
 From cdimpreso
 Where nome = :vimpresso
 and campo_int = 'Imprimir_Endereco_de_Cobranca_do_Cliente'
 Into vImpFlag;
 
 if (vImpFlag = 'Sim') then
 Select first 1
 Coalesce(log_cob || ' ','') ||
 Coalesce(end_cob,'') ||
 Coalesce('  ' || num_cob,'') ||
 Coalesce('  ' || com_cob,'') ||
 Coalesce('  ' || bai_cob,'') ||
 Coalesce(' - ' || cid_cob,'') ||
 Coalesce(' - ' || est_cob,'') ||
 Coalesce(' - CEP: ' || cep_cob,'')
 From cdcli
 Where cli_cod = :VVD1CLI
 and (end_cob <> cli_end or
 num_cob <> cli_num or
 com_cob <> cli_cop or
 bai_cob <> cli_bai or
 cid_cob <> cli_cid or
 est_cob <> cli_est or
 cep_cob <> cli_cep)
 Into vColuna1;
 
 vTitulo1 = 'End. de Cobrança';
 if ((vColuna1 <> '') or (vColuna2 <> '') or (vColuna3 <> '')) then
 suspend;
 vTitulo1 = '';
 vTitulo2 = '';
 vTitulo3 = '';
 vColuna1 = '';
 vColuna2 = '';
 vColuna3 = '';
 end
 
 if (vTraCli = 'C') then
 Select outros
 From cdimpreso
 Where nome = :vImpresso
 and campo_int = 'Imprimir_Endereco_de_Entrega_do_Cliente'
 Into vImpFlag;
 
 if (vTraCli = 'F') then
 Select outros
 From cdimpreso
 Where nome = :vImpresso
 and campo_int = 'Imprimir_Endereco_de_Entrega_do_Fornecedor'
 Into vImpFlag;
 
 if (vImpFlag = 'Sim') then
 Select
 Coalesce(vd5_end,'') ||
 Coalesce('  ' || vd5_num,'') ||
 Coalesce('  ' || vd5_cop,'') ||
 Coalesce('  ' || vd5_Bai,'') ||
 Coalesce(' - ' || vd5_cid,'') ||
 Coalesce(' - ' || vd5_est,'') ||
 Coalesce(' - CEP: ' || vd5_CEP,'')
 From estmvvd5
 Where vd5_bol = :pcupom
 and vd5_tip = 'ENT'
 Into vColuna1;
 if (vTraLayPdv = 'SER') then
 vTitulo1 = 'End. de Execução';
 else
 vTitulo1 = 'End. de Entrega';
 if ((vColuna1 <> '') or (vColuna2 <> '') or (vColuna3 <> '')) then
 suspend;
 vTitulo1 = '';
 vTitulo2 = '';
 vTitulo3 = '';
 vColuna1 = '';
 vColuna2 = '';
 vColuna3 = '';
 
 vImpFlag = 'F';
 if (vTraCli = 'C') then
 Select outros
 From cdimpreso
 Where nome = :vImpresso
 and campo_int = 'Imprimir_CGC_do_Cliente'
 Into vImpFlag;
 
 if (vTraCli = 'F') then
 Select outros
 From cdimpreso
 Where nome = :vImpresso
 and campo_int = 'Imprimir_CGC_do_Fornecedor'
 Into vImpFlag;
 
 if (vImpFlag = 'Sim') then
 vColuna1 = vCNPJ;
 if (vPessoa = 'J') then
 vTitulo1 = 'CNPJ';
 else
 vTitulo1 = 'CPF';
 
 vImpFlag = 'F';
 if (vTraCli = 'C') then
 Select outros
 From cdimpreso
 Where nome = :vImpresso
 and campo_int = 'Imprimir_IES_do_Cliente'
 Into vImpFlag;
 
 if (vTraCli = 'F') then
 Select outros
 From cdimpreso
 Where nome = :vImpresso
 and campo_int = 'Imprimir_IES_do_Fornecedor'
 Into vImpFlag;
 
 if ((vImpFlag = 'Sim') and (vIES is not null) and (vIES <> '')) then
 begin
 vColuna2 = vIES;
 if (vPessoa = 'J') then
 vTitulo2 = 'IE';
 else
 vTitulo2 = 'RG';
 end
 
 vImpFlag = 'F';
 if (vTraCli = 'C') then
 Select outros
 From cdimpreso
 Where nome = :vImpresso
 and campo_int = 'Imprimir_Email_do_Cliente'
 Into vImpFlag;
 
 if (vTraCli = 'F') then
 Select outros
 From cdimpreso
 Where nome = :vImpresso
 and campo_int = 'Imprimir_Email_do_Fornecedor'
 Into vImpFlag;
 
 if ((vImpFlag = 'Sim') and (vEmail is not null) and (vEmail <> '')) then
 begin
 vColuna3 = vEmail;
 vTitulo3 = 'Email';
 end
 
 if ((vColuna1 <> '') or (vColuna2 <> '') or (vColuna3 <> '')) then
 suspend;
 vTitulo1 = '';
 vTitulo2 = '';
 vTitulo3 = '';
 vColuna1 = '';
 vColuna2 = '';
 vColuna3 = '';
 
 if (vTraCai = 'T') then
 begin
 vTitulo1 = 'Caixa';
 select FUN_RED, FUN_TEL, FUN_EMA from cdfun where FUN_COD = :VVD1CAI into vColuna1, vTelefone, vEmail;
 
 Select outros
 From cdimpreso
 Where nome = :vImpresso
 and campo_int = 'Imprimir_Telefone_do_Caixa'
 Into vImpFlag;
 
 if ((vImpFlag = 'Sim') and (vTelefone is not null) and (vTelefone <> '')) then
 begin
 vColuna2 = vTelefone;
 vTitulo2 = 'Tel.';
 end
 
 Select outros
 From cdimpreso
 Where nome = :vImpresso
 and campo_int = 'Imprimir_Email_do_Caixa'
 Into vImpFlag;
 
 if ((vImpFlag = 'Sim') and (vEmail is not null) and (vEmail <> '')) then
 begin
 vColuna3 = vEmail;
 vTitulo3 = 'Email';
 end
 end
 
 if ((vColuna1 <> '') or (vColuna2 <> '') or (vColuna3 <> '')) then
 suspend;
 vTitulo1 = '';
 vTitulo2 = '';
 vTitulo3 = '';
 vColuna1 = '';
 vColuna2 = '';
 vColuna3 = '';
 
 if (vTraVen = 'T') then
 begin
 vTitulo1 = 'Vendedor';
 
 select FUN_RED, FUN_TEL, FUN_EMA from cdfun where FUN_COD = :VVD1VEN into vColuna1, vTelefone, vEmail;
 
 Select outros
 From cdimpreso
 Where nome = :vImpresso
 and campo_int = 'Imprimir_Telefone_do_Vendedor'
 Into vImpFlag;
 
 if ((vImpFlag = 'Sim') and (vTelefone is not null) and (vTelefone <> '')) then
 begin
 vColuna2 = vTelefone;
 vTitulo2 = 'Tel.';
 end
 
 Select outros
 From cdimpreso
 Where nome = :vImpresso
 and campo_int = 'Imprimir_Email_do_Vendedor'
 Into vImpFlag;
 
 if ((vImpFlag = 'Sim') and (vEmail is not null) and (vEmail <> '')) then
 begin
 vColuna3 = vEmail;
 vTitulo3 = 'Email';
 end
 end
 
 if ((vColuna1 <> '') or (vColuna2 <> '') or (vColuna3 <> '')) then
 suspend;
 vTitulo1 = '';
 vTitulo2 = '';
 vTitulo3 = '';
 vColuna1 = '';
 vColuna2 = '';
 vColuna3 = '';
 
 if (vTraComp = 'T') then
 begin
 vTitulo1 = 'Comprador';
 
 select FUN_RED, FUN_TEL, FUN_EMA from cdfun where FUN_COD = :VVD1COMP into vColuna1, vTelefone, vEmail;
 
 Select outros
 From cdimpreso
 Where nome = :vImpresso
 and campo_int = 'Imprimir_Telefone_do_Comprador'
 Into vImpFlag;
 
 if ((vImpFlag = 'Sim') and (vTelefone is not null) and (vTelefone <> '')) then
 begin
 vColuna2 = vTelefone;
 vTitulo2 = 'Tel.';
 end
 
 Select outros
 From cdimpreso
 Where nome = :vImpresso
 and campo_int = 'Imprimir_Email_do_Comprador'
 Into vImpFlag;
 
 if ((vImpFlag = 'Sim') and (vEmail is not null) and (vEmail <> '')) then
 begin
 vColuna3 = vEmail;
 vTitulo3 = 'Email';
 end
 end
 if ((vColuna1 <> '') or (vColuna2 <> '') or (vColuna3 <> '')) then
 suspend;
 vTitulo1 = '';
 vTitulo2 = '';
 vTitulo3 = '';
 vColuna1 = '';
 vColuna2 = '';
 vColuna3 = '';
 
 if (vTraPrest = 'T') then
 begin
 vTitulo1 = 'Prestador Serv.';
 
 select FUN_RED, FUN_TEL, FUN_EMA from cdfun where FUN_COD = :VVD1PRESTADOR into vColuna1, vTelefone, vEmail;
 
 Select outros
 From cdimpreso
 Where nome = :vImpresso
 and campo_int = 'Imprimir_Telefone_do_PrestServico'
 Into vImpFlag;
 
 if ((vImpFlag = 'Sim') and (vTelefone is not null) and (vTelefone <> '')) then
 begin
 vColuna2 = vTelefone;
 vTitulo2 = 'Tel.';
 end
 
 Select outros
 From cdimpreso
 Where nome = :vImpresso
 and campo_int = 'Imprimir_Email_do_PrestServico'
 Into vImpFlag;
 
 if ((vImpFlag = 'Sim') and (vEmail is not null) and (vEmail <> '')) then
 begin
 vColuna3 = vEmail;
 vTitulo3 = 'Email';
 end
 end
 if ((vColuna1 <> '') or (vColuna2 <> '') or (vColuna3 <> '')) then
 suspend;
 vTitulo1 = '';
 vTitulo2 = '';
 vTitulo3 = '';
 vColuna1 = '';
 vColuna2 = '';
 vColuna3 = '';
 
 if (vTraRep = 'T') then
 begin
 select DIC_TIT from dic01 where DIC_NOM = 'CDREP' into vTitulo1;
 select REP_RED, REP_CGC, REP_IES, REP_FIS, REP_TEL, REP_EMA,
 Coalesce(rep_log || ' ','') ||
 Coalesce(rep_end,'') ||
 Coalesce('  ' || rep_num,'') ||
 Coalesce('  ' || rep_cop,'') ||
 Coalesce('  ' || rep_bai,'') ||
 Coalesce(' - ' || rep_cid,'') ||
 Coalesce(' - ' || rep_est,'') ||
 Coalesce(' - CEP: ' || rep_CEP,'')
 from cdrep
 where REP_COD = :VVD1REP
 into vColuna1, vCNPJ, vIES, vPessoa, vTelefone, vEmail, vEndereco;
 
 Select outros
 From cdimpreso
 Where nome = :vImpresso
 and campo_int = 'Imprimir_Telefone_do_Representante'
 Into vImpFlag;
 
 if ((vImpFlag = 'Sim') and (vTelefone is not null) and (vTelefone <> '')) then
 begin
 vColuna2 = vTelefone;
 vTitulo2 = 'Tel.';
 end
 
 if ((vImpFlag = 'Sim') and (vEmail is not null) and (vEmail <> '')) then
 begin
 vColuna3 = vEmail;
 vTitulo3 = 'Email';
 end
 
 if (vColuna1 <> '') then
 suspend;
 
 vColuna3 = '';
 vTitulo3 = '';
 vColuna2 = '';
 vTitulo2 = '';
 vColuna1 = '';
 vTitulo1 = 'Endereço';
 
 Select outros
 From cdimpreso
 Where nome = :vImpresso
 and campo_int = 'Imprimir_Endereco_do_Representante'
 Into vImpFlag;
 
 if (vImpFlag = 'Sim') then
 vColuna1 = vEndereco;
 
 if (vColuna1 <> '') then
 suspend;
 
 vColuna1 = '';
 
 if (vPessoa = 'J') then
 vTitulo1 = 'CNPJ';
 else
 vTitulo1 = 'CPF';
 
 Select outros
 From cdimpreso
 Where nome = :vImpresso
 and campo_int = 'Imprimir_CGC_do_Representante'
 Into vImpFlag;
 
 if (vImpFlag = 'Sim') then
 vColuna1 = vCNPJ;
 
 vColuna2 = '';
 vTitulo2 = '';
 
 Select outros
 From cdimpreso
 Where nome = :vImpresso
 and campo_int = 'Imprimir_IES_do_Representante'
 Into vImpFlag;
 
 if (vImpFlag = 'Sim') then
 begin
 if (vPessoa = 'J') then
 vTitulo2 = 'IE';
 else
 vTitulo2 = 'RG';
 
 vColuna2 = vIES;
 end
 
 vColuna3 = '';
 vTitulo3 = '';
 
 if ((vColuna1 <> '') or (vColuna2 <> '')) then
 suspend;
 
 vTitulo1 = '';
 vTitulo2 = '';
 vTitulo3 = '';
 vColuna1 = '';
 vColuna2 = '';
 vColuna3 = '';
 end
 
 if (vTraTrs = 'T') then
 begin
 select DIC_TIT from dic01 where DIC_NOM = 'CDTRS' into vTitulo1;
 select TRS_RED, TRS_CGC, TRS_IES, TRS_FIS, TRS_TE1, TRS_EMA,
 Coalesce(trs_log || ' ','') ||
 Coalesce(trs_end,'') ||
 Coalesce('  ' || trs_num,'') ||
 Coalesce('  ' || trs_cop,'') ||
 Coalesce('  ' || trs_bai,'') ||
 Coalesce(' - ' || trs_cid,'') ||
 Coalesce(' - ' || trs_est,'') ||
 Coalesce(' - CEP: ' || trs_CEP,'')
 from cdtrs
 where TRS_COD = :VVD1TRS
 into vColuna1, vCNPJ, vIES, vPessoa, vTelefone, vEmail, vEndereco;
 
 Select outros
 From cdimpreso
 Where nome = :vImpresso
 and campo_int = 'Imprimir_Telefone_da_Transportadora'
 Into vImpFlag;
 
 if ((vImpFlag = 'Sim') and (vTelefone is not null) and (vTelefone <> '')) then
 begin
 vColuna2 = vTelefone;
 vTitulo2 = 'Tel.';
 end
 
 if ((vImpFlag = 'Sim') and (vEmail is not null) and (vEmail <> '')) then
 begin
 vColuna3 = vEmail;
 vTitulo3 = 'Email';
 end
 
 if (vColuna1 <> '') then
 suspend;
 
 vColuna2 = '';
 vTitulo2 = '';
 vColuna1 = '';
 vTitulo1 = 'Endereço';
 
 Select outros
 From cdimpreso
 Where nome = :vImpresso
 and campo_int = 'Imprimir_Endereco_da_Transportadora'
 Into vImpFlag;
 
 if (vImpFlag = 'Sim') then
 vColuna1 = vEndereco;
 
 if (vColuna1 <> '') then
 suspend;
 
 vColuna1 = '';
 
 Select outros
 From cdimpreso
 Where nome = :vImpresso
 and campo_int = 'Imprimir_CGC_da_Transportadora'
 Into vImpFlag;
 
 if (vPessoa = 'J') then
 vTitulo1 = 'CNPJ';
 else
 vTitulo1 = 'CPF';
 
 if (vImpFlag = 'Sim') then
 vColuna1 = vIES;
 
 
 vColuna2 = '';
 vTitulo2 = '';
 
 Select outros
 From cdimpreso
 Where nome = :vImpresso
 and campo_int = 'Imprimir_IES_da_Transportadora'
 Into vImpFlag;
 
 if (vImpFlag = 'Sim') then
 begin
 if (vPessoa = 'J') then
 vTitulo2 = 'IE';
 else
 vTitulo2 = 'RG';
 
 vColuna2 = vIES;
 end
 
 if ((vColuna1 <> '') or (vColuna2 <> '')) then
 suspend;
 
 vTitulo1 = '';
 vTitulo2 = '';
 vTitulo3 = '';
 vColuna1 = '';
 vColuna2 = '';
 vColuna3 = '';
 end
 
 if (vTraUseSetCmp = 'T') then
 begin
 vTitulo1 = 'Usuário / Setor';
 select USE_NOM || ' - ' || SET_NOM
 from cdsetor1, cdsetor2, cduser
 where set_cod = set2_set
 and set2_use = use_cod
 and set2_cod = :VVD1USESETCMP
 into vColuna1;
 end
 if ((vColuna1 <> '') or (vColuna2 <> '') or (vColuna3 <> '')) then
 suspend;
 vTitulo1 = '';
 vTitulo2 = '';
 vTitulo3 = '';
 vColuna1 = '';
 vColuna2 = '';
 vColuna3 = '';
 
 if (vTraVei = 'T') then
 begin
 select DIC_TIT from dic01 where DIC_NOM = 'CDVEICULO' into vTitulo1;
 select VEI_MOD from cdveiculo where VEI_COD = :VVD1VEI into vColuna1;
 end
 if ((vColuna1 <> '') or (vColuna2 <> '') or (vColuna3 <> '')) then
 suspend;
 vTitulo1 = '';
 vTitulo2 = '';
 vTitulo3 = '';
 vColuna1 = '';
 vColuna2 = '';
 vColuna3 = '';
 
 if (vTraNatureza = 'T') then
 begin
 select DIC_TIT from dic01 where DIC_NOM = 'CDCFO' into vTitulo1;
 select CFO_NOM from cdcfo where CFO_COD = :VVD1CFOP into vColuna1;
 end
 if ((vColuna1 <> '') or (vColuna2 <> '') or (vColuna3 <> '')) then
 suspend;
 vTitulo1 = '';
 vTitulo2 = '';
 vTitulo3 = '';
 vColuna1 = '';
 vColuna2 = '';
 vColuna3 = '';
 
 if (vTraPreSer = 'T') then
 begin
 select DIC_TIT from dic01 where DIC_NOM = 'CDPRESTSER' into vTitulo1;
 select PRE_NOM from cdprestser where PRE_COD = :VVD1PRESTSER into vColuna1;
 end
 if ((vColuna1 <> '') or (vColuna2 <> '') or (vColuna3 <> '')) then
 suspend;
 vTitulo1 = '';
 vTitulo2 = '';
 vTitulo3 = '';
 vColuna1 = '';
 vColuna2 = '';
 vColuna3 = '';
 
 Select outros
 From cdimpreso
 Where nome = :vImpresso
 and campo_int = 'Imprimir_Plano_De_Contas'
 Into vImpFlag;
 if ((vTraPla = 'T') and (vImpFlag = 'Sim')) then
 begin
 select DIC_TIT from dic01 where DIC_NOM = 'CDPLA' into vTitulo1;
 select PLA_NOM from cdpla where PLA_COD = :VVD1PLA into vColuna1;
 end
 if (vColuna1 is null) then
 vColuna1 = '';
 if (vColuna2 is null) then
 vColuna2 = '';
 if (vColuna3 is null) then
 vColuna3 = '';
 if ((vColuna1 <> '') or (vColuna2 <> '') or (vColuna3 <> '')) then
 suspend;
 vTitulo1 = '';
 vTitulo2 = '';
 vTitulo3 = '';
 vColuna1 = '';
 vColuna2 = '';
 vColuna3 = '';
 
 Select outros
 From cdimpreso
 Where nome = :vImpresso
 and campo_int = 'Imprimir_Plano_De_Contas2'
 Into vImpFlag;
 if ((vTraPla2 = 'T') and (vImpFlag = 'Sim')) then
 begin
 select DIC_TIT from dic01 where DIC_NOM = 'CDPLAAUX' into vTitulo1;
 select PLA_NOM from cdplaaux where PLA_COD = :VVD1PLA2 into vColuna1;
 end
 if ((vColuna1 <> '') or (vColuna2 <> '') or (vColuna3 <> '')) then
 suspend;
 vTitulo1 = '';
 vTitulo2 = '';
 vTitulo3 = '';
 vColuna1 = '';
 vColuna2 = '';
 vColuna3 = '';
 
 Select outros
 From cdimpreso
 Where nome = :vImpresso
 and campo_int = 'Imprimir_Centro_De_Custo'
 Into vImpFlag;
 if ((vTraCCust = 'T') and (vImpFlag = 'Sim')) then
 begin
 select DIC_TIT from dic01 where DIC_NOM = 'CDCCUST' into vTitulo1;
 select CUS_NOM from cdccust where CUS_COD = :VVD1CCUST into vColuna1;
 end
 if ((vColuna1 <> '') or (vColuna2 <> '') or (vColuna3 <> '')) then
 suspend;
 vTitulo1 = '';
 vTitulo2 = '';
 vTitulo3 = '';
 vColuna1 = '';
 vColuna2 = '';
 vColuna3 = '';
 
 Select outros
 From cdimpreso
 Where nome = :vImpresso
 and campo_int = 'Imprimir_Centro_De_Custo2'
 Into vImpFlag;
 if ((vTraCCust2 = 'T') and (vImpFlag = 'Sim')) then
 begin
 select DIC_TIT from dic01 where DIC_NOM = 'CDCCUSTAUX' into vTitulo1;
 select CUS_NOM from cdccustaux where CUS_COD = :VVD1CCUST2 into vColuna1;
 end
 if ((vColuna1 <> '') or (vColuna2 <> '') or (vColuna3 <> '')) then
 suspend;
 vTitulo1 = '';
 vTitulo2 = '';
 vTitulo3 = '';
 vColuna1 = '';
 vColuna2 = '';
 vColuna3 = '';
 
 Select outros
 From cdimpreso
 Where nome = :vImpresso
 and campo_int = 'Imprimir_Projeto'
 Into vImpFlag;
 if ((vTraProj = 'T') and (vImpFlag = 'Sim')) then
 begin
 select DIC_TIT from dic01 where DIC_NOM = 'CDPROJ' into vTitulo1;
 select PROJ_NOM from cdproj where PROJ_COD = :VVD1PROJ into vColuna1;
 end
 if ((vColuna1 <> '') or (vColuna2 <> '') or (vColuna3 <> '')) then
 suspend;
 vTitulo1 = '';
 vTitulo2 = '';
 vTitulo3 = '';
 vColuna1 = '';
 vColuna2 = '';
 vColuna3 = '';
 
 if ((vTraTipTra = 'TRE') or (vTraTipTra = 'TRS')) then
 begin
 if (vTraTipTra = 'TRE') then
 vTitulo1 = 'Origem';
 else
 vTitulo1 = 'Destino';
 select ALM_FANT from cdalm where ALM_COD = :VVD1ALMTRANSF into vColuna1;
 
 Select TRA_NOM, VD1_NOT
 From estmvvd1, cdtra1
 Where VD1_TRA = TRA_COD
 And VD1_FILHO = :PCUPOM
 into vColuna2, vColuna3;
 
 if ((vColuna1 <> '') or (vColuna2 <> '') or (vColuna3 <> '')) then
 suspend;
 vTitulo1 = '';
 vTitulo2 = '';
 vTitulo3 = '';
 vColuna1 = '';
 vColuna2 = '';
 vColuna3 = '';
 end
 
 vColuna1 = '';
 For
 Select VD1_NOT
 From estmvvd1 E1, estmvvd9 E9
 Where E1.vd1_cod = E9.vd9_asc
 And E9.vd9_bol = :pCupom
 Into vPedido do
 begin
 if (vPedido is not null) then
 if (vColuna1 = '') then
 begin
 vColuna1 = vPedido;
 if ((vTraPed = 'S') or (vTraPed = 'E')) then
 vTitulo1 = 'Consignação baixada';
 else
 vTitulo1 = 'Pedido baixado';
 end
 else
 begin
 vColuna1 = vColuna1 || ', ' || vPedido;
 if ((vTraPed = 'S') or (vTraPed = 'E')) then
 vTitulo1 = 'Consignações baixadas';
 else
 vTitulo1 = 'Pedidos baixados';
 end
 end
 
 if ((vColuna1 <> '') or (vColuna2 <> '') or (vColuna3 <> '')) then
 suspend;
 vTitulo1 = '';
 vTitulo2 = '';
 vTitulo3 = '';
 vColuna1 = '';
 vColuna2 = '';
 vColuna3 = '';
 
 vColuna1 = '';
 For
 Select VD1_NOT
 From estmvvd1 E1, estmvvd9 E9
 Where E1.vd1_cod = E9.vd9_bol
 And E9.vd9_asc = :pCupom
 Into vPedido do
 begin
 if (vPedido is not null) then
 if (vColuna1 = '') then
 begin
 vColuna1 = vPedido;
 vTitulo1 = 'Lancto associado';
 end
 else
 begin
 vColuna1 = vColuna1 || ', ' || vPedido;
 vTitulo1 = 'Lanctos associados';
 end
 end
 
 vQuebra = 'T';
 
 if ((vColuna1 <> '') or (vColuna2 <> '') or (vColuna3 <> '')) then
 begin
 suspend;
 vQuebra = 'F';
 end
 vTitulo1 = '';
 vTitulo2 = '';
 vTitulo3 = '';
 vColuna1 = '';
 vColuna2 = '';
 vColuna3 = '';
 
 if (vTraCupomObs1 = 'T') then
 begin
 vTitulo1 = vTraObs1Cup;
 vColuna1 = vVd1Obs1;
 end
 if ((vColuna1 <> '') or (vColuna2 <> '') or (vColuna3 <> '')) then
 begin
 suspend;
 vQuebra = 'F';
 end
 vTitulo1 = '';
 vTitulo2 = '';
 vTitulo3 = '';
 vColuna1 = '';
 vColuna2 = '';
 vColuna3 = '';
 
 if (vTraCupomObs2 = 'T') then
 begin
 vTitulo1 = vTraObs2Cup;
 vColuna1 = vVd1Obs2;
 end
 if ((vColuna1 <> '') or (vColuna2 <> '') or (vColuna3 <> '')) then
 begin
 suspend;
 vQuebra = 'F';
 end
 vTitulo1 = '';
 vTitulo2 = '';
 vTitulo3 = '';
 vColuna1 = '';
 vColuna2 = '';
 vColuna3 = '';
 
 if (vTraCupomObs3 = 'T') then
 begin
 vTitulo1 = vTraObs3Cup;
 vColuna1 = vVd1Obs3;
 end
 if ((vColuna1 <> '') or (vColuna2 <> '') or (vColuna3 <> '')) then
 begin
 suspend;
 vQuebra = 'F';
 end
 vTitulo1 = '';
 vTitulo2 = '';
 vTitulo3 = '';
 vColuna1 = '';
 vColuna2 = '';
 vColuna3 = '';
 
 if (vTraCupomObs4 = 'T') then
 begin
 vTitulo1 = vTraObs4Cup;
 vColuna1 = vVd1Obs4;
 end
 if ((vColuna1 <> '') or (vColuna2 <> '') or (vColuna3 <> '')) then
 begin
 suspend;
 vQuebra = 'F';
 end
 vTitulo1 = '';
 vTitulo2 = '';
 vTitulo3 = '';
 vColuna1 = '';
 vColuna2 = '';
 vColuna3 = '';
 end
^

ALTER PROCEDURE GERA_CAMPOS_VARIAVEIS_CUPOM (
    PTRANSACAO INTEGER,
    PCUPOM VARCHAR(13))
RETURNS (
    VCODIGO INTEGER,
    VTIPOCAMPO VARCHAR(10),
    VLABEL VARCHAR(100),
    VTEXTO VARCHAR(100),
    VREAL DOUBLE PRECISION,
    VDATA TIMESTAMP,
    VMEMO VARCHAR(4000),
    VRESULTADO VARCHAR(4000),
    VMASCARA VARCHAR(20),
    VREQUERIDO VARCHAR(1),
    VTRAVALOOKUP VARCHAR(1),
    VTABELA VARCHAR(50),
    VCAMPOCODIGO VARCHAR(50),
    VCAMPONOME VARCHAR(50),
    VLARGURA INTEGER,
    VALTURA INTEGER,
    VSECAO VARCHAR(30))
AS
 declare variable vtestereal double precision;
 declare variable vordem integer;
 declare variable vseparador varchar(10);
 begin
 For
 Select distinct var_cod, var_nom, var_tip,
 (select first 1 vd13_texto
 from estmvvd13 B
 where A.vd13_var = B.vd13_var
 and A.vd13_bol = B.vd13_bol),
 vd13_real, vd13_data,
 substring(vd13_blob from 1 for 4000), tra6_ord,
 var_masc, var_req, var_trava_lookup, var_tab, var_cmp_cod, var_cmp_nom,
 var_tam_lrg, var_tam_alt, tra6_sec
 From cdtra6, cdcamposvar
 left join estmvvd13 A on (vd13_var = cdcamposvar.var_cod and vd13_bol = :pCupom)
 Where tra6_var = var_cod
 and tra6_tra = :pTransacao
 Order by tra6_sec, tra6_ord
 Into vCodigo, vLabel, vTipoCampo, vTexto, vReal, vData, vMemo, vOrdem,
 vmascara, vRequerido, vTravaLookup, vTabela, vCampoCodigo, vCampoNome,
 vLargura, vAltura, vSecao Do
 begin
 vResultado = '';
 if ((vTipoCampo = 'TEXTO') or (vTipoCampo = 'LOOKUP')) then
 vResultado = vTexto;
 else if (vTipoCampo = 'MEMO') then
 vResultado = vMemo;
 else if (vTipoCampo = 'TABEXT') then
 execute statement
 'Select ' || vCampoNome ||
 '  From ' || vTabela ||
 ' where ' || vCampoCodigo || ' = ' || cast(coalesce(vReal, 0) as integer)
 into vResultado;
 else if (vTipoCampo = 'REAL') then
 begin
 vResultado = cast(vReal as varchar(18));
 vTesteReal = 100000000000000;
 while ((vTesteReal > vReal) and (vTesteReal > 1)) do
 begin
 vResultado = ' ' || Substring(vResultado from 1 for 17);
 vTesteReal = vTesteReal / 10;
 end
 while (Substring(vResultado from 1 for 1) = ' ') do
 vResultado = Substring(vResultado from 2 for 17);
 end
 else if (vTipoCampo = 'INT') then
 vResultado = cast(cast(vReal as integer) as varchar(20));
 else if (vTipoCampo = 'DATA') then
 Select Data From formatdata(:vData,'D','M','A','/') into vResultado;
 else if ((vTipoCampo = 'MULTIPLO') or (vTipoCampo = 'TABVAR')) then
 begin
 vSeparador = '';
 vResultado = '';
 for select vd13_texto
 from estmvvd13
 where vd13_var = :vCodigo
 and vd13_bol = :pcupom
 into vTexto do
 begin
 vResultado = vResultado || vSeparador || vTexto;
 vSeparador = '  -  ';
 end
 end
 suspend;
 end
 end
^

ALTER PROCEDURE GERA_CAMPOS_VARIAVEIS_ENTIDADE (
    PCODIGO INTEGER,
    PTABELA VARCHAR(10))
RETURNS (
    VCODIGO INTEGER,
    VTIPOCAMPO VARCHAR(10),
    VLABEL VARCHAR(100),
    VTEXTO VARCHAR(100),
    VREAL DOUBLE PRECISION,
    VDATA TIMESTAMP,
    VMEMO VARCHAR(4000),
    VRESULTADO VARCHAR(4000),
    VMASCARA VARCHAR(20),
    VREQUERIDO VARCHAR(1),
    VTRAVALOOKUP VARCHAR(1),
    VTABELA VARCHAR(50),
    VCAMPOCODIGO VARCHAR(50),
    VCAMPONOME VARCHAR(50),
    VLARGURA INTEGER,
    VALTURA INTEGER,
    VSECAO VARCHAR(30))
AS
 declare variable vtestereal double precision;
 declare variable vordem integer;
 declare variable vseparador varchar(10);
 begin
 For
 Select distinct var_cod, var_nom, var_tip,
 (select first 1 val_texto
 from cdentvarvalor B
 where A.val_var = B.val_var
 and A.val_ent_cod = B.val_ent_cod
 and A.val_ent_tab = B.val_ent_tab),
 val_real, val_data,
 substring(val_blob from 1 for 4000),
 cmp_ord, var_masc, var_req, var_trava_lookup, var_tab, var_cmp_cod, var_cmp_nom,
 var_tam_lrg, var_tam_alt, cmp_sec
 From cdentvarcampo, cdcamposvar
 left join cdentvarvalor A on (val_var = cdcamposvar.var_cod and val_ent_cod = :pCodigo)
 Where cmp_var = var_cod
 and cmp_ent = :pTabela
 Order by cmp_sec, cmp_ord
 Into vCodigo, vLabel, vTipoCampo, vTexto, vReal, vData, vMemo, vOrdem,
 vmascara, vRequerido, vTravaLookup, vTabela, vCampoCodigo, vCampoNome,
 vLargura, vAltura, vSecao Do
 begin
 if ((vTipoCampo = 'TEXTO') or (vTipoCampo = 'LOOKUP')) then
 vResultado = vTexto;
 else if (vTipoCampo = 'MEMO') then
 vResultado = vMemo;
 else if (vTipoCampo = 'TABEXT') then
 execute statement
 'Select ' || vCampoNome ||
 '  From ' || vTabela ||
 ' where ' || vCampoCodigo || ' = ' || cast(coalesce(vReal, 0) as integer)
 into vResultado;
 else if (vTipoCampo = 'REAL') then
 begin
 vResultado = cast(vReal as varchar(18));
 vTesteReal = 100000000000000;
 while ((vTesteReal > vReal) and (vTesteReal > 1)) do
 begin
 vResultado = ' ' || Substring(vResultado from 1 for 17);
 vTesteReal = vTesteReal / 10;
 end
 while (Substring(vResultado from 1 for 1) = ' ') do
 vResultado = Substring(vResultado from 2 for 17);
 end
 else if (vTipoCampo = 'INT') then
 vResultado = cast(cast(vReal as integer) as varchar(20));
 else if (vTipoCampo = 'DATA') then
 Select Data From formatdata(:vData,'D','M','A','/') into vResultado;
 else if ((vTipoCampo = 'MULTIPLO') or (vTipoCampo = 'TABVAR')) then
 begin
 vSeparador = '';
 vResultado = '';
 for select val_texto
 from cdentvarvalor
 where val_var = :vCodigo
 and val_ent_cod = :pCodigo
 and val_ent_tab = :pTabela
 into vTexto do
 begin
 vResultado = vResultado || vSeparador || vTexto;
 vSeparador = '  -  ';
 end
 end
 suspend;
 end
 end
^

ALTER PROCEDURE GERA_CAMPOS_VARIAVEIS_MARKETING (
    PCODIGO INTEGER,
    PGRUPO VARCHAR(10))
RETURNS (
    VCODIGO INTEGER,
    VTIPOCAMPO VARCHAR(10),
    VLABEL VARCHAR(100),
    VTEXTO VARCHAR(100),
    VREAL DOUBLE PRECISION,
    VDATA TIMESTAMP,
    VMEMO VARCHAR(4000),
    VRESULTADO VARCHAR(4000),
    VMASCARA VARCHAR(20),
    VREQUERIDO VARCHAR(1),
    VTRAVALOOKUP VARCHAR(1),
    VTABELA VARCHAR(50),
    VCAMPOCODIGO VARCHAR(50),
    VCAMPONOME VARCHAR(50),
    VLARGURA INTEGER,
    VALTURA INTEGER,
    VSECAO VARCHAR(30))
AS
 declare variable vtestereal double precision;
 declare variable vordem integer;
 declare variable vseparador varchar(10);
 begin
 For Select var_cod, var_nom, var_tip,
 (select first 1 val_texto
 from cdtmkvarvalor B
 where A.val_var = B.val_var
 and A.val_tmk_cod = B.val_tmk_cod
 and A.val_tmk_gru = B.val_tmk_gru),
 val_real, val_data,
 substring(val_blob from 1 for 4000),
 cmp_ord, var_masc, var_req, var_trava_lookup, var_tab, var_cmp_cod, var_cmp_nom,
 var_tam_lrg, var_tam_alt, cmp_sec
 From cdsupvarcampo, cdcamposvar
 left join cdtmkvarvalor A on (val_var = cdcamposvar.var_cod and val_tmk_cod = :pCodigo)
 Where cmp_var = var_cod
 and cmp_gru = :pGrupo
 Order by cmp_sec, cmp_ord
 Into vCodigo, vLabel, vTipoCampo, vTexto, vReal, vData, vMemo, vOrdem,
 vmascara, vRequerido, vTravaLookup, vTabela, vCampoCodigo, vCampoNome,
 vLargura, vAltura, vSecao Do
 begin
 if ((vTipoCampo = 'TEXTO') or (vTipoCampo = 'LOOKUP')) then
 vResultado = vTexto;
 else if (vTipoCampo = 'MEMO') then
 vResultado = vMemo;
 else if (vTipoCampo = 'TABEXT') then
 execute statement
 'Select ' || vCampoNome ||
 '  From ' || vTabela ||
 ' where ' || vCampoCodigo || ' = ' || cast(coalesce(vReal, 0) as integer)
 into vResultado;
 else if (vTipoCampo = 'REAL') then
 begin
 vResultado = cast(vReal as varchar(18));
 vTesteReal = 100000000000000;
 while ((vTesteReal > vReal) and (vTesteReal > 1)) do
 begin
 vResultado = ' ' || Substring(vResultado from 1 for 17);
 vTesteReal = vTesteReal / 10;
 end
 while (Substring(vResultado from 1 for 1) = ' ') do
 vResultado = Substring(vResultado from 2 for 17);
 end
 else if (vTipoCampo = 'INT') then
 vResultado = cast(cast(vReal as integer) as varchar(20));
 else if (vTipoCampo = 'DATA') then
 Select Data From formatdata(:vData,'D','M','A','/') into vResultado;
 else if ((vTipoCampo = 'MULTIPLO') or (vTipoCampo = 'TABVAR')) then
 begin
 vSeparador = '';
 vResultado = '';
 for select val_texto
 from cdtmkvarvalor
 where val_var = :vCodigo
 and val_tmk_cod = :pCodigo
 and val_tmk_gru = :pGrupo
 into vTexto do
 begin
 vResultado = vResultado || vSeparador || vTexto;
 vSeparador = '  -  ';
 end
 end
 suspend;
 end
 end
^

ALTER PROCEDURE GERA_CAMPOS_VARIAVEIS_SUPORTE (
    PCODIGO INTEGER,
    PGRUPO VARCHAR(10))
RETURNS (
    VCODIGO INTEGER,
    VTIPOCAMPO VARCHAR(10),
    VLABEL VARCHAR(100),
    VTEXTO VARCHAR(100),
    VREAL DOUBLE PRECISION,
    VDATA TIMESTAMP,
    VMEMO VARCHAR(4000),
    VRESULTADO VARCHAR(4000),
    VMASCARA VARCHAR(20),
    VREQUERIDO VARCHAR(1),
    VTRAVALOOKUP VARCHAR(1),
    VTABELA VARCHAR(50),
    VCAMPOCODIGO VARCHAR(50),
    VCAMPONOME VARCHAR(50),
    VLARGURA INTEGER,
    VALTURA INTEGER,
    VSECAO VARCHAR(30))
AS
 declare variable vtestereal double precision;
 declare variable vordem integer;
 declare variable vseparador varchar(10);
 begin
 For Select var_cod, var_nom, var_tip,
 (select first 1 val_texto
 from cdsupvarvalor B
 where A.val_var = B.val_var
 and A.val_sup_cod = B.val_sup_cod
 and A.val_sup_gru = B.val_sup_gru),
 val_real, val_data,
 substring(val_blob from 1 for 4000),
 cmp_ord, var_masc, var_req, var_trava_lookup, var_tab, var_cmp_cod, var_cmp_nom,
 var_tam_lrg, var_tam_alt, cmp_sec
 From cdsupvarcampo, cdcamposvar
 left join cdsupvarvalor A on (val_var = cdcamposvar.var_cod and val_sup_cod = :pCodigo)
 Where cmp_var = var_cod
 and cmp_gru = :pGrupo
 Order by cmp_sec, cmp_ord
 Into vCodigo, vLabel, vTipoCampo, vTexto, vReal, vData, vMemo, vOrdem,
 vmascara, vRequerido, vTravaLookup, vTabela, vCampoCodigo, vCampoNome,
 vLargura, vAltura, vSecao Do
 begin
 if ((vTipoCampo = 'TEXTO') or (vTipoCampo = 'LOOKUP')) then
 vResultado = vTexto;
 else if (vTipoCampo = 'MEMO') then
 vResultado = vMemo;
 else if (vTipoCampo = 'TABEXT') then
 execute statement
 'Select ' || vCampoNome ||
 '  From ' || vTabela ||
 ' where ' || vCampoCodigo || ' = ' || cast(coalesce(vReal, 0) as integer)
 into vResultado;
 else if (vTipoCampo = 'REAL') then
 begin
 vResultado = cast(vReal as varchar(18));
 vTesteReal = 100000000000000;
 while ((vTesteReal > vReal) and (vTesteReal > 1)) do
 begin
 vResultado = ' ' || Substring(vResultado from 1 for 17);
 vTesteReal = vTesteReal / 10;
 end
 while (Substring(vResultado from 1 for 1) = ' ') do
 vResultado = Substring(vResultado from 2 for 17);
 end
 else if (vTipoCampo = 'INT') then
 vResultado = cast(cast(vReal as integer) as varchar(20));
 else if (vTipoCampo = 'DATA') then
 Select Data From formatdata(:vData,'D','M','A','/') into vResultado;
 else if ((vTipoCampo = 'MULTIPLO') or (vTipoCampo = 'TABVAR')) then
 begin
 vSeparador = '';
 vResultado = '';
 for select val_texto
 from cdsupvarvalor
 where val_var = :vCodigo
 and val_sup_cod = :pCodigo
 and val_sup_gru = :pGrupo
 into vTexto do
 begin
 vResultado = vResultado || vSeparador || vTexto;
 vSeparador = '  -  ';
 end
 end
 suspend;
 end
 end
^

ALTER PROCEDURE GERA_CAMPOS_VARIAVEIS_TABVAR (
    PCODIGO INTEGER,
    PGRUPO VARCHAR(10))
RETURNS (
    VCODIGO INTEGER,
    VTIPOCAMPO VARCHAR(10),
    VLABEL VARCHAR(100),
    VTEXTO VARCHAR(100),
    VREAL DOUBLE PRECISION,
    VDATA TIMESTAMP,
    VMEMO VARCHAR(4000),
    VRESULTADO VARCHAR(4000),
    VMASCARA VARCHAR(20),
    VREQUERIDO VARCHAR(1),
    VTRAVALOOKUP VARCHAR(1),
    VTABELA VARCHAR(50),
    VCAMPOCODIGO VARCHAR(50),
    VCAMPONOME VARCHAR(50),
    VLARGURA INTEGER,
    VALTURA INTEGER,
    VSECAO VARCHAR(30))
AS
 declare variable vtestereal double precision;
 declare variable vordem integer;
 declare variable vseparador varchar(10);
 begin
 For
 Select var_cod, var_nom, var_tip,
 (select first 1 val_texto
 from cdtabvarvalor B
 where A.val_var = B.val_var
 and A.val_tab_cod = B.val_tab_cod
 and A.val_tab_gru = B.val_tab_gru),
 val_real, val_data,
 substring(val_blob from 1 for 4000),
 cmp_ord, var_masc, var_req, var_trava_lookup, var_tab, var_cmp_cod, var_cmp_nom,
 var_tam_lrg, var_tam_alt, cmp_sec
 From cdtabvarcampo, cdcamposvar
 left join cdtabvarvalor A on (val_var = cdcamposvar.var_cod and val_tab_cod = :pCodigo)
 Where cmp_var = var_cod
 and cmp_gru = :pGrupo
 Order by cmp_sec, cmp_ord
 Into vCodigo, vLabel, vTipoCampo, vTexto, vReal, vData, vMemo, vOrdem,
 vmascara, vRequerido, vTravaLookup, vTabela, vCampoCodigo, vCampoNome,
 vLargura, vAltura, vSecao Do
 begin
 if ((vTipoCampo = 'TEXTO') or (vTipoCampo = 'LOOKUP')) then
 vResultado = vTexto;
 else if (vTipoCampo = 'MEMO') then
 vResultado = vMemo;
 else if (vTipoCampo = 'TABEXT') then
 execute statement
 'Select ' || vCampoNome ||
 '  From ' || vTabela ||
 ' where ' || vCampoCodigo || ' = ' || cast(coalesce(vReal, 0) as integer)
 into vResultado;
 else if (vTipoCampo = 'REAL') then
 begin
 vResultado = cast(vReal as varchar(18));
 vTesteReal = 100000000000000;
 while ((vTesteReal > vReal) and (vTesteReal > 1)) do
 begin
 vResultado = ' ' || Substring(vResultado from 1 for 17);
 vTesteReal = vTesteReal / 10;
 end
 while (Substring(vResultado from 1 for 1) = ' ') do
 vResultado = Substring(vResultado from 2 for 17);
 end
 else if (vTipoCampo = 'INT') then
 vResultado = cast(cast(vReal as integer) as varchar(20));
 else if (vTipoCampo = 'DATA') then
 Select Data From formatdata(:vData,'D','M','A','/') into vResultado;
 else if ((vTipoCampo = 'MULTIPLO') or (vTipoCampo = 'TABVAR')) then
 begin
 vSeparador = '';
 vResultado = '';
 for select val_texto
 from cdtabvarvalor
 where val_var = :vCodigo
 and val_tab_cod = :pCodigo
 and val_tab_gru = :pGrupo
 into vTexto do
 begin
 vResultado = vResultado || vSeparador || vTexto;
 vSeparador = '  -  ';
 end
 end
 suspend;
 end
 end
^

ALTER PROCEDURE GERA_CDPROPRE (
    PPRODUTO INTEGER,
    PATIVO VARCHAR(1),
    PMARGEM DOUBLE PRECISION,
    PDESCONTO DOUBLE PRECISION,
    PVAL_DE TIMESTAMP,
    PVAL_ATE TIMESTAMP,
    PCOMISSAO DOUBLE PRECISION)
RETURNS (
    RESULT VARCHAR(1))
AS
 declare variable wregpropre integer;
 declare variable wregpro integer;
 BEGIN
 IF ( NOT EXISTS( SELECT * FROM CDPROPRE WHERE PRO_PRO = :pPRODUTO ) ) THEN
 BEGIN
 INSERT INTO CDPROPRE( PRO_PRO, PRO_COR, PRO_MED, PRO_MARGEM_MARKUP, PRO_ULTC, PRO_CUSM, ATIVO, PRO_DESCONTO, PRO_VAL_DE, PRO_VAL_ATE, PRO_COMISSAO, DAT_ATU, DAT_CAD ) VALUES( :pPRODUTO, "", "", :pMARGEM, 0, 0, "A", :pDESCONTO, :pVAL_DE, :pVAL_ATE, :pCOMISSAO, "today", "today" );
 END
 ELSE
 BEGIN
 UPDATE CDPROPRE SET PRO_MARGEM_MARKUP=:pMARGEM, ATIVO="A", PRO_DESCONTO=:pDESCONTO, PRO_VAL_DE=:pVAL_DE, PRO_VAL_ATE=:pVAL_ATE, PRO_COMISSAO=:pCOMISSAO, DAT_ATU = "today" WHERE PRO_PRO = :pPRODUTO;
 END
 
 SELECT COUNT(PRO_PRO) FROM CDPROPRE INTO :wRegPropre;
 SELECT COUNT(PRO_COD) AS REGISTROS FROM CDPRO INTO :wRegPro;
 IF (wRegPropre <> wRegPro) THEN
 BEGIN
 INSERT INTO CDPROHIS(PRO_TAB,PRO_ANT,PRO_DEP,PRO_DAT,PRO_HIS) VALUES( "CDPROPRE", :wRegPropre, (SELECT COUNT(PRO_PRO) FROM CDPROPRE), CAST("TODAY" AS DATE), "PROCEDURE GERA_CDPROPRE" );
 INSERT INTO CDPROHIS(PRO_TAB,PRO_ANT,PRO_DEP,PRO_DAT,PRO_HIS) VALUES( "CDPRO", :wRegPro, (SELECT COUNT(PRO_COD) FROM CDPRO), CAST("TODAY" AS DATE), "PROCEDURE GERA_CDPROPRE" );
 END
 
 END
^

ALTER PROCEDURE GERA_CDPROPRE_CORMEDIDA (
    PPRODUTO INTEGER,
    PATIVO VARCHAR(1),
    PMARGEM DOUBLE PRECISION)
RETURNS (
    RESULT VARCHAR(1))
AS
BEGIN
  SUSPEND;
END
^

ALTER PROCEDURE GERAR_NFE_MENSALIDADE (
    PCLIENTE INTEGER,
    PDATA TIMESTAMP,
    PVALOR DOUBLE PRECISION)
AS
DECLARE VARIABLE VCODIGO VARCHAR(13);
DECLARE VARIABLE VNUMERO INTEGER;
DECLARE VARIABLE VCPF VARCHAR(19);
DECLARE VARIABLE VTIPCLI VARCHAR(1);
DECLARE VARIABLE VFATNUM VARCHAR(10);
DECLARE VARIABLE VFATCOM VARCHAR(30);
DECLARE VARIABLE VFATCEP VARCHAR(9);
DECLARE VARIABLE VFATEND VARCHAR(100);
DECLARE VARIABLE VFATBAI VARCHAR(30);
DECLARE VARIABLE VFATCID VARCHAR(30);
DECLARE VARIABLE VFATEST VARCHAR(2);
DECLARE VARIABLE VFATNOM VARCHAR(60);
DECLARE VARIABLE VFATIES VARCHAR(19);
DECLARE VARIABLE VFATFIS VARCHAR(1);
DECLARE VARIABLE VFATPAIS VARCHAR(100);
DECLARE VARIABLE VFATPROV VARCHAR(100);
DECLARE VARIABLE VISS_ALIQ DOUBLE PRECISION;
DECLARE VARIABLE VISS_RETER VARCHAR(1);
DECLARE VARIABLE VISS_RET DOUBLE PRECISION;
DECLARE VARIABLE VTRANSACAO INTEGER;
DECLARE VARIABLE VIMP1_ALIQ DOUBLE PRECISION;
DECLARE VARIABLE VIMP2_ALIQ DOUBLE PRECISION;
DECLARE VARIABLE VIMP3_ALIQ DOUBLE PRECISION;
DECLARE VARIABLE VIMP4_ALIQ DOUBLE PRECISION;
DECLARE VARIABLE VIMP5_ALIQ DOUBLE PRECISION;
DECLARE VARIABLE VIMP6_ALIQ DOUBLE PRECISION;
DECLARE VARIABLE VIMP1_MIN DOUBLE PRECISION;
DECLARE VARIABLE VIMP2_MIN DOUBLE PRECISION;
DECLARE VARIABLE VIMP3_MIN DOUBLE PRECISION;
DECLARE VARIABLE VIMP4_MIN DOUBLE PRECISION;
DECLARE VARIABLE VIMP5_MIN DOUBLE PRECISION;
DECLARE VARIABLE VIMP6_MIN DOUBLE PRECISION;
DECLARE VARIABLE VIMP1_RET DOUBLE PRECISION;
DECLARE VARIABLE VIMP2_RET DOUBLE PRECISION;
DECLARE VARIABLE VIMP3_RET DOUBLE PRECISION;
DECLARE VARIABLE VIMP4_RET DOUBLE PRECISION;
DECLARE VARIABLE VIMP5_RET DOUBLE PRECISION;
DECLARE VARIABLE VIMP6_RET DOUBLE PRECISION;
DECLARE VARIABLE VTOTAL_RET DOUBLE PRECISION;
DECLARE VARIABLE VTOTAL_BRUTO DOUBLE PRECISION;
begin
 SELECT cdcli.cgc_ent, cdcli.cli_cons_rev,
 cdcli.num_ent, cdcli.com_ent, cdcli.cep_ent, cdcli.end_ent,
 cdcli.bai_ent, cdcli.cid_ent, cdcli.est_ent,
 cdcli.nom_ent, cdcli.ies_ent, cdcli.fis_ent,
 cdcli.cli_pais, cdcli.cli_prov, cdcli.cli_iss,
 coalesce(
   (select e.val_real
      from cdentvarvalor e
     where e.val_ent_cod = cdcli.cli_cod
       and e.val_ent_tab = 'CDCLI'
       and e.val_var = 23), 107) transacao
 from cdcli
 where cli_cod = :pcliente
 into :vcpf, :vtipcli, :vfatnum, :vfatcom, :vfatcep, :vfatend,
 :vfatbai, :vfatcid, :vfatest,
 :vfatnom, :vfaties, :vfatfis,
 :vfatpais, :vfatprov, :viss_aliq, :vtransacao;

 Select a.tra_irrf_aliq, a.tra_irrf_min,
        a.tra_inss_aliq, a.tra_inss_min,
        a.tra_imposto3_aliq, a.tra_imposto3_min,
        a.tra_imposto4_aliq, a.tra_imposto4_min,
        a.tra_imposto5_aliq, a.tra_imposto5_min,
        a.tra_imposto6_aliq, a.tra_imposto6_min,
        a.tra_retem_iss
   From cdtra1 a
  Where a.tra_cod = :vtransacao
 Into :vimp1_aliq, :vimp1_min, :vimp2_aliq, :vimp2_min,
      :vimp3_aliq, :vimp3_min, :vimp4_aliq, :vimp4_min,
      :vimp5_aliq, :vimp5_min, :vimp6_aliq, :vimp6_min,
      :viss_reter;

 viss_ret = 0;
 vimp1_ret = 0;
 vimp2_ret = 0;
 vimp3_ret = 0;
 vimp4_ret = 0;
 vimp5_ret = 0;
 vimp6_ret = 0;

 vtotal_ret = 0; 
 if ((viss_reter = 'T') and (viss_aliq > 0)) then
    vtotal_ret = vtotal_ret + viss_aliq;
 if ((vimp1_min < pvalor) and (vimp1_aliq > 0)) then
    vtotal_ret = vtotal_ret + vimp1_aliq;
 if ((vimp2_min < pvalor) and (vimp2_aliq > 0)) then
    vtotal_ret = vtotal_ret + vimp2_aliq;
 if ((vimp3_min < pvalor) and (vimp3_aliq > 0)) then
    vtotal_ret = vtotal_ret + vimp3_aliq; 
 if ((vimp4_min < pvalor) and (vimp4_aliq > 0)) then
    vtotal_ret = vtotal_ret + vimp4_aliq;
 if ((vimp5_min < pvalor) and (vimp5_aliq > 0)) then
    vtotal_ret = vtotal_ret + vimp5_aliq; 
 if ((vimp6_min < pvalor) and (vimp6_aliq > 0)) then
    vtotal_ret = vtotal_ret + vimp6_aliq;

 vtotal_bruto = pValor * 100 / (100 - vtotal_ret); 

 if ((viss_reter = 'T') and (viss_aliq > 0)) then
    viss_ret = vtotal_bruto / 100 * viss_aliq;
 if ((vimp1_min < pvalor) and (vimp1_aliq > 0)) then
    vimp1_ret = vtotal_bruto / 100 * vimp1_aliq;
 if ((vimp2_min < pvalor) and (vimp2_aliq > 0)) then
    vimp2_ret = vtotal_bruto / 100 * vimp2_aliq;
 if ((vimp3_min < pvalor) and (vimp3_aliq > 0)) then
    vimp3_ret = vtotal_bruto / 100 * vimp3_aliq;
 if ((vimp4_min < pvalor) and (vimp4_aliq > 0)) then
    vimp4_ret = vtotal_bruto / 100 * vimp4_aliq;
 if ((vimp5_min < pvalor) and (vimp5_aliq > 0)) then
    vimp5_ret = vtotal_bruto / 100 * vimp5_aliq;
 if ((vimp6_min < pvalor) and (vimp6_aliq > 0)) then
    vimp6_ret = vtotal_bruto / 100 * vimp6_aliq;

 SELECT VCODIGO FROM maxcodestmvvd1 into :vcodigo;
 
 vnumero = 0;
 Select max(vd1_not) from estmvvd1 where vd1_tra in (106,107,108,111) into :vnumero;
 if (vnumero is null) then
 vnumero = 0;
 vnumero = vnumero + 1;
 
 INSERT INTO ESTMVVD1 (VD1_ALM,VD1_CAD,VD1_COD,VD1_NOT,VD1_TRA,VD1_VEN,VD1_CAI,VD1_PGT,VD1_DESC_P,VD1_DESC_V,VD1_ACRESC,VD1_CLI,VD1_REP,VD1_TRANSF,VD1_FOR,VD1_TRS,VD1_ENT,VD1_VALOR_TOTALB,VD1_QUANTPECAS,VD1_VALOR_TOTALL,CLI_FIL,VD1_CFOP,VD1_VALOR_FRETE,VD1_FRETE_PORCONTA,VD1_ORIGEM,VD1_TIPO_FORMULARIO,VD1_PEDIDO,VD1_ESPECIE,VD1_MARCA,VD1_NUMERO,VD1_PESOBRUTO,VD1_PESOLIQUIDO,VD1_PLACADOVEICULO,VD1_UFDOVEICULO,VD1_RETIRADA,VD1_BASE_ICMS,VD1_VALOR_ICMS,VD1_CFOP_TRIBUTADO,VD1_ISS,VD1_COMP,VD1_VALOR_SEGURO,VD1_OUTRAS_DESPESAS,VD1_CLI2,VD1_GAR,VD1_SIT,VD1_VIS,VD1_HORA,VD1_IMO,VD1_USER,VD1_EQP,VD1_SEU_NUMERO,VD1_PAI,VD1_VALOR_IPI,VD1_ATUALIZADO,VD1_FILHO,VD1_TOTALL_SERVICO,VD1_TOTAL_NOTA_SEMDESCTO,VD1_QUANTIDADE,VD1_CANC,STATUS,VD1_TOTALB_PRODUTO,VD1_TOTALL_PRODUTO,VD1_TOTALB_SERVICO,VD1_QUANTSERVI,VD1_CLI_CONS_REV,VD1_PROC,VD1_PEDI,VD1_HORAF,VD1_PRESTSER,VD1_GERNF,VD1_CONTATO,VD1_IRRF,VD1_INSS,VD1_ALM_TRANSF,VD1_PRESTADOR,VD1_ECF,VD1_ALM_DIGITA,VD1_IMPOSTO3,VD1_IMPOSTO4,VD1_IMPOSTO5,VD1_IMPOSTO6,VD1_USE_SET_CMP,VD1_QTDFUN,VD1_CONTRATO,VD1_ATU,VD1_USER_CAD,VD1_USER_ATU,VD1_USE_CAD,VD1_USE_ATU,VD1_VEI,VD1_DATSAI,VD1_HORSAI,VD1_CLI_ISS,VD1_PLA,VD1_PLA2,VD1_CCUST,VD1_CCUST2,VD1_PROJ,VD1_PROJ2,VD1_ALM_ALTER,VD1_DAT_EMISSAO,VD1_TIPSERDDD,VD1_CPF,VD1_VAL_SUB_TRIBUTA,VD1_BASE_SUB_TRIBUTA,VD1_VALOR_TOTALB_SUB_TRIBUTA,VD1_ALIQ_ICMS_SIMPLES,VD1_CREDITO_ICMS_SIMPLES,VD1_CREDITO_ICMS_BASE,VD1_VALB_SUB_TRIBUTA,VD1_BASEB_SUB_TRIBUTA,VD1_COMISSAO_VEN_PORC,VD1_COMISSAO_VEN_VALOR,VD1_COMISSAO_REP_PORC,VD1_COMISSAO_REP_VALOR,VD1_CLI_LEASING,VD1_DEDUCAO,VD1_EXPORT_EMBARQ_UF,VD1_EXPORT_EMBARQ_LOCAL,VD1_SCAN,VD1_CLI_ISS_ALIQ,VD1_VIGENCIA_DDDRIN,VD1_DATA_ENTRADA,VD1_DATA_SAIDA,VD1_RESPONSAVEL_DDDRIN)
 VALUES (15,:PDATA,:VCODIGO,:vnumero,:vtransacao,0,0,18,0,0,0,:PCLIENTE,0,NULL,0,0,NULL,:vtotal_bruto,0,:PVALOR,NULL,0,0,'D','FAT',7,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0,0,'F',0,0,0,0,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0,NULL,NULL,:PVALOR,:vtotal_bruto,0,'FN','FINALIZADO',0,0,:vtotal_bruto,1,'C',NULL,NULL,NULL,1,NULL,NULL,:vimp1_ret,:vimp2_ret,NULL,NULL,NULL,15,:vimp3_ret,:vimp4_ret,:vimp5_ret,:vimp6_ret,NULL,NULL,NULL,'now',NULL,NULL,49,49,NULL,NULL,NULL,0,'0003000100010001000000000000000000000000',NULL,'0005000000000000000000000000000000000000',NULL,NULL,NULL,15,NULL,NULL,:vcpf,0,0,0,0,0,0,0,0,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0,NULL,NULL,NULL,NULL);
 
 INSERT INTO ESTMVVD2 (VD2_COD,VD2_BOL,VD2_ALM,VD2_CAD,VD2_PRO,VD2_VLR,VD2_QTD,VD2_ENT,VD2_COR,VD2_MED,VD2_SER,VD2_ITEM,VD2_ALIQUOTA_IPI,VD2_ALIQUOTA_ICMS,VD2_DESCRICAO,VD2_ALIQUOTA_ISS,REDUCAOBASEICMS,DESCONTOITEM,UNIDADE,CLASSIFICACAOFISCAL,VD2_MATERIA_APLICADA,VD2_SITUACAOTRIBUTARIA,VD2_FINALIDADE,VD2_TIPO,VD2_OBS1,VD2_OBS2,VD2_OBS3,VD2_OBS4,VD2_UNM,VD2_ALT,VD2_CMP,VD2_LRG,VD2_GAR,VD2_NSERIE,VD2_AMBIENTE,VD2_SUB_TRIBUTA,VD2_COMISSAO,VD2_CFOP,VD2_SEPARADO,VD2_SIT_PED,VD2_CSOSN,VD2_DATA_ENTREGA,VD2_ALIQ_IMPOSTOS,VD2_IPI_CST,VD2_PIS_CST,VD2_COFINS_CST,VD2_CALCULAR_ST)
 VALUES ((select vcodigo from maxtabelacodigo('ESTMVVD2','VD2_COD')),:vcodigo,15,:pdata,0,:vtotal_bruto,1,'N','','',10,1,0,0,'Elaboração De Programa De Computador',0,0,0,0,0,0,0,0,NULL,'','','','',0,0,0,0,NULL,'',0,0,0,'',NULL,NULL,'',NULL,NULL,0,0,0,'0');
 
 INSERT INTO ESTMVVD3 (VD3_COD,VD3_ALM,VD3_CAD,VD3_BOL,VD3_PGT,VD3_DSV,VD3_DSP,VD3_VLRL,VD3_ITEM,VD3_DEST,VD3_DESC_DUP)
 VALUES ((select vcodigo from maxtabelacodigo('ESTMVVD3','VD3_COD')),15,:pdata,:vcodigo,18,0,0,:pvalor,NULL,NULL,NULL);
 
 INSERT INTO ESTMVVD5 (VD5_COD,VD5_BOL,VD5_ENT,VD5_TIP,VD5_NUM,VD5_COP,VD5_CEP,VD5_END,VD5_BAI,VD5_CID,VD5_EST,VD5_REF,VD5_ALM,VD5_CAD,VD5_NOM,VD5_CNP,VD5_IES,VD5_FIS,VD5_TIPENT,VD5_PAIS,VD5_PROV)
 VALUES ((select vcodigo from maxtabelacodigo('ESTMVVD5','VD5_COD')),:vcodigo,:pcliente,'FAT',:vfatnum,:vfatcom,:vfatcep,:vfatend,:vfatbai,:vfatcid,:vfatest,NULL,15,'today',:vfatnom,:vcpf,:vfaties,:vfatfis,:vtipcli,:vfatpais,:vfatprov);
 suspend;
 end
^

ALTER PROCEDURE GERAR_NFES_MENSALIDADE (
    PMES TIMESTAMP)
RETURNS (
    VCLIENTE INTEGER,
    VDATA TIMESTAMP,
    VVALOR DOUBLE PRECISION,
    VDATAINICIO TIMESTAMP,
    VDATAFIM TIMESTAMP)
AS
begin
 select result from encodedate(extract(year from :pmes), extract(month from :pmes), 1) into :vdatainicio;
 vdatafim = addmonth(:vdatainicio,1)-1;
 For
 Select rec_cli, rec_emi, rec_val
 from mvcorec
 where
/* mvcorec.rec_pla = '0003000100010001000000000000000000000000' Retirado em 06/11/2020 */
   (mvcorec.rec_car = 8 or mvcorec.rec_car = 10)
 and mvcorec.rec_emi between :vdatainicio and :vdatafim
       and not exists (select vd1_cod
                         from estmvvd1
                        where estmvvd1.vd1_cli = mvcorec.rec_cli
                          and estmvvd1.vd1_cad = mvcorec.rec_emi
                          and estmvvd1.vd1_valor_totall = mvcorec.rec_val
                          and estmvvd1.vd1_canc <> 'C')
 Into :vcliente, :vdata, :vvalor do
 begin
 execute procedure gerar_nfe_mensalidade(:vcliente, :vdata, :vvalor);
 suspend;
 end
 end
^

ALTER PROCEDURE GERAR_UNIDADES_EMPREENDIMENTO (
    VEMPREENDIMENTO INTEGER,
    VBLOCO INTEGER,
    VNUMERO INTEGER)
RETURNS (
    EMPREENDIMENTO_TITULO VARCHAR(200),
    BLOCO_TITULO VARCHAR(200),
    IMOVEL_TITULO VARCHAR(200),
    IMOVEL_DATA TIMESTAMP)
AS
declare variable vnumerounidade integer;
declare variable vtotalunidades integer;
declare variable vimovelcodigo integer;
declare variable vtitulo varchar(100);
begin
 if (Coalesce(vBloco,0) <= 0) then
 begin
 vBloco = gen_id(gen_cdsire_bloco_id,1);
 insert into cdsire_bloco (bloco_codigo, empreendimento_codigo, bloco_titulo) values (:vBloco, :vEmpreendimento, 'BLOCO1');
 vtotalunidades = 0;
 end
 else
 begin
 Select count(imovel_codigo) from cdsire_imovel where bloco_codigo = :vbloco into vtotalunidades;
 vtotalunidades = coalesce(vtotalunidades,0);
 end
 
 for select i from linhas(:vNumero) into vnumerounidade do
 begin
 vimovelcodigo = GEN_ID(GEN_CDSIRE_IMOVEL_ID,1);
 vtitulo = cast(cast(vnumerounidade + vtotalunidades as integer) as varchar(10));
 while (strlen(vtitulo) < strlen(cast(cast(vnumero + vtotalunidades as integer) as varchar(10)))) do
 begin
    vtitulo = '0' || vtitulo;
 end
 insert into cdsire_imovel (imovel_codigo, bloco_codigo, imovel_titulo)
 values (:vimovelcodigo, :vBloco, :vtitulo);
 end
 
 for
 select e.empreendimento_titulo, b.bloco_titulo, imovel_titulo, imovel_data_cadastro
 from cdsire_imovel i
 left join cdsire_bloco b on (b.bloco_codigo = i.bloco_codigo)
 left join cdsire_empreendimento e on (e.empreendimento_codigo = b.empreendimento_codigo)
 into empreendimento_titulo, bloco_titulo, imovel_titulo, imovel_data
 do suspend;
 end
^

ALTER PROCEDURE INFORM_CLIENTES (
    PCODCLI INTEGER,
    PTIPO INTEGER)
RETURNS (
    PRICOMP TIMESTAMP,
    UTLCOMP TIMESTAMP,
    MVALCOMP DOUBLE PRECISION,
    MDATCOMP TIMESTAMP,
    MEDCOMP DOUBLE PRECISION,
    TITCARQTD INTEGER,
    TITCARVAL DOUBLE PRECISION,
    MEDATRAZ DOUBLE PRECISION,
    MACUMDAT TIMESTAMP,
    MACUMVAL DOUBLE PRECISION,
    TITPAGVAL DOUBLE PRECISION,
    TITPAGQTD INTEGER,
    TITATRVAL DOUBLE PRECISION,
    TITATRQTD INTEGER,
    TITVENVAL DOUBLE PRECISION,
    TITVENQTD INTEGER)
AS
 BEGIN
 
 IF (PTIPO=0) THEN
 BEGIN
 SELECT MIN(VD1_CAD), MAX(VD1_CAD) FROM ESTMVVD1, CDTRA1
 WHERE VD1_CANC <> 'C' AND TRA_TIP_TRA='VND' AND VD1_TRA=TRA_COD
 AND VD1_CLI= :PCODCLI
 INTO PRICOMP, UTLCOMP;
 
 SELECT FIRST 1 VD1_CAD, VD1_VALOR_TOTALL FROM ESTMVVD1, CDTRA1
 WHERE VD1_CANC <> 'C' AND TRA_TIP_TRA='VND' AND VD1_TRA=TRA_COD
 AND VD1_CLI= :PCODCLI
 ORDER BY VD1_VALOR_TOTALL DESC
 INTO MDATCOMP, MVALCOMP;
 
 SELECT SUM(VD1_VALOR_TOTALL)/COUNT(VD1_CAD) FROM ESTMVVD1, CDTRA1
 WHERE VD1_CANC <> 'C' AND TRA_TIP_TRA='VND' AND VD1_TRA=TRA_COD
 AND VD1_CLI= :PCODCLI
 INTO MEDCOMP;
 
 SELECT COUNT(BAI_COD), SUM(BAI_VAL) FROM MVCORECB
 WHERE BAI_CLI= :PCODCLI AND BAI_CART='S'
 INTO TITCARQTD ,TITCARVAL;
 
 SELECT SUM( (BAI_VEC - BAI_PGT) )/COUNT(BAI_COD) FROM MVCORECB
 WHERE BAI_CLI= :PCODCLI
 INTO MEDATRAZ;
 
 SELECT COUNT(BAI_COD), SUM(BAI_VAL) FROM MVCORECB
 WHERE BAI_CLI= :PCODCLI
 INTO TITPAGQTD, TITPAGVAL;
 
 SELECT COUNT(REC_COD), SUM(REC_VAL) FROM MVCOREC
 WHERE REC_CLI= :PCODCLI AND REC_VEC<CAST('today' as date)
 INTO TITATRQTD, TITATRVAL;
 
 SELECT COUNT(REC_COD), SUM(REC_VAL) FROM MVCOREC
 WHERE REC_CLI= :PCODCLI AND REC_VEC>=CAST('today' as date)
 AND REC_COBRAVEL='T'
 INTO TITVENQTD, TITVENVAL;
 
 SELECT FIRST 1 DATA, ACUM FROM MAIORACUMULO(:PCODCLI,0)
 ORDER BY ACUM DESC
 INTO MACUMDAT, MACUMVAL;
 END
 ELSE IF (PTIPO=1) THEN
 BEGIN
 SELECT MIN(VD1_CAD), MAX(VD1_CAD) FROM ESTMVVD1, CDTRA1
 WHERE VD1_CANC <> 'C' AND TRA_TIP_TRA='CMP' AND VD1_TRA=TRA_COD
 AND VD1_FOR= :PCODCLI
 INTO PRICOMP, UTLCOMP;
 
 SELECT FIRST 1 VD1_CAD, VD1_VALOR_TOTALL FROM ESTMVVD1, CDTRA1
 WHERE VD1_CANC <> 'C' AND TRA_TIP_TRA='CMP' AND VD1_TRA=TRA_COD
 AND VD1_FOR= :PCODCLI
 ORDER BY VD1_VALOR_TOTALL DESC
 INTO MDATCOMP, MVALCOMP;
 
 SELECT SUM(VD1_VALOR_TOTALL)/COUNT(VD1_CAD) FROM ESTMVVD1, CDTRA1
 WHERE VD1_CANC <> 'C' AND TRA_TIP_TRA='CMP' AND VD1_TRA=TRA_COD
 AND VD1_FOR= :PCODCLI
 INTO MEDCOMP;
 
 SELECT COUNT(BAI_COD), SUM(BAI_VAL) FROM MVCOPAGB
 WHERE BAI_FOR= :PCODCLI AND BAI_CAR='S'
 INTO TITCARQTD ,TITCARVAL;
 
 SELECT SUM( (BAI_VEC - BAI_PGT) )/COUNT(BAI_COD) FROM MVCOPAGB
 WHERE BAI_FOR= :PCODCLI
 INTO MEDATRAZ;
 
 SELECT COUNT(BAI_COD), SUM(BAI_VAL) FROM MVCOPAGB
 WHERE BAI_FOR= :PCODCLI
 INTO TITPAGQTD, TITPAGVAL;
 
 SELECT COUNT(PAG_COD), SUM(PAG_VAL) FROM MVCOPAG
 WHERE PAG_FOR= :PCODCLI AND PAG_VEC<CAST('today' as date)
 INTO TITATRQTD, TITATRVAL;
 
 SELECT COUNT(PAG_COD), SUM(PAG_VAL) FROM MVCOPAG
 WHERE PAG_FOR= :PCODCLI AND PAG_VEC>=CAST('today' as date)
 INTO TITVENQTD, TITVENVAL;
 
 SELECT FIRST 1 DATA, ACUM FROM MAIORACUMULO(:PCODCLI,1)
 ORDER BY ACUM DESC
 INTO MACUMDAT, MACUMVAL;
 END
 
 SUSPEND;
 
 END
^

ALTER PROCEDURE INSERE_ITENS_ZERADOS_CONTAGEM (
    P_CON_CON INTEGER,
    P_PRO_NOM_DE VARCHAR(100),
    P_PRO_NOM_ATE VARCHAR(100),
    P_MAR_ORD_DE VARCHAR(40),
    P_MAR_ORD_ATE VARCHAR(40),
    P_GRU_ORD_DE VARCHAR(40),
    P_GRU_ORD_ATE VARCHAR(40),
    P_SUB_GRU_ORD_DE VARCHAR(40),
    P_SUB_GRU_ORD_ATE VARCHAR(40),
    P_TIP_ORD_DE VARCHAR(40),
    P_TIP_ORD_ATE VARCHAR(40),
    P_CAT_ORD_DE VARCHAR(40),
    P_CAT_ORD_ATE VARCHAR(40),
    P_COR_NOM_DE VARCHAR(30),
    P_COR_NOM_ATE VARCHAR(30),
    P_MED_NOM_DE VARCHAR(30),
    P_MED_NOM_ATE VARCHAR(30))
AS
 DECLARE VARIABLE V_USA_COR VARCHAR(1);
 DECLARE VARIABLE V_USA_MEDIDA VARCHAR(1);
 DECLARE VARIABLE V_CODIGO INTEGER;
 DECLARE VARIABLE V_CON INTEGER;
 DECLARE VARIABLE V_CON_COD INTEGER;
 DECLARE VARIABLE V_CON_PRO INTEGER;
 DECLARE VARIABLE V_CON_COR VARCHAR(3);
 DECLARE VARIABLE V_CON_MED VARCHAR(3);
 DECLARE VARIABLE V_CON_QTD DOUBLE PRECISION;
 BEGIN
 
 SELECT P_USA_COR, P_USA_MEDIDA FROM PARAMET INTO :V_USA_COR, :V_USA_MEDIDA;
 SELECT vCodigo FROM MAXTABELACODIGO('MVCONTEST2','CON_COD') INTO V_CODIGO;
 IF((:V_USA_COR = 'T') OR (:V_USA_MEDIDA = 'T')) THEN
 BEGIN
 FOR SELECT
 :V_CODIGO,
 :P_CON_CON,
 CDPRO.PRO_COD,
 COALESCE(COR_COD, '000'),
 COALESCE(MED_COD, '000'),
 0
 From CDPRO
 LEFT JOIN CDMAR on PRO_MAR = MAR_COD
 LEFT JOIN CDTIPP on PRO_TIP = TIP_COD
 LEFT JOIN CDGRUP on PRO_GRU = CDGRUP.GRU_COD
 LEFT JOIN CDSUBGRUP on PRO_SUBGRU = CDSUBGRUP.GRU_COD
 LEFT JOIN CDCATPRO on PRO_CAT = CAT_COD
 LEFT JOIN CDPROCM on CDPROCM.PRO_PRO = CDPRO.PRO_COD
 LEFT JOIN CDCOR on CDPROCM.PRO_COR = CDCOR.COR_COD
 LEFT JOIN CDMED on CDPROCM.PRO_MED = CDMED.MED_COD
 WHERE NOT EXISTS(
 SELECT CON_PRO FROM MVCONTEST2
 WHERE CON_CON = :P_CON_CON
 AND CON_PRO = CDPRO.PRO_COD
 AND CON_COR = CDCOR.COR_COD
 AND CON_MED = CDMED.MED_COD
 )
 and ((:P_PRO_NOM_DE is Null) or ((PRO_NOM >= :P_PRO_NOM_DE) and (PRO_NOM <= :P_PRO_NOM_ATE)))
 and ((:P_MAR_ORD_DE is Null) or ((MAR_ORD >= :P_MAR_ORD_DE) and (MAR_ORD <= :P_MAR_ORD_ATE)))
 and ((:P_TIP_ORD_DE is Null) or ((TIP_ORD >= :P_TIP_ORD_DE) and (TIP_ORD <= :P_TIP_ORD_ATE)))
 and ((:P_CAT_ORD_DE is Null) or ((CAT_ORD >= :P_CAT_ORD_DE) and (CAT_ORD <= :P_CAT_ORD_ATE)))
 and ((:P_GRU_ORD_DE is Null) or ((CDGRUP.GRU_ORD >= :P_GRU_ORD_DE) and (CDGRUP.GRU_ORD <= :P_GRU_ORD_ATE)))
 and ((:P_SUB_GRU_ORD_DE is Null) or ((CDSUBGRUP.GRU_ORD >= :P_SUB_GRU_ORD_DE) and (CDSUBGRUP.GRU_ORD <= :P_SUB_GRU_ORD_ATE)))
 and ((:P_COR_NOM_DE is Null) or ((COR_NOM >= :P_COR_NOM_DE) and (COR_NOM <= :P_COR_NOM_ATE)))
 and ((:P_MED_NOM_DE is Null) or ((MED_NOM >= :P_MED_NOM_DE) and (MED_NOM <= :P_MED_NOM_ATE)))
 INTO :V_CON_COD, :V_CON, :V_CON_PRO, :V_CON_COR, :V_CON_MED, :V_CON_QTD DO
 BEGIN
 INSERT INTO MVCONTEST2(
 CON_COD,
 CON_CON,
 CON_PRO,
 CON_COR,
 CON_MED,
 CON_QTD
 )
 VALUES(
 :V_CODIGO,
 :V_CON,
 :V_CON_PRO,
 :V_CON_COR,
 :V_CON_MED,
 :V_CON_QTD
 );
 V_CODIGO = :V_CODIGO + 1;
 END
 END
 ELSE
 BEGIN
 FOR SELECT
 :V_CODIGO,
 :P_CON_CON,
 CDPRO.PRO_COD,
 0
 From CDPRO
 LEFT JOIN CDMAR on PRO_MAR = MAR_COD
 LEFT JOIN CDTIPP on PRO_TIP = TIP_COD
 LEFT JOIN CDGRUP on PRO_GRU = CDGRUP.GRU_COD
 LEFT JOIN CDSUBGRUP on PRO_SUBGRU = CDSUBGRUP.GRU_COD
 LEFT JOIN CDCATPRO on PRO_CAT = CAT_COD
 
 WHERE NOT EXISTS(
 SELECT CON_PRO FROM MVCONTEST2
 WHERE CON_CON = :P_CON_CON
 AND CON_PRO = CDPRO.PRO_COD
 )
 and ((:P_PRO_NOM_DE is Null) or ((PRO_NOM >= :P_PRO_NOM_DE) and (PRO_NOM <= :P_PRO_NOM_ATE)))
 and ((:P_MAR_ORD_DE is Null) or ((MAR_ORD >= :P_MAR_ORD_DE) and (MAR_ORD <= :P_MAR_ORD_ATE)))
 and ((:P_TIP_ORD_DE is Null) or ((TIP_ORD >= :P_TIP_ORD_DE) and (TIP_ORD <= :P_TIP_ORD_ATE)))
 and ((:P_CAT_ORD_DE is Null) or ((CAT_ORD >= :P_CAT_ORD_DE) and (CAT_ORD <= :P_CAT_ORD_ATE)))
 and ((:P_GRU_ORD_DE is Null) or ((CDGRUP.GRU_ORD >= :P_GRU_ORD_DE) and (CDGRUP.GRU_ORD <= :P_GRU_ORD_ATE)))
 and ((:P_SUB_GRU_ORD_DE is Null) or ((CDSUBGRUP.GRU_ORD >= :P_SUB_GRU_ORD_DE) and (CDSUBGRUP.GRU_ORD <= :P_SUB_GRU_ORD_ATE)))
 INTO :V_CON_COD, :V_CON, :V_CON_PRO, :V_CON_QTD DO
 BEGIN
 INSERT INTO MVCONTEST2(
 CON_COD,
 CON_CON,
 CON_PRO,
 CON_QTD
 )
 VALUES(
 :V_CODIGO,
 :V_CON,
 :V_CON_PRO,
 :V_CON_QTD
 );
 V_CODIGO = :V_CODIGO + 1;
 END
 END
 
 UPDATE CODIGO SET ULTIMOCODIGO =
 (SELECT MAX(CON_COD) FROM MVCONTEST2) WHERE TABELA = 'MVCONTEST2';
 
 END
^

ALTER PROCEDURE INSERE_IVAST_EM_PRODUTOS (
    PCLASSFISCAL INTEGER,
    PESTADO VARCHAR(2),
    PIVA DOUBLE PRECISION)
AS
 begin
 delete from cdprosubtributa a
 where exists
 (select * from cdpro where pro_cod = a.sub_pro and pro_cla = :pclassfiscal)
 and sub_est = (select est_cod from cdest a where a.est_est = :pestado);
 
 insert into cdprosubtributa
 Select pro_cod sub_pro,
 (select est_cod from cdest a where a.est_est = :pestado), :piva,
 'today' dat_cad, 'today' dat_atu,
 'A' ativo, 0 use_cad, 0 use_atu
 from cdpro
 where pro_cla = :pclassfiscal;
 
 suspend;
 end
^

ALTER PROCEDURE INVENTARIO_ESTOQUE_GRADE (
    PMODELO VARCHAR(3),
    P_ALM_FANT_DE VARCHAR(20),
    P_ALM_FANT_ATE VARCHAR(20),
    P_PRO_NOM_DE VARCHAR(100),
    P_PRO_NOM_ATE VARCHAR(100),
    P_COR_NOM_DE VARCHAR(30),
    P_COR_NOM_ATE VARCHAR(30),
    P_MED_NOM_DE VARCHAR(20),
    P_MED_NOM_ATE VARCHAR(20),
    P_MAR_ORD_DE VARCHAR(40),
    P_MAR_ORD_ATE VARCHAR(40),
    P_TIP_ORD_DE VARCHAR(40),
    P_TIP_ORD_ATE VARCHAR(40),
    P_CAT_ORD_DE VARCHAR(40),
    P_CAT_ORD_ATE VARCHAR(40),
    P_GRU_ORD_DE VARCHAR(40),
    P_GRU_ORD_ATE VARCHAR(40),
    P_SUB_GRU_ORD_DE VARCHAR(40),
    P_SUB_GRU_ORD_ATE VARCHAR(40),
    P_OPCAO VARCHAR(15))
RETURNS (
    PROCM_COD VARCHAR(21),
    PRO_COD INTEGER,
    PRO_INT VARCHAR(15),
    PRO_BAR VARCHAR(15),
    PRO_NOM VARCHAR(100),
    QUEBRA_COD VARCHAR(20),
    QUEBRA_NOM VARCHAR(30),
    COL1_NOM VARCHAR(30),
    COL2_NOM VARCHAR(30),
    COL3_NOM VARCHAR(30),
    COL4_NOM VARCHAR(30),
    COL5_NOM VARCHAR(30),
    COL6_NOM VARCHAR(30),
    COL7_NOM VARCHAR(30),
    COL8_NOM VARCHAR(30),
    COL9_NOM VARCHAR(30),
    COL10_NOM VARCHAR(30),
    COL11_NOM VARCHAR(30),
    COL12_NOM VARCHAR(30),
    COL13_NOM VARCHAR(30),
    COL14_NOM VARCHAR(30),
    COL15_NOM VARCHAR(30),
    COL16_NOM VARCHAR(30),
    COL17_NOM VARCHAR(30),
    COL18_NOM VARCHAR(30),
    COL19_NOM VARCHAR(30),
    COL20_NOM VARCHAR(30),
    COL1_VAL DOUBLE PRECISION,
    COL2_VAL DOUBLE PRECISION,
    COL3_VAL DOUBLE PRECISION,
    COL4_VAL DOUBLE PRECISION,
    COL5_VAL DOUBLE PRECISION,
    COL6_VAL DOUBLE PRECISION,
    COL7_VAL DOUBLE PRECISION,
    COL8_VAL DOUBLE PRECISION,
    COL9_VAL DOUBLE PRECISION,
    COL10_VAL DOUBLE PRECISION,
    COL11_VAL DOUBLE PRECISION,
    COL12_VAL DOUBLE PRECISION,
    COL13_VAL DOUBLE PRECISION,
    COL14_VAL DOUBLE PRECISION,
    COL15_VAL DOUBLE PRECISION,
    COL16_VAL DOUBLE PRECISION,
    COL17_VAL DOUBLE PRECISION,
    COL18_VAL DOUBLE PRECISION,
    COL19_VAL DOUBLE PRECISION,
    COL20_VAL DOUBLE PRECISION,
    LINHA_COD VARCHAR(20),
    LINHA_NOM VARCHAR(30),
    COL_EXCESSO DOUBLE PRECISION)
AS
 DECLARE VARIABLE VPRONOM VARCHAR(100);
 DECLARE VARIABLE VPROCOD INTEGER;
 DECLARE VARIABLE VPROINT VARCHAR(15);
 DECLARE VARIABLE VPROBAR VARCHAR(15);
 DECLARE VARIABLE VESTSAL DOUBLE PRECISION;
 DECLARE VARIABLE VQUEBRACOD VARCHAR(10);
 DECLARE VARIABLE VQUEBRA VARCHAR(30);
 DECLARE VARIABLE VLINHACOD VARCHAR(10);
 DECLARE VARIABLE VLINHA VARCHAR(30);
 DECLARE VARIABLE VPROCM VARCHAR(21);
 DECLARE VARIABLE VCOLUNACOD VARCHAR(10);
 DECLARE VARIABLE VCOLUNA VARCHAR(30);
 begin
 For
 Select PRO_COD, PRO_INT, PRO_BAR, PRO_NOM, EST_SAL, PROCM_COD, QUEBRA,
 QUEBRA_COD, LINHA, LINHA_COD, COLUNA, COLUNA_COD
 From estoque_aberto_ordenado(:PMODELO, :p_alm_fant_de, :p_alm_fant_ate,
 :p_pro_nom_de, :p_pro_nom_ate, :p_cor_nom_de, :p_cor_nom_ate,
 :p_med_nom_de, :p_med_nom_ate, :p_mar_ord_de, :p_mar_ord_ate,
 :p_tip_ord_de, :p_tip_ord_ate, :p_cat_ord_de, :p_cat_ord_ate,
 :p_gru_ord_de, :p_gru_ord_ate, :p_sub_gru_ord_de, :p_sub_gru_ord_ate)
 Into :vPROCOD, :vPROINT, :vPROBAR, :vPRONOM, :vESTSAL, :vPROCM, :vQUEBRA,
 :vQUEBRACOD, :vLINHA, :vLINHACOD, :VCOLUNA, :VCOLUNACOD do
 begin
 if ((PRO_NOM is null) or (vPRONOM <> PRO_NOM) or
 (vQUEBRA <> QUEBRA_NOM) or (vLINHA <> LINHA_NOM)) then
 begin
 P_OPCAO = UPPER(P_OPCAO);
 if(PRO_NOM is not null) then
 begin
 if (P_OPCAO = 'TODOS')then
 suspend;
 else if((P_OPCAO = 'ZERADOS')
 and (Coalesce(COL1_VAL, 0.0) = 0.0)
 and (Coalesce(COL2_VAL, 0.0) = 0.0)
 and (Coalesce(COL3_VAL, 0.0) = 0.0)
 and (Coalesce(COL4_VAL, 0.0) = 0.0)
 and (Coalesce(COL5_VAL, 0.0) = 0.0)
 and (Coalesce(COL6_VAL, 0.0) = 0.0)
 and (Coalesce(COL7_VAL, 0.0) = 0.0)
 and (Coalesce(COL8_VAL, 0.0) = 0.0)
 and (Coalesce(COL9_VAL, 0.0) = 0.0)
 and (Coalesce(COL10_VAL, 0.0) = 0.0)
 and (Coalesce(COL11_VAL, 0.0) = 0.0)
 and (Coalesce(COL12_VAL, 0.0) = 0.0)
 and (Coalesce(COL13_VAL, 0.0) = 0.0)
 and (Coalesce(COL14_VAL, 0.0) = 0.0)
 and (Coalesce(COL15_VAL, 0.0) = 0.0)
 and (Coalesce(COL16_VAL, 0.0) = 0.0)
 and (Coalesce(COL17_VAL, 0.0) = 0.0)
 and (Coalesce(COL18_VAL, 0.0) = 0.0)
 and (Coalesce(COL19_VAL, 0.0) = 0.0)
 and (Coalesce(COL20_VAL, 0.0) = 0.0)
 and (Coalesce(COL_EXCESSO, 0.0) = 0.0)) then
 suspend;
 else if((P_OPCAO = 'NAO_ZERADOS')
 and ((Coalesce(COL1_VAL, 0.0) <> 0.0)
 or (Coalesce(COL2_VAL, 0.0) <> 0.0)
 or (Coalesce(COL3_VAL, 0.0) <> 0.0)
 or (Coalesce(COL4_VAL, 0.0) <> 0.0)
 or (Coalesce(COL5_VAL, 0.0) <> 0.0)
 or (Coalesce(COL6_VAL, 0.0) <> 0.0)
 or (Coalesce(COL7_VAL, 0.0) <> 0.0)
 or (Coalesce(COL8_VAL, 0.0) <> 0.0)
 or (Coalesce(COL9_VAL, 0.0) <> 0.0)
 or (Coalesce(COL10_VAL, 0.0) <> 0.0)
 or (Coalesce(COL11_VAL, 0.0) <> 0.0)
 or (Coalesce(COL12_VAL, 0.0) <> 0.0)
 or (Coalesce(COL13_VAL, 0.0) <> 0.0)
 or (Coalesce(COL14_VAL, 0.0) <> 0.0)
 or (Coalesce(COL15_VAL, 0.0) <> 0.0)
 or (Coalesce(COL16_VAL, 0.0) <> 0.0)
 or (Coalesce(COL17_VAL, 0.0) <> 0.0)
 or (Coalesce(COL18_VAL, 0.0) <> 0.0)
 or (Coalesce(COL19_VAL, 0.0) <> 0.0)
 or (Coalesce(COL20_VAL, 0.0) <> 0.0)
 or (Coalesce(COL_EXCESSO, 0.0) <> 0.0))) then
 suspend;
 end
 COL1_VAL = null;
 COL2_VAL = null;
 COL3_VAL = null;
 COL4_VAL = null;
 COL5_VAL = null;
 COL6_VAL = null;
 COL7_VAL = null;
 COL8_VAL = null;
 COL9_VAL = null;
 COL10_VAL = null;
 COL11_VAL = null;
 COL12_VAL = null;
 COL13_VAL = null;
 COL14_VAL = null;
 COL15_VAL = null;
 COL16_VAL = null;
 COL17_VAL = null;
 COL18_VAL = null;
 COL19_VAL = null;
 COL20_VAL = null;
 COL_EXCESSO = 0;
 if ((PRO_NOM is null) or (vPRONOM <> PRO_NOM) or
 (vQUEBRA <> QUEBRA_NOM)) then
 begin
 COL1_NOM = null;
 COL2_NOM = null;
 COL3_NOM = null;
 COL4_NOM = null;
 COL5_NOM = null;
 COL6_NOM = null;
 COL7_NOM = null;
 COL8_NOM = null;
 COL9_NOM = null;
 COL10_NOM = null;
 COL11_NOM = null;
 COL12_NOM = null;
 COL13_NOM = null;
 COL14_NOM = null;
 COL15_NOM = null;
 COL16_NOM = null;
 COL17_NOM = null;
 COL18_NOM = null;
 COL19_NOM = null;
 COL20_NOM = null;
 end
 if (VPRONOM is not null) then
 begin
 PRO_NOM = VPRONOM;
 PROCM_COD = VPROCM;
 PRO_COD = VPROCOD;
 end
 PRO_INT = VPROINT;
 PRO_BAR = VPROBAR;
 if (VQUEBRA is not null) then
 begin
 QUEBRA_NOM = VQUEBRA;
 QUEBRA_COD = VQUEBRACOD;
 end
 if (VLINHA is not null) then
 begin
 LINHA_NOM = VLINHA;
 LINHA_COD = VLINHACOD;
 end
 end
 if ((COL1_NOM is NULL) or (COL1_NOM = VCOLUNA)) then
 begin
 COL1_NOM = VCOLUNA;
 if (COL1_VAL is null) then
 COL1_VAL = VESTSAL;
 else
 COL1_VAL = COL1_VAL + VESTSAL;
 end
 else if ((COL2_NOM is NULL) or (COL2_NOM = VCOLUNA)) then
 begin
 COL2_NOM = VCOLUNA;
 if (COL2_VAL is null) then
 COL2_VAL = VESTSAL;
 else
 COL2_VAL = COL2_VAL + VESTSAL;
 end
 else if ((COL3_NOM is NULL) or (COL3_NOM = VCOLUNA)) then
 begin
 if (COL3_NOM is null) then
 COL3_NOM = COL3_NOM;
 COL3_NOM = VCOLUNA;
 if (COL3_VAL is null) then
 COL3_VAL = VESTSAL;
 else
 COL3_VAL = COL3_VAL + VESTSAL;
 end
 else if ((COL4_NOM is NULL) or (COL4_NOM = VCOLUNA)) then
 begin
 COL4_NOM = VCOLUNA;
 if (COL4_VAL is null) then
 COL4_VAL = VESTSAL;
 else
 COL4_VAL = COL4_VAL + VESTSAL;
 end
 else if ((COL5_NOM is NULL) or (COL5_NOM = VCOLUNA)) then
 begin
 COL5_NOM = VCOLUNA;
 if (COL5_VAL is null) then
 COL5_VAL = VESTSAL;
 else
 COL5_VAL = COL5_VAL + VESTSAL;
 end
 else if ((COL6_NOM is NULL) or (COL6_NOM = VCOLUNA)) then
 begin
 COL6_NOM = VCOLUNA;
 if (COL6_VAL is null) then
 COL6_VAL = VESTSAL;
 else
 COL6_VAL = COL6_VAL + VESTSAL;
 end
 else if ((COL7_NOM is NULL) or (COL7_NOM = VCOLUNA)) then
 begin
 COL7_NOM = VCOLUNA;
 if (COL7_VAL is null) then
 COL7_VAL = VESTSAL;
 else
 COL7_VAL = COL7_VAL + VESTSAL;
 end
 else if ((COL8_NOM is NULL) or (COL8_NOM = VCOLUNA)) then
 begin
 COL8_NOM = VCOLUNA;
 if (COL8_VAL is null) then
 COL8_VAL = VESTSAL;
 else
 COL8_VAL = COL8_VAL + VESTSAL;
 end
 else if ((COL9_NOM is NULL) or (COL9_NOM = VCOLUNA)) then
 begin
 COL9_NOM = VCOLUNA;
 if (COL9_VAL is null) then
 COL9_VAL = VESTSAL;
 else
 COL9_VAL = COL9_VAL + VESTSAL;
 end
 else if ((COL10_NOM is NULL) or (COL10_NOM = VCOLUNA)) then
 begin
 COL10_NOM = VCOLUNA;
 if (COL10_VAL is null) then
 COL10_VAL = VESTSAL;
 else
 COL10_VAL = COL10_VAL + VESTSAL;
 end
 else if ((COL11_NOM is NULL) or (COL11_NOM = VCOLUNA)) then
 begin
 COL11_NOM = VCOLUNA;
 if (COL11_VAL is null) then
 COL11_VAL = VESTSAL;
 else
 COL11_VAL = COL11_VAL + VESTSAL;
 end
 else if ((COL12_NOM is NULL) or (COL12_NOM = VCOLUNA)) then
 begin
 COL12_NOM = VCOLUNA;
 if (COL12_VAL is null) then
 COL12_VAL = VESTSAL;
 else
 COL12_VAL = COL12_VAL + VESTSAL;
 end
 else if ((COL13_NOM is NULL) or (COL13_NOM = VCOLUNA)) then
 begin
 if (COL13_NOM is null) then
 COL13_NOM = COL13_NOM;
 COL13_NOM = VCOLUNA;
 if (COL13_VAL is null) then
 COL13_VAL = VESTSAL;
 else
 COL13_VAL = COL13_VAL + VESTSAL;
 end
 else if ((COL14_NOM is NULL) or (COL14_NOM = VCOLUNA)) then
 begin
 COL14_NOM = VCOLUNA;
 if (COL14_VAL is null) then
 COL14_VAL = VESTSAL;
 else
 COL14_VAL = COL14_VAL + VESTSAL;
 end
 else if ((COL15_NOM is NULL) or (COL15_NOM = VCOLUNA)) then
 begin
 COL15_NOM = VCOLUNA;
 if (COL15_VAL is null) then
 COL15_VAL = VESTSAL;
 else
 COL15_VAL = COL15_VAL + VESTSAL;
 end
 else if ((COL16_NOM is NULL) or (COL16_NOM = VCOLUNA)) then
 begin
 COL16_NOM = VCOLUNA;
 if (COL16_VAL is null) then
 COL16_VAL = VESTSAL;
 else
 COL16_VAL = COL16_VAL + VESTSAL;
 end
 else if ((COL17_NOM is NULL) or (COL7_NOM = VCOLUNA)) then
 begin
 COL17_NOM = VCOLUNA;
 if (COL17_VAL is null) then
 COL17_VAL = VESTSAL;
 else
 COL17_VAL = COL17_VAL + VESTSAL;
 end
 else if ((COL18_NOM is NULL) or (COL18_NOM = VCOLUNA)) then
 begin
 COL18_NOM = VCOLUNA;
 if (COL18_VAL is null) then
 COL18_VAL = VESTSAL;
 else
 COL18_VAL = COL18_VAL + VESTSAL;
 end
 else if ((COL19_NOM is NULL) or (COL19_NOM = VCOLUNA)) then
 begin
 COL19_NOM = VCOLUNA;
 if (COL19_VAL is null) then
 COL19_VAL = VESTSAL;
 else
 COL19_VAL = COL19_VAL + VESTSAL;
 end
 else if ((COL20_NOM is NULL) or (COL20_NOM = VCOLUNA)) then
 begin
 COL20_NOM = VCOLUNA;
 if (COL20_VAL is null) then
 COL20_VAL = VESTSAL;
 else
 COL20_VAL = COL20_VAL + VESTSAL;
 end
 else
 COL_EXCESSO = COL_EXCESSO + VESTSAL;
 end
 
 if (P_OPCAO = 'TODOS')then
 suspend;
 else if((P_OPCAO = 'ZERADOS')
 and (Coalesce(COL1_VAL, 0.0) = 0.0)
 and (Coalesce(COL2_VAL, 0.0) = 0.0)
 and (Coalesce(COL3_VAL, 0.0) = 0.0)
 and (Coalesce(COL4_VAL, 0.0) = 0.0)
 and (Coalesce(COL5_VAL, 0.0) = 0.0)
 and (Coalesce(COL6_VAL, 0.0) = 0.0)
 and (Coalesce(COL7_VAL, 0.0) = 0.0)
 and (Coalesce(COL8_VAL, 0.0) = 0.0)
 and (Coalesce(COL9_VAL, 0.0) = 0.0)
 and (Coalesce(COL10_VAL, 0.0) = 0.0)
 and (Coalesce(COL11_VAL, 0.0) = 0.0)
 and (Coalesce(COL12_VAL, 0.0) = 0.0)
 and (Coalesce(COL13_VAL, 0.0) = 0.0)
 and (Coalesce(COL14_VAL, 0.0) = 0.0)
 and (Coalesce(COL15_VAL, 0.0) = 0.0)
 and (Coalesce(COL16_VAL, 0.0) = 0.0)
 and (Coalesce(COL17_VAL, 0.0) = 0.0)
 and (Coalesce(COL18_VAL, 0.0) = 0.0)
 and (Coalesce(COL19_VAL, 0.0) = 0.0)
 and (Coalesce(COL20_VAL, 0.0) = 0.0)
 and (Coalesce(COL_EXCESSO, 0.0) = 0.0)) then
 suspend;
 else if((P_OPCAO = 'NAO_ZERADOS')
 and ((Coalesce(COL1_VAL, 0.0) <> 0.0)
 or (Coalesce(COL2_VAL, 0.0) <> 0.0)
 or (Coalesce(COL3_VAL, 0.0) <> 0.0)
 or (Coalesce(COL4_VAL, 0.0) <> 0.0)
 or (Coalesce(COL5_VAL, 0.0) <> 0.0)
 or (Coalesce(COL6_VAL, 0.0) <> 0.0)
 or (Coalesce(COL7_VAL, 0.0) <> 0.0)
 or (Coalesce(COL8_VAL, 0.0) <> 0.0)
 or (Coalesce(COL9_VAL, 0.0) <> 0.0)
 or (Coalesce(COL10_VAL, 0.0) <> 0.0)
 or (Coalesce(COL11_VAL, 0.0) <> 0.0)
 or (Coalesce(COL12_VAL, 0.0) <> 0.0)
 or (Coalesce(COL13_VAL, 0.0) <> 0.0)
 or (Coalesce(COL14_VAL, 0.0) <> 0.0)
 or (Coalesce(COL15_VAL, 0.0) <> 0.0)
 or (Coalesce(COL16_VAL, 0.0) <> 0.0)
 or (Coalesce(COL17_VAL, 0.0) <> 0.0)
 or (Coalesce(COL18_VAL, 0.0) <> 0.0)
 or (Coalesce(COL19_VAL, 0.0) <> 0.0)
 or (Coalesce(COL20_VAL, 0.0) <> 0.0)
 or (Coalesce(COL_EXCESSO, 0.0) <> 0.0))) then
 suspend;
 end
^

ALTER PROCEDURE ISALPHA (
    PTEXTO VARCHAR(254))
RETURNS (
    ALPHA INTEGER)
AS
 DECLARE VARIABLE VCNT INTEGER;
 DECLARE VARIABLE VCHARACT VARCHAR(1);
 begin
 vCNT = 0; ALPHA = vCNT;
 while (PTEXTO <> '') do
 begin
 
 vCharact = substring(Ptexto from 1 for 1);
 
 IF ((vCharact<>'0') AND (vCharact<>'1') AND (vCharact<>'2') AND (vCharact<>'3') AND (vCharact<>'4') AND (vCharact<>'5') AND
 (vCharact<>'6') AND (vCharact<>'7') AND (vCharact<>'8') AND (vCharact<>'9') AND
 (vCharact<>'''') AND (vCharact<>'.') AND (vCharact<>',') ) Then
 BEGIN
 vCNT = 1; PTEXTO='';
 END
 
 Ptexto = substring(PTEXTO from 2 for 254); ALPHA = VCNT;
 
 end
 
 suspend;
 end
^

ALTER PROCEDURE ITEMSTRING (
    PTEXTO VARCHAR(600),
    PITEM INTEGER,
    PSEPARADOR VARCHAR(1))
RETURNS (
    RESULTADO VARCHAR(600),
    ENCONTRADO INTEGER)
AS
 DECLARE VARIABLE I INTEGER;
 DECLARE VARIABLE VTEXTO VARCHAR(600);
 DECLARE VARIABLE VCNT INTEGER;
 DECLARE VARIABLE VCARAC VARCHAR(1);
 begin
 Encontrado = 0;
 i = 0;
 vTexto = "";
 vCnt = 1;
 while ((vCnt <= pItem) and (i <= 600) and (not pTexto is null)) do
 begin
 vCarac = substring(pTEXTO from 1 for 1);
 if (vCarac = pSeparador) then
 vCnt = vCnt + 1;
 else
 if (vCnt = pItem) then
 begin
 vTexto = vTexto || vCarac;
 Encontrado = 1;
 end
 i = i+1;
 pTexto = substring(pTexto from 2 for 600);
 end
 Resultado = vTexto;
 suspend;
 end
^

ALTER PROCEDURE LEFTTRIM (
    TEXTO VARCHAR(100))
RETURNS (
    RESULT VARCHAR(100))
AS
 begin
 while ((texto is not null) and (texto <> "") and (substring(texto from 1 for 1) = " ")) do
 texto = substring(texto from 2 for 100);
 result = texto;
 suspend;
 end
^

ALTER PROCEDURE LINHAS (
    N INTEGER)
RETURNS (
    I INTEGER)
AS
begin
   i = n;
   while (i > 0) do
     begin
       suspend;
       i = i - 1;
     end
end
^

ALTER PROCEDURE LISTADIAS (
    PTIPO INTEGER)
RETURNS (
    LOOK VARCHAR(4),
    DAT_ATU TIMESTAMP,
    ALM_NOM VARCHAR(50),
    ALM_COD INTEGER,
    ALM_FANT VARCHAR(20))
AS
 DECLARE VARIABLE VDATATU DATE;
 DECLARE VARIABLE VCODALM INTEGER;
 BEGIN
 VDATATU="01/01/1001"; VCODALM=0;
 IF (pTipo = 0) THEN
 BEGIN
 FOR SELECT Distinct "LOOK" As LOOK, MVCOREC.REC_DAT AS DAT_ATU,CDALM.ALM_NOM, CDALM.ALM_COD,
 CDALM.ALM_FANT
 FROM CDALM, MVCOREC
 WHERE REC_BAIVER = "N" AND DAT_ATU<>REC_DAT
 AND REC_ORI = ALM_COD
 UNION ALL
 SELECT Distinct "LOOK" As LOOK, MVCOREC.DAT_ATU,CDALM.ALM_NOM, CDALM.ALM_COD,
 CDALM.ALM_FANT
 FROM CDALM, MVCOREC
 WHERE REC_BAIVER = "N" AND DAT_ATU=REC_DAT
 AND REC_ORI = ALM_COD
 ORDER BY 2,3
 INTO LOOK, DAT_ATU, ALM_NOM, ALM_COD, ALM_FANT
 DO
 
 BEGIN
 IF ( (VDATATU<>:DAT_ATU) OR (VCODALM<>:ALM_COD) ) THEN
 BEGIN
 SUSPEND;
 END
 VDATATU=:DAT_ATU;
 VCODALM=:ALM_COD;
 END
 
 END
 ELSE
 BEGIN
 FOR SELECT DISTINCT "LOOK" As LOOK, MVCOPAG.DAT_ATU AS DAT_ATU,CDALM.ALM_NOM, CDALM.ALM_COD,
 CDALM.ALM_FANT
 from CDALM, MVCOPAG
 where PAG_BAIVER = "N"
 and PAG_ORI = ALM_COD and MVCOPAG.DAT_ATU is not null
 order by 2,3
 INTO LOOK, DAT_ATU, ALM_NOM, ALM_COD, ALM_FANT
 DO
 
 BEGIN
 IF ( (VDATATU<>:DAT_ATU) OR (VCODALM<>:ALM_COD) ) THEN
 BEGIN
 SUSPEND;
 END
 VDATATU=:DAT_ATU;
 VCODALM=:ALM_COD;
 END
 END
 END
^

ALTER PROCEDURE LISTAGEM_CONTAGEM_OFICIAL (
    PALMOX_DE VARCHAR(20),
    PALMOX_ATE VARCHAR(20),
    PDATA_DE TIMESTAMP,
    PDATA_ATE TIMESTAMP,
    PSETOR_DE INTEGER,
    PSETOR_ATE INTEGER,
    PPRODUTO_DE VARCHAR(100),
    PPRODUTO_ATE VARCHAR(100),
    PCOR_DE VARCHAR(3),
    PCOR_ATE VARCHAR(3),
    PMEDIDA_DE VARCHAR(3),
    PMEDIDA_ATE VARCHAR(3),
    PINCOMPLETAS INTEGER,
    PDIVERGENTES INTEGER,
    POFICIAL INTEGER,
    PSEMSETOR INTEGER,
    PSEMESTOQUE INTEGER,
    PUSACOR INTEGER,
    PUSAMEDIDA INTEGER,
    PCASAS_DECIMAIS INTEGER,
    PNUM_CONT_EXIGIDAS INTEGER,
    PTIPO INTEGER)
RETURNS (
    CON_ALM INTEGER,
    ALM_FANT VARCHAR(20),
    CON_SET INTEGER,
    CON_NUM INTEGER,
    CON_DAT TIMESTAMP,
    CON_PRO INTEGER,
    PRO_NOM VARCHAR(100),
    PRO_INT VARCHAR(15),
    PRO_BAR VARCHAR(15),
    PRO_CODAUX1 VARCHAR(20),
    PRO_CODAUX2 VARCHAR(20),
    PRO_CODCM VARCHAR(21),
    CON_COR VARCHAR(3),
    COR_NOM VARCHAR(30),
    CON_MED VARCHAR(3),
    MED_NOM VARCHAR(30),
    CON_QTD DOUBLE PRECISION,
    CON_QTD1 DOUBLE PRECISION,
    CON_QTD2 DOUBLE PRECISION,
    CON_QTD3 DOUBLE PRECISION,
    CON_QTD4 DOUBLE PRECISION,
    CON_QTD5 DOUBLE PRECISION,
    CON_FINAL DOUBLE PRECISION,
    CON_EST DOUBLE PRECISION,
    CON_DIFERENCA DOUBLE PRECISION,
    CON_PROPORCAO DOUBLE PRECISION,
    CON_OK INTEGER,
    CON_COMPLETA INTEGER)
AS
 declare variable valmox integer;
 declare variable vsetor integer;
 declare variable vdata date;
 declare variable vnumero integer;
 declare variable vproduto integer;
 declare variable vcor varchar(3);
 declare variable vmedida varchar(3);
 declare variable vquantidade double precision;
 declare variable vest integer;
 declare variable vfinal double precision;
 declare variable vanula_num_cont integer;
 declare variable vanula_setor integer;
 declare variable valteracoes integer;
 declare variable vsetor_ant integer;
 declare variable vcusto_medio double precision;
 declare variable vprocm varchar(21);
 begin
 if (PUSACOR is null) then
 PUSACOR = 0;
 if (PUSAMEDIDA is null) then
 PUSAMEDIDA = 0;
 if (PINCOMPLETAS is null) then
 PINCOMPLETAS = 0;
 if (PDIVERGENTES is null) then
 PDIVERGENTES = 0;
 if (POFICIAL is null) then
 POFICIAL = 0;
 if (POFICIAL = 1) then
 VANULA_NUM_CONT = 0;
 else
 VANULA_NUM_CONT = 1;
 if (PSEMSETOR is null) then
 PSEMSETOR = 0;
 if (PSEMSETOR = 1) then
 VANULA_SETOR = 0;
 else
 VANULA_SETOR = 1;
 if (PSEMESTOQUE is null) then
 PSEMESTOQUE = 0;
 if (PALMOX_ATE IS NULL) then
 PALMOX_ATE = PALMOX_DE;
 if (PSETOR_ATE IS NULL) then
 PSETOR_ATE = PSETOR_DE;
 if (PPRODUTO_ATE IS NULL) then
 PPRODUTO_ATE = PPRODUTO_DE;
 if (PCOR_ATE IS NULL) then
 PCOR_ATE = PCOR_DE;
 if (PMEDIDA_ATE IS NULL) then
 PMEDIDA_ATE = PMEDIDA_DE;
 
 if ((PTIPO is null) or (PTIPO > 2) or (PTIPO < 0)) then
 PTIPO = 0;
 if (PDATA_ATE is null) then
 PDATA_ATE = PDATA_DE;
 CON_ALM = null;
 CON_SET = null;
 CON_NUM = null;
 CON_DAT = null;
 CON_PRO = null;
 CON_COR = null;
 CON_MED = null;
 CON_QTD = null;
 CON_QTD1 = null;
 CON_QTD2 = null;
 CON_QTD3 = null;
 CON_QTD4 = null;
 CON_QTD5 = null;
 VFINAL = 0;
 CON_FINAL = 0;
 CON_OK = 0;
 
 For
 Select CON_ALM, ALM_FANT, CON_SET, CON_NUM * :VANULA_NUM_CONT,
 CON_DAT, CDPRO.PRO_COD, PRO_NOM, PRO_INT, PRO_BAR, PRO_CODAUX1, PRO_CODAUX2,
 COR_COD, COR_NOM, MED_COD, MED_NOM, CM.PRO_COD, SUM(CON_QTD * :VANULA_NUM_CONT)
 From
 CDPRO
 left outer join CDALM on ((:palmox_de is null) or (alm_fant between :palmox_de and :palmox_ate))
 left outer join MVCONTEST1 C1 on ((C1.CON_ALM = ALM_COD) and ((:pdata_de is null) or (CON_DAT between :PDATA_DE and :PDATA_ATE)))
 left outer join CDPROCM CM on ((CDPRO.PRO_COD = CM.PRO_PRO))
 left outer join CDCOR on (CM.PRO_COR = COR_COD)
 left outer join CDMED on (CM.PRO_MED = MED_COD)
 left join MVCONTEST2 C2 on ((C1.CON_COD = C2.CON_CON) and (C2.CON_PRO = CDPRO.PRO_COD)
 and ((:PUSACOR = 0) or (C2.CON_COR = CM.PRO_COR))
 and ((:PUSAMEDIDA = 0) or (C2.CON_MED = CM.PRO_MED)))
 Where ((:PTIPO <> 1) or (C2.CON_CON is null))
 And ((:PTIPO <> 0) or (C1.CON_COD = C2.CON_CON))
 And ((:psetor_de is null) or (con_set between :psetor_de and :psetor_ate))
 And ((:pproduto_de is null) or (pro_nom between :pproduto_de and :pproduto_ate))
 And ((:pcor_de is null) or (con_cor between :pcor_de and :pcor_ate))
 And ((:pmedida_de is null) or (con_med between :pmedida_de and :pmedida_ate))
 Group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16
 Order by 2, 3, 5, 7, 13, 15, 3, 4
 Into VALMOX, ALM_FANT, VSETOR, VNUMERO, VDATA, VPRODUTO, PRO_NOM, PRO_INT,
 PRO_BAR, PRO_CODAUX1, PRO_CODAUX2, VCOR, COR_NOM, VMEDIDA, MED_NOM,
 VPROCM, VQUANTIDADE do
 begin
 if (((CON_ALM <> VALMOX) or (CON_DAT <> VDATA) or (CON_PRO <> VPRODUTO) or
 (CON_COR <> VCOR) or (CON_MED <> VMEDIDA)) and (PSEMSETOR = 1)) then
 begin
 Suspend;
 CON_FINAL = 0;
 end
 if ((CON_ALM <> VALMOX) or (CON_ALM is null) or
 (CON_DAT <> VDATA) or (CON_DAT is null) or
 (CON_PRO <> VPRODUTO) or (CON_PRO is null) or
 (CON_COR <> VCOR) or (CON_COR is null) or
 (CON_MED <> VMEDIDA) or (CON_MED is null) or
 (VSETOR_ANT <> VSETOR) or (VSETOR_ANT is null)) then
 begin
 if (PSEMSETOR <> 1) then
 CON_FINAL = 0;
 PRO_CODCM = VPROCM;
 if ((PNUM_CONT_EXIGIDAS > 0) AND (POFICIAL = 1) AND (VALMOX is not null)) then
 Execute procedure valida_item_cont_no_setor(:VALMOX,:VPRODUTO,
 :VCOR,:VMEDIDA,:VDATA,:VSETOR,:PNUM_CONT_EXIGIDAS)
 returning_values(:VFINAL,:CON_QTD1,:CON_QTD2,:CON_QTD3,:CON_QTD4,
 :CON_QTD5,:CON_OK,CON_COMPLETA);
 else
 begin
 VFINAL = VQUANTIDADE;
 CON_COMPLETA = 1;
 end
 CON_FINAL = CON_FINAL + VFINAL;
 
 if (PSEMESTOQUE = 0) then
 begin
 Execute Procedure estoque_na_data(:PUSACOR,:PUSAMEDIDA,:VDATA,
 :VALMOX,:VPRODUTO,:VCOR,:VMEDIDA,:PCASAS_DECIMAIS)
 returning_values(:VCUSTO_MEDIO,:VEST);
 CON_DIFERENCA = VEST - VFINAL;
 if ((VFINAL > VEST) And (VEST <> 0)) then
 CON_PROPORCAO = VFINAL / VEST;
 else
 if ((VEST > VFINAL) And (VFINAL <> 0)) then
 CON_PROPORCAO = VEST / VFINAL;
 else
 CON_PROPORCAO = 0;
 end
 else
 begin
 VEST = 0;
 CON_PROPORCAO = 0;
 CON_DIFERENCA = 0;
 end
 end
 CON_ALM = VALMOX;
 CON_SET = VSETOR * :VANULA_SETOR;
 VSETOR_ANT = VSETOR;
 CON_NUM = VNUMERO;
 CON_DAT = VDATA;
 CON_PRO = VPRODUTO;
 PRO_CODCM = VPROCM;
 CON_COR = VCOR;
 CON_MED = VMEDIDA;
 if (CON_NUM = 1) then
 CON_QTD = VQUANTIDADE;
 CON_EST = VEST;
 if (((PDIVERGENTES = 0) or (CON_OK <> 1)) and
 ((PINCOMPLETAS = 0) or (CON_COMPLETA <> 1)) and
 (PSEMSETOR = 0)) then
 Suspend;
 end
 if (PSEMSETOR = 1) then
 Suspend;
 end
^

ALTER PROCEDURE LISTAR_COMPONENTES_PRODUTO (
    PPRODUTO INTEGER,
    PQUANTIDADE DOUBLE PRECISION,
    PNIVEL VARCHAR(1000),
    PTESTAESTOQUE INTEGER,
    PFILTRONIVEL INTEGER)
RETURNS (
    PRO_PAI INTEGER,
    PRO_NIV VARCHAR(1000),
    PRO_COD INTEGER,
    PRO_NOM VARCHAR(100),
    PRO_INT VARCHAR(15),
    PRO_BAR VARCHAR(15),
    PRO_QTD DOUBLE PRECISION,
    PRO_VLR DOUBLE PRECISION,
    PRO_SEQ INTEGER,
    UNI_COD INTEGER,
    UNI_NOM VARCHAR(30),
    UNI_SIG VARCHAR(5),
    EST_SAL DOUBLE PRECISION)
AS
 declare variable vprocod integer;
 declare variable vproqtd double precision;
 declare variable vproniv varchar(1000);
 declare variable vcnt integer;
 begin
 PQUANTIDADE = COALESCE(PQUANTIDADE, 1);
 PNIVEL = COALESCE(PNIVEL,'');
 PTESTAESTOQUE = COALESCE(PTESTAESTOQUE,0);
 PFILTRONIVEL = COALESCE(PFILTRONIVEL,0);
 vCNT = 0;
 For
 Select
 cdpro.pro_cod, cdpro.pro_nom, cdpro.pro_int, cdpro.pro_bar,
 cdprocusto.pro_qtd * :PQUANTIDADE, cdprocusto.pro_vlr, cdprocusto.pro_seq,
 cdunidade.codigo, cdunidade.nome, cdunidade.sigla, Coalesce(mvest.est_sal, 0)
 From cdalm2, cdpro
 inner join cdprocusto on (cdprocusto.pro_cus = cdpro.pro_cod)
 left join cdunidade on (cdunidade.codigo = cdpro.pro_uni)
 left join mvest on (mvest.est_pro = cdpro.pro_cod and mvest.est_alm = cdalm2.alm_cod)
 Where cdprocusto.pro_pro = :PPRODUTO
 Order by cdprocusto.pro_seq, cdpro.pro_nom
 Into PRO_COD, PRO_NOM, PRO_INT, PRO_BAR, PRO_QTD, PRO_VLR, PRO_SEQ,
 UNI_COD, UNI_NOM, UNI_SIG, EST_SAL do
 begin
 vCNT = vCNT + 1;
 PRO_NIV = rtrim(ltrim(Cast(vCNT as varchar(1000))));
 while (strlen(PRO_NIV) < 7) do
 PRO_NIV = '0' || PRO_NIV;
 PRO_NIV = PNIVEL || PRO_NIV;
 PRO_PAI = PPRODUTO;
 
 if (((PFILTRONIVEL <= 0) OR (PFILTRONIVEL*7 >= strlen(pro_niv))) AND ((PTESTAESTOQUE <> 1) or (Coalesce(EST_SAL, 0) < Coalesce(PRO_QTD, 0)))) then
 begin
 suspend;
 vPROCOD = PRO_COD;
 vPROQTD = PRO_QTD;
 vPRONIV = PRO_NIV;
 For
 Select PRO_PAI, PRO_NIV, PRO_COD, PRO_NOM, PRO_INT, PRO_BAR, PRO_QTD, PRO_VLR, PRO_SEQ, UNI_COD, UNI_NOM, UNI_SIG, EST_SAL
 From LISTAR_COMPONENTES_PRODUTO(:vPROCOD, :vPROQTD, :vPRONIV, :PTESTAESTOQUE, :PFILTRONIVEL)
 Order By PRO_NIV, PRO_SEQ, PRO_NOM
 Into PRO_PAI, PRO_NIV, PRO_COD, PRO_NOM, PRO_INT, PRO_BAR, PRO_QTD, PRO_VLR, PRO_SEQ, UNI_COD, UNI_NOM, UNI_SIG, EST_SAL
 Do Suspend;
 end
 end
 end
^

ALTER PROCEDURE LISTAR_CUPONS_RELACIONADOS (
    VD1_COD VARCHAR(13))
RETURNS (
    RESULT BLOB SUB_TYPE 1 SEGMENT SIZE 80)
AS
 declare variable numero integer;
 declare variable texto varchar(2000);
 begin
 TEXTO = '';
 For
 Select VD1_NOT
 From estmvvd1 E1, estmvvd9 E9
 Where E1.vd1_cod = E9.vd9_bol
 And E9.vd9_asc = :VD1_COD
 Into NUMERO do
 if (TEXTO <> '') then
 TEXTO = TEXTO || ', ' || NUMERO;
 else
 TEXTO = NUMERO;
 For
 Select VD1_NOT
 From estmvvd1 E1, estmvvd9 E9
 Where E1.vd1_cod = E9.vd9_asc
 And E9.vd9_bol = :VD1_COD
 Into NUMERO do
 if (TEXTO <> '') then
 TEXTO = TEXTO || ', ' || NUMERO;
 else
 TEXTO = NUMERO;
 RESULT = string2blob(TEXTO);
 suspend;
 end
^

ALTER PROCEDURE MAIORACUMULO (
    PCODCLI INTEGER,
    PTIPO INTEGER)
RETURNS (
    DATA TIMESTAMP,
    ACUM DOUBLE PRECISION)
AS
 DECLARE VARIABLE VRECEBER DOUBLE PRECISION;
 DECLARE VARIABLE VPAGAR DOUBLE PRECISION;
 DECLARE VARIABLE VDATA DATE;
 BEGIN
 
 ACUM = 0;
 
 IF (PTIPO=0) THEN
 BEGIN
 FOR SELECT VD1_CAD AS DATA, SUM(VD1_VALOR_TOTALL) AS RECEBER, 0.00 AS PAGAR FROM ESTMVVD1,CDTRA1
 WHERE VD1_CLI=:PCODCLI AND VD1_TRA=TRA_COD AND TRA_TIP_TRA='VND'
 GROUP BY VD1_CAD
 UNION ALL
 SELECT BAI_PGT AS DATA, 0.00 AS RECEBER, SUM(BAI_VAL) AS PAGAR FROM MVCORECB
 WHERE BAI_CLI=:PCODCLI
 GROUP BY BAI_PGT
 ORDER BY 1
 INTO VDATA, VRECEBER, VPAGAR DO
 
 BEGIN
 ACUM = ACUM + (VRECEBER-VPAGAR);
 DATA = VDATA;
 SUSPEND;
 END
 END
 ELSE IF (PTIPO=1) THEN
 BEGIN
 FOR SELECT VD1_CAD AS DATA, SUM(VD1_VALOR_TOTALL) AS RECEBER, 0.00 AS PAGAR FROM ESTMVVD1,CDTRA1
 WHERE VD1_FOR=:PCODCLI AND VD1_TRA=TRA_COD AND TRA_TIP_TRA='CMP'
 GROUP BY VD1_CAD
 UNION ALL
 SELECT BAI_PGT AS DATA, 0.00 AS RECEBER, SUM(BAI_VAL) AS PAGAR FROM MVCOPAGB
 WHERE BAI_FOR=:PCODCLI
 GROUP BY BAI_PGT
 ORDER BY 1
 INTO VDATA, VRECEBER, VPAGAR DO
 
 BEGIN
 ACUM = ACUM + (VRECEBER-VPAGAR);
 DATA = VDATA;
 SUSPEND;
 END
 END
 END
^

ALTER PROCEDURE MAXCODESTMVVD1
RETURNS (
    VCODIGO VARCHAR(13))
AS
 DECLARE VARIABLE VTABCOD INTEGER;
 DECLARE VARIABLE VMAXCOD INTEGER;
 DECLARE VARIABLE VVD1COD VARCHAR(13);
 DECLARE VARIABLE VFLAG VARCHAR(30);
 DECLARE VARIABLE VFILIAL VARCHAR(3);
 begin
 Select Result
 from completa_string(cast((Select alm_cod from cdalm2) as varchar(3)), '0', 3, -1)
 Into vFilial;
 
 select ULTIMOCODIGO, TABELA
 from CODIGO
 where TABELA='ESTMVVD1'
 into vTabCod, vFlag;
 
 if (vTabCod is null) then
 vTabCod = 0;
 
 Select Max(vd1_cod)
 from estmvvd1
 Where (Substring(Vd1_Cod from 11 for 3) = :vFilial)
 Into vVd1Cod;
 
 if (vVd1Cod is null) then
 vVd1Cod = '0000000000000';
 
 vMaxCod = Cast(Substring(vVd1Cod from 1 for 10) as Integer);
 
 if (vTabCod < vMaxCod) then
 vTabCod = vMaxCod;
 
 vTabCod = vTabCod + 1;
 
 if (vFlag is null) then
 Insert Into CODIGO Values('ESTMVVD1', :vTabCod);
 else
 Update CODIGO set ULTIMOCODIGO = :vTabCod Where TABELA = 'ESTMVVD1';
 
 vCodigo = Cast(vTabCod as varchar(10)) || vFilial;
 
 Select Result
 From completa_string(:vCodigo,'0',13,-1)
 into vCodigo;
 
 Suspend;
 end
^

ALTER PROCEDURE MAXCODMVLGED
RETURNS (
    VCODIGO INTEGER)
AS
declare variable vAuxCod integer;
declare variable vflag varchar(30);
begin
   select ULTIMOCODIGO, TABELA
   from CODIGO
   where TABELA='MVLGED'
   into vCodigo, vFlag;
   Select Max(cast(dob_cod as integer))
   from mvlged
   Into vAuxCod;
   if (vCodigo is null) then
      vCodigo = 0;
   if (vAuxCod is null) then
      vAuxCod = 0;
   if (vCodigo < vAuxCod) then
      vCodigo = vAuxCod;
   vCodigo = vCodigo + 1;
   if (vFlag is null) then
      Insert Into CODIGO Values('MVLGED', :vCodigo);
   else
      Update CODIGO set ULTIMOCODIGO = :vCodigo Where TABELA = 'MVLGED';
  Suspend;
end
^

ALTER PROCEDURE MAXTABELACDCLICOMSUFIXO
RETURNS (
    VCODIGO INTEGER)
AS
 declare variable vtabcod integer;
 declare variable vmaxcod integer;
 declare variable vfilial integer;
 declare variable vflag varchar(30);
 begin
 
 Select Result
 from completa_string(cast((Select alm_cod from cdalm2) as varchar(3)), '0', 3, -1)
 Into vFilial;
 
 select ULTIMOCODIGO, TABELA
 from CODIGO
 where TABELA='CDCLI'
 into vTabCod, vFlag;
 
 if (vTabCod is null) then
 vTabCod = 0;
 
 Select cast(substr(Max(cli_cod), 1, strlen(Max(cli_cod))-3) as integer)
 from cdcli
 Where cli_cod > 1000
 and cast(substr(cli_cod, strlen(cli_cod)-2, strlen(cli_cod)) as integer) = :vFilial
 Into vMaxCod;
 
 if (vTabCod < vMaxCod) then
 vTabCod = vMaxCod;
 
 vTabCod = vTabCod + 1;
 
 if (vFlag is null) then
 Insert Into CODIGO Values('CDCLI', :vTabCod);
 else
 Update CODIGO set ULTIMOCODIGO = :vTabCod Where TABELA = 'CDCLI';
 
 vCodigo = vTabCod * 1000 + vFilial;
 
 Suspend;
 end
^

ALTER PROCEDURE MAXTABELACODIGO (
    PTABELA VARCHAR(50),
    PCAMPO VARCHAR(50))
RETURNS (
    VCODIGO INTEGER)
AS
 DECLARE VARIABLE PSQL VARCHAR(200);
 DECLARE VARIABLE VAUXCOD INTEGER;
 DECLARE VARIABLE VFLAG VARCHAR(30);
 begin
 
 vAuxCod = 0;
 
 select ULTIMOCODIGO, TABELA
 from CODIGO
 where TABELA=:pTABELA
 into vCodigo, vFlag;
 
 PSQL = 'Select Max(cast(' || pCAMPO || ' as integer)) from ' || pTABELA;
 
 execute statement 'Select Max(cast(' || :pCAMPO || ' as integer)) from ' || :pTABELA Into :vAuxCod;
 
 if (vCodigo is null) then
 vCodigo = 0;
 
 if (vAuxCod is null) then
 vAuxCod = 0;
 
 if (vCodigo < vAuxCod) then
 vCodigo = vAuxCod;
 
 vCodigo = vCodigo + 1;
 
 if (vFlag is null) then
 Insert Into CODIGO Values(:pTABELA, :vCodigo);
 else
 Update CODIGO set ULTIMOCODIGO = :vCodigo Where TABELA = :pTABELA;
 Suspend;
 end
^

ALTER PROCEDURE MAXTABELACODIGOCOMSUFIXO (
    PTABELA VARCHAR(50),
    PCAMPO VARCHAR(50))
RETURNS (
    VCODIGO INTEGER)
AS
 declare variable vtabcod integer;
 declare variable vmaxcod integer;
 declare variable vfilial integer;
 declare variable vflag varchar(30);
 declare variable psql varchar(200);
 begin
 
 Select Result
 from completa_string(cast((Select alm_cod from cdalm2) as varchar(3)), '0', 3, -1)
 Into vFilial;
 
 select ULTIMOCODIGO, TABELA
 from CODIGO
 where TABELA=:pTABELA
 into vTabCod, vFlag;
 
 if (vTabCod is null) then
 vTabCod = 0;
 
 PSQL =
 'Select cast(substr(Max(' || pCAMPO || '), 1, strlen(Max(' || pCAMPO || '))-3) as integer) ' ||
 '  from ' || pTABELA || ' ' ||
 ' Where ' || pCAMPO || ' > 1000 ' ||
 '   and cast(substr(' || pCAMPO || ', strlen(' || pCAMPO || ')-2, strlen(' || pCAMPO || ')) as integer) = ' || vFilial;
 
 execute statement :PSQL Into vMaxCod;
 
 if (vTabCod < vMaxCod) then
 vTabCod = vMaxCod;
 
 vTabCod = vTabCod + 1;
 
 if (vFlag is null) then
 Insert Into CODIGO Values(:pTABELA, :vTabCod);
 else
 Update CODIGO set ULTIMOCODIGO = :vTabCod Where TABELA = :pTABELA;
 
 vCodigo = vTabCod * 1000 + vFilial;
 
 Suspend;
 end
^

ALTER PROCEDURE MODULUS (
    DIVIDEND INTEGER,
    DIVISOR INTEGER)
RETURNS (
    RESULT INTEGER)
AS
BEGIN
  IF(Dividend = 0) THEN Result = 0;
  ELSE
    Result = Dividend-(CAST((Dividend / Divisor)-0.5 AS INTEGER)*Divisor);
END
^

ALTER PROCEDURE OBTER_FINANCEIRO_PEDIDO (
    VD1COD VARCHAR(13),
    BAIXADO INTEGER,
    ABATIMENTO DOUBLE PRECISION)
RETURNS (
    VALOR DOUBLE PRECISION)
AS
 declare variable vbaixa double precision;
 declare variable vpedido double precision;
 begin
 if (ABATIMENTO is null) then
 ABATIMENTO = 0;
 
 if (BAIXADO = 1) then
 begin
 select
 sum((vd2_vlr - (coalesce(descontoitem * vd2_vlr / 100.00,0))) * vd10_qtd *
 case when (v1.vd1_valor_totalb > 0) then (v1.vd1_valor_totall - :ABATIMENTO) / v1.vd1_valor_totalb else 0 end *
 case when ((v1.vd1_valor_totall - :ABATIMENTO) > 0) then bai_val / (v1.vd1_valor_totall - :ABATIMENTO) else 0 end)
 from mvcorecb, estmvvd9, estmvvd10, estmvvd2, estmvvd1 v1
 where estmvvd9.vd9_asc = :VD1COD
 and estmvvd9.vd9_cod = estmvvd10.vd10_vd9
 and estmvvd2.vd2_bol = estmvvd9.vd9_bol
 and estmvvd2.vd2_pro = estmvvd10.vd10_pro
 and estmvvd2.vd2_cor = estmvvd10.vd10_cor
 and estmvvd2.vd2_med = estmvvd10.vd10_med
 and estmvvd2.vd2_bol = v1.vd1_cod
 and mvcorecb.bai_vd1cod = estmvvd9.vd9_bol
 Into VBAIXA;
 
 select
 sum((vd2_vlr - (coalesce(descontoitem * vd2_vlr / 100.00,0))) * vd2_qtd *
 case when (vd1.vd1_valor_totalb > 0) then (vd1.vd1_valor_totall - :ABATIMENTO) / vd1.vd1_valor_totalb else 0 end *
 case when ((vd1.vd1_valor_totall - :ABATIMENTO) > 0) then bai_val / (vd1.vd1_valor_totall - :ABATIMENTO) else 0 end)
 from mvcorecb, estmvvd2, estmvvd1 vd1
 where vd1.vd1_cod = :VD1COD
 and estmvvd2.vd2_bol = vd1.vd1_cod
 and mvcorecb.bai_vd1cod = vd1.vd1_cod
 Into VPEDIDO;
 end
 else
 begin
 select
 sum((vd2_vlr - (coalesce(descontoitem * vd2_vlr / 100.00,0))) * vd10_qtd *
 case when (v1.vd1_valor_totalb > 0) then (v1.vd1_valor_totall - :ABATIMENTO)/ v1.vd1_valor_totalb else 0 end *
 case when ((v1.vd1_valor_totall - :ABATIMENTO) > 0) then rec_val / (v1.vd1_valor_totall - :ABATIMENTO) else 0 end)
 from mvcorec, estmvvd9, estmvvd10, estmvvd2, estmvvd1 v1
 where estmvvd9.vd9_asc = :VD1COD
 and estmvvd9.vd9_cod = estmvvd10.vd10_vd9
 and estmvvd2.vd2_bol = estmvvd9.vd9_bol
 and estmvvd2.vd2_pro = estmvvd10.vd10_pro
 and estmvvd2.vd2_cor = estmvvd10.vd10_cor
 and estmvvd2.vd2_med = estmvvd10.vd10_med
 and estmvvd2.vd2_bol = v1.vd1_cod
 and mvcorec.rec_vd1cod = estmvvd9.vd9_bol
 Into VBAIXA;
 
 select
 sum((vd2_vlr - (coalesce(descontoitem * vd2_vlr / 100.00,0))) * vd2_qtd *
 case when (vd1.vd1_valor_totalb > 0) then (vd1.vd1_valor_totall - :ABATIMENTO) / vd1.vd1_valor_totalb else 0 end *
 case when ((vd1.vd1_valor_totall - :ABATIMENTO) > 0) then rec_val / (vd1.vd1_valor_totall - :ABATIMENTO) else 0 end)
 from mvcorec, estmvvd2, estmvvd1 vd1
 where vd1.vd1_cod = :VD1COD
 and estmvvd2.vd2_bol = vd1.vd1_cod
 and mvcorec.rec_vd1cod = vd1.vd1_cod
 Into VPEDIDO;
 end
 VALOR = COALESCE(VBAIXA,0) + COALESCE(VPEDIDO,0);
 Suspend;
 end
^

ALTER PROCEDURE OBTER_VALOR_LIKE (
    TEXTO VARCHAR(100))
RETURNS (
    NOVO_TEXTO VARCHAR(100))
AS
 declare variable vcnt integer;
 begin
 NOVO_TEXTO = '';
 vcnt = 1;
 while (vcnt <= strlen(texto)) do
 begin
 if (substr(texto, vcnt, vcnt) = ' ') then
 NOVO_TEXTO = NOVO_TEXTO || '%';
 else
 NOVO_TEXTO = NOVO_TEXTO || substr(texto, vcnt, vcnt);
 vcnt = vcnt + 1;
 end
 if (strlen(texto) > 0) then
 NOVO_TEXTO = '%' || NOVO_TEXTO || '%';
 suspend;
 end
^

ALTER PROCEDURE OBTER_VALOR_NUMERICO (
    TEXTO VARCHAR(100))
RETURNS (
    NUMERO INTEGER)
AS
 declare variable vnumerico integer;
 declare variable vcnt integer;
 begin
 numero = 0;
 vcnt = 1;
 vnumerico = 999;
 while ((vcnt <= strlen(texto)) and (vnumerico > 0)) do
 begin
 if (ascii_val(substr(texto, vcnt, vcnt)) between ascii_val('0') and ascii_val('9')) then
 vnumerico = 1;
 else
 vnumerico = 0;
 vcnt = vcnt + 1;
 end
 if (vnumerico = 1) then
 numero = cast(texto as integer);
 suspend;
 end
^

ALTER PROCEDURE PROCESSO_REQUISICAO_COTACAO (
    PUSUARIO INTEGER,
    PCOM2 INTEGER,
    PDECISAO INTEGER,
    PAUXILIAR INTEGER,
    PSITUACAO INTEGER)
RETURNS (
    RESULT VARCHAR(100))
AS
 DECLARE VARIABLE VAPROVADOR INTEGER;
 DECLARE VARIABLE VTIPOSETOR INTEGER;
 DECLARE VARIABLE VSTATUS INTEGER;
 DECLARE VARIABLE VPROXIMO INTEGER;
 DECLARE VARIABLE VUSUARIO_NOME VARCHAR(100);
 DECLARE VARIABLE VMOVIMENTO INTEGER;
 DECLARE VARIABLE VALM_MANUT VARCHAR(1);
 DECLARE VARIABLE VTIPOITEM INTEGER;
 DECLARE VARIABLE VAPROVA_COTACAO VARCHAR(1);
 DECLARE VARIABLE VCOTACAO INTEGER;
 DECLARE VARIABLE VVALOR_SEM_APROVACAO DOUBLE PRECISION;
 DECLARE VARIABLE VVALOR_COTACAO INTEGER;
 DECLARE VARIABLE VITEM INTEGER;
 DECLARE VARIABLE VREQUISICAO INTEGER;
 begin
 select P_VERIFICA_ALM_MANUT, P_VALOR_SEM_APROVACAO, P_APROVA_PARA_COTAR
 from parametcomp
 into valm_manut,vvalor_sem_aprovacao,vaprova_cotacao;

 Select USE_NOM
 From CDUSER
 Where USE_COD = :pusuario
 into vusuario_nome;

 Select COM2_TIPO, COM2_COM1, COM2_SIT, COM2_COM8
 From MVCOM2
 Where COM2_COD = :pcom2
 into vtipoitem, vmovimento, vStatus, vcotacao;

 Select COM1_COD
 From MVCOM1
 Where COM1_COD = :vmovimento
 into vrequisicao;


 if (vStatus = 1) then
 if (pDecisao = 0) then
 vStatus = -1;
 else begin
 Select Count(SET2_COD)
 From CDSETOR2
 Where SET2_USE = :PUSUARIO
 Into vAprovador;

 if ((vAprovador is null) or (vAprovador <= 0)) then
 begin
 Update MVCOM2
 set COM2_SIT = 2
 Where COM2_COD = :pcom2;

 For Select SET2_USE
 From CDSETOR2, CDSETOR3
 Where SET2_SET = SET2_SET
 and SET3_USE = :PUSUARIO
 into vAprovador do
 Execute procedure envia_aviso(:vAprovador,"Requisição a aprovar",
 "Número " || :vrequisicao || " de " || :vusuario_nome,
 "TFRMREQUISICAO", :vrequisicao);

 Result = "Item aguardando aprovação";
 end
 else
 vStatus = 2;
 end

 if (vStatus = 2) then
 if (pDecisao = 0) then
 vStatus = -1;
 else begin
 if (vAlm_Manut = "T") then
 begin
 Update MVCOM2
 set COM2_SIT = 3
 Where COM2_COD = :pcom2;

 For Select SET3_USE
 From CDSETOR3, CDSETOR1
 Where SET3_SET = SET_COD
 and ((SET_TIP = 1 and :vtipoitem in (0,1))
 or (SET_TIP = 2 and :vtipoitem in (2,3)))
 into vaprovador do
 Execute procedure envia_aviso(:vAprovador,"Requisição a atender",
 "Número " || :vrequisicao || " de " || :vusuario_nome,
 "TFRMREQUISICAO", :vrequisicao);

 Result = "Item aguardando verificação de disponibilidade";
 end
 else
 vStatus = 3;
 end

 if (vStatus = 3) then
 if (pDecisao = 1) then
 vStatus = 10;
 else begin
 if (vAprova_Cotacao = "T") then
 begin
 Update MVCOM2
 set COM2_SIT = 5
 Where COM2_COD = :pcom2;

 For Select SET2_USE
 From CDSETOR2, CDSETOR1
 Where SET2_SET = SET_COD
 and (SET_TIP = 3)
 Into vAprovador do
 Execute procedure envia_aviso(:vAprovador,"Cotação a aprovar",
 "Número " || :vcotacao || " de " || :vusuario_nome,
 "TFRMREQUISICAO", :vrequisicao);

 Result = "Item aguardando aprovação de cotação";
 end
 else
 begin
 vStatus = 5;
 pDecisao = 1;
 end
 end


 if (vStatus = 5) then
 if (pDecisao = 0) then
 vStatus = -1;
 else begin
 Update MVCOM2
 set COM2_SIT = 6
 Where COM2_COD = :pcom2;

 For Select SET3_USE
 From CDSETOR3, CDSETOR1
 Where SET3_SET = SET_COD
 and (SET_TIP = 3)
 Into vAprovador do
 Execute procedure envia_aviso(:vAprovador,"Cotação pendente",
 "Número " || :vcotacao, "TFRMREQUISICAO", :vrequisicao);


 Result = "Item aguardando cotação";
 end

 if (vStatus = 6) then
 if (pDecisao = 0) then
 vStatus = -1;
 else begin
 Select sum(com9_val)
 From mvcom9, mvcom6
 where com9_com2 = :pcom2
 and com6_com9 = com9_cod
 Into vValor_cotacao;
 if (vValor_Cotacao <= vValor_Sem_Aprovacao) then
 vStatus = 7;
 else
 begin
 Update MVCOM2
 set COM2_SIT = 7
 Where COM2_COD = :pcom2;

 Update MVCOM8
 set COM8_STA = 2
 Where COM8_COD in (Select COM2_COM8 FROM MVCOM2 Where COM2_COD = :pcom2);

 For Select SET3_USE
 From CDSETOR3, CDSETOR1
 Where SET3_SET = SET_COD
 and (SET_TIP = 3)
 Into vAprovador do
 Execute procedure envia_aviso(:vAprovador,"Cotação pendente",
 "Número " || :vcotacao, "TFRMREQUISICAO", :vrequisicao);
 end

 Result = "Item aguardando cotação";
 end

 if (vStatus = 7) then
 if (pAuxiliar = 0) then
 begin
 if (pDecisao = 0) then
 vStatus = -1;
 else
 begin
 Update MVCOM2
 set COM2_SIT = 6
 Where COM2_COD = :pcom2;

 Update MVCOM8
 set COM8_STA = 1
 Where COM8_COD in (Select COM2_COM8 FROM MVCOM2 Where COM2_COD = :pcom2);

 Result = "Item retornou a cotação";
 end
 end
 else
 begin
 Update MVCOM2
 set COM2_SIT = 8
 Where COM2_COD = :pcom2;

 Update MVCOM8
 set COM8_STA = 3
 Where COM8_COD in (Select COM2_COM8 FROM MVCOM2 Where COM2_COD = :pcom2);

 Result = "Item em compras";
 end

 if (vStatus = 8) then
 if (vAlm_Manut = "T") then
 begin
 Update MVCOM2
 set COM2_SIT = 9
 Where COM2_COD = :pcom2;

 For Select SET3_USE
 From CDSETOR3, CDSETOR1
 Where SET3_SET = SET_COD
 and ((SET_TIP = 1 and :vtipoitem in (0,1))
 or (SET_TIP = 2 and :vtipoitem in (2,3)))
 Into vAprovador do
 Execute procedure envia_aviso(:vAprovador,"Requisição aguardando baixa",
 "Número " || :vrequisicao || " de " || :vusuario_nome,
 "TFRMREQUISICAO", :vrequisicao);

 Result = "Item aguardando baixa";
 end
 else vStatus = 11;

 if (vStatus = 8) then
 if (vAlm_Manut = "T") then
 begin
 Update MVCOM2
 set COM2_SIT = 9
 Where COM2_COD = :pcom2;

 For Select SET2_USE
 From CDSETOR2, CDSETOR1
 Where SET2_SET = SET_COD
 and ((SET_TIP = 1 and :vtipoitem in (0,1))
 or (SET_TIP = 2 and :vtipoitem in (2,3)))
 Into vAprovador do
 Execute procedure envia_aviso(:vAprovador,"Requisição aguardando baixa",
 "Número " || :vrequisicao || " de " || :vusuario_nome,
 "TFRMREQUISICAO", :vrequisicao);

 Result = "Item aguardando baixa";
 end
 else vStatus = 11;

 if (vStatus = 9) then
 if (pDecisao = 1) then
 begin
 Update MVCOM2
 set COM2_SIT = 10
 Where COM2_COD = :pcom2;

 For Select SET3_USE
 From CDSETOR3, CDSETOR1
 Where SET3_SET = SET_COD
 and ((SET_TIP = 1 and :vtipoitem in (0,1))
 or (SET_TIP = 2 and :vtipoitem in (2,3)))
 Into vAprovador do
 Execute procedure envia_aviso(:vAprovador,"Requisição aguardando execução",
 "Número " || :vrequisicao || " de " || :vusuario_nome,
 "TFRMREQUISICAO", :vrequisicao);

 Result = "Item aguardando execução";
 end
 else vStatus = -1;

 if (vStatus = 10) then
 begin
 Update MVCOM2
 set COM2_SIT = 11
 Where COM2_COD = :pcom2;

 Execute procedure envia_aviso(:pusuario,"Aguardando confirmação",
 "Número " || :vrequisicao, "TFRMREQUISICAO", :vrequisicao);

 Result = "Item aguardando confirmação de recebimento";
 end

 if (vStatus = 11) then
 begin
 Update MVCOM2
 set COM2_SIT = 12
 Where COM2_COD = :pcom2;

 Result = "Item finalizado";
 end

 if (vStatus = -1) then
 begin
 Update MVCOM2
 set COM2_SIT = 0
 Where COM2_COD = :pcom2;

 Execute procedure envia_aviso(:pusuario,"Item(ns) cancelado(s)",
 "Número " || :vrequisicao, "TFRMREQUISICAO", :vrequisicao);

 Result = "Item(ns) cancelados";
 end

 suspend;
 end
^

ALTER PROCEDURE REAJUSTAR_CLIENTES (
    MES VARCHAR(2),
    IGPM DOUBLE PRECISION,
    IGPDI DOUBLE PRECISION,
    REAJUSTAR VARCHAR(10))
RETURNS (
    NOME VARCHAR(100),
    INDICE VARCHAR(100),
    VALOR DOUBLE PRECISION,
    PORCENTAGEM DOUBLE PRECISION,
    AJUSTADO DOUBLE PRECISION)
AS
DECLARE VARIABLE CLICOD INTEGER;
DECLARE VARIABLE PRECOD INTEGER;
begin
 For
 Select cdprerec.pre_cli, cdprerec.pre_cod,
       (select cli_red from cdcli where cdcli.cli_cod = cdprerec.pre_cli) nome,
       cast((select e.val_texto
          from cdentvarvalor e
         where e.val_ent_cod = cdprerec.pre_cli
           and e.val_ent_tab = 'CDCLI'
           and e.val_var = 6) as varchar(10)) INDICE,
       cdprerec.pre_val,
       (select case when e.val_texto = 'IGP-DI' then :IGPDI
                    when e.val_texto = 'IGP-M' then :IGPM
                    else 0 end
          from cdentvarvalor e
         where e.val_ent_cod = cdprerec.pre_cli
           and e.val_ent_tab = 'CDCLI'
           and e.val_var = 6) PORCENTAGEM,
       cast((select case when e.val_texto = 'IGP-DI' then 1 + :IGPDI /100.0
                    when e.val_texto = 'IGP-M' then 1 + :IGPM /100.0
                    else 0 end
          from cdentvarvalor e
         where e.val_ent_cod = cdprerec.pre_cli
           and e.val_ent_tab = 'CDCLI'
           and e.val_var = 6) *
       cdprerec.pre_val * 100 as integer)/100 VALOR_AJUSTADO
  From cdprerec 
 Where exists (select e.val_ent_cod
                 from cdentvarvalor e
                where e.val_ent_cod = cdprerec.pre_cli
                  and e.val_ent_tab = 'CDCLI'
                  and e.val_var = 9
                  and substr(e.val_texto,1,2) = :MES)
   and exists (select e.val_ent_cod
                 from cdentvarvalor e
                where e.val_ent_cod = cdprerec.pre_cli
                  and e.val_ent_tab = 'CDCLI'
                  and e.val_var = 6
                  and (e.val_texto = 'IGP-M' or e.val_texto = 'IGP-DI'))
 into :clicod, :precod, :nome, :indice, :valor, :porcentagem, :ajustado do
 begin
    if (reajustar = 'S') then
    begin
    update cdprerec set
       pre_val = :ajustado,
       dat_atu = 'today'
     where pre_cod = :precod;

    update cdentvarvalor set
        val_real = :valor,
        dat_atu = 'today'
     where val_ent_cod = :clicod
       and val_ent_tab = 'CDCLI'
       and val_var = 7;

    update cdentvarvalor set
        val_real = :ajustado,
        dat_atu = 'today'
     where val_ent_cod = :clicod
       and val_ent_tab = 'CDCLI'
       and val_var = 8;   

    update cdentvarvalor set  
        val_texto = cast(extract(year from cast('now' as date)) as varchar(4)),
        dat_atu = 'today'
     where val_ent_cod = :clicod
       and val_ent_tab = 'CDCLI'
       and val_var = 10;
    end
  suspend;
 end
end
^

ALTER PROCEDURE RECALC_ESTOQUE (
    VPARAMCOR INTEGER,
    VPARAMMED INTEGER,
    VCASAS_DECIMAIS INTEGER,
    VALM INTEGER,
    VHIS VARCHAR(1))
AS
 declare variable vcustomedio double precision;
 declare variable vsaldo double precision;
 declare variable vultcusto double precision;
 declare variable vant double precision;
 declare variable vpos double precision;
 declare variable vvd2cad date;
 declare variable vproant integer;
 declare variable valmant integer;
 declare variable vmedant varchar(3);
 declare variable vcorant varchar(3);
 declare variable vprecocor varchar(1);
 declare variable vprecomed varchar(1);
 declare variable vprecor integer;
 declare variable vpremed integer;
 declare variable vmantemest varchar(1);
 declare variable vresult integer;
 Begin
 select alm_atu_est from cdalm where alm_cod = :vAlm into :vmantemest;
 if ((vAlm is null) and ((VHIS <> "N") or (VHIS is null))) THEN
 Select sum(est_sal) From MVEST Into vAnt;
 Delete From mvest where (est_alm = :vAlm) or (:vAlm is null) or (:vmantemest = "N");
 For
 Select vProAnt, vAlmAnt, vCorAnt, vMedAnt, vSaldo, vUltCusto, vCustoMedio, vVd2Cad
 from calcula_estoque(:vParamcor,:vParammed,:vCasas_decimais,null,null,null,null,:vAlm,0,0)
 Into :vProAnt, :vAlmAnt, :vCorAnt, :vMedAnt, :vSaldo, :vUltCusto, :vCustoMedio, :vVd2Cad
 Do
 Insert into MVEST (est_pro, est_alm, est_cor, est_tam, est_sal, est_ucus, est_cmed, est_dat)
 values (:vProAnt, :vAlmAnt, :vCorAnt, :vMedAnt, :vSaldo, :vUltCusto, :vCustoMedio, :vVd2Cad);
 Select sum(est_sal) From MVEST Into vPos;
 
 if ( (vAlm is null) and ( (VHIS <> "N") or (VHIS is null) ) ) THEN
 Insert into MVESTHIS values (:vAnt, :vPos, (:vPos - :vAnt), "NOW");
 
 Select PRECO_COR, PRECO_MEDIDA From PARAMET into vPrecoCor, vPrecoMed;
 if (vPrecoCor = "T") then
 vPreCor = 1;
 else
 vPreCor = 0;
 if (vPrecoMed = "T") then
 vPreMed = 1;
 else
 vPreMed = 0;
 execute procedure atualiza_cdpropre(:vPreCor,:vPreMed,:vcasas_decimais,null,null,null);
 
 delete from estmvvd10
 where not exists (select vd9_cod from estmvvd9 where vd9_cod = estmvvd10.vd10_vd9);
 
 Insert Into estmvvd10 (vd10_cod, vd10_vd9, vd10_pro, vd10_cor, vd10_med, vd10_qtd, vd10_ser)
 Select (Select max(vd10_cod)+1 from estmvvd10), vd9_cod, vd2_pro, vd2_cor, vd2_med, vd2_qtd, 0
 from estmvvd2 A, estmvvd9
 where vd2_bol = vd9_bol
 and not exists (Select * from estmvvd10
 where vd10_vd9 = estmvvd9.vd9_cod
 and vd10_pro = A.vd2_pro
 and ((A.vd2_cor is null) or (A.vd2_cor = '') or (A.vd2_cor = '000') or (vd10_cor = A.vd2_cor))
 and ((A.vd2_med is null) or (A.vd2_med = '') or (A.vd2_med = '000') or (vd10_med = A.vd2_med)) )
 and exists (Select * from estmvvd2 B
 where B.vd2_bol = estmvvd9.vd9_asc
 and B.vd2_pro = A.vd2_pro
 and ((A.vd2_cor is null) or (A.vd2_cor = '') or (A.vd2_cor = '000') or (B.vd2_cor = A.vd2_cor))
 and ((A.vd2_med is null) or (A.vd2_med = '') or (A.vd2_med = '000') or (B.vd2_med = A.vd2_med)) );
 
 update codigo set ultimocodigo = (Select max(vd10_cod) from estmvvd10)
 where upper(tabela) = 'ESTMVVD10';
 
 update estmvvd1 set vd1_canc = 'BT', status = 'BAIXA TOTAL', vd1_atu = 'today'
 where vd1_canc <> 'BT'
 and vd1_origem <> 'DDS'
 and vd1_origem <> 'DDO'
 and exists (select vd9_cod from estmvvd9 where estmvvd9.vd9_asc = estmvvd1.vd1_cod)
 and (Select sum(vd10_qtd) from estmvvd10, estmvvd9 where estmvvd9.vd9_asc = estmvvd1.vd1_cod and vd10_vd9 = estmvvd9.vd9_cod) >=
 (Select sum(vd2_qtd) from estmvvd2 A where A.vd2_bol = estmvvd1.vd1_cod);
 
 End
^

ALTER PROCEDURE REFAZCDPROPRE (
    PUSACORMEDIDA VARCHAR(1))
AS
 BEGIN
 IF (PUSACORMEDIDA="S") THEN
 BEGIN
 Insert Into cdpropre ( pro_pro, PRO_MARGEM_MARKUP ,pro_cor ,pro_med ,ativo, DAT_ATU, DAT_CAD)
 Select cdpro.pro_cod, cdpro.PRO_MARGEM_MARKUP
 ,cdprocm.pro_cor, cdprocm.pro_med, cdprocm.ativo, "today", "today"
 From cdpro, cdprocm
 Where cdpro.pro_cod <> 0
 and cdprocm.pro_pro = cdpro.pro_cod
 and not exists( select * from cdpropre where cdpropre.pro_pro=cdpro.pro_cod
 and cdpropre.pro_cor=cdprocm.pro_cor
 and cdpropre.pro_med=cdprocm.pro_med)
 and (pro_cor<>"" and pro_med<>"");
 END
 ELSE
 BEGIN
 Insert Into cdpropre ( pro_pro, PRO_MARGEM_MARKUP,ativo, DAT_ATU, DAT_CAD, pro_cor, pro_med)
 Select cdpro.pro_cod, cdpro.PRO_MARGEM_MARKUP,"A", "today", "today", "",""
 From cdpro Where cdpro.pro_cod <> 0
 and not exists( select * from cdpropre where cdpropre.pro_pro=cdpro.pro_cod);
 END
 END
^

ALTER PROCEDURE REL_MOVCAIXA (
    PDATADE TIMESTAMP,
    PDATAATE TIMESTAMP,
    PALMDE VARCHAR(20),
    PALMATE VARCHAR(20),
    PNIVEL INTEGER)
RETURNS (
    ALM_FANT VARCHAR(20),
    MOV DOUBLE PRECISION,
    NAOEF DOUBLE PRECISION,
    SUP DOUBLE PRECISION,
    SAN DOUBLE PRECISION,
    PEND DOUBLE PRECISION,
    TOTAL DOUBLE PRECISION,
    STATUS VARCHAR(1))
AS
 DECLARE VARIABLE WALM_COD INTEGER;
 DECLARE VARIABLE WALM_NOM VARCHAR(20);
 DECLARE VARIABLE WVALOR INTEGER;
 DECLARE VARIABLE WOPE VARCHAR(3);
 BEGIN
 FOR SELECT ALM_COD, ALM_FANT FROM CDALM
 WHERE ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 ORDER BY ALM_FANT
 INTO WALM_COD, WALM_NOM
 DO
 BEGIN
 ALM_FANT=WALM_NOM;
 TOTAL=0;
 
 SELECT SUM(CAIXA.VALOR) AS VALOR
 FROM CAIXA LEFT JOIN CDTRA1 ON TRANSACAO=TRA_COD ,CDTIPD
 WHERE ( (CAIXA.DATA >= :PDATADE) OR (:PDATADE IS NULL) )
 and ( (CAIXA.DATA <= :PDATAATE) OR (:PDATAATE IS NULL) )
 AND OPE<>'SU' AND OPE<>'SA'
 AND (TRA_NIV<= :PNIVEL)
 AND CAIXA.tipo = 'MOV'
 AND CDTIPD.TIP_PAG='S' AND CAIXA.TIP_NOM=CDTIPD.TIP_NOM
 AND CAIXA.FILIAL=:WALM_COD AND REC_REC IS NOT NULL
 INTO MOV;
 
 SELECT SUM(A.VD4_VAL)
 FROM ESTMVVD4 A, CDTIPD B, ESTMVVD1 C ,CDTRA1 D
 WHERE VD4_BOL=VD1_COD AND TIP_PAG='N'
 AND ( (A.VD4_CAD >= :PDATADE) OR (:PDATADE IS NULL) )
 AND ( (A.VD4_CAD <= :PDATAATE) OR (:PDATAATE IS NULL) )
 AND ( vd1_canc not in ('C','CF') Or vd1_canc Is Null )
 AND C.vd1_tra = D.tra_cod
 AND D.tra_niv <= :PNIVEL
 AND VD1_ALM=:WALM_COD
 AND TIP_COD=VD4_TIP
 INTO NAOEF;
 
 FOR SELECT SUM(VALOR), OPE FROM CAIXA
 WHERE ( (CAIXA.DATA >= :PDATADE) OR (:PDATADE IS NULL) )
 and ( (CAIXA.DATA <= :PDATAATE) OR (:PDATAATE IS NULL) )
 AND ((OPE='SU') OR (OPE='SA'))
 AND CAIXA.FILIAL=:WALM_COD AND REC_REC IS NOT NULL
 GROUP BY OPE
 INTO WVALOR, WOPE
 DO
 BEGIN
 IF (WOPE='SU') THEN
 SUP=WVALOR;
 ELSE
 BEGIN
 IF (WVALOR > 0) THEN
 SAN=WVALOR*-1;
 END
 END
 
 Select Sum(REC_val)
 From mvcorec, cdtipd
 Where tip_cod = REC_tip
 and rec_baifil= 'S'
 and ( (mvcorec.dat_atu >= :PDATADE) OR (:PDATADE IS NULL) )
 and ( (mvcorec.dat_atu <= :PDATAATE) OR (:PDATAATE IS NULL) )
 and rec_ori=:WALM_COD
 INTO PEND;
 
 SELECT VD7_FEC FROM ESTMVVD7 WHERE VD7_ALM=:WALM_COD
 and ( (ESTMVVD7.VD7_DAT = :PDATADE) OR (:PDATADE IS NULL) ) INTO STATUS;
 
 TOTAL= (COALESCE(MOV,0) + COALESCE(NAOEF,0) + COALESCE(SUP,0) + COALESCE(SAN,0) + COALESCE(PEND,0));
 SUSPEND;
 END
 END
^

ALTER PROCEDURE REL_MOVFILIAL_MES (
    PFILIALDE VARCHAR(20),
    PFILIALATE VARCHAR(20),
    PTRANSACAODE VARCHAR(40),
    PTRANSACAOATE VARCHAR(40),
    PDATADE TIMESTAMP,
    PDATAATE TIMESTAMP,
    PSTATUS1 VARCHAR(2),
    PSTATUS2 VARCHAR(2),
    PSTATUS3 VARCHAR(2),
    USUARIO_NIVEL INTEGER)
RETURNS (
    FILIAL VARCHAR(20),
    DATA VARCHAR(20),
    VALOR DOUBLE PRECISION)
AS
 declare variable walm_fant varchar(20);
 declare variable waux_alm_fant varchar(20);
 declare variable wdata varchar(20);
 declare variable waux_data varchar(20);
 declare variable wvd1_cad date;
 declare variable wvalor double precision;
 declare variable waux_valor double precision;
 BEGIN
 FOR SELECT ALM_FANT,
 (SELECT DATA FROM FORMATDATA(A.VD1_CAD,'M','A','','/')) DATA,
 VD1_CAD,
 SUM(VD1_VALOR_TOTALL) AS VALOR
 FROM ESTMVVD1 A
 LEFT JOIN CDTRA1 ON A.VD1_TRA = CDTRA1.TRA_COD
 LEFT JOIN CDALM ON A.VD1_ALM = CDALM.ALM_COD
 WHERE TRA_TIP_TRA = 'VND'
 
 AND ((:PFILIALDE = '') OR ((ALM_FANT >= :PFILIALDE) AND (ALM_FANT <=:PFILIALATE)))
 AND ((:PTRANSACAODE = '') OR ((TRA_NOM >= :PTRANSACAODE) AND (TRA_NOM <=:PTRANSACAOATE)))
 AND ((:PDATADE IS NULL) OR ((VD1_CAD >= :PDATADE) AND (VD1_CAD <=:PDATAATE)))
 AND ((:PSTATUS1 = '') OR ((VD1_CANC = :PSTATUS1) OR (VD1_CANC = :PSTATUS2) OR (VD1_CANC = :PSTATUS3) OR ((:PSTATUS1 = 'MC') AND (VD1_CANC <> 'C') AND (VD1_CANC <> 'CF'))))
 AND (TRA_NIV <= :USUARIO_NIVEL)
 
 GROUP BY ALM_FANT, VD1_CAD
 ORDER BY ALM_FANT, VD1_CAD
 
 INTO WALM_FANT, WDATA, WVD1_CAD, WVALOR DO
 BEGIN
 IF ((WAUX_DATA <> :WDATA) OR (:WAUX_ALM_FANT <> :WALM_FANT)) THEN
 BEGIN
 IF (WAUX_VALOR IS NOT NULL) THEN
 BEGIN
 FILIAL =: WAUX_ALM_FANT;
 VALOR = WAUX_VALOR;
 DATA = WAUX_DATA;
 WAUX_VALOR = 0;
 SUSPEND;
 END
 END
 WAUX_DATA =: WDATA;
 WAUX_ALM_FANT =: WALM_FANT;
 
 IF ((WAUX_DATA = :WDATA) AND (:WAUX_ALM_FANT = :WALM_FANT)) THEN
 BEGIN
 WAUX_VALOR = COALESCE(WAUX_VALOR, 0) + :WVALOR;
 END
 
 END
 
 IF (WAUX_VALOR IS NOT NULL) THEN
 BEGIN
 FILIAL =: WAUX_ALM_FANT;
 VALOR = WAUX_VALOR;
 DATA = WAUX_DATA;
 WAUX_VALOR = 0;
 SUSPEND;
 END
 END
^

ALTER PROCEDURE REL_RESUMIDO (
    PDATA_DE TIMESTAMP,
    PDATA_ATE TIMESTAMP,
    PTRA_NOM_DE VARCHAR(40),
    PTRA_NOM_ATE VARCHAR(40),
    PCLI_RED_DE VARCHAR(75),
    PCLI_RED_ATE VARCHAR(75),
    PFOR_RED_DE VARCHAR(75),
    PFOR_RED_ATE VARCHAR(75),
    PVEN_NOM_DE VARCHAR(60),
    PVEN_NOM_ATE VARCHAR(60),
    PCOMP_NOM_DE VARCHAR(60),
    PCOMP_NOM_ATE VARCHAR(60),
    PCAI_NOM_DE VARCHAR(60),
    PCAI_NOM_ATE VARCHAR(60),
    PPREST_NOM_DE VARCHAR(60),
    PPREST_NOM_ATE VARCHAR(60),
    PREP_RED_DE VARCHAR(75),
    PREP_RED_ATE VARCHAR(75),
    PTRS_RED_DE VARCHAR(75),
    PTRS_RED_ATE VARCHAR(75),
    PSTA_SIGLA_LIST VARCHAR(20),
    PALM_FANT_DE VARCHAR(20),
    PALM_FANT_ATE VARCHAR(20))
RETURNS (
    ALM_COD INTEGER,
    ALM_FANT VARCHAR(20),
    QTD_VND DOUBLE PRECISION,
    VLR_VND DOUBLE PRECISION,
    QTD_CMP DOUBLE PRECISION,
    VLR_CMP DOUBLE PRECISION,
    QTD_PDD DOUBLE PRECISION,
    VLR_PDD DOUBLE PRECISION,
    QTD_PDC DOUBLE PRECISION,
    VLR_PDC DOUBLE PRECISION,
    QTD_ORC DOUBLE PRECISION,
    VLR_ORC DOUBLE PRECISION,
    QTD_TRS DOUBLE PRECISION,
    VLR_TRS DOUBLE PRECISION,
    QTD_TRE DOUBLE PRECISION,
    VLR_TRE DOUBLE PRECISION,
    QTD_OUT DOUBLE PRECISION,
    VLR_OUT DOUBLE PRECISION,
    QTD_CON DOUBLE PRECISION,
    VLR_CON DOUBLE PRECISION,
    QTD_TRC DOUBLE PRECISION,
    VLR_TRC DOUBLE PRECISION,
    QTD_TOTAL DOUBLE PRECISION,
    VLR_TOTAL DOUBLE PRECISION)
AS
 DECLARE VARIABLE VALMCOD INTEGER;
 DECLARE VARIABLE VALMFANT VARCHAR(20);
 DECLARE VARIABLE VTRATIP VARCHAR(3);
 DECLARE VARIABLE VQTD DOUBLE PRECISION;
 DECLARE VARIABLE VVLR DOUBLE PRECISION;
 DECLARE VARIABLE VTRA_INF VARCHAR(1);
 DECLARE VARIABLE VQTDINF DOUBLE PRECISION;
 DECLARE VARIABLE VVLRINF DOUBLE PRECISION;
 begin
 QTD_VND = 0;
 VLR_VND = 0;
 QTD_CMP = 0;
 VLR_CMP = 0;
 QTD_PDD = 0;
 VLR_PDD = 0;
 QTD_PDC = 0;
 VLR_PDC = 0;
 QTD_ORC = 0;
 VLR_ORC = 0;
 QTD_TRS = 0;
 VLR_TRS = 0;
 QTD_TRE = 0;
 VLR_TRE = 0;
 QTD_OUT = 0;
 VLR_OUT = 0;
 QTD_CON = 0;
 VLR_CON = 0;
 QTD_TRC = 0;
 VLR_TRC = 0;
 QTD_TOTAL = 0;
 VLR_TOTAL = 0;
 ALm_Cod = 0;
 Alm_Fant = "";
 pSTA_SIGLA_LIST = ";" || pSTA_SIGLA_LIST || ";";
 
 For
 Select
 alm_cod, alm_fant, tra_tip_tra, tra_inf,
 sum(estmvvd1.vd1_quantidade), sum(estmvvd1.vd1_valor_totall)
 From
 estmvvd1 left outer join cdtra1 on estmvvd1.vd1_tra = tra_cod
 left outer join cdcli on estmvvd1.vd1_cli = cli_cod
 left outer join cdfor on estmvvd1.vd1_for = for_cod
 left outer join cdfun vendedor on estmvvd1.vd1_ven = fun_cod
 left outer join cdfun comprador on estmvvd1.vd1_comp = fun_cod
 left outer join cdfun caixa on estmvvd1.vd1_cai = fun_cod
 left outer join cdfun prestador on estmvvd1.vd1_prestador = fun_cod
 left outer join cdpgt on estmvvd1.vd1_pgt = pgt_cod
 left outer join cdtrs on estmvvd1.vd1_trs = trs_cod
 left outer join cdrep on estmvvd1.vd1_rep = rep_cod
 left outer join cdalm on estmvvd1.vd1_alm = alm_cod
 Where ((:pDATA_DE is null) or ((:pDATA_DE <= VD1_CAD) and (:pDATA_ATE >= VD1_CAD)))
 and ((:pALM_FANT_DE is null) or ((:pALM_FANT_DE <= ALM_FANT) and (:pALM_FANT_ATE >= ALM_FANT)))
 and ((:pTRA_NOM_DE is null) or ((:pTRA_NOM_DE <= TRA_NOM) and (:pTRA_NOM_ATE >= TRA_NOM)))
 and ((:pCLI_RED_DE is null) or ((:pCLI_RED_DE <= CLI_RED) and (:pCLI_RED_ATE >= CLI_RED)))
 and ((:pFOR_RED_DE is null) or ((:pFOR_RED_DE <= FOR_RED) and (:pFOR_RED_ATE >= FOR_RED)))
 and ((:pVEN_NOM_DE is null) or ((:pVEN_NOM_DE <= VENDEDOR.FUN_NOM) and (:pVEN_NOM_ATE >= VENDEDOR.FUN_NOM)))
 and ((:pCOMP_NOM_DE is null) or ((:pCOMP_NOM_DE <= COMPRADOR.FUN_NOM) and (:pCOMP_NOM_ATE >= COMPRADOR.FUN_NOM)))
 and ((:pCAI_NOM_DE is null) or ((:pCAI_NOM_DE <= CAIXA.FUN_NOM) and (:pCAI_NOM_ATE >= CAIXA.FUN_NOM)))
 and ((:pPREST_NOM_DE is null) or ((:pPREST_NOM_DE <= PRESTADOR.FUN_NOM) and (:pPREST_NOM_ATE >= PRESTADOR.FUN_NOM)))
 and ((:pREP_RED_DE is null) or ((:pREP_RED_DE <= REP_RED) and (:pREP_RED_ATE >= REP_RED)))
 and ((:pTRS_RED_DE is null) or ((:pTRS_RED_DE <= TRS_RED) and (:pTRS_RED_ATE > TRS_RED)))
 and ((:pSTA_SIGLA_LIST is null) or (:pSTA_SIGLA_LIST like "%;" || VD1_CANC || ";%"))
 Group by
 alm_cod, alm_fant, tra_tip_tra, tra_inf
 Order by
 alm_fant, tra_tip_tra
 Into vAlmCod, vAlmFant, vTraTip, vTra_inf, vQtd, vVlr
 Do
 begin
 if (Alm_Cod <> vAlmCod) then
 begin
 if (Alm_Cod <> 0) then
 suspend;
 QTD_VND = 0;
 VLR_VND = 0;
 QTD_CMP = 0;
 VLR_CMP = 0;
 QTD_PDD = 0;
 VLR_PDD = 0;
 QTD_PDC = 0;
 VLR_PDC = 0;
 QTD_ORC = 0;
 VLR_ORC = 0;
 QTD_TRS = 0;
 VLR_TRS = 0;
 QTD_TRE = 0;
 VLR_TRE = 0;
 QTD_OUT = 0;
 VLR_OUT = 0;
 QTD_CON = 0;
 VLR_CON = 0;
 QTD_TRC = 0;
 VLR_TRC = 0;
 QTD_TOTAL = 0;
 VLR_TOTAL = 0;
 end
 if (vAlmCod is not null) then
 begin
 if (vQtd is null) then
 vQtd = 0;
 if (vVlr is null) then
 vVlr = 0;
 
 
 if (vtra_inf = '+') then
 begin
 vQtdInf = vQtd;
 vVlrInf = (vVlr * -1);
 end
 else if (vtra_inf = '-') then
 begin
 vQtdInf = (vQtd * -1);
 vVlrInf = vVlr;
 end
 else
 begin
 vQtdInf = 0;
 vVlrInf = 0;
 end
 
 if (vTraTip = "VND") then
 begin
 QTD_VND = QTD_VND + vQtd;
 VLR_VND = VLR_VND + vVlr;
 end
 if (vTraTip = "CMP") then
 begin
 QTD_CMP = QTD_CMP + vQtd;
 VLR_CMP = VLR_CMP + vVlr;
 end
 if (vTraTip = "PDD") then
 begin
 QTD_PDD = QTD_PDD + vQtd;
 VLR_PDD = VLR_PDD + vVlr;
 end
 if (vTraTip = "PDC") then
 begin
 QTD_PDC = QTD_PDC + vQtd;
 VLR_PDC = VLR_PDC + vVlr;
 end
 if (vTraTip = "ORC") then
 begin
 QTD_ORC = QTD_ORC + vQtd;
 VLR_ORC = VLR_ORC + vVlr;
 end
 if (vTraTip = "TRS") then
 begin
 QTD_TRS = QTD_TRS + vQtd;
 VLR_TRS = VLR_TRS + vVlr;
 end
 if (vTraTip = "TRE") then
 begin
 QTD_TRE = QTD_TRE + vQtd;
 VLR_TRE = VLR_TRE + vVlr;
 end
 if (vTraTip = "OUT") then
 begin
 QTD_OUT = QTD_OUT + vQtd;
 VLR_OUT = VLR_OUT + vVlr;
 end
 if (vTraTip = "CON") then
 begin
 QTD_CON = QTD_CON + vQtd;
 VLR_CON = VLR_CON + vVlr;
 end
 if (vTraTip = "TRC") then
 begin
 QTD_TRC = QTD_TRC + vQtd;
 VLR_TRC = VLR_TRC + vVlr;
 end
 QTD_TOTAL = QTD_TOTAL + vQtdInf;
 VLR_TOTAL = VLR_TOTAL + vVlrInf;
 Alm_Cod = vAlmCod;
 Alm_Fant = vAlmFant;
 end
 end
 if ((Alm_Cod <> 0) and (Alm_Cod is not null)) then
 suspend;
 end
^

ALTER PROCEDURE RELAT_CONTA_COMIS_REP_FORN (
    DATA_DE TIMESTAMP,
    DATA_ATE TIMESTAMP,
    REP_DE VARCHAR(75),
    REP_ATE VARCHAR(75))
RETURNS (
    VD1_CAD TIMESTAMP,
    VD1_NOT INTEGER,
    CLIENTE VARCHAR(75),
    TOTAL_LIQUIDO DOUBLE PRECISION,
    VD1_COD VARCHAR(13),
    NF BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    VALOR_RECEBIDO DOUBLE PRECISION,
    VALOR_RECEBIDO_ABATIDO DOUBLE PRECISION,
    COMISSAO_PORC DOUBLE PRECISION,
    COMISSAO_VALOR DOUBLE PRECISION,
    VD1_COMISSAO_REP_PORC DOUBLE PRECISION,
    VD1_COMISSAO_REP_VALOR DOUBLE PRECISION,
    REP_COM DOUBLE PRECISION,
    VALOR_A_PAGAR DOUBLE PRECISION,
    CAMPOS_FRETE DOUBLE PRECISION,
    CAMPOS_INSTALACAO DOUBLE PRECISION,
    VALOR_BASE_COMISSAO DOUBLE PRECISION,
    REP_RED VARCHAR(75))
AS
 declare variable proporcao_total double precision;
 declare variable total_bruto double precision;
 declare variable abatimento double precision;
 declare variable vbaixa_abatido double precision;
 declare variable vbaixa double precision;
 declare variable vpedido_abatido double precision;
 declare variable vpedido double precision;
 begin
 For
 Select
 vd1_cod,
 vd1_cad,
 vd1_not,
 cli_red,
 rep_red,
 vd1_valor_totalb,
 vd1_valor_totall,
 vd1_comissao_rep_porc,
 vd1_comissao_rep_valor,
 rep_com
 from estmvvd1 vd1, cdtra1, cdcli, cdrep
 where vd1_tra = tra_cod
 and vd1_rep = rep_cod
 and vd1_cli = cli_cod
 and tra_tip_tra = 'PDD'
 and vd1_canc <> 'C'
 and (vd1_cad between :data_de and :data_ate)
 and (REP_RED between :rep_de and :rep_ate )
 into
 VD1_COD,
 VD1_CAD,
 VD1_NOT,
 CLIENTE,
 rep_red,
 TOTAL_BRUTO,
 TOTAL_LIQUIDO,
 vd1_comissao_rep_porc,
 vd1_comissao_rep_valor,
 rep_com
 do
 begin
 select vd13_real from estmvvd13 where estmvvd13.vd13_bol = :vd1_cod and vd13_var = 15 into CAMPOS_FRETE;
 select vd13_real from estmvvd13 where estmvvd13.vd13_bol = :vd1_cod and vd13_var = 16 into CAMPOS_INSTALACAO;
 ABATIMENTO = Coalesce(campos_frete, 0) + Coalesce(campos_instalacao, 0);
 PROPORCAO_TOTAL = 0;
 if (TOTAL_BRUTO > 0) then
 PROPORCAO_TOTAL = TOTAL_LIQUIDO / TOTAL_BRUTO;
 VALOR_BASE_COMISSAO = TOTAL_LIQUIDO - ABATIMENTO;
 
 select
 sum(((vd2_vlr - (coalesce(descontoitem * vd2_vlr / 100.00,0))) * vd10_qtd * :PROPORCAO_TOTAL) *
 case when (v1.vd1_valor_totall > 0) then bai_val / v1.vd1_valor_totall else 0 end),
 sum((((vd2_vlr - (coalesce(descontoitem * vd2_vlr / 100.00,0))) * vd10_qtd * :PROPORCAO_TOTAL) - :ABATIMENTO) *
 case when (v1.vd1_valor_totall > 0) then bai_val / v1.vd1_valor_totall else 0 end)
 from mvcorecb, estmvvd9, estmvvd10, estmvvd2, estmvvd1 v1
 where estmvvd9.vd9_asc = :VD1_COD
 and estmvvd9.vd9_cod = estmvvd10.vd10_vd9
 and estmvvd2.vd2_bol = estmvvd9.vd9_bol
 and estmvvd2.vd2_pro = estmvvd10.vd10_pro
 and estmvvd2.vd2_cor = estmvvd10.vd10_cor
 and estmvvd2.vd2_med = estmvvd10.vd10_med
 and estmvvd2.vd2_bol = v1.vd1_cod
 and mvcorecb.bai_vd1cod = estmvvd9.vd9_bol
 Into VBAIXA, VBAIXA_ABATIDO;
 
 select
 sum(((vd2_vlr - (coalesce(descontoitem * vd2_vlr / 100.00,0))) * vd2_qtd * :PROPORCAO_TOTAL) *
 case when (vd1.vd1_valor_totall > 0) then bai_val / vd1.vd1_valor_totall else 0 end),
 sum((((vd2_vlr - (coalesce(descontoitem * vd2_vlr / 100.00,0))) * vd2_qtd * :PROPORCAO_TOTAL) - :ABATIMENTO) *
 case when (vd1.vd1_valor_totall > 0) then bai_val / vd1.vd1_valor_totall else 0 end)
 from mvcorecb, estmvvd2, estmvvd1 vd1
 where vd1.vd1_cod = :VD1_COD
 and estmvvd2.vd2_bol = :vd1_cod
 and mvcorecb.bai_vd1cod = :vd1_cod
 Into VPEDIDO, VPEDIDO_ABATIDO;
 
 valor_recebido = COALESCE(VBAIXA,0) + COALESCE(VPEDIDO,0);
 valor_recebido_abatido = COALESCE(VBAIXA_ABATIDO,0) + COALESCE(VPEDIDO_ABATIDO,0);
 
 select result from listar_cupons_relacionados(:vd1_cod) into NF;
 
 COMISSAO_PORC = coalesce(nullif(coalesce(:vd1_comissao_rep_porc,0) +
 coalesce(:vd1_comissao_rep_valor * 100.00 / nullif((:VALOR_BASE_COMISSAO),0),0),0), :rep_com, 0);
 
 comissao_valor = coalesce(COMISSAO_PORC / 100.00 * nullif(:valor_recebido_abatido,0), 0);
 
 select
 sum(((vd2_vlr - (coalesce(descontoitem * vd2_vlr / 100.00,0))) * vd10_qtd * :PROPORCAO_TOTAL) *
 case when (v1.vd1_valor_totall > 0) then rec_val / v1.vd1_valor_totall else 0 end),
 sum((((vd2_vlr - (coalesce(descontoitem * vd2_vlr / 100.00,0))) * vd10_qtd * :PROPORCAO_TOTAL) - :ABATIMENTO) *
 case when (v1.vd1_valor_totall > 0) then rec_val / v1.vd1_valor_totall else 0 end)
 from mvcorec, estmvvd9, estmvvd10, estmvvd2, estmvvd1 v1
 where estmvvd9.vd9_asc = :VD1_COD
 and estmvvd9.vd9_cod = estmvvd10.vd10_vd9
 and estmvvd2.vd2_bol = estmvvd9.vd9_bol
 and estmvvd2.vd2_pro = estmvvd10.vd10_pro
 and estmvvd2.vd2_cor = estmvvd10.vd10_cor
 and estmvvd2.vd2_med = estmvvd10.vd10_med
 and estmvvd2.vd2_bol = v1.vd1_cod
 and mvcorec.rec_vd1cod = estmvvd9.vd9_bol
 Into VBAIXA, VBAIXA_ABATIDO;
 
 select
 sum(((vd2_vlr - (coalesce(descontoitem * vd2_vlr / 100.00,0))) * vd2_qtd * :PROPORCAO_TOTAL) *
 case when (vd1.vd1_valor_totall > 0) then rec_val / vd1.vd1_valor_totall else 0 end),
 sum((((vd2_vlr - (coalesce(descontoitem * vd2_vlr / 100.00,0))) * vd2_qtd * :PROPORCAO_TOTAL) - :ABATIMENTO) *
 case when (vd1.vd1_valor_totall > 0) then rec_val / vd1.vd1_valor_totall else 0 end)
 from mvcorec, estmvvd2, estmvvd1 vd1
 where vd1.vd1_cod = :VD1_COD
 and estmvvd2.vd2_bol = vd1.vd1_cod
 and mvcorec.rec_vd1cod = vd1.vd1_cod
 Into VPEDIDO, VPEDIDO_ABATIDO;
 
 VALOR_A_PAGAR = COALESCE(VBAIXA,0) + COALESCE(VPEDIDO,0);
 
 suspend;
 end
 end
^

ALTER PROCEDURE RELATORIOS_DE_PROJETOS (
    PMODELO VARCHAR(30),
    PPLANODE VARCHAR(30),
    PPLANOATE VARCHAR(30),
    PPROJETODE VARCHAR(60),
    PPROJETOATE VARCHAR(60),
    PDATADE TIMESTAMP,
    PDATAATE TIMESTAMP,
    PSTATUSPROJ VARCHAR(1),
    PFLAG VARCHAR(3),
    PHORASFUN VARCHAR(1))
RETURNS (
    RCODIGOPROJ INTEGER,
    RCODIGOPROJ2 INTEGER,
    RPROJETO VARCHAR(60),
    RETAPA VARCHAR(40),
    RPLANODECONTAS VARCHAR(30),
    RTOTALORCAM DOUBLE PRECISION,
    RTOTAL DOUBLE PRECISION,
    RSTATUS VARCHAR(20),
    RSTATUSETAPA VARCHAR(20))
AS
 DECLARE VARIABLE WPROJ_NOM VARCHAR(60);
 DECLARE VARIABLE WAUX_PROJ_NOM VARCHAR(60);
 DECLARE VARIABLE WVALOR DOUBLE PRECISION;
 DECLARE VARIABLE WSOMA DOUBLE PRECISION;
 DECLARE VARIABLE WPROJ2_NOM VARCHAR(40);
 DECLARE VARIABLE WAUX_PROJ2_NOM VARCHAR(40);
 DECLARE VARIABLE WPLA_NOM VARCHAR(30);
 DECLARE VARIABLE WAUX_PLA_NOM VARCHAR(30);
 DECLARE VARIABLE WPROJ2_ORCAM DOUBLE PRECISION;
 DECLARE VARIABLE WPROJ_COD INTEGER;
 DECLARE VARIABLE WAUX_PROJ_COD INTEGER;
 DECLARE VARIABLE WPROJ2_COD INTEGER;
 DECLARE VARIABLE WAUX_PROJ2_COD INTEGER;
 DECLARE VARIABLE WPROJ_STATUS VARCHAR(20);
 DECLARE VARIABLE WPROJ2_STATUS VARCHAR(20);
 DECLARE VARIABLE WAUX_PROJ_STATUS VARCHAR(20);
 DECLARE VARIABLE WAUX_PROJ2_STATUS VARCHAR(20);
 DECLARE VARIABLE RMAODEOBRA DOUBLE PRECISION;
 BEGIN
 IF (PFLAG = 'COM') THEN
 BEGIN
 FOR
 SELECT PROJ_COD, PROJ2_COD, PROJ_NOM,
 CASE PROJ_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ_STATUS,
 CASE PROJ2_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ2_STATUS,
 SUM(LGE_VAL), PROJ2_NOM, PROJ2_ORCAM, PLA_NOM
 FROM MVLGE INNER JOIN CDPLA ON CDPLA.PLA_COD = MVLGE.LGE_PLA
 LEFT JOIN CDPROJ2 ON CDPROJ2.PROJ2_COD = MVLGE.LGE_PROJ2
 LEFT JOIN CDPROJ ON CDPROJ2.PROJ2_PROJ = CDPROJ.PROJ_COD
 
 WHERE LGE_PLA <> '1' AND
 LGE_PLA <> '2' AND
 PROJ_COD IS NOT NULL
 
 AND ((:PPLANODE IS NULL) OR ((PLA_NOM >= :PPLANODE) AND (PLA_NOM <=:PPLANOATE)))
 AND ((:PPROJETODE IS NULL) OR ((PROJ_NOM >= :PPROJETODE) AND (PROJ_NOM <=:PPROJETOATE)))
 
 AND ((:PDATADE IS NULL) OR ((LGE_EMI >= :PDATADE) AND (LGE_EMI <= :PDATAATE)))
 AND ((:PSTATUSPROJ IS NULL) OR (PROJ_STATUS = :PSTATUSPROJ))
 
 
 GROUP BY PROJ_COD, PROJ2_COD, PROJ_NOM, PROJ_STATUS, PROJ2_STATUS, PROJ2_NOM, PROJ2_ORCAM, PLA_NOM
 
 UNION ALL
 
 SELECT PROJ_COD, PROJ2_COD, PROJ_NOM,
 CASE PROJ_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ_STATUS,
 CASE PROJ2_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ2_STATUS,
 SUM(DOB_VAL), PROJ2_NOM, PROJ2_ORCAM, PLA_NOM
 FROM MVLGED INNER JOIN CDPLA ON CDPLA.PLA_COD = MVLGED.DOB_PLA
 LEFT JOIN CDPROJ2 ON CDPROJ2.PROJ2_COD = MVLGED.DOB_PROJ2
 LEFT JOIN CDPROJ ON CDPROJ2.PROJ2_PROJ = CDPROJ.PROJ_COD
 
 WHERE PROJ_COD IS NOT NULL
 
 AND ((:PPLANODE IS NULL) OR ((PLA_NOM >= :PPLANODE) AND (PLA_NOM <=:PPLANOATE)))
 AND ((:PPROJETODE IS NULL) OR ((PROJ_NOM >= :PPROJETODE) AND (PROJ_NOM <=:PPROJETOATE)))
 
 AND ((:PDATADE IS NULL) OR ((DOB_EMI >= :PDATADE) AND (DOB_EMI <= :PDATAATE)))
 AND ((:PSTATUSPROJ IS NULL) OR (PROJ_STATUS = :PSTATUSPROJ))
 
 GROUP BY PROJ_COD, PROJ2_COD, PROJ_NOM,PROJ_STATUS, PROJ2_STATUS, PROJ2_NOM, PROJ2_ORCAM, PLA_NOM
 
 UNION ALL
 
 SELECT PROJ_COD, PROJ2_COD, PROJ_NOM,
 CASE PROJ_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ_STATUS,
 CASE PROJ2_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ2_STATUS,
 SUM(LGE_VAL), PROJ2_NOM,PROJ2_ORCAM, PLA_NOM
 FROM MORLGE INNER JOIN CDPLA ON CDPLA.PLA_COD = MORLGE.LGE_PLA
 LEFT JOIN CDPROJ2 ON CDPROJ2.PROJ2_COD = MORLGE.LGE_PROJ2
 LEFT JOIN CDPROJ ON CDPROJ2.PROJ2_PROJ = CDPROJ.PROJ_COD
 
 WHERE LGE_PLA <> '1' AND
 LGE_PLA <> '2' AND
 PROJ_COD IS NOT NULL
 
 AND ((:PPLANODE IS NULL) OR ((PLA_NOM >= :PPLANODE) AND (PLA_NOM <=:PPLANOATE)))
 AND ((:PPROJETODE IS NULL) OR ((PROJ_NOM >= :PPROJETODE) AND (PROJ_NOM <=:PPROJETOATE)))
 
 AND ((:PDATADE IS NULL) OR ((LGE_EMI >= :PDATADE) AND (LGE_EMI <= :PDATAATE)))
 AND ((:PSTATUSPROJ IS NULL) OR (PROJ_STATUS = :PSTATUSPROJ))
 
 GROUP BY PROJ_COD, PROJ2_COD, PROJ_NOM, PROJ_STATUS, PROJ2_STATUS, PROJ2_NOM, PROJ2_ORCAM, PLA_NOM
 
 UNION ALL
 
 SELECT PROJ_COD, PROJ2_COD, PROJ_NOM,
 CASE PROJ_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ_STATUS,
 CASE PROJ2_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ2_STATUS,
 SUM(DOB_VAL), PROJ2_NOM, PROJ2_ORCAM, PLA_NOM
 FROM MORLGED INNER JOIN CDPLA ON CDPLA.PLA_COD = MORLGED.DOB_PLA
 LEFT JOIN CDPROJ2 ON CDPROJ2.PROJ2_COD = MORLGED.DOB_PROJ2
 LEFT JOIN CDPROJ ON CDPROJ2.PROJ2_PROJ = CDPROJ.PROJ_COD
 
 WHERE PROJ_COD IS NOT NULL
 
 AND ((:PPLANODE IS NULL) OR ((PLA_NOM >= :PPLANODE) AND (PLA_NOM <=:PPLANOATE)))
 AND ((:PPROJETODE IS NULL) OR ((PROJ_NOM >= :PPROJETODE) AND (PROJ_NOM <=:PPROJETOATE)))
 
 AND ((:PDATADE IS NULL) OR ((DOB_EMI >= :PDATADE) AND (DOB_EMI <= :PDATAATE)))
 AND ((:PSTATUSPROJ IS NULL) OR (PROJ_STATUS = :PSTATUSPROJ))
 
 GROUP BY PROJ_COD, PROJ2_COD, PROJ_NOM, PROJ_STATUS, PROJ2_STATUS, PROJ2_NOM, PROJ2_ORCAM, PLA_NOM
 
 UNION ALL
 
 SELECT PROJ_COD, PROJ2_COD, PROJ_NOM,
 CASE PROJ_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ_STATUS,
 CASE PROJ2_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ2_STATUS,
 SUM(REC_VAL), PROJ2_NOM, PROJ2_ORCAM, PLA_NOM
 FROM MVCOREC INNER JOIN CDPLA ON CDPLA.PLA_COD = MVCOREC.REC_PLA
 LEFT JOIN CDPROJ2 ON CDPROJ2.PROJ2_COD = MVCOREC.REC_PROJ2
 LEFT JOIN CDPROJ ON CDPROJ2.PROJ2_PROJ = CDPROJ.PROJ_COD
 
 WHERE PROJ_COD IS NOT NULL
 
 AND ((:PPLANODE IS NULL) OR ((PLA_NOM >= :PPLANODE) AND (PLA_NOM <=:PPLANOATE)))
 AND ((:PPROJETODE IS NULL) OR ((PROJ_NOM >= :PPROJETODE) AND (PROJ_NOM <=:PPROJETOATE)))
 
 AND ((:PDATADE IS NULL) OR ((REC_EMI >= :PDATADE) AND (REC_EMI <= :PDATAATE)))
 AND ((:PSTATUSPROJ IS NULL) OR (PROJ_STATUS = :PSTATUSPROJ))
 
 GROUP BY PROJ_COD, PROJ2_COD, PROJ_NOM, PROJ_STATUS, PROJ2_STATUS, PROJ2_NOM, PROJ2_ORCAM, PLA_NOM
 
 UNION ALL
 
 SELECT PROJ_COD, PROJ2_COD, PROJ_NOM,
 CASE PROJ_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ_STATUS,
 CASE PROJ2_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ2_STATUS,
 SUM(PAG_VAL) * -1, PROJ2_NOM, PROJ2_ORCAM, PLA_NOM FROM MVCOPAG INNER JOIN CDPLA ON CDPLA.PLA_COD = MVCOPAG.PAG_PLA
 LEFT JOIN CDPROJ2 ON CDPROJ2.PROJ2_COD = MVCOPAG.PAG_PROJ2
 LEFT JOIN CDPROJ ON CDPROJ2.PROJ2_PROJ = CDPROJ.PROJ_COD
 
 WHERE PROJ_COD IS NOT NULL
 
 AND ((:PPLANODE IS NULL) OR ((PLA_NOM >= :PPLANODE) AND (PLA_NOM <=:PPLANOATE)))
 AND ((:PPROJETODE IS NULL) OR ((PROJ_NOM >= :PPROJETODE) AND (PROJ_NOM <=:PPROJETOATE)))
 
 AND ((:PDATADE IS NULL) OR ((PAG_EMI >= :PDATADE) AND (PAG_EMI <= :PDATAATE)))
 AND ((:PSTATUSPROJ IS NULL) OR (PROJ_STATUS = :PSTATUSPROJ))
 
 GROUP BY PROJ_COD, PROJ2_COD, PROJ_NOM, PROJ_STATUS, PROJ2_STATUS, PROJ2_NOM, PROJ2_ORCAM, PLA_NOM
 ORDER BY 3, 5
 
 INTO WPROJ_COD, WPROJ2_COD, WPROJ_NOM, WPROJ_STATUS, WPROJ2_STATUS, WVALOR, WPROJ2_NOM, WPROJ2_ORCAM, WPLA_NOM DO
 BEGIN
 
 IF (PMODELO = 'RESUMIDO') THEN
 BEGIN
 IF (COALESCE(WAUX_PROJ_NOM, '') <> WPROJ_NOM) THEN
 BEGIN
 RTOTAL =:WSOMA;
 RPROJETO =:WAUX_PROJ_NOM;
 RPLANODECONTAS = '';
 RETAPA = '';
 RCODIGOPROJ =: WAUX_PROJ_COD;
 RSTATUSETAPA = '';
 RSTATUS = :WAUX_PROJ_STATUS;
 
 WAUX_PROJ_COD =:WPROJ_COD;
 WAUX_PROJ_NOM =:WPROJ_NOM;
 WAUX_PROJ_STATUS = :WPROJ_STATUS;
 WSOMA = 0;
 
 IF (RTOTAL IS NOT NULL) THEN
 BEGIN
 SELECT SUM(PROJ2_ORCAM) FROM CDPROJ2
 WHERE PROJ2_PROJ =:RCODIGOPROJ INTO RTOTALORCAM;
 
 IF (PHORASFUN = 'S') THEN
 BEGIN
 SELECT SUM((SELECT SUM(FUN_CUSTOHORA) FROM CDFUN F WHERE F.FUN_COD = G.FUN_COD) *
 (SELECT SUM(PROJ2_TEMPO) * 24 FROM CDPROJ2 A WHERE A.PROJ2_COD = B.PROJ2_COD))
 AS MAODEOBRA
 FROM CDFUN G LEFT JOIN CDPROJ4 ON G.FUN_COD = PROJ4_ENT
 LEFT JOIN CDPROJ2 B ON PROJ4_PROJ = PROJ2_COD
 WHERE B.PROJ2_COD IN
 (SELECT PROJ2_COD FROM CDPROJ2
 WHERE PROJ2_PROJ IN (SELECT PROJ_COD FROM CDPROJ where PROJ_COD = :RCODIGOPROJ))
 AND PROJ4_FLAG = 'F' INTO :RMAODEOBRA;
 RTOTAL = RTOTAL + COALESCE(:RMAODEOBRA, 0);
 END
 SUSPEND;
 END
 END
 IF (WVALOR IS NOT NULL) THEN
 WSOMA = WSOMA + WVALOR;
 
 
 END
 ELSE IF (PMODELO = 'ABERTO_PROJ_ETP') THEN
 BEGIN
 IF(COALESCE(WAUX_PROJ2_NOM, '') <> WPROJ2_NOM AND
 COALESCE(WAUX_PROJ_NOM, '') = WPROJ_NOM OR
 (COALESCE(WAUX_PROJ_NOM, '') <> WPROJ_NOM))
 THEN
 BEGIN
 RTOTAL =:WSOMA;
 RPROJETO =:WAUX_PROJ_NOM;
 RETAPA =:WAUX_PROJ2_NOM;
 RPLANODECONTAS = '';
 RCODIGOPROJ =:WAUX_PROJ_COD;
 RCODIGOPROJ2 =:WAUX_PROJ2_COD;
 RSTATUS =: WAUX_PROJ_STATUS;
 RSTATUSETAPA = :WAUX_PROJ2_STATUS;
 
 WSOMA = 0;
 
 IF (RTOTAL IS NOT NULL) THEN
 BEGIN
 SELECT SUM(PROJ2_ORCAM) FROM CDPROJ2
 WHERE PROJ2_COD =:RCODIGOPROJ2 INTO RTOTALORCAM;
 SUSPEND;
 
 IF (PHORASFUN = 'S') THEN
 BEGIN
 IF(WAUX_PROJ_NOM <> WPROJ_NOM)THEN
 BEGIN
 SELECT SUM((SELECT SUM(FUN_CUSTOHORA) FROM CDFUN F WHERE F.FUN_COD = G.FUN_COD) *
 (SELECT SUM(PROJ2_TEMPO) * 24 FROM CDPROJ2 A WHERE A.PROJ2_COD = B.PROJ2_COD))
 AS MAODEOBRA
 FROM CDFUN G LEFT JOIN CDPROJ4 ON G.FUN_COD = PROJ4_ENT
 LEFT JOIN CDPROJ2 B ON PROJ4_PROJ = PROJ2_COD
 WHERE B.PROJ2_COD = :RCODIGOPROJ2
 AND PROJ4_FLAG = 'F' INTO :RMAODEOBRA;
 RTOTAL =COALESCE(:RMAODEOBRA, 0);
 RPROJETO =:WAUX_PROJ_NOM;
 RETAPA = 'Custo de mão de obra';
 RPLANODECONTAS = '';
 RCODIGOPROJ =:WAUX_PROJ_COD;
 RCODIGOPROJ2 = NULL;
 RSTATUS = '';
 RSTATUSETAPA = '';
 SUSPEND;
 END
 END
 END
 WAUX_PROJ2_COD =:WPROJ2_COD;
 WAUX_PROJ_COD =:WPROJ_COD;
 WAUX_PROJ_NOM =:WPROJ_NOM;
 WAUX_PROJ2_NOM =:WPROJ2_NOM;
 WAUX_PROJ_STATUS = :WPROJ_STATUS;
 WAUX_PROJ2_STATUS = :WPROJ2_STATUS;
 END
 IF (WAUX_PROJ_NOM = WPROJ_NOM) THEN
 IF (WAUX_PROJ2_NOM = WPROJ2_NOM ) THEN
 IF (WVALOR IS NOT NULL) THEN
 WSOMA = WSOMA + WVALOR;
 
 END
 ELSE IF (PMODELO = 'ABERTO_PROJ_ETP_PCONTAS') THEN
 BEGIN
 IF (COALESCE(WAUX_PLA_NOM,'') <> WPLA_NOM OR
 COALESCE(WAUX_PROJ2_NOM, '') <> WPROJ2_NOM AND
 COALESCE(WAUX_PROJ_NOM, '') = WPROJ_NOM OR
 (COALESCE(WAUX_PROJ_NOM, '') <> WPROJ_NOM)) THEN
 BEGIN
 RTOTAL = :WSOMA;
 RPLANODECONTAS =: WAUX_PLA_NOM;
 RETAPA =: WAUX_PROJ2_NOM;
 RPROJETO =: WAUX_PROJ_NOM;
 RCODIGOPROJ =: WAUX_PROJ_COD;
 RCODIGOPROJ2 =: WAUX_PROJ2_COD;
 RSTATUS = :WAUX_PROJ_STATUS;
 RSTATUSETAPA = :WAUX_PROJ2_STATUS;
 
 WSOMA = 0;
 
 IF(RTOTAL IS NOT NULL)THEN
 BEGIN
 SELECT SUM(PROJ2_ORCAM) FROM CDPROJ2
 WHERE PROJ2_COD =:RCODIGOPROJ2 INTO RTOTALORCAM;
 SUSPEND;
 
 IF(PHORASFUN = 'S')THEN
 BEGIN
 IF(WAUX_PROJ_NOM <> WPROJ_NOM)THEN
 BEGIN
 SELECT SUM((SELECT SUM(FUN_CUSTOHORA) FROM CDFUN F WHERE F.FUN_COD = G.FUN_COD) *
 (SELECT SUM(PROJ2_TEMPO) * 24 FROM CDPROJ2 A WHERE A.PROJ2_COD = B.PROJ2_COD))
 AS MAODEOBRA
 FROM CDFUN G LEFT JOIN CDPROJ4 ON G.FUN_COD = PROJ4_ENT
 LEFT JOIN CDPROJ2 B ON PROJ4_PROJ = PROJ2_COD
 WHERE B.PROJ2_COD = :RCODIGOPROJ2
 AND PROJ4_FLAG = 'F' INTO :RMAODEOBRA;
 
 RTOTAL = :RMAODEOBRA;
 RPLANODECONTAS = '';
 RETAPA = 'Custos de mão de obra';
 RPROJETO = :WAUX_PROJ_NOM;
 RCODIGOPROJ = :WAUX_PROJ_COD;
 RCODIGOPROJ2 = NULL;
 RSTATUS = '';
 RSTATUSETAPA = '';
 SUSPEND;
 END
 END
 END
 WAUX_PROJ2_COD =: WPROJ2_COD;
 WAUX_PROJ_COD =: WPROJ_COD;
 WAUX_PLA_NOM = WPLA_NOM;
 WAUX_PROJ2_NOM = WPROJ2_NOM;
 WAUX_PROJ_NOM = WPROJ_NOM;
 WAUX_PROJ_STATUS = :WPROJ_STATUS;
 WAUX_PROJ2_STATUS = :WPROJ2_STATUS;
 END
 
 IF (WAUX_PROJ_NOM = WPROJ_NOM) THEN
 IF (WAUX_PROJ2_NOM = WPROJ2_NOM) THEN
 IF (WAUX_PLA_NOM = WPLA_NOM) THEN
 IF (WVALOR IS NOT NULL) THEN
 WSOMA = WSOMA + WVALOR;
 END
 END
 END
 ELSE IF (PFLAG = 'OPE') THEN
 BEGIN
 FOR
 SELECT PROJ_COD, PROJ2_COD, PROJ_NOM,
 CASE PROJ_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ_STATUS,
 CASE PROJ2_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ2_STATUS,
 SUM(LGE_VAL), PROJ2_NOM, PROJ2_ORCAM, PLA_NOM
 FROM MVLGE INNER JOIN CDPLA ON CDPLA.PLA_COD = MVLGE.LGE_PLA
 LEFT JOIN CDPROJ2 ON CDPROJ2.PROJ2_COD = MVLGE.LGE_PROJ2
 LEFT JOIN CDPROJ ON CDPROJ2.PROJ2_PROJ = CDPROJ.PROJ_COD
 
 WHERE LGE_PLA <> '1' AND
 LGE_PLA <> '2' AND
 PROJ_COD IS NOT NULL
 
 AND ((:PPLANODE IS NULL) OR ((PLA_NOM >= :PPLANODE) AND (PLA_NOM <=:PPLANOATE)))
 AND ((:PPROJETODE IS NULL) OR ((PROJ_NOM >= :PPROJETODE) AND (PROJ_NOM <=:PPROJETOATE)))
 
 AND ((:PDATADE IS NULL) OR ((LGE_EMI >= :PDATADE) AND (LGE_EMI <= :PDATAATE)))
 AND ((:PSTATUSPROJ IS NULL) OR (PROJ_STATUS = :PSTATUSPROJ))
 
 GROUP BY PROJ_COD, PROJ2_COD, PROJ_NOM, PROJ_STATUS, PROJ2_STATUS, PROJ2_NOM, PROJ2_ORCAM, PLA_NOM
 
 UNION ALL
 
 SELECT PROJ_COD, PROJ2_COD, PROJ_NOM,
 CASE PROJ_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ_STATUS,
 CASE PROJ2_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ2_STATUS,
 SUM(DOB_VAL), PROJ2_NOM, PROJ2_ORCAM, PLA_NOM
 FROM MVLGED INNER JOIN CDPLA ON CDPLA.PLA_COD = MVLGED.DOB_PLA
 LEFT JOIN CDPROJ2 ON CDPROJ2.PROJ2_COD = MVLGED.DOB_PROJ2
 LEFT JOIN CDPROJ ON CDPROJ2.PROJ2_PROJ = CDPROJ.PROJ_COD
 
 WHERE PROJ_COD IS NOT NULL
 
 AND ((:PPLANODE IS NULL) OR ((PLA_NOM >= :PPLANODE) AND (PLA_NOM <=:PPLANOATE)))
 AND ((:PPROJETODE IS NULL) OR ((PROJ_NOM >= :PPROJETODE) AND (PROJ_NOM <=:PPROJETOATE)))
 
 AND ((:PDATADE IS NULL) OR ((DOB_EMI >= :PDATADE) AND (DOB_EMI <= :PDATAATE)))
 AND ((:PSTATUSPROJ IS NULL) OR (PROJ_STATUS = :PSTATUSPROJ))
 
 GROUP BY PROJ_COD, PROJ2_COD, PROJ_NOM, PROJ_STATUS, PROJ2_STATUS, PROJ2_NOM, PROJ2_ORCAM, PLA_NOM
 
 UNION ALL
 
 SELECT PROJ_COD, PROJ2_COD, PROJ_NOM,
 CASE PROJ_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ_STATUS,
 CASE PROJ2_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ2_STATUS,
 SUM(LGE_VAL), PROJ2_NOM, PROJ2_ORCAM, PLA_NOM
 FROM MORLGE INNER JOIN CDPLA ON CDPLA.PLA_COD = MORLGE.LGE_PLA
 LEFT JOIN CDPROJ2 ON CDPROJ2.PROJ2_COD = MORLGE.LGE_PROJ2
 LEFT JOIN CDPROJ ON CDPROJ2.PROJ2_PROJ = CDPROJ.PROJ_COD
 
 WHERE LGE_PLA <> '1' AND
 LGE_PLA <> '2' AND
 PROJ_COD IS NOT NULL
 
 AND ((:PPLANODE IS NULL) OR ((PLA_NOM >= :PPLANODE) AND (PLA_NOM <=:PPLANOATE)))
 AND ((:PPROJETODE IS NULL) OR ((PROJ_NOM >= :PPROJETODE) AND (PROJ_NOM <=:PPROJETOATE)))
 
 AND ((:PDATADE IS NULL) OR ((LGE_EMI >= :PDATADE) AND (LGE_EMI <= :PDATAATE)))
 AND ((:PSTATUSPROJ IS NULL) OR (PROJ_STATUS = :PSTATUSPROJ))
 
 GROUP BY PROJ_COD, PROJ2_COD, PROJ_NOM, PROJ_STATUS, PROJ2_STATUS, PROJ2_NOM, PROJ2_ORCAM, PLA_NOM
 
 UNION ALL
 
 SELECT PROJ_COD, PROJ2_COD, PROJ_NOM,
 CASE PROJ_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ_STATUS,
 CASE PROJ2_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ2_STATUS,
 SUM(DOB_VAL), PROJ2_NOM, PROJ2_ORCAM, PLA_NOM
 FROM MORLGED INNER JOIN CDPLA ON CDPLA.PLA_COD = MORLGED.DOB_PLA
 LEFT JOIN CDPROJ2 ON CDPROJ2.PROJ2_COD = MORLGED.DOB_PROJ2
 LEFT JOIN CDPROJ ON CDPROJ2.PROJ2_PROJ = CDPROJ.PROJ_COD
 
 WHERE PROJ_COD IS NOT NULL
 
 AND ((:PPLANODE IS NULL) OR ((PLA_NOM >= :PPLANODE) AND (PLA_NOM <=:PPLANOATE)))
 AND ((:PPROJETODE IS NULL) OR ((PROJ_NOM >= :PPROJETODE) AND (PROJ_NOM <=:PPROJETOATE)))
 
 AND ((:PDATADE IS NULL) OR ((DOB_EMI >= :PDATADE) AND (DOB_EMI <= :PDATAATE)))
 AND ((:PSTATUSPROJ IS NULL) OR (PROJ_STATUS = :PSTATUSPROJ))
 
 GROUP BY PROJ_COD, PROJ2_COD, PROJ_NOM, PROJ_STATUS, PROJ2_STATUS, PROJ2_NOM, PROJ2_ORCAM, PLA_NOM
 ORDER BY 3, 5
 
 INTO WPROJ_COD, WPROJ2_COD, WPROJ_NOM, WPROJ_STATUS, WPROJ2_STATUS, WVALOR, WPROJ2_NOM, WPROJ2_ORCAM, WPLA_NOM DO
 
 BEGIN
 
 IF (PMODELO = 'RESUMIDO') THEN
 BEGIN
 IF (COALESCE(WAUX_PROJ_NOM, '') <> WPROJ_NOM) THEN
 BEGIN
 RTOTAL =:WSOMA;
 RPROJETO =:WAUX_PROJ_NOM;
 RPLANODECONTAS = '';
 RETAPA = '';
 RCODIGOPROJ =: WAUX_PROJ_COD;
 RSTATUSETAPA = '';
 RSTATUS = :WAUX_PROJ_STATUS;
 
 WAUX_PROJ_COD =:WPROJ_COD;
 WAUX_PROJ_NOM =:WPROJ_NOM;
 WAUX_PROJ_STATUS = :WPROJ_STATUS;
 WSOMA = 0;
 
 IF (RTOTAL IS NOT NULL) THEN
 BEGIN
 SELECT SUM(PROJ2_ORCAM) FROM CDPROJ2
 WHERE PROJ2_PROJ =:RCODIGOPROJ INTO RTOTALORCAM;
 
 IF (PHORASFUN = 'S') THEN
 BEGIN
 SELECT SUM((SELECT SUM(FUN_CUSTOHORA) FROM CDFUN F WHERE F.FUN_COD = G.FUN_COD) *
 (SELECT SUM(PROJ2_TEMPO) * 24 FROM CDPROJ2 A WHERE A.PROJ2_COD = B.PROJ2_COD))
 AS MAODEOBRA
 FROM CDFUN G LEFT JOIN CDPROJ4 ON G.FUN_COD = PROJ4_ENT
 LEFT JOIN CDPROJ2 B ON PROJ4_PROJ = PROJ2_COD
 WHERE B.PROJ2_COD IN
 (SELECT PROJ2_COD FROM CDPROJ2
 WHERE PROJ2_PROJ IN (SELECT PROJ_COD FROM CDPROJ where PROJ_COD = :RCODIGOPROJ))
 AND PROJ4_FLAG = 'F' INTO :RMAODEOBRA;
 RTOTAL = RTOTAL + COALESCE(:RMAODEOBRA, 0);
 END
 SUSPEND;
 END
 END
 IF (WVALOR IS NOT NULL) THEN
 WSOMA = WSOMA + WVALOR;
 
 
 END
 ELSE IF (PMODELO = 'ABERTO_PROJ_ETP') THEN
 BEGIN
 IF(COALESCE(WAUX_PROJ2_NOM, '') <> WPROJ2_NOM AND
 COALESCE(WAUX_PROJ_NOM, '') = WPROJ_NOM OR
 (COALESCE(WAUX_PROJ_NOM, '') <> WPROJ_NOM))
 THEN
 BEGIN
 RTOTAL =:WSOMA;
 RPROJETO =:WAUX_PROJ_NOM;
 RETAPA =:WAUX_PROJ2_NOM;
 RPLANODECONTAS = '';
 RCODIGOPROJ =:WAUX_PROJ_COD;
 RCODIGOPROJ2 =:WAUX_PROJ2_COD;
 RSTATUS = :WAUX_PROJ_STATUS;
 RSTATUSETAPA = :WAUX_PROJ2_STATUS;
 
 WSOMA = 0;
 
 IF (RTOTAL IS NOT NULL) THEN
 BEGIN
 SELECT SUM(PROJ2_ORCAM) FROM CDPROJ2
 WHERE PROJ2_COD =:RCODIGOPROJ2 INTO RTOTALORCAM;
 SUSPEND;
 
 IF (PHORASFUN = 'S') THEN
 BEGIN
 IF(WAUX_PROJ_NOM <> WPROJ_NOM)THEN
 BEGIN
 SELECT SUM((SELECT SUM(FUN_CUSTOHORA) FROM CDFUN F WHERE F.FUN_COD = G.FUN_COD) *
 (SELECT SUM(PROJ2_TEMPO) * 24 FROM CDPROJ2 A WHERE A.PROJ2_COD = B.PROJ2_COD))
 AS MAODEOBRA
 FROM CDFUN G LEFT JOIN CDPROJ4 ON G.FUN_COD = PROJ4_ENT
 LEFT JOIN CDPROJ2 B ON PROJ4_PROJ = PROJ2_COD
 WHERE B.PROJ2_COD = :RCODIGOPROJ2
 AND PROJ4_FLAG = 'F' INTO :RMAODEOBRA;
 RTOTAL =COALESCE(:RMAODEOBRA, 0);
 RPROJETO =:WAUX_PROJ_NOM;
 RETAPA = 'Custo de mão de obra';
 RPLANODECONTAS = '';
 RCODIGOPROJ =:WAUX_PROJ_COD;
 RCODIGOPROJ2 = NULL;
 RSTATUS = '';
 RSTATUSETAPA = '';
 SUSPEND;
 END
 END
 END
 WAUX_PROJ2_COD =:WPROJ2_COD;
 WAUX_PROJ_COD =:WPROJ_COD;
 WAUX_PROJ_NOM =:WPROJ_NOM;
 WAUX_PROJ2_NOM =:WPROJ2_NOM;
 WAUX_PROJ_STATUS = :WPROJ_STATUS;
 WAUX_PROJ2_STATUS = :WPROJ2_STATUS;
 
 END
 IF (WAUX_PROJ_NOM = WPROJ_NOM) THEN
 IF (WAUX_PROJ2_NOM = WPROJ2_NOM ) THEN
 IF (WVALOR IS NOT NULL) THEN
 WSOMA = WSOMA + WVALOR;
 
 END
 ELSE IF (PMODELO = 'ABERTO_PROJ_ETP_PCONTAS') THEN
 BEGIN
 IF (COALESCE(WAUX_PLA_NOM,'') <> WPLA_NOM OR
 COALESCE(WAUX_PROJ2_NOM, '') <> WPROJ2_NOM AND
 COALESCE(WAUX_PROJ_NOM, '') = WPROJ_NOM OR
 (COALESCE(WAUX_PROJ_NOM, '') <> WPROJ_NOM)) THEN
 BEGIN
 RTOTAL = :WSOMA;
 RPLANODECONTAS =: WAUX_PLA_NOM;
 RETAPA =: WAUX_PROJ2_NOM;
 RPROJETO =: WAUX_PROJ_NOM;
 RCODIGOPROJ =: WAUX_PROJ_COD;
 RCODIGOPROJ2 =: WAUX_PROJ2_COD;
 RSTATUS = :WAUX_PROJ_STATUS;
 RSTATUSETAPA = :WAUX_PROJ2_STATUS;
 
 
 WSOMA = 0;
 
 IF(RTOTAL IS NOT NULL)THEN
 BEGIN
 SELECT SUM(PROJ2_ORCAM) FROM CDPROJ2
 WHERE PROJ2_COD =:RCODIGOPROJ2 INTO RTOTALORCAM;
 SUSPEND;
 
 IF(PHORASFUN = 'S')THEN
 BEGIN
 IF(WAUX_PROJ_NOM <> WPROJ_NOM)THEN
 BEGIN
 SELECT SUM((SELECT SUM(FUN_CUSTOHORA) FROM CDFUN F WHERE F.FUN_COD = G.FUN_COD) *
 (SELECT SUM(PROJ2_TEMPO) * 24 FROM CDPROJ2 A WHERE A.PROJ2_COD = B.PROJ2_COD))
 AS MAODEOBRA
 FROM CDFUN G LEFT JOIN CDPROJ4 ON G.FUN_COD = PROJ4_ENT
 LEFT JOIN CDPROJ2 B ON PROJ4_PROJ = PROJ2_COD
 WHERE B.PROJ2_COD = :RCODIGOPROJ2
 AND PROJ4_FLAG = 'F' INTO :RMAODEOBRA;
 
 RTOTAL = :RMAODEOBRA;
 RPLANODECONTAS = '';
 RETAPA = 'Custos de mão de obra';
 RPROJETO = :WAUX_PROJ_NOM;
 RCODIGOPROJ = :WAUX_PROJ_COD;
 RCODIGOPROJ2 = NULL;
 RSTATUS = '';
 RSTATUSETAPA = '';
 SUSPEND;
 END
 END
 
 END
 WAUX_PROJ2_COD =: WPROJ2_COD;
 WAUX_PROJ_COD =: WPROJ_COD;
 WAUX_PLA_NOM = WPLA_NOM;
 WAUX_PROJ2_NOM = WPROJ2_NOM;
 WAUX_PROJ_NOM = WPROJ_NOM;
 WAUX_PROJ_STATUS = :WPROJ_STATUS;
 WAUX_PROJ2_STATUS = :WPROJ2_STATUS;
 END
 IF (WAUX_PROJ_NOM = WPROJ_NOM) THEN
 IF (WAUX_PROJ2_NOM = WPROJ2_NOM) THEN
 IF (WAUX_PLA_NOM = WPLA_NOM) THEN
 IF (WVALOR IS NOT NULL) THEN
 WSOMA = WSOMA + WVALOR;
 END
 END
 END
 
 IF (PMODELO = 'RESUMIDO') THEN
 BEGIN
 RTOTAL =:WSOMA;
 RPROJETO =:WAUX_PROJ_NOM;
 RPLANODECONTAS = '';
 RETAPA = '';
 RCODIGOPROJ =: WAUX_PROJ_COD;
 RSTATUSETAPA = '';
 RSTATUS = :WAUX_PROJ_STATUS;
 
 IF (RTOTAL IS NOT NULL) THEN
 BEGIN
 SELECT SUM(PROJ2_ORCAM) FROM CDPROJ2
 WHERE PROJ2_PROJ =:RCODIGOPROJ INTO RTOTALORCAM;
 
 IF (PHORASFUN = 'S') THEN
 BEGIN
 SELECT SUM((SELECT SUM(FUN_CUSTOHORA) FROM CDFUN F WHERE F.FUN_COD = G.FUN_COD) *
 (SELECT SUM(PROJ2_TEMPO) * 24 FROM CDPROJ2 A WHERE A.PROJ2_COD = B.PROJ2_COD))
 AS MAODEOBRA
 FROM CDFUN G LEFT JOIN CDPROJ4 ON G.FUN_COD = PROJ4_ENT
 LEFT JOIN CDPROJ2 B ON PROJ4_PROJ = PROJ2_COD
 WHERE B.PROJ2_COD IN
 (SELECT PROJ2_COD FROM CDPROJ2
 WHERE PROJ2_PROJ IN (SELECT PROJ_COD FROM CDPROJ where PROJ_COD = :RCODIGOPROJ))
 AND PROJ4_FLAG = 'F' INTO :RMAODEOBRA;
 RTOTAL = RTOTAL + COALESCE(:RMAODEOBRA, 0);
 END
 SUSPEND;
 END
 END
 ELSE IF (PMODELO = 'ABERTO_PROJ_ETP') THEN
 BEGIN
 RTOTAL =:WSOMA;
 RPROJETO =:WAUX_PROJ_NOM;
 RETAPA =:WAUX_PROJ2_NOM;
 RPLANODECONTAS = '';
 RCODIGOPROJ =:WAUX_PROJ_COD;
 RCODIGOPROJ2 =:WAUX_PROJ2_COD;
 RSTATUS = :WAUX_PROJ_STATUS;
 RSTATUSETAPA =: WAUX_PROJ2_STATUS;
 
 IF (RTOTAL IS NOT NULL) THEN
 BEGIN
 SELECT SUM(PROJ2_ORCAM) FROM CDPROJ2
 WHERE PROJ2_COD =:RCODIGOPROJ2 INTO RTOTALORCAM;
 SUSPEND;
 
 IF (PHORASFUN = 'S') THEN
 BEGIN
 IF(WAUX_PROJ_NOM <> WPROJ_NOM)THEN
 BEGIN
 SELECT SUM((SELECT SUM(FUN_CUSTOHORA) FROM CDFUN F WHERE F.FUN_COD = G.FUN_COD) *
 (SELECT SUM(PROJ2_TEMPO) * 24 FROM CDPROJ2 A WHERE A.PROJ2_COD = B.PROJ2_COD))
 AS MAODEOBRA
 FROM CDFUN G LEFT JOIN CDPROJ4 ON G.FUN_COD = PROJ4_ENT
 LEFT JOIN CDPROJ2 B ON PROJ4_PROJ = PROJ2_COD
 WHERE B.PROJ2_COD = :RCODIGOPROJ2
 AND PROJ4_FLAG = 'F' INTO :RMAODEOBRA;
 RTOTAL =COALESCE(:RMAODEOBRA, 0);
 RPROJETO =:WAUX_PROJ_NOM;
 RETAPA = 'Custo de mão de obra';
 RPLANODECONTAS = '';
 RCODIGOPROJ =:WAUX_PROJ_COD;
 RCODIGOPROJ2 = NULL;
 RSTATUS = '';
 RSTATUSETAPA = '';
 SUSPEND;
 END
 END
 END
 
 END
 ELSE IF (PMODELO = 'ABERTO_PROJ_ETP_PCONTAS') THEN
 BEGIN
 RTOTAL = :WSOMA;
 RPLANODECONTAS =: WAUX_PLA_NOM;
 RETAPA =: WAUX_PROJ2_NOM;
 RPROJETO =: WAUX_PROJ_NOM;
 RCODIGOPROJ =: WAUX_PROJ_COD;
 RCODIGOPROJ2 =: WAUX_PROJ2_COD;
 RSTATUS = :WAUX_PROJ_STATUS;
 RSTATUSETAPA =: WAUX_PROJ2_STATUS;
 
 IF(RTOTAL IS NOT NULL)THEN
 BEGIN
 SELECT SUM(PROJ2_ORCAM) FROM CDPROJ2
 WHERE PROJ2_COD =:RCODIGOPROJ2 INTO RTOTALORCAM;
 SUSPEND;
 
 IF(PHORASFUN = 'S')THEN
 BEGIN
 SELECT SUM((SELECT SUM(FUN_CUSTOHORA) FROM CDFUN F WHERE F.FUN_COD = G.FUN_COD) *
 (SELECT SUM(PROJ2_TEMPO) * 24 FROM CDPROJ2 A WHERE A.PROJ2_COD = B.PROJ2_COD))
 AS MAODEOBRA
 FROM CDFUN G LEFT JOIN CDPROJ4 ON G.FUN_COD = PROJ4_ENT
 LEFT JOIN CDPROJ2 B ON PROJ4_PROJ = PROJ2_COD
 WHERE B.PROJ2_COD = :RCODIGOPROJ2
 AND PROJ4_FLAG = 'F' INTO :RMAODEOBRA;
 
 RTOTAL = :RMAODEOBRA;
 RPLANODECONTAS = '';
 RETAPA = 'Custos de mão de obra';
 RPROJETO = :WAUX_PROJ_NOM;
 RCODIGOPROJ = :WAUX_PROJ_COD;
 RCODIGOPROJ2 = NULL;
 RSTATUS = '';
 RSTATUSETAPA = '';
 SUSPEND;
 END
 END
 END
 
 END
^

ALTER PROCEDURE RELDURACAO (
    PDIAS INTEGER,
    PDATADE TIMESTAMP,
    PDATAATE TIMESTAMP,
    PTIPO INTEGER,
    PPRODE VARCHAR(100),
    PPROATE VARCHAR(100),
    PALMDE VARCHAR(50),
    PALMATE VARCHAR(50),
    PMARDE VARCHAR(30),
    PMARATE VARCHAR(30),
    PGRUDE VARCHAR(30),
    PGRUATE VARCHAR(30),
    PSGRUDE VARCHAR(30),
    PSGRUATE VARCHAR(30),
    PTIPDE VARCHAR(30),
    PTIPATE VARCHAR(30),
    PTRADE VARCHAR(40),
    PTRAATE VARCHAR(40),
    PCATDE VARCHAR(30),
    PCATATE VARCHAR(30))
RETURNS (
    CUPOM VARCHAR(6),
    MOVIMENTO DOUBLE PRECISION,
    FATURAMENTO DOUBLE PRECISION,
    EST_SAL DOUBLE PRECISION,
    PRO_COD INTEGER,
    PRO_INT VARCHAR(15),
    PRO_BAR VARCHAR(15),
    PRO_NOM VARCHAR(100),
    DURACAO DOUBLE PRECISION,
    TIP_NOM VARCHAR(30),
    MAR_NOM VARCHAR(30),
    GRU_NOM VARCHAR(30),
    SUBGRUPO VARCHAR(30),
    COR_NOM VARCHAR(30),
    MED_NOM VARCHAR(30),
    CODIGO VARCHAR(21),
    CATEGORIA VARCHAR(30))
AS
 DECLARE VARIABLE WPRODUTO INTEGER;
 DECLARE VARIABLE WMOVIMENTO DOUBLE PRECISION;
 DECLARE VARIABLE WFATURAMENTO DOUBLE PRECISION;
 DECLARE VARIABLE WDURACAO DOUBLE PRECISION;
 DECLARE VARIABLE WEST_SAL INTEGER;
 DECLARE VARIABLE WCONT INTEGER;
 DECLARE VARIABLE WCUPOM VARCHAR(6);
 DECLARE VARIABLE WPRO_INT VARCHAR(15);
 DECLARE VARIABLE WPRO_BAR VARCHAR(15);
 DECLARE VARIABLE WPRO_NOM VARCHAR(100);
 DECLARE VARIABLE WTIP_NOM VARCHAR(30);
 DECLARE VARIABLE WMAR_NOM VARCHAR(30);
 DECLARE VARIABLE WGRU_NOM VARCHAR(30);
 DECLARE VARIABLE WSUBGRUPO VARCHAR(30);
 DECLARE VARIABLE WCATEGORIA VARCHAR(30);
 begin
 PRO_COD=0;
 MOVIMENTO=0;
 FATURAMENTO=0;
 EST_SAL=0;
 WDURACAO=0;
 WCONT=0;
 CUPOM="";
 PRO_INT="";
 PRO_BAR="";
 PRO_NOM="";
 TIP_NOM="";
 MAR_NOM="";
 GRU_NOM="";
 SUBGRUPO="";
 CATEGORIA="";
 IF (PTIPO=0) THEN
 BEGIN
 For
 Select Distinct Count( vd1_cod ) As Cupom
 ,sum(vd2_qtd) As Movimento
 ,Sum( (vd2_vlr*vd2_qtd) ) As Faturamento
 ,est_sal
 ,cdpro.pro_cod,cdpro.pro_int,cdpro.pro_bar,cdpro.pro_nom
 From estmvvd1,cdpro,mvest,cdtra1,CDMAR,CDGRUP,CDSUBGRUP,CDCATPRO, CDTIPP, CDALM
 ,estmvvd2 left outer join cdprocm on (estmvvd2.vd2_pro = cdprocm.pro_pro and estmvvd2.vd2_cor = cdprocm.pro_cor and estmvvd2.vd2_med = cdprocm.pro_med )
 left outer join cdmed on estmvvd2.vd2_med = cdmed.med_cod
 left outer join cdcor on estmvvd2.vd2_cor = cdcor.cor_cod
 Where vd2_pro = cdpro.pro_cod
 and vd2_bol = vd1_cod
 and vd2_pro = est_pro and vd2_alm = est_alm and vd2_med = est_tam
 and vd2_cor = est_cor and vd1_canc <> "C"
 and PRO_MAR = MAR_COD and PRO_TIP = TIP_COD
 and PRO_CAT = CAT_COD
 and vd2_alm = alm_cod
 and PRO_GRU = CDGRUP.GRU_COD
 and PRO_SUBGRU = CDSUBGRUP.GRU_COD
 and TRA_TIP_TRA = "VND" and vd1_tra = tra_cod
 and ESTMVVD1.VD1_CAD >= :PDATADE and ESTMVVD1.VD1_CAD <= :PDATAATE
 and ( (CDPRO.PRO_NOM >= :PPRODE and CDPRO.PRO_NOM <= :PPROATE) OR (:PPRODE IS NULL) )
 and ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 and ( (CDMAR.MAR_NOM >= :PMARDE and CDMAR.MAR_NOM <= :PMARATE) OR (:PMARDE IS NULL) )
 and ( (CDGRUP.GRU_NOM >= :PGRUDE and CDGRUP.GRU_NOM <= :PGRUATE) OR (:PGRUDE IS NULL) )
 and ( (CDSUBGRUP.GRU_NOM >= :PSGRUDE and CDSUBGRUP.GRU_NOM <= :PSGRUATE) OR (:PSGRUDE IS NULL) )
 and ( (CDTIPP.TIP_NOM >= :PTIPDE and CDTIPP.TIP_NOM <= :PTIPATE) OR (:PTIPDE IS NULL) )
 and ( (CDCATPRO.CAT_NOM >= :PCATDE and CDCATPRO.CAT_NOM <= :PCATATE) OR (:PCATDE IS NULL) )
 and ( (CDTRA1.TRA_NOM >= :PTRADE and CDTRA1.TRA_NOM <= :PTRAATE) OR (:PTRADE IS NULL) )
 Group By cdpro.pro_nom, cdpro.pro_int, cdpro.pro_bar, cdpro.pro_cod,cdprocm.pro_cod, cdmed.med_nom, cdcor.cor_nom, est_sal
 ORDER BY PRO_COD ASC
 INTO :WCUPOM,:WMOVIMENTO,:WFATURAMENTO,:WEST_SAL,:WPRODUTO,:WPRO_INT,:WPRO_BAR,:WPRO_NOM
 DO
 BEGIN
 IF (WCONT=0) THEN
 BEGIN
 PRO_COD=WPRODUTO;
 END
 WCONT=WCONT+1;
 IF (:MOVIMENTO>0) THEN
 BEGIN
 DURACAO = ( est_sal / (:MOVIMENTO/:pDIAS) );
 DURACAO = (CAST((DURACAO * 100) as integer) / 100);
 END
 ELSE
 DURACAO = 0;
 IF (:WPRODUTO<>PRO_COD) THEN
 BEGIN
 SUSPEND;
 MOVIMENTO=0;
 FATURAMENTO=0;
 EST_SAL=0;
 DURACAO=0;
 END
 CUPOM=WCUPOM;
 PRO_INT=WPRO_INT;
 PRO_BAR=WPRO_BAR;
 PRO_NOM=WPRO_NOM;
 TIP_NOM=WTIP_NOM;
 MAR_NOM=WMAR_NOM;
 GRU_NOM=WGRU_NOM;
 SUBGRUPO=WSUBGRUPO;
 MOVIMENTO=MOVIMENTO+WMOVIMENTO;
 FATURAMENTO=FATURAMENTO+WFATURAMENTO;
 EST_SAL=EST_SAL+WEST_SAL;
 DURACAO=DURACAO+WDURACAO;
 PRO_COD=WPRODUTO;
 END
 SUSPEND;
 END
 IF (PTIPO=1) THEN
 BEGIN
 For
 Select Distinct Count( vd1_cod ) As Cupom
 ,sum(vd2_qtd) As Movimento
 ,Sum( (vd2_vlr*vd2_qtd) ) As Faturamento
 ,est_sal
 ,cdpro.pro_cod,cdpro.pro_int,cdpro.pro_bar,cdpro.pro_nom,mar_nom
 From estmvvd1,cdpro,mvest,cdtra1,CDMAR,CDGRUP,CDSUBGRUP,CDCATPRO, CDTIPP, CDALM
 ,estmvvd2 left outer join cdprocm on (estmvvd2.vd2_pro = cdprocm.pro_pro and estmvvd2.vd2_cor = cdprocm.pro_cor and estmvvd2.vd2_med = cdprocm.pro_med )
 left outer join cdmed on estmvvd2.vd2_med = cdmed.med_cod
 left outer join cdcor on estmvvd2.vd2_cor = cdcor.cor_cod
 Where vd2_pro = cdpro.pro_cod
 and vd2_bol = vd1_cod
 and vd2_pro = est_pro and vd2_alm = est_alm and vd2_med = est_tam
 and vd2_cor = est_cor and vd1_canc <> "C"
 and PRO_MAR = MAR_COD and PRO_TIP = TIP_COD
 and PRO_CAT = CAT_COD
 and vd2_alm = alm_cod
 and PRO_GRU = CDGRUP.GRU_COD
 and PRO_SUBGRU = CDSUBGRUP.GRU_COD
 and TRA_TIP_TRA = "VND" and vd1_tra = tra_cod
 and ESTMVVD1.VD1_CAD >= :PDATADE and ESTMVVD1.VD1_CAD <= :PDATAATE
 and ( (CDPRO.PRO_NOM >= :PPRODE and CDPRO.PRO_NOM <= :PPROATE) OR (:PPRODE IS NULL) )
 and ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 and ( (CDMAR.MAR_NOM >= :PMARDE and CDMAR.MAR_NOM <= :PMARATE) OR (:PMARDE IS NULL) )
 and ( (CDGRUP.GRU_NOM >= :PGRUDE and CDGRUP.GRU_NOM <= :PGRUATE) OR (:PGRUDE IS NULL) )
 and ( (CDSUBGRUP.GRU_NOM >= :PSGRUDE and CDSUBGRUP.GRU_NOM <= :PSGRUATE) OR (:PSGRUDE IS NULL) )
 and ( (CDTIPP.TIP_NOM >= :PTIPDE and CDTIPP.TIP_NOM <= :PTIPATE) OR (:PTIPDE IS NULL) )
 and ( (CDCATPRO.CAT_NOM >= :PCATDE and CDCATPRO.CAT_NOM <= :PCATATE) OR (:PCATDE IS NULL) )
 and ( (CDTRA1.TRA_NOM >= :PTRADE and CDTRA1.TRA_NOM <= :PTRAATE) OR (:PTRADE IS NULL) )
 Group By cdpro.pro_nom, cdpro.pro_int, cdpro.pro_bar, cdpro.pro_cod, cdprocm.pro_cod, cdmed.med_nom, cdcor.cor_nom, cdmar.mar_nom, est_sal
 ORDER BY PRO_COD ASC
 INTO :WCUPOM,:WMOVIMENTO,:WFATURAMENTO,:WEST_SAL,:WPRODUTO,:WPRO_INT,:WPRO_BAR,:WPRO_NOM,:WMAR_NOM
 DO
 BEGIN
 IF (WCONT=0) THEN
 BEGIN
 PRO_COD=WPRODUTO;
 END
 WCONT=WCONT+1;
 IF (:MOVIMENTO>0) THEN
 BEGIN
 DURACAO = ( est_sal / (:MOVIMENTO/:pDIAS) );
 DURACAO = (CAST((DURACAO * 100) as integer) / 100);
 END
 ELSE
 DURACAO = 0;
 IF (:WPRODUTO<>PRO_COD) THEN
 BEGIN
 SUSPEND;
 MOVIMENTO=0;
 FATURAMENTO=0;
 EST_SAL=0;
 DURACAO=0;
 END
 CUPOM=WCUPOM;
 PRO_INT=WPRO_INT;
 PRO_BAR=WPRO_BAR;
 PRO_NOM=WPRO_NOM;
 TIP_NOM=WTIP_NOM;
 MAR_NOM=WMAR_NOM;
 GRU_NOM=WGRU_NOM;
 SUBGRUPO=WSUBGRUPO;
 MOVIMENTO=MOVIMENTO+WMOVIMENTO;
 FATURAMENTO=FATURAMENTO+WFATURAMENTO;
 EST_SAL=EST_SAL+WEST_SAL;
 DURACAO=DURACAO+WDURACAO;
 PRO_COD=WPRODUTO;
 END
 SUSPEND;
 END
 IF (PTIPO=2) THEN
 BEGIN
 For
 Select Distinct Count( vd1_cod ) As Cupom
 ,sum(vd2_qtd) As Movimento
 ,Sum( (vd2_vlr*vd2_qtd) ) As Faturamento
 ,est_sal
 ,cdpro.pro_cod,cdpro.pro_int,cdpro.pro_bar,cdpro.pro_nom,tip_nom
 From estmvvd1,cdpro,mvest,cdtra1,CDMAR,CDGRUP,CDSUBGRUP,CDCATPRO, CDTIPP, CDALM
 ,estmvvd2 left outer join cdprocm on (estmvvd2.vd2_pro = cdprocm.pro_pro and estmvvd2.vd2_cor = cdprocm.pro_cor and estmvvd2.vd2_med = cdprocm.pro_med )
 left outer join cdmed on estmvvd2.vd2_med = cdmed.med_cod
 left outer join cdcor on estmvvd2.vd2_cor = cdcor.cor_cod
 Where vd2_pro = cdpro.pro_cod
 and vd2_bol = vd1_cod
 and vd2_pro = est_pro and vd2_alm = est_alm and vd2_med = est_tam
 and vd2_cor = est_cor and vd1_canc <> "C"
 and PRO_MAR = MAR_COD and PRO_TIP = TIP_COD
 and PRO_CAT = CAT_COD
 and vd2_alm = alm_cod
 and PRO_GRU = CDGRUP.GRU_COD
 and PRO_SUBGRU = CDSUBGRUP.GRU_COD
 and TRA_TIP_TRA = "VND" and vd1_tra = tra_cod
 and ESTMVVD1.VD1_CAD >= :PDATADE and ESTMVVD1.VD1_CAD <= :PDATAATE
 and ( (CDPRO.PRO_NOM >= :PPRODE and CDPRO.PRO_NOM <= :PPROATE) OR (:PPRODE IS NULL) )
 and ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 and ( (CDMAR.MAR_NOM >= :PMARDE and CDMAR.MAR_NOM <= :PMARATE) OR (:PMARDE IS NULL) )
 and ( (CDGRUP.GRU_NOM >= :PGRUDE and CDGRUP.GRU_NOM <= :PGRUATE) OR (:PGRUDE IS NULL) )
 and ( (CDSUBGRUP.GRU_NOM >= :PSGRUDE and CDSUBGRUP.GRU_NOM <= :PSGRUATE) OR (:PSGRUDE IS NULL) )
 and ( (CDTIPP.TIP_NOM >= :PTIPDE and CDTIPP.TIP_NOM <= :PTIPATE) OR (:PTIPDE IS NULL) )
 and ( (CDCATPRO.CAT_NOM >= :PCATDE and CDCATPRO.CAT_NOM <= :PCATATE) OR (:PCATDE IS NULL) )
 and ( (CDTRA1.TRA_NOM >= :PTRADE and CDTRA1.TRA_NOM <= :PTRAATE) OR (:PTRADE IS NULL) )
 Group By cdpro.pro_nom, cdpro.pro_int, cdpro.pro_bar, cdtipp.tip_nom, cdpro.pro_cod, mvest.est_sal,cdprocm.pro_cod, cdmed.med_nom, cdcor.cor_nom
 ORDER BY PRO_COD ASC
 INTO :WCUPOM,:WMOVIMENTO,:WFATURAMENTO,:WEST_SAL,:WPRODUTO,:WPRO_INT,:WPRO_BAR,:WPRO_NOM,:WTIP_NOM
 DO
 BEGIN
 IF (WCONT=0) THEN
 BEGIN
 PRO_COD=WPRODUTO;
 END
 WCONT=WCONT+1;
 IF (:MOVIMENTO>0) THEN
 BEGIN
 DURACAO = ( est_sal / (:MOVIMENTO/:pDIAS) );
 DURACAO = (CAST((DURACAO * 100) as integer) / 100);
 END
 ELSE
 DURACAO = 0;
 IF (:WPRODUTO<>PRO_COD) THEN
 BEGIN
 SUSPEND;
 MOVIMENTO=0;
 FATURAMENTO=0;
 EST_SAL=0;
 DURACAO=0;
 END
 CUPOM=WCUPOM;
 PRO_INT=WPRO_INT;
 PRO_BAR=WPRO_BAR;
 PRO_NOM=WPRO_NOM;
 TIP_NOM=WTIP_NOM;
 MAR_NOM=WMAR_NOM;
 GRU_NOM=WGRU_NOM;
 SUBGRUPO=WSUBGRUPO;
 MOVIMENTO=MOVIMENTO+WMOVIMENTO;
 FATURAMENTO=FATURAMENTO+WFATURAMENTO;
 EST_SAL=EST_SAL+WEST_SAL;
 DURACAO=DURACAO+WDURACAO;
 PRO_COD=WPRODUTO;
 END
 SUSPEND;
 END
 IF (PTIPO=3) THEN
 BEGIN
 For
 Select Distinct Count( vd1_cod ) As Cupom
 ,sum(vd2_qtd) As Movimento
 ,Sum( (vd2_vlr*vd2_qtd) ) As Faturamento
 ,est_sal
 ,cdpro.pro_cod,cdpro.pro_int,cdpro.pro_bar,cdpro.pro_nom, CDGRUP.GRU_NOM, CDSUBGRUP.GRU_NOM AS SUBGRUPO
 From estmvvd1,cdpro,mvest,cdtra1,CDMAR,CDGRUP,CDSUBGRUP,CDCATPRO, CDTIPP, CDALM
 ,estmvvd2 left outer join cdprocm on (estmvvd2.vd2_pro = cdprocm.pro_pro and estmvvd2.vd2_cor = cdprocm.pro_cor and estmvvd2.vd2_med = cdprocm.pro_med )
 left outer join cdmed on estmvvd2.vd2_med = cdmed.med_cod
 left outer join cdcor on estmvvd2.vd2_cor = cdcor.cor_cod
 Where vd2_pro = cdpro.pro_cod
 and vd2_bol = vd1_cod
 and vd2_pro = est_pro and vd2_alm = est_alm and vd2_med = est_tam
 and vd2_cor = est_cor and vd1_canc <> "C"
 and PRO_MAR = MAR_COD and PRO_TIP = TIP_COD
 and PRO_CAT = CAT_COD
 and vd2_alm = alm_cod
 and PRO_GRU = CDGRUP.GRU_COD
 and PRO_SUBGRU = CDSUBGRUP.GRU_COD
 and TRA_TIP_TRA = "VND" and vd1_tra = tra_cod
 and ESTMVVD1.VD1_CAD >= :PDATADE and ESTMVVD1.VD1_CAD <= :PDATAATE
 and ( (CDPRO.PRO_NOM >= :PPRODE and CDPRO.PRO_NOM <= :PPROATE) OR (:PPRODE IS NULL) )
 and ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 and ( (CDMAR.MAR_NOM >= :PMARDE and CDMAR.MAR_NOM <= :PMARATE) OR (:PMARDE IS NULL) )
 and ( (CDGRUP.GRU_NOM >= :PGRUDE and CDGRUP.GRU_NOM <= :PGRUATE) OR (:PGRUDE IS NULL) )
 and ( (CDSUBGRUP.GRU_NOM >= :PSGRUDE and CDSUBGRUP.GRU_NOM <= :PSGRUATE) OR (:PSGRUDE IS NULL) )
 and ( (CDTIPP.TIP_NOM >= :PTIPDE and CDTIPP.TIP_NOM <= :PTIPATE) OR (:PTIPDE IS NULL) )
 and ( (CDCATPRO.CAT_NOM >= :PCATDE and CDCATPRO.CAT_NOM <= :PCATATE) OR (:PCATDE IS NULL) )
 and ( (CDTRA1.TRA_NOM >= :PTRADE and CDTRA1.TRA_NOM <= :PTRAATE) OR (:PTRADE IS NULL) )
 Group By cdpro.pro_nom, cdpro.pro_int, cdpro.pro_bar, cdpro.pro_cod, mvest.est_sal, CDGRUP.GRU_NOM, CDSUBGRUP.GRU_NOM,cdprocm.pro_cod, cdmed.med_nom, cdcor.cor_nom
 ORDER BY PRO_COD ASC
 INTO :WCUPOM,:WMOVIMENTO,:WFATURAMENTO,:WEST_SAL,:WPRODUTO,:WPRO_INT,:WPRO_BAR,:WPRO_NOM,:WGRU_NOM,:WSUBGRUPO
 DO
 BEGIN
 IF (WCONT=0) THEN
 BEGIN
 PRO_COD=WPRODUTO;
 END
 WCONT=WCONT+1;
 IF (:MOVIMENTO>0) THEN
 BEGIN
 DURACAO = ( est_sal / (:MOVIMENTO/:pDIAS) );
 DURACAO = (CAST((DURACAO * 100) as integer) / 100);
 END
 ELSE
 DURACAO = 0;
 IF (:WPRODUTO<>PRO_COD) THEN
 BEGIN
 SUSPEND;
 MOVIMENTO=0;
 FATURAMENTO=0;
 EST_SAL=0;
 DURACAO=0;
 END
 CUPOM=WCUPOM;
 PRO_INT=WPRO_INT;
 PRO_BAR=WPRO_BAR;
 PRO_NOM=WPRO_NOM;
 TIP_NOM=WTIP_NOM;
 MAR_NOM=WMAR_NOM;
 GRU_NOM=WGRU_NOM;
 SUBGRUPO=WSUBGRUPO;
 MOVIMENTO=MOVIMENTO+WMOVIMENTO;
 FATURAMENTO=FATURAMENTO+WFATURAMENTO;
 EST_SAL=EST_SAL+WEST_SAL;
 DURACAO=DURACAO+WDURACAO;
 PRO_COD=WPRODUTO;
 END
 SUSPEND;
 END
 IF (PTIPO=4) THEN
 BEGIN
 For
 Select Distinct Count( vd1_cod ) As Cupom
 ,sum(vd2_qtd) As Movimento
 ,Sum( (vd2_vlr*vd2_qtd) ) As Faturamento
 ,est_sal
 ,cdpro.pro_cod,cdpro.pro_int,cdpro.pro_bar,cdpro.pro_nom,CDSUBGRUP.GRU_NOM AS SUBGRUPO
 From estmvvd1,cdpro,mvest,cdtra1,CDMAR,CDGRUP,CDSUBGRUP,CDCATPRO, CDTIPP, CDALM
 ,estmvvd2 left outer join cdprocm on (estmvvd2.vd2_pro = cdprocm.pro_pro and estmvvd2.vd2_cor = cdprocm.pro_cor and estmvvd2.vd2_med = cdprocm.pro_med )
 left outer join cdmed on estmvvd2.vd2_med = cdmed.med_cod
 left outer join cdcor on estmvvd2.vd2_cor = cdcor.cor_cod
 Where vd2_pro = cdpro.pro_cod
 and vd2_bol = vd1_cod
 and vd2_pro = est_pro and vd2_alm = est_alm and vd2_med = est_tam
 and vd2_cor = est_cor and vd1_canc <> "C"
 and PRO_MAR = MAR_COD and PRO_TIP = TIP_COD
 and PRO_CAT = CAT_COD
 and vd2_alm = alm_cod
 and PRO_GRU = CDGRUP.GRU_COD
 and PRO_SUBGRU = CDSUBGRUP.GRU_COD
 and TRA_TIP_TRA = "VND" and vd1_tra = tra_cod
 and ESTMVVD1.VD1_CAD >= :PDATADE and ESTMVVD1.VD1_CAD <= :PDATAATE
 and ( (CDPRO.PRO_NOM >= :PPRODE and CDPRO.PRO_NOM <= :PPROATE) OR (:PPRODE IS NULL) )
 and ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 and ( (CDMAR.MAR_NOM >= :PMARDE and CDMAR.MAR_NOM <= :PMARATE) OR (:PMARDE IS NULL) )
 and ( (CDGRUP.GRU_NOM >= :PGRUDE and CDGRUP.GRU_NOM <= :PGRUATE) OR (:PGRUDE IS NULL) )
 and ( (CDSUBGRUP.GRU_NOM >= :PSGRUDE and CDSUBGRUP.GRU_NOM <= :PSGRUATE) OR (:PSGRUDE IS NULL) )
 and ( (CDTIPP.TIP_NOM >= :PTIPDE and CDTIPP.TIP_NOM <= :PTIPATE) OR (:PTIPDE IS NULL) )
 and ( (CDCATPRO.CAT_NOM >= :PCATDE and CDCATPRO.CAT_NOM <= :PCATATE) OR (:PCATDE IS NULL) )
 and ( (CDTRA1.TRA_NOM >= :PTRADE and CDTRA1.TRA_NOM <= :PTRAATE) OR (:PTRADE IS NULL) )
 Group By cdpro.pro_nom, cdpro.pro_int, cdpro.pro_bar, cdpro.pro_cod, mvest.est_sal, CDSUBGRUP.GRU_NOM,cdprocm.pro_cod, cdmed.med_nom, cdcor.cor_nom
 ORDER BY PRO_COD ASC
 INTO :WCUPOM,:WMOVIMENTO,:WFATURAMENTO,:WEST_SAL,:WPRODUTO,:WPRO_INT,:WPRO_BAR,:WPRO_NOM,:WSUBGRUPO
 DO
 BEGIN
 IF (WCONT=0) THEN
 BEGIN
 PRO_COD=WPRODUTO;
 END
 WCONT=WCONT+1;
 IF (:MOVIMENTO>0) THEN
 BEGIN
 DURACAO = ( est_sal / (:MOVIMENTO/:pDIAS) );
 DURACAO = (CAST((DURACAO * 100) as integer) / 100);
 END
 ELSE
 DURACAO = 0;
 IF (:WPRODUTO<>PRO_COD) THEN
 BEGIN
 SUSPEND;
 MOVIMENTO=0;
 FATURAMENTO=0;
 EST_SAL=0;
 DURACAO=0;
 END
 CUPOM=WCUPOM;
 PRO_INT=WPRO_INT;
 PRO_BAR=WPRO_BAR;
 PRO_NOM=WPRO_NOM;
 TIP_NOM=WTIP_NOM;
 MAR_NOM=WMAR_NOM;
 GRU_NOM=WGRU_NOM;
 SUBGRUPO=WSUBGRUPO;
 MOVIMENTO=MOVIMENTO+WMOVIMENTO;
 FATURAMENTO=FATURAMENTO+WFATURAMENTO;
 EST_SAL=EST_SAL+WEST_SAL;
 DURACAO=DURACAO+WDURACAO;
 PRO_COD=WPRODUTO;
 END
 SUSPEND;
 END
 IF (PTIPO=5) THEN
 BEGIN
 For
 Select Distinct Count( vd1_cod ) As Cupom
 ,sum(vd2_qtd) As Movimento
 ,Sum( (vd2_vlr*vd2_qtd) ) As Faturamento
 ,est_sal
 ,cdpro.pro_cod,cdpro.pro_int,cdpro.pro_bar,cdpro.pro_nom, cat_nom
 From estmvvd1,cdpro,mvest,cdtra1,CDMAR,CDGRUP,CDSUBGRUP,CDCATPRO, CDTIPP, CDALM
 ,estmvvd2 left outer join cdprocm on (estmvvd2.vd2_pro = cdprocm.pro_pro and estmvvd2.vd2_cor = cdprocm.pro_cor and estmvvd2.vd2_med = cdprocm.pro_med )
 left outer join cdmed on estmvvd2.vd2_med = cdmed.med_cod
 left outer join cdcor on estmvvd2.vd2_cor = cdcor.cor_cod
 Where vd2_pro = cdpro.pro_cod
 and vd2_bol = vd1_cod
 and vd2_pro = est_pro and vd2_alm = est_alm and vd2_med = est_tam
 and vd2_cor = est_cor and vd1_canc <> "C"
 and PRO_MAR = MAR_COD and PRO_TIP = TIP_COD
 and PRO_CAT = CAT_COD
 and vd2_alm = alm_cod
 and PRO_GRU = CDGRUP.GRU_COD
 and PRO_SUBGRU = CDSUBGRUP.GRU_COD
 and TRA_TIP_TRA = "VND" and vd1_tra = tra_cod
 and ESTMVVD1.VD1_CAD >= :PDATADE and ESTMVVD1.VD1_CAD <= :PDATAATE
 and ( (CDPRO.PRO_NOM >= :PPRODE and CDPRO.PRO_NOM <= :PPROATE) OR (:PPRODE IS NULL) )
 and ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 and ( (CDMAR.MAR_NOM >= :PMARDE and CDMAR.MAR_NOM <= :PMARATE) OR (:PMARDE IS NULL) )
 and ( (CDGRUP.GRU_NOM >= :PGRUDE and CDGRUP.GRU_NOM <= :PGRUATE) OR (:PGRUDE IS NULL) )
 and ( (CDSUBGRUP.GRU_NOM >= :PSGRUDE and CDSUBGRUP.GRU_NOM <= :PSGRUATE) OR (:PSGRUDE IS NULL) )
 and ( (CDTIPP.TIP_NOM >= :PTIPDE and CDTIPP.TIP_NOM <= :PTIPATE) OR (:PTIPDE IS NULL) )
 and ( (CDCATPRO.CAT_NOM >= :PCATDE and CDCATPRO.CAT_NOM <= :PCATATE) OR (:PCATDE IS NULL) )
 and ( (CDTRA1.TRA_NOM >= :PTRADE and CDTRA1.TRA_NOM <= :PTRAATE) OR (:PTRADE IS NULL) )
 Group By cdpro.pro_nom, cdpro.pro_int, cdpro.pro_bar, cdpro.pro_cod, mvest.est_sal,CAT_NOM,cdprocm.pro_cod, cdmed.med_nom, cdcor.cor_nom
 ORDER BY PRO_COD ASC
 INTO :WCUPOM,:WMOVIMENTO,:WFATURAMENTO,:WEST_SAL,:WPRODUTO,:WPRO_INT,:WPRO_BAR,:WPRO_NOM,:WCATEGORIA
 DO
 BEGIN
 IF (WCONT=0) THEN
 BEGIN
 PRO_COD=WPRODUTO;
 END
 WCONT=WCONT+1;
 IF (:MOVIMENTO>0) THEN
 BEGIN
 DURACAO = ( est_sal / (:MOVIMENTO/:pDIAS) );
 DURACAO = (CAST((DURACAO * 100) as integer) / 100);
 END
 ELSE
 DURACAO = 0;
 IF (:WPRODUTO<>PRO_COD) THEN
 BEGIN
 SUSPEND;
 MOVIMENTO=0;
 FATURAMENTO=0;
 EST_SAL=0;
 DURACAO=0;
 END
 CUPOM=WCUPOM;
 PRO_INT=WPRO_INT;
 PRO_BAR=WPRO_BAR;
 PRO_NOM=WPRO_NOM;
 TIP_NOM=WTIP_NOM;
 MAR_NOM=WMAR_NOM;
 GRU_NOM=WGRU_NOM;
 CATEGORIA=WCATEGORIA;
 SUBGRUPO=WSUBGRUPO;
 MOVIMENTO=MOVIMENTO+WMOVIMENTO;
 FATURAMENTO=FATURAMENTO+WFATURAMENTO;
 EST_SAL=EST_SAL+WEST_SAL;
 DURACAO=DURACAO+WDURACAO;
 PRO_COD=WPRODUTO;
 END
 SUSPEND;
 END
 END
^

ALTER PROCEDURE RELDURACAOCORMED (
    PDIAS INTEGER,
    PDATADE TIMESTAMP,
    PDATAATE TIMESTAMP,
    PTIPO INTEGER,
    PPRODE VARCHAR(100),
    PPROATE VARCHAR(100),
    PALMDE VARCHAR(50),
    PALMATE VARCHAR(50),
    PMARDE VARCHAR(30),
    PMARATE VARCHAR(30),
    PGRUDE VARCHAR(30),
    PGRUATE VARCHAR(30),
    PSGRUDE VARCHAR(30),
    PSGRUATE VARCHAR(30),
    PTIPDE VARCHAR(30),
    PTIPATE VARCHAR(30),
    PTRADE VARCHAR(40),
    PTRAATE VARCHAR(40),
    PCATDE VARCHAR(30),
    PCATATE VARCHAR(30))
RETURNS (
    CUPOM VARCHAR(6),
    MOVIMENTO DOUBLE PRECISION,
    FATURAMENTO DOUBLE PRECISION,
    EST_SAL DOUBLE PRECISION,
    PRO_COD INTEGER,
    PRO_INT VARCHAR(15),
    PRO_BAR VARCHAR(15),
    PRO_NOM VARCHAR(100),
    DURACAO DOUBLE PRECISION,
    TIP_NOM VARCHAR(30),
    MAR_NOM VARCHAR(30),
    GRU_NOM VARCHAR(30),
    SUBGRUPO VARCHAR(30),
    COR_NOM VARCHAR(30),
    MED_NOM VARCHAR(30),
    CODIGO VARCHAR(21),
    CATEGORIA VARCHAR(30))
AS
 begin
 IF (PTIPO=0) THEN
 BEGIN
 For
 Select Distinct Count( vd1_cod ) As Cupom
 ,sum(vd2_qtd) As Movimento
 ,Sum( (vd2_vlr*vd2_qtd) ) As Faturamento
 ,est_sal
 ,cdpro.pro_cod,cdpro.pro_int,cdpro.pro_bar,cdpro.pro_nom
 ,cdprocm.pro_cod AS CODIGO, cdmed.med_nom, cdcor.cor_nom
 From estmvvd1,cdpro,mvest,cdtra1,CDMAR,CDGRUP,CDSUBGRUP,CDCATPRO, CDTIPP, CDALM
 ,estmvvd2 left outer join cdprocm on (estmvvd2.vd2_pro = cdprocm.pro_pro and estmvvd2.vd2_cor = cdprocm.pro_cor and estmvvd2.vd2_med = cdprocm.pro_med )
 left outer join cdmed on estmvvd2.vd2_med = cdmed.med_cod
 left outer join cdcor on estmvvd2.vd2_cor = cdcor.cor_cod
 Where vd2_pro = cdpro.pro_cod
 and vd2_bol = vd1_cod
 and vd2_pro = est_pro and vd2_alm = est_alm and vd2_med = est_tam
 and vd2_cor = est_cor and vd1_canc <> "C"
 and PRO_MAR = MAR_COD and PRO_TIP = TIP_COD
 and PRO_CAT = CAT_COD
 and vd2_alm = alm_cod
 and PRO_GRU = CDGRUP.GRU_COD
 and PRO_SUBGRU = CDSUBGRUP.GRU_COD
 and TRA_TIP_TRA = "VND" and vd1_tra = tra_cod
 and ESTMVVD1.VD1_CAD >= :PDATADE and ESTMVVD1.VD1_CAD <= :PDATAATE
 and ( (CDPRO.PRO_NOM >= :PPRODE and CDPRO.PRO_NOM <= :PPROATE) OR (:PPRODE IS NULL) )
 and ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 and ( (CDMAR.MAR_NOM >= :PMARDE and CDMAR.MAR_NOM <= :PMARATE) OR (:PMARDE IS NULL) )
 and ( (CDGRUP.GRU_NOM >= :PGRUDE and CDGRUP.GRU_NOM <= :PGRUATE) OR (:PGRUDE IS NULL) )
 and ( (CDSUBGRUP.GRU_NOM >= :PSGRUDE and CDSUBGRUP.GRU_NOM <= :PSGRUATE) OR (:PSGRUDE IS NULL) )
 and ( (CDTIPP.TIP_NOM >= :PTIPDE and CDTIPP.TIP_NOM <= :PTIPATE) OR (:PTIPDE IS NULL) )
 and ( (CDCATPRO.CAT_NOM >= :PCATDE and CDCATPRO.CAT_NOM <= :PCATATE) OR (:PCATDE IS NULL) )
 and ( (CDTRA1.TRA_NOM >= :PTRADE and CDTRA1.TRA_NOM <= :PTRAATE) OR (:PTRADE IS NULL) )
 Group By cdpro.pro_nom, cdpro.pro_int, cdpro.pro_bar, cdpro.pro_cod,cdprocm.pro_cod, cdmed.med_nom, cdcor.cor_nom, est_sal
 INTO :CUPOM,:MOVIMENTO,:FATURAMENTO,:EST_SAL,:PRO_COD,:PRO_INT,:PRO_BAR,:PRO_NOM, :CODIGO, :MED_NOM, COR_NOM
 DO
 BEGIN
 IF (:MOVIMENTO>0) THEN
 BEGIN
 DURACAO = ( est_sal / (:MOVIMENTO/:pDIAS) );
 DURACAO = (CAST((DURACAO * 100) as integer) / 100);
 END
 ELSE
 DURACAO = 0;
 SUSPEND;
 END
 END
 IF (PTIPO=1) THEN
 BEGIN
 For
 Select Distinct Count( vd1_cod ) As Cupom
 ,Sum(vd2_qtd) As Movimento
 ,Sum( (vd2_vlr*vd2_qtd) ) As Faturamento
 ,est_sal
 ,cdpro.pro_cod,cdpro.pro_int,cdpro.pro_bar,cdpro.pro_nom,MAR_NOM
 ,cdprocm.pro_cod AS CODIGO, cdmed.med_nom, cdcor.cor_nom
 From estmvvd1,cdpro,mvest,cdtra1,CDMAR,CDGRUP,CDSUBGRUP,CDCATPRO, CDTIPP, CDALM
 ,estmvvd2 left outer join cdprocm on (estmvvd2.vd2_pro = cdprocm.pro_pro and estmvvd2.vd2_cor = cdprocm.pro_cor and estmvvd2.vd2_med = cdprocm.pro_med )
 left outer join cdmed on estmvvd2.vd2_med = cdmed.med_cod
 left outer join cdcor on estmvvd2.vd2_cor = cdcor.cor_cod
 Where vd2_pro = cdpro.pro_cod
 and vd2_bol = vd1_cod
 and vd2_pro = est_pro and vd2_alm = est_alm and vd2_med = est_tam
 and vd2_cor = est_cor and vd1_canc <> "C"
 and PRO_MAR = MAR_COD and PRO_TIP = TIP_COD
 and PRO_CAT = CAT_COD
 and vd2_alm = alm_cod
 and PRO_GRU = CDGRUP.GRU_COD
 and PRO_SUBGRU = CDSUBGRUP.GRU_COD
 and TRA_TIP_TRA = "VND" and vd1_tra = tra_cod
 and ESTMVVD1.VD1_CAD >= :PDATADE and ESTMVVD1.VD1_CAD <= :PDATAATE
 and ( (CDPRO.PRO_NOM >= :PPRODE and CDPRO.PRO_NOM <= :PPROATE) OR (:PPRODE IS NULL) )
 and ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 and ( (CDMAR.MAR_NOM >= :PMARDE and CDMAR.MAR_NOM <= :PMARATE) OR (:PMARDE IS NULL) )
 and ( (CDGRUP.GRU_NOM >= :PGRUDE and CDGRUP.GRU_NOM <= :PGRUATE) OR (:PGRUDE IS NULL) )
 and ( (CDSUBGRUP.GRU_NOM >= :PSGRUDE and CDSUBGRUP.GRU_NOM <= :PSGRUATE) OR (:PSGRUDE IS NULL) )
 and ( (CDTIPP.TIP_NOM >= :PTIPDE and CDTIPP.TIP_NOM <= :PTIPATE) OR (:PTIPDE IS NULL) )
 and ( (CDCATPRO.CAT_NOM >= :PCATDE and CDCATPRO.CAT_NOM <= :PCATATE) OR (:PCATDE IS NULL) )
 and ( (CDTRA1.TRA_NOM >= :PTRADE and CDTRA1.TRA_NOM <= :PTRAATE) OR (:PTRADE IS NULL) )
 Group By cdpro.pro_nom, cdpro.pro_int, cdpro.pro_bar, cdmar.mar_nom, cdpro.pro_cod, mvest.est_sal,cdprocm.pro_cod, cdmed.med_nom, cdcor.cor_nom
 INTO :CUPOM,:MOVIMENTO,:FATURAMENTO,:EST_SAL,:PRO_COD,:PRO_INT,:PRO_BAR,:PRO_NOM,:MAR_NOM, :CODIGO, :MED_NOM, COR_NOM DO
 BEGIN
 IF (:MOVIMENTO>0) THEN
 BEGIN
 DURACAO = ( est_sal / (:MOVIMENTO/:pDIAS) );
 DURACAO = (CAST((DURACAO * 100) as integer) / 100);
 END
 ELSE
 DURACAO = 0;
 SUSPEND;
 END
 END
 IF (PTIPO=2) THEN
 BEGIN
 For
 Select Distinct Count( vd1_cod ) As Cupom
 ,Sum(vd2_qtd) As Movimento
 ,Sum( (vd2_vlr*vd2_qtd) ) As Faturamento
 ,est_sal
 ,cdpro.pro_cod,cdpro.pro_int,cdpro.pro_bar,cdpro.pro_nom,TIP_NOM
 ,cdprocm.pro_cod AS CODIGO, cdmed.med_nom, cdcor.cor_nom
 From estmvvd1,cdpro,mvest,cdtra1,CDMAR,CDGRUP,CDSUBGRUP,CDCATPRO, CDTIPP, CDALM
 ,estmvvd2 left outer join cdprocm on (estmvvd2.vd2_pro = cdprocm.pro_pro and estmvvd2.vd2_cor = cdprocm.pro_cor and estmvvd2.vd2_med = cdprocm.pro_med )
 left outer join cdmed on estmvvd2.vd2_med = cdmed.med_cod
 left outer join cdcor on estmvvd2.vd2_cor = cdcor.cor_cod
 Where vd2_pro = cdpro.pro_cod
 and vd2_bol = vd1_cod
 and vd2_pro = est_pro and vd2_alm = est_alm and vd2_med = est_tam
 and vd2_cor = est_cor and vd1_canc <> "C"
 and PRO_MAR = MAR_COD and PRO_TIP = TIP_COD
 and PRO_CAT = CAT_COD
 and vd2_alm = alm_cod
 and PRO_GRU = CDGRUP.GRU_COD
 and PRO_SUBGRU = CDSUBGRUP.GRU_COD
 and TRA_TIP_TRA = "VND" and vd1_tra = tra_cod
 and ESTMVVD1.VD1_CAD >= :PDATADE and ESTMVVD1.VD1_CAD <= :PDATAATE
 and ( (CDPRO.PRO_NOM >= :PPRODE and CDPRO.PRO_NOM <= :PPROATE) OR (:PPRODE IS NULL) )
 and ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 and ( (CDMAR.MAR_NOM >= :PMARDE and CDMAR.MAR_NOM <= :PMARATE) OR (:PMARDE IS NULL) )
 and ( (CDGRUP.GRU_NOM >= :PGRUDE and CDGRUP.GRU_NOM <= :PGRUATE) OR (:PGRUDE IS NULL) )
 and ( (CDSUBGRUP.GRU_NOM >= :PSGRUDE and CDSUBGRUP.GRU_NOM <= :PSGRUATE) OR (:PSGRUDE IS NULL) )
 and ( (CDTIPP.TIP_NOM >= :PTIPDE and CDTIPP.TIP_NOM <= :PTIPATE) OR (:PTIPDE IS NULL) )
 and ( (CDCATPRO.CAT_NOM >= :PCATDE and CDCATPRO.CAT_NOM <= :PCATATE) OR (:PCATDE IS NULL) )
 and ( (CDTRA1.TRA_NOM >= :PTRADE and CDTRA1.TRA_NOM <= :PTRAATE) OR (:PTRADE IS NULL) )
 Group By cdpro.pro_nom, cdpro.pro_int, cdpro.pro_bar, CDTIPP.tip_nom, cdpro.pro_cod, mvest.est_sal,cdprocm.pro_cod, cdmed.med_nom, cdcor.cor_nom
 INTO :CUPOM,:MOVIMENTO,:FATURAMENTO,:EST_SAL,:PRO_COD,:PRO_INT,:PRO_BAR,:PRO_NOM,:TIP_NOM, :CODIGO, :MED_NOM, COR_NOM
 DO
 BEGIN
 IF (:MOVIMENTO>0) THEN
 BEGIN
 DURACAO = ( est_sal / (:MOVIMENTO/:pDIAS) );
 DURACAO = (CAST((DURACAO * 100) as integer) / 100);
 END
 ELSE
 DURACAO = 0;
 SUSPEND;
 END
 END
 IF (PTIPO=3) THEN
 BEGIN
 For
 Select Distinct Count( vd1_cod ) As Cupom
 ,Sum(vd2_qtd) As Movimento
 ,Sum( (vd2_vlr*vd2_qtd) ) As Faturamento
 ,est_sal
 ,cdpro.pro_cod,cdpro.pro_int,cdpro.pro_bar,cdpro.pro_nom,CDGRUP.GRU_NOM, CDSUBGRUP.GRU_NOM AS SUBGRUPO
 ,cdprocm.pro_cod AS CODIGO, cdmed.med_nom, cdcor.cor_nom
 From estmvvd1,cdpro,mvest,cdtra1,CDMAR,CDGRUP,CDSUBGRUP,CDCATPRO, CDTIPP, CDALM
 ,estmvvd2 left outer join cdprocm on (estmvvd2.vd2_pro = cdprocm.pro_pro and estmvvd2.vd2_cor = cdprocm.pro_cor and estmvvd2.vd2_med = cdprocm.pro_med )
 left outer join cdmed on estmvvd2.vd2_med = cdmed.med_cod
 left outer join cdcor on estmvvd2.vd2_cor = cdcor.cor_cod
 Where vd2_pro = cdpro.pro_cod
 and vd2_bol = vd1_cod
 and vd2_pro = est_pro and vd2_alm = est_alm and vd2_med = est_tam
 and vd2_cor = est_cor and vd1_canc <> "C"
 and PRO_MAR = MAR_COD and PRO_TIP = TIP_COD
 and PRO_CAT = CAT_COD
 and vd2_alm = alm_cod
 and PRO_GRU = CDGRUP.GRU_COD
 and PRO_SUBGRU = CDSUBGRUP.GRU_COD
 and TRA_TIP_TRA = "VND" and vd1_tra = tra_cod
 and ESTMVVD1.VD1_CAD >= :PDATADE and ESTMVVD1.VD1_CAD <= :PDATAATE
 and ( (CDPRO.PRO_NOM >= :PPRODE and CDPRO.PRO_NOM <= :PPROATE) OR (:PPRODE IS NULL) )
 and ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 and ( (CDMAR.MAR_NOM >= :PMARDE and CDMAR.MAR_NOM <= :PMARATE) OR (:PMARDE IS NULL) )
 and ( (CDGRUP.GRU_NOM >= :PGRUDE and CDGRUP.GRU_NOM <= :PGRUATE) OR (:PGRUDE IS NULL) )
 and ( (CDSUBGRUP.GRU_NOM >= :PSGRUDE and CDSUBGRUP.GRU_NOM <= :PSGRUATE) OR (:PSGRUDE IS NULL) )
 and ( (CDTIPP.TIP_NOM >= :PTIPDE and CDTIPP.TIP_NOM <= :PTIPATE) OR (:PTIPDE IS NULL) )
 and ( (CDCATPRO.CAT_NOM >= :PCATDE and CDCATPRO.CAT_NOM <= :PCATATE) OR (:PCATDE IS NULL) )
 and ( (CDTRA1.TRA_NOM >= :PTRADE and CDTRA1.TRA_NOM <= :PTRAATE) OR (:PTRADE IS NULL) )
 Group By cdpro.pro_nom, cdpro.pro_int, cdpro.pro_bar, cdpro.pro_cod, mvest.est_sal, CDGRUP.GRU_NOM, CDSUBGRUP.GRU_NOM,cdprocm.pro_cod, cdmed.med_nom, cdcor.cor_nom
 INTO :CUPOM,:MOVIMENTO,:FATURAMENTO,:EST_SAL,:PRO_COD,:PRO_INT,:PRO_BAR,:PRO_NOM,:GRU_NOM,:SUBGRUPO, :CODIGO, :MED_NOM, COR_NOM
 DO
 BEGIN
 IF (:MOVIMENTO>0) THEN
 BEGIN
 DURACAO = ( est_sal / (:MOVIMENTO/:pDIAS) );
 DURACAO = (CAST((DURACAO * 100) as integer) / 100);
 END
 ELSE
 DURACAO = 0;
 SUSPEND;
 END
 END
 IF (PTIPO=4) THEN
 BEGIN
 For
 Select Distinct Count( vd1_cod ) As Cupom
 ,Sum(vd2_qtd) As Movimento
 ,Sum( (vd2_vlr*vd2_qtd) ) As Faturamento
 ,est_sal
 ,cdpro.pro_cod,cdpro.pro_int,cdpro.pro_bar,cdpro.pro_nom,CDSUBGRUP.GRU_NOM AS SUBGRUPO
 ,cdprocm.pro_cod AS CODIGO, cdmed.med_nom, cdcor.cor_nom
 From estmvvd1,cdpro,mvest,cdtra1,CDMAR,CDGRUP,CDSUBGRUP,CDCATPRO, CDTIPP, CDALM
 ,estmvvd2 left outer join cdprocm on (estmvvd2.vd2_pro = cdprocm.pro_pro and estmvvd2.vd2_cor = cdprocm.pro_cor and estmvvd2.vd2_med = cdprocm.pro_med )
 left outer join cdmed on estmvvd2.vd2_med = cdmed.med_cod
 left outer join cdcor on estmvvd2.vd2_cor = cdcor.cor_cod
 Where vd2_pro = cdpro.pro_cod
 and vd2_bol = vd1_cod
 and vd2_pro = est_pro and vd2_alm = est_alm and vd2_med = est_tam
 and vd2_cor = est_cor and vd1_canc <> "C"
 and PRO_MAR = MAR_COD and PRO_TIP = TIP_COD
 and PRO_CAT = CAT_COD
 and vd2_alm = alm_cod
 and PRO_GRU = CDGRUP.GRU_COD
 and PRO_SUBGRU = CDSUBGRUP.GRU_COD
 and TRA_TIP_TRA = "VND" and vd1_tra = tra_cod
 and ESTMVVD1.VD1_CAD >= :PDATADE and ESTMVVD1.VD1_CAD <= :PDATAATE
 and ( (CDPRO.PRO_NOM >= :PPRODE and CDPRO.PRO_NOM <= :PPROATE) OR (:PPRODE IS NULL) )
 and ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 and ( (CDMAR.MAR_NOM >= :PMARDE and CDMAR.MAR_NOM <= :PMARATE) OR (:PMARDE IS NULL) )
 and ( (CDGRUP.GRU_NOM >= :PGRUDE and CDGRUP.GRU_NOM <= :PGRUATE) OR (:PGRUDE IS NULL) )
 and ( (CDSUBGRUP.GRU_NOM >= :PSGRUDE and CDSUBGRUP.GRU_NOM <= :PSGRUATE) OR (:PSGRUDE IS NULL) )
 and ( (CDTIPP.TIP_NOM >= :PTIPDE and CDTIPP.TIP_NOM <= :PTIPATE) OR (:PTIPDE IS NULL) )
 and ( (CDCATPRO.CAT_NOM >= :PCATDE and CDCATPRO.CAT_NOM <= :PCATATE) OR (:PCATDE IS NULL) )
 and ( (CDTRA1.TRA_NOM >= :PTRADE and CDTRA1.TRA_NOM <= :PTRAATE) OR (:PTRADE IS NULL) )
 Group By cdpro.pro_nom, cdpro.pro_int, cdpro.pro_bar, cdpro.pro_cod, mvest.est_sal, CDSUBGRUP.GRU_NOM,cdprocm.pro_cod, cdmed.med_nom, cdcor.cor_nom
 INTO :CUPOM,:MOVIMENTO,:FATURAMENTO,:EST_SAL,:PRO_COD,:PRO_INT,:PRO_BAR,:PRO_NOM,:SUBGRUPO, :CODIGO, :MED_NOM, COR_NOM
 DO
 BEGIN
 IF (:MOVIMENTO>0) THEN
 BEGIN
 DURACAO = ( est_sal / (:MOVIMENTO/:pDIAS) );
 DURACAO = (CAST((DURACAO * 100) as integer) / 100);
 END
 ELSE
 DURACAO = 0;
 SUSPEND;
 END
 END
 IF (PTIPO=5) THEN
 BEGIN
 For
 Select Distinct Count( vd1_cod ) As Cupom
 ,Sum(vd2_qtd) As Movimento
 ,Sum( (vd2_vlr*vd2_qtd) ) As Faturamento
 ,est_sal
 ,cdpro.pro_cod,cdpro.pro_int,cdpro.pro_bar,cdpro.pro_nom,CAT_NOM
 ,cdprocm.pro_cod AS CODIGO, cdmed.med_nom, cdcor.cor_nom
 From estmvvd1,cdpro,mvest,cdtra1,CDMAR,CDGRUP,CDSUBGRUP,CDCATPRO, CDTIPP, CDALM
 ,estmvvd2 left outer join cdprocm on (estmvvd2.vd2_pro = cdprocm.pro_pro and estmvvd2.vd2_cor = cdprocm.pro_cor and estmvvd2.vd2_med = cdprocm.pro_med )
 left outer join cdmed on estmvvd2.vd2_med = cdmed.med_cod
 left outer join cdcor on estmvvd2.vd2_cor = cdcor.cor_cod
 Where vd2_pro = cdpro.pro_cod
 and vd2_bol = vd1_cod
 and vd2_pro = est_pro and vd2_alm = est_alm and vd2_med = est_tam
 and vd2_cor = est_cor and vd1_canc <> "C"
 and PRO_MAR = MAR_COD and PRO_TIP = TIP_COD
 and PRO_CAT = CAT_COD
 and vd2_alm = alm_cod
 and PRO_GRU = CDGRUP.GRU_COD
 and PRO_SUBGRU = CDSUBGRUP.GRU_COD
 and TRA_TIP_TRA = "VND" and vd1_tra = tra_cod
 and ESTMVVD1.VD1_CAD >= :PDATADE and ESTMVVD1.VD1_CAD <= :PDATAATE
 and ( (CDPRO.PRO_NOM >= :PPRODE and CDPRO.PRO_NOM <= :PPROATE) OR (:PPRODE IS NULL) )
 and ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 and ( (CDMAR.MAR_NOM >= :PMARDE and CDMAR.MAR_NOM <= :PMARATE) OR (:PMARDE IS NULL) )
 and ( (CDGRUP.GRU_NOM >= :PGRUDE and CDGRUP.GRU_NOM <= :PGRUATE) OR (:PGRUDE IS NULL) )
 and ( (CDSUBGRUP.GRU_NOM >= :PSGRUDE and CDSUBGRUP.GRU_NOM <= :PSGRUATE) OR (:PSGRUDE IS NULL) )
 and ( (CDTIPP.TIP_NOM >= :PTIPDE and CDTIPP.TIP_NOM <= :PTIPATE) OR (:PTIPDE IS NULL) )
 and ( (CDCATPRO.CAT_NOM >= :PCATDE and CDCATPRO.CAT_NOM <= :PCATATE) OR (:PCATDE IS NULL) )
 and ( (CDTRA1.TRA_NOM >= :PTRADE and CDTRA1.TRA_NOM <= :PTRAATE) OR (:PTRADE IS NULL) )
 Group By cdpro.pro_nom, cdpro.pro_int, cdpro.pro_bar, cdpro.pro_cod, mvest.est_sal, cdprocm.pro_cod, cdmed.med_nom, cdcor.cor_nom,CAT_NOM
 INTO :CUPOM,:MOVIMENTO,:FATURAMENTO,:EST_SAL,:PRO_COD,:PRO_INT,:PRO_BAR,:PRO_NOM,:CODIGO, :MED_NOM, COR_NOM, CATEGORIA
 DO
 BEGIN
 IF (:MOVIMENTO>0) THEN
 BEGIN
 DURACAO = ( est_sal / (:MOVIMENTO/:pDIAS) );
 DURACAO = (CAST((DURACAO * 100) as integer) / 100);
 END
 ELSE
 DURACAO = 0;
 SUSPEND;
 END
 END
 END
^

ALTER PROCEDURE RELDURACAOSCOR (
    PDIAS INTEGER,
    PDATADE TIMESTAMP,
    PDATAATE TIMESTAMP,
    PTIPO INTEGER,
    PPRODE VARCHAR(100),
    PPROATE VARCHAR(100),
    PALMDE VARCHAR(50),
    PALMATE VARCHAR(50),
    PMARDE VARCHAR(30),
    PMARATE VARCHAR(30),
    PGRUDE VARCHAR(30),
    PGRUATE VARCHAR(30),
    PSGRUDE VARCHAR(30),
    PSGRUATE VARCHAR(30),
    PTIPDE VARCHAR(30),
    PTIPATE VARCHAR(30),
    PTRADE VARCHAR(40),
    PTRAATE VARCHAR(40),
    PCATDE VARCHAR(30),
    PCATATE VARCHAR(30))
RETURNS (
    CUPOM VARCHAR(6),
    MOVIMENTO DOUBLE PRECISION,
    FATURAMENTO DOUBLE PRECISION,
    EST_SAL DOUBLE PRECISION,
    VD2_ALM INTEGER,
    PRO_COD INTEGER,
    PRO_INT VARCHAR(15),
    PRO_BAR VARCHAR(15),
    PRO_NOM VARCHAR(100),
    DURACAO DOUBLE PRECISION,
    TIP_NOM VARCHAR(30),
    MAR_NOM VARCHAR(30),
    GRU_NOM VARCHAR(30),
    SUBGRUPO VARCHAR(30),
    CATEGORIA VARCHAR(30))
AS
 begin
 IF (PTIPO=0) THEN
 BEGIN
 For
 Select Distinct Count( vd1_cod ) As Cupom
 ,Sum( vd2_qtd ) As Movimento
 ,Sum( (vd2_vlr*vd2_qtd) ) As Faturamento
 ,(Select Sum(est_sal) From mvest Where est_pro=estmvvd2.vd2_pro) as est_sal
 ,estmvvd2.vd2_alm,cdpro.pro_cod,cdpro.pro_int,cdpro.pro_bar,cdpro.pro_nom
 From estmvvd1,cdpro,mvest,cdtra1,CDMAR,CDGRUP,CDSUBGRUP,estmvvd2,CDCATPRO, CDTIPP, CDALM
 Where vd2_pro = cdpro.pro_cod
 and vd2_bol = vd1_cod
 and vd2_pro = est_pro and vd2_alm = est_alm
 and vd1_canc <> "C"
 and PRO_CAT = CAT_COD
 and PRO_MAR = MAR_COD and PRO_TIP = TIP_COD
 and vd2_alm = alm_cod
 and PRO_GRU = CDGRUP.GRU_COD
 and PRO_SUBGRU = CDSUBGRUP.GRU_COD
 and TRA_TIP_TRA = "VND" and vd1_tra = tra_cod
 and ESTMVVD1.VD1_CAD >= :PDATADE and ESTMVVD1.VD1_CAD <= :PDATAATE
 and ( (CDPRO.PRO_NOM >= :PPRODE and CDPRO.PRO_NOM <= :PPROATE) OR (:PPRODE IS NULL) )
 and ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 and ( (CDMAR.MAR_NOM >= :PMARDE and CDMAR.MAR_NOM <= :PMARATE) OR (:PMARDE IS NULL) )
 and ( (CDGRUP.GRU_NOM >= :PGRUDE and CDGRUP.GRU_NOM <= :PGRUATE) OR (:PGRUDE IS NULL) )
 and ( (CDSUBGRUP.GRU_NOM >= :PSGRUDE and CDSUBGRUP.GRU_NOM <= :PSGRUATE) OR (:PSGRUDE IS NULL) )
 and ( (CDTIPP.TIP_NOM >= :PTIPDE and CDTIPP.TIP_NOM <= :PTIPATE) OR (:PTIPDE IS NULL) )
 and ( (CDCATPRO.CAT_NOM >= :PCATDE and CDCATPRO.CAT_NOM <= :PCATATE) OR (:PCATDE IS NULL) )
 and ( (CDTRA1.TRA_NOM >= :PTRADE and CDTRA1.TRA_NOM <= :PTRAATE) OR (:PTRADE IS NULL) )
 Group By cdpro.pro_nom, cdpro.pro_int, cdpro.pro_bar, estmvvd2.vd2_alm, cdpro.pro_cod,estmvvd2.vd2_pro
 INTO :CUPOM,:MOVIMENTO,:FATURAMENTO,:EST_SAL,:VD2_ALM,:PRO_COD,:PRO_INT,:PRO_BAR,:PRO_NOM
 DO
 BEGIN
 IF (:MOVIMENTO>0) THEN
 BEGIN
 DURACAO = ( est_sal / (:MOVIMENTO/:pDIAS) );
 DURACAO = (CAST((DURACAO * 100) as integer) / 100);
 END
 ELSE
 DURACAO = 0;
 SUSPEND;
 END
 END
 IF (PTIPO=1) THEN
 BEGIN
 For
 Select Distinct Count( vd1_cod ) As Cupom
 ,Sum( vd2_qtd ) As Movimento
 ,Sum( (vd2_vlr*vd2_qtd) ) As Faturamento
 ,(Select Sum(est_sal) From mvest Where est_pro=estmvvd2.vd2_pro) as est_sal
 ,estmvvd2.vd2_alm,cdpro.pro_cod,cdpro.pro_int,cdpro.pro_bar,cdpro.pro_nom,MAR_NOM
 From estmvvd1,cdpro,mvest,cdtra1,CDMAR,CDGRUP,CDSUBGRUP,estmvvd2,CDCATPRO, CDTIPP, CDALM
 Where vd2_pro = cdpro.pro_cod
 and vd2_bol = vd1_cod
 and vd2_pro = est_pro and vd2_alm = est_alm
 and vd1_canc <> "C"
 and PRO_MAR = MAR_COD and PRO_TIP = TIP_COD
 and PRO_CAT = CAT_COD
 and vd2_alm = alm_cod
 and PRO_GRU = CDGRUP.GRU_COD
 and PRO_SUBGRU = CDSUBGRUP.GRU_COD
 and TRA_TIP_TRA = "VND" and vd1_tra = tra_cod
 and ESTMVVD1.VD1_CAD >= :PDATADE and ESTMVVD1.VD1_CAD <= :PDATAATE
 and ( (CDPRO.PRO_NOM >= :PPRODE and CDPRO.PRO_NOM <= :PPROATE) OR (:PPRODE IS NULL) )
 and ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 and ( (CDMAR.MAR_NOM >= :PMARDE and CDMAR.MAR_NOM <= :PMARATE) OR (:PMARDE IS NULL) )
 and ( (CDGRUP.GRU_NOM >= :PGRUDE and CDGRUP.GRU_NOM <= :PGRUATE) OR (:PGRUDE IS NULL) )
 and ( (CDSUBGRUP.GRU_NOM >= :PSGRUDE and CDSUBGRUP.GRU_NOM <= :PSGRUATE) OR (:PSGRUDE IS NULL) )
 and ( (CDTIPP.TIP_NOM >= :PTIPDE and CDTIPP.TIP_NOM <= :PTIPATE) OR (:PTIPDE IS NULL) )
 and ( (CDCATPRO.CAT_NOM >= :PCATDE and CDCATPRO.CAT_NOM <= :PCATATE) OR (:PCATDE IS NULL) )
 and ( (CDTRA1.TRA_NOM >= :PTRADE and CDTRA1.TRA_NOM <= :PTRAATE) OR (:PTRADE IS NULL) )
 Group By cdpro.pro_nom, cdpro.pro_int, cdpro.pro_bar, cdmar.mar_nom, estmvvd2.vd2_alm, cdpro.pro_cod,estmvvd2.vd2_pro
 INTO :CUPOM,:MOVIMENTO,:FATURAMENTO,:EST_SAL,:VD2_ALM,:PRO_COD,:PRO_INT,:PRO_BAR,:PRO_NOM,:MAR_NOM
 DO
 BEGIN
 IF (:MOVIMENTO>0) THEN
 BEGIN
 DURACAO = ( est_sal / (:MOVIMENTO/:pDIAS) );
 DURACAO = (CAST((DURACAO * 100) as integer) / 100);
 END
 ELSE
 DURACAO = 0;
 SUSPEND;
 END
 END
 IF (PTIPO=2) THEN
 BEGIN
 For
 Select Distinct Count( vd1_cod ) As Cupom
 ,Sum( vd2_qtd ) As Movimento
 ,Sum( (vd2_vlr*vd2_qtd) ) As Faturamento
 ,(Select Sum(est_sal) From mvest Where est_pro=estmvvd2.vd2_pro) as est_sal
 ,estmvvd2.vd2_alm,cdpro.pro_cod,cdpro.pro_int,cdpro.pro_bar,cdpro.pro_nom,TIP_NOM
 From estmvvd1,cdpro,mvest,cdtra1,CDMAR,CDGRUP,CDSUBGRUP,estmvvd2,CDCATPRO, CDTIPP, CDALM
 Where vd2_pro = cdpro.pro_cod
 and vd2_bol = vd1_cod
 and vd2_pro = est_pro and vd2_alm = est_alm
 and vd1_canc <> "C"
 and PRO_MAR = MAR_COD and PRO_TIP = TIP_COD
 and PRO_CAT = CAT_COD
 and vd2_alm = alm_cod
 and PRO_GRU = CDGRUP.GRU_COD
 and PRO_SUBGRU = CDSUBGRUP.GRU_COD
 and TRA_TIP_TRA = "VND" and vd1_tra = tra_cod
 and ESTMVVD1.VD1_CAD >= :PDATADE and ESTMVVD1.VD1_CAD <= :PDATAATE
 and ( (CDPRO.PRO_NOM >= :PPRODE and CDPRO.PRO_NOM <= :PPROATE) OR (:PPRODE IS NULL) )
 and ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 and ( (CDMAR.MAR_NOM >= :PMARDE and CDMAR.MAR_NOM <= :PMARATE) OR (:PMARDE IS NULL) )
 and ( (CDGRUP.GRU_NOM >= :PGRUDE and CDGRUP.GRU_NOM <= :PGRUATE) OR (:PGRUDE IS NULL) )
 and ( (CDSUBGRUP.GRU_NOM >= :PSGRUDE and CDSUBGRUP.GRU_NOM <= :PSGRUATE) OR (:PSGRUDE IS NULL) )
 and ( (CDTIPP.TIP_NOM >= :PTIPDE and CDTIPP.TIP_NOM <= :PTIPATE) OR (:PTIPDE IS NULL) )
 and ( (CDCATPRO.CAT_NOM >= :PCATDE and CDCATPRO.CAT_NOM <= :PCATATE) OR (:PCATDE IS NULL) )
 and ( (CDTRA1.TRA_NOM >= :PTRADE and CDTRA1.TRA_NOM <= :PTRAATE) OR (:PTRADE IS NULL) )
 Group By cdpro.pro_nom, cdpro.pro_int, cdpro.pro_bar, cdtipp.tip_nom, estmvvd2.vd2_alm, cdpro.pro_cod,estmvvd2.vd2_pro
 INTO :CUPOM,:MOVIMENTO,:FATURAMENTO,:EST_SAL,:VD2_ALM,:PRO_COD,:PRO_INT,:PRO_BAR,:PRO_NOM,:TIP_NOM
 DO
 BEGIN
 IF (:MOVIMENTO>0) THEN
 BEGIN
 DURACAO = ( est_sal / (:MOVIMENTO/:pDIAS) );
 DURACAO = (CAST((DURACAO * 100) as integer) / 100);
 END
 ELSE
 DURACAO = 0;
 SUSPEND;
 END
 END
 IF (PTIPO=3) THEN
 BEGIN
 For
 Select Distinct Count( vd1_cod ) As Cupom
 ,Sum( vd2_qtd ) As Movimento
 ,Sum( (vd2_vlr*vd2_qtd) ) As Faturamento
 ,(Select Sum(est_sal) From mvest Where est_pro=estmvvd2.vd2_pro) as est_sal
 ,estmvvd2.vd2_alm,cdpro.pro_cod,cdpro.pro_int,cdpro.pro_bar,cdpro.pro_nom,CDGRUP.GRU_NOM, CDSUBGRUP.GRU_NOM AS SUBGRUPO
 From estmvvd1,cdpro,mvest,cdtra1,CDMAR,CDGRUP,CDSUBGRUP,estmvvd2,CDCATPRO, CDTIPP, CDALM
 Where vd2_pro = cdpro.pro_cod
 and vd2_bol = vd1_cod
 and vd2_pro = est_pro and vd2_alm = est_alm
 and vd1_canc <> "C"
 and PRO_MAR = MAR_COD and PRO_TIP = TIP_COD
 and PRO_CAT = CAT_COD
 and vd2_alm = alm_cod
 and PRO_GRU = CDGRUP.GRU_COD
 and PRO_SUBGRU = CDSUBGRUP.GRU_COD
 and TRA_TIP_TRA = "VND" and vd1_tra = tra_cod
 and ESTMVVD1.VD1_CAD >= :PDATADE and ESTMVVD1.VD1_CAD <= :PDATAATE
 and ( (CDPRO.PRO_NOM >= :PPRODE and CDPRO.PRO_NOM <= :PPROATE) OR (:PPRODE IS NULL) )
 and ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 and ( (CDMAR.MAR_NOM >= :PMARDE and CDMAR.MAR_NOM <= :PMARATE) OR (:PMARDE IS NULL) )
 and ( (CDGRUP.GRU_NOM >= :PGRUDE and CDGRUP.GRU_NOM <= :PGRUATE) OR (:PGRUDE IS NULL) )
 and ( (CDSUBGRUP.GRU_NOM >= :PSGRUDE and CDSUBGRUP.GRU_NOM <= :PSGRUATE) OR (:PSGRUDE IS NULL) )
 and ( (CDTIPP.TIP_NOM >= :PTIPDE and CDTIPP.TIP_NOM <= :PTIPATE) OR (:PTIPDE IS NULL) )
 and ( (CDCATPRO.CAT_NOM >= :PCATDE and CDCATPRO.CAT_NOM <= :PCATATE) OR (:PCATDE IS NULL) )
 and ( (CDTRA1.TRA_NOM >= :PTRADE and CDTRA1.TRA_NOM <= :PTRAATE) OR (:PTRADE IS NULL) )
 Group By cdpro.pro_nom, cdpro.pro_int, cdpro.pro_bar, estmvvd2.vd2_alm, cdpro.pro_cod, CDGRUP.GRU_NOM, CDSUBGRUP.GRU_NOM,estmvvd2.vd2_pro
 INTO :CUPOM,:MOVIMENTO,:FATURAMENTO,:EST_SAL,:VD2_ALM,:PRO_COD,:PRO_INT,:PRO_BAR,:PRO_NOM,:GRU_NOM,:SUBGRUPO
 DO
 BEGIN
 IF (:MOVIMENTO>0) THEN
 BEGIN
 DURACAO = ( est_sal / (:MOVIMENTO/:pDIAS) );
 DURACAO = (CAST((DURACAO * 100) as integer) / 100);
 END
 ELSE
 DURACAO = 0;
 SUSPEND;
 END
 END
 IF (PTIPO=4) THEN
 BEGIN
 For
 Select Distinct Count( vd1_cod ) As Cupom
 ,Sum( vd2_qtd ) As Movimento
 ,Sum( (vd2_vlr*vd2_qtd) ) As Faturamento
 ,(Select Sum(est_sal) From mvest Where est_pro=estmvvd2.vd2_pro) as est_sal
 ,estmvvd2.vd2_alm,cdpro.pro_cod,cdpro.pro_int,cdpro.pro_bar,cdpro.pro_nom,CDSUBGRUP.GRU_NOM AS SUBGRUPO
 From estmvvd1,cdpro,mvest,cdtra1,CDMAR,CDGRUP,CDSUBGRUP,estmvvd2,CDCATPRO, CDTIPP, CDALM
 Where vd2_pro = cdpro.pro_cod
 and vd2_bol = vd1_cod
 and vd2_pro = est_pro and vd2_alm = est_alm
 and vd1_canc <> "C"
 and PRO_CAT = CAT_COD
 and PRO_MAR = MAR_COD and PRO_TIP = TIP_COD
 and vd2_alm = alm_cod
 and PRO_GRU = CDGRUP.GRU_COD
 and PRO_SUBGRU = CDSUBGRUP.GRU_COD
 and TRA_TIP_TRA = "VND" and vd1_tra = tra_cod
 and ESTMVVD1.VD1_CAD >= :PDATADE and ESTMVVD1.VD1_CAD <= :PDATAATE
 and ( (CDPRO.PRO_NOM >= :PPRODE and CDPRO.PRO_NOM <= :PPROATE) OR (:PPRODE IS NULL) )
 and ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 and ( (CDMAR.MAR_NOM >= :PMARDE and CDMAR.MAR_NOM <= :PMARATE) OR (:PMARDE IS NULL) )
 and ( (CDGRUP.GRU_NOM >= :PGRUDE and CDGRUP.GRU_NOM <= :PGRUATE) OR (:PGRUDE IS NULL) )
 and ( (CDSUBGRUP.GRU_NOM >= :PSGRUDE and CDSUBGRUP.GRU_NOM <= :PSGRUATE) OR (:PSGRUDE IS NULL) )
 and ( (CDTIPP.TIP_NOM >= :PTIPDE and CDTIPP.TIP_NOM <= :PTIPATE) OR (:PTIPDE IS NULL) )
 and ( (CDCATPRO.CAT_NOM >= :PCATDE and CDCATPRO.CAT_NOM <= :PCATATE) OR (:PCATDE IS NULL) )
 and ( (CDTRA1.TRA_NOM >= :PTRADE and CDTRA1.TRA_NOM <= :PTRAATE) OR (:PTRADE IS NULL) )
 Group By cdpro.pro_nom, cdpro.pro_int, cdpro.pro_bar, CDSUBGRUP.GRU_NOM, estmvvd2.vd2_alm, cdpro.pro_cod,estmvvd2.vd2_pro
 INTO :CUPOM,:MOVIMENTO,:FATURAMENTO,:EST_SAL,:VD2_ALM,:PRO_COD,:PRO_INT,:PRO_BAR,:PRO_NOM,:SUBGRUPO
 DO
 BEGIN
 IF (:MOVIMENTO>0) THEN
 BEGIN
 DURACAO = ( est_sal / (:MOVIMENTO/:pDIAS) );
 DURACAO = (CAST((DURACAO * 100) as integer) / 100);
 END
 ELSE
 DURACAO = 0;
 SUSPEND;
 END
 END
 IF (PTIPO=5) THEN
 BEGIN
 For
 Select Distinct Count( vd1_cod ) As Cupom
 ,Sum( vd2_qtd ) As Movimento
 ,Sum( (vd2_vlr*vd2_qtd) ) As Faturamento
 ,(Select Sum(est_sal) From mvest Where est_pro=estmvvd2.vd2_pro) as est_sal
 ,estmvvd2.vd2_alm,cdpro.pro_cod,cdpro.pro_int,cdpro.pro_bar,cdpro.pro_nom,CDCATPRO.CAT_NOM AS CATEGORIA
 From estmvvd1,cdpro,mvest,cdtra1,CDMAR,CDGRUP,CDSUBGRUP,estmvvd2,CDCATPRO, CDTIPP, CDALM
 Where vd2_pro = cdpro.pro_cod
 and vd2_bol = vd1_cod
 and vd2_pro = est_pro and vd2_alm = est_alm
 and vd1_canc <> "C"
 and PRO_MAR = MAR_COD and PRO_CAT = CAT_COD
 and PRO_TIP = TIP_COD
 and vd2_alm = alm_cod
 and PRO_GRU = CDGRUP.GRU_COD
 and PRO_SUBGRU = CDSUBGRUP.GRU_COD
 and TRA_TIP_TRA = "VND" and vd1_tra = tra_cod
 and ESTMVVD1.VD1_CAD >= :PDATADE and ESTMVVD1.VD1_CAD <= :PDATAATE
 and ( (CDPRO.PRO_NOM >= :PPRODE and CDPRO.PRO_NOM <= :PPROATE) OR (:PPRODE IS NULL) )
 and ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 and ( (CDMAR.MAR_NOM >= :PMARDE and CDMAR.MAR_NOM <= :PMARATE) OR (:PMARDE IS NULL) )
 and ( (CDGRUP.GRU_NOM >= :PGRUDE and CDGRUP.GRU_NOM <= :PGRUATE) OR (:PGRUDE IS NULL) )
 and ( (CDSUBGRUP.GRU_NOM >= :PSGRUDE and CDSUBGRUP.GRU_NOM <= :PSGRUATE) OR (:PSGRUDE IS NULL) )
 and ( (CDTIPP.TIP_NOM >= :PTIPDE and CDTIPP.TIP_NOM <= :PTIPATE) OR (:PTIPDE IS NULL) )
 and ( (CDCATPRO.CAT_NOM >= :PCATDE and CDCATPRO.CAT_NOM <= :PCATATE) OR (:PCATDE IS NULL) )
 and ( (CDTRA1.TRA_NOM >= :PTRADE and CDTRA1.TRA_NOM <= :PTRAATE) OR (:PTRADE IS NULL) )
 Group By cdpro.pro_nom, cdpro.pro_int, cdpro.pro_bar, CAT_NOM, estmvvd2.vd2_alm, cdpro.pro_cod,estmvvd2.vd2_pro
 INTO :CUPOM,:MOVIMENTO,:FATURAMENTO,:EST_SAL,:VD2_ALM,:PRO_COD,:PRO_INT,:PRO_BAR,:PRO_NOM,:CATEGORIA
 DO
 BEGIN
 IF (:MOVIMENTO>0) THEN
 BEGIN
 DURACAO = ( est_sal / (:MOVIMENTO/:pDIAS) );
 DURACAO = (CAST((DURACAO * 100) as integer) / 100);
 END
 ELSE
 DURACAO = 0;
 SUSPEND;
 END
 END
 END
^

ALTER PROCEDURE REMOVE_INV_CHAR (
    TEXTO VARCHAR(100))
RETURNS (
    RESULT VARCHAR(100))
AS
 DECLARE VARIABLE I INTEGER;
 DECLARE VARIABLE LEN INTEGER;
 DECLARE VARIABLE S VARCHAR(100);
 DECLARE VARIABLE SS VARCHAR(100);
 begin
 RESULT = TEXTO;
 
 LEN = 0;
 WHILE ( RESULT <> "" ) DO
 BEGIN
 RESULT = SUBSTRING( RESULT FROM 2 FOR 100 );
 LEN = LEN +1;
 END
 
 RESULT = TEXTO;
 S = "";
 SS = "";
 I = 0;
 WHILE ( I < LEN ) DO
 BEGIN
 SS = SUBSTRING( RESULT FROM 1 FOR 1 );
 IF ( SS NOT IN ( "/", "\", "-", "" ) ) THEN
 S = S || SS;
 RESULT = SUBSTRING( RESULT FROM 2 FOR 100 );
 I = I +1;
 END
 RESULT = S;
 suspend;
 end
^

ALTER PROCEDURE REMOVE_MASCARA (
    PDOCUMENTO VARCHAR(100))
RETURNS (
    VRESULT VARCHAR(100))
AS
 declare variable i integer;
 declare variable vcomprimento integer;
 begin
 i = 0;
 vComprimento = strlen(pDocumento);
 vResult = '';
 while (i < vComprimento) do
 begin
 i = i + 1;
 if ((substr(pDocumento, i, i) <> '.') and
 (substr(pDocumento, i, i) <> '/') and
 (substr(pDocumento, i, i) <> '-')) then
 vResult = vResult || substr(pDocumento, i, i);
 end
 suspend;
 end
^

ALTER PROCEDURE REPLICAR_CUPOM (
    PDATA TIMESTAMP,
    PCODIGO VARCHAR(13),
    PRELACIONAR INTEGER)
RETURNS (
    VNOVOCOD VARCHAR(13))
AS
 declare variable vvd1not integer;
 declare variable vvd4cod integer;
 declare variable vvd4alm integer;
 declare variable vvd4vec date;
 declare variable vvd4val double precision;
 declare variable vvd4tip integer;
 declare variable vvd4finan integer;
 declare variable vvd4item integer;
 declare variable vvd4boleto varchar(2);
 declare variable vvd4banco integer;
 declare variable vvd4agencia varchar(6);
 declare variable vvd4conta varchar(12);
 declare variable vvd4numdoc varchar(20);
 declare variable vvd4antecipado varchar(1);
 declare variable vvd4doc varchar(20);
 declare variable vcnt integer;
 begin
 Select VCODIGO From maxcodestmvvd1 Into vNovoCod;
 
 SELECT MAX(V.VD1_NOT)+1
 FROM ESTMVVD1 A, ESTMVVD1 V, CDFORM, CDTRA1
 WHERE A.VD1_COD = :PCODIGO
 AND V.VD1_TRA = TRA_COD
 AND (V.VD1_ORIGEM <> 'DDS' AND V.VD1_ORIGEM <> 'DDO')
 AND V.VD1_TIPO_FORMULARIO = FORM_COD
 AND ((TRA_SERIE_IGNORA_FILIAL = 'T' AND TRA_COD = (SELECT TRA_TRA FROM cdtra3 WHERE TRA_FORM = A.vd1_tipo_formulario))
 OR (((FORM_SERIE IS NOT NULL AND FORM_SERIE = (SELECT FORM_SERIE FROM CDFORM WHERE FORM_COD = A.vd1_tipo_formulario))
 OR (FORM_SERIE IS NULL AND FORM_COD = A.vd1_tipo_formulario))))
 Into vVd1Not;
 
 Insert Into ESTMVVD1
 (
 vd1_alm, vd1_cad, vd1_cod, vd1_not, vd1_tra, vd1_ven, vd1_cai, vd1_pgt,
 vd1_desc_p, vd1_desc_v, vd1_acresc, vd1_cli, vd1_rep, vd1_transf, vd1_for,
 vd1_trs, vd1_ent, vd1_valor_totalb, vd1_quantpecas, vd1_valor_totall, cli_fil,
 vd1_cfop, vd1_valor_frete, vd1_frete_porconta, vd1_origem, vd1_tipo_formulario,
 vd1_pedido, vd1_especie, vd1_marca, vd1_numero, vd1_pesobruto, vd1_pesoliquido,
 vd1_placadoveiculo, vd1_ufdoveiculo, vd1_retirada, vd1_base_icms,
 vd1_valor_icms, vd1_cfop_tributado, vd1_iss, vd1_comp, vd1_valor_seguro,
 vd1_outras_despesas, vd1_cli2, vd1_gar, vd1_sit, vd1_vis, vd1_hora, vd1_imo,
 vd1_user, vd1_eqp, vd1_seu_numero, vd1_pai, vd1_valor_ipi, vd1_atualizado,
 vd1_filho, vd1_totall_servico, vd1_obs, vd1_obs2, vd1_obs3, vd1_obs4,
 vd1_total_nota_semdescto, vd1_quantidade, vd1_totalb_produto,
 vd1_canc,
 status,
 vd1_totall_produto, vd1_totalb_servico, vd1_quantservi, vd1_cli_cons_rev,
 vd1_obsd, vd1_cara, vd1_proc, vd1_pedi, vd1_horaf, vd1_prestser, vd1_gernf,
 vd1_contato, vd1_irrf, vd1_inss, vd1_alm_transf, vd1_prestador, vd1_ecf,
 vd1_alm_digita, vd1_imposto3, vd1_imposto4, vd1_imposto5, vd1_imposto6,
 vd1_use_set_cmp, vd1_qtdfun, vd1_contrato, vd1_atu, vd1_user_cad, vd1_user_atu,
 vd1_use_cad, vd1_use_atu, vd1_vei, vd1_obs_aprov, vd1_datsai, vd1_horsai,
 vd1_cli_iss, vd1_pla, vd1_pla2, vd1_ccust, vd1_ccust2, vd1_proj, vd1_proj2,
 vd1_alm_alter, vd1_dat_emissao
 )
 Select
 vd1_alm, cast('today' as date), :vNovoCod, :vVd1Not,
 vd1_tra, vd1_ven, vd1_cai, vd1_pgt,
 vd1_desc_p, vd1_desc_v, vd1_acresc, vd1_cli, vd1_rep, vd1_transf, vd1_for,
 vd1_trs, :pData + (vd1_ent - vd1_cad), vd1_valor_totalb, vd1_quantpecas, vd1_valor_totall, cli_fil,
 vd1_cfop, vd1_valor_frete, vd1_frete_porconta, vd1_origem, vd1_tipo_formulario,
 vd1_pedido, vd1_especie, vd1_marca, vd1_numero, vd1_pesobruto, vd1_pesoliquido,
 vd1_placadoveiculo, vd1_ufdoveiculo, :pData + (vd1_retirada - vd1_cad), vd1_base_icms,
 vd1_valor_icms, vd1_cfop_tributado, vd1_iss, vd1_comp, vd1_valor_seguro,
 vd1_outras_despesas, vd1_cli2, vd1_gar, vd1_sit, vd1_vis, vd1_hora, vd1_imo,
 vd1_user, vd1_eqp, vd1_seu_numero, vd1_pai, vd1_valor_ipi, vd1_atualizado,
 vd1_filho, vd1_totall_servico, vd1_obs, vd1_obs2, vd1_obs3, vd1_obs4,
 vd1_total_nota_semdescto, vd1_quantidade, vd1_totalb_produto,
 case when (vd1_canc = 'C' or vd1_canc = 'RP' or vd1_canc = 'AP' or vd1_canc = 'BP' or vd1_canc = 'BT') then 'FN' else vd1_canc end,
 case when (vd1_canc = 'C' or vd1_canc = 'RP' or vd1_canc = 'AP' or vd1_canc = 'BP' or vd1_canc = 'BT') then 'FINALIZADO' else status end,
 vd1_totall_produto, vd1_totalb_servico, vd1_quantservi, vd1_cli_cons_rev,
 vd1_obsd, vd1_cara, vd1_proc, vd1_pedi, vd1_horaf, vd1_prestser, vd1_gernf,
 vd1_contato, vd1_irrf, vd1_inss, vd1_alm_transf, vd1_prestador, vd1_ecf,
 vd1_alm_digita, vd1_imposto3, vd1_imposto4, vd1_imposto5, vd1_imposto6,
 vd1_use_set_cmp, vd1_qtdfun, vd1_contrato, cast('today' as date), vd1_user_cad, vd1_user_atu,
 vd1_use_cad, vd1_use_atu, vd1_vei, vd1_obs_aprov, vd1_datsai, vd1_horsai,
 vd1_cli_iss, vd1_pla, vd1_pla2, vd1_ccust, vd1_ccust2, vd1_proj, vd1_proj2,
 vd1_alm_alter, vd1_dat_emissao
 From ESTMVVD1 A
 Where VD1_COD = :PCODIGO;
 
 Insert Into ESTMVVD2
 (
 vd2_cod, vd2_bol, vd2_alm, vd2_cad, vd2_pro, vd2_vlr, vd2_qtd, vd2_ent,
 vd2_cor, vd2_med, vd2_ser, vd2_item, vd2_aliquota_ipi, vd2_aliquota_icms,
 vd2_descricao, vd2_aliquota_iss, reducaobaseicms, descontoitem, unidade,
 classificacaofiscal, vd2_materia_aplicada, vd2_situacaotributaria,
 vd2_finalidade, vd2_tipo, vd2_obs1, vd2_obs2, vd2_obs3, vd2_obs4, vd2_unm,
 vd2_alt, vd2_cmp, vd2_lrg, vd2_gar, vd2_nserie, vd2_ambiente
 )
 select
 (Select VCODIGO From maxtabelacodigo('ESTMVVD2','VD2_COD')),
 :vNovoCod, vd2_alm, cast('today' as date), vd2_pro, vd2_vlr, vd2_qtd, vd2_ent,
 vd2_cor, vd2_med, vd2_ser, vd2_item, vd2_aliquota_ipi, vd2_aliquota_icms,
 vd2_descricao, vd2_aliquota_iss, reducaobaseicms, descontoitem, unidade,
 classificacaofiscal, vd2_materia_aplicada, vd2_situacaotributaria,
 vd2_finalidade, '', vd2_obs1, vd2_obs2, vd2_obs3, vd2_obs4, vd2_unm,
 vd2_alt, vd2_cmp, vd2_lrg, vd2_gar, vd2_nserie, vd2_ambiente
 from estmvvd2
 Where VD2_BOL = :PCODIGO;
 
 Insert Into ESTMVVD3
 (
 vd3_cod, vd3_alm, vd3_cad, vd3_bol, vd3_pgt, vd3_dsv, vd3_dsp, vd3_vlrl,
 vd3_item, vd3_dest
 )
 select
 (Select VCODIGO From maxtabelacodigo('ESTMVVD3','VD3_COD')),
 vd3_alm, cast('today' as date), :vNovoCod, vd3_pgt, vd3_dsv, vd3_dsp,
 vd3_vlrl, vd3_item, vd3_dest
 from estmvvd3
 Where VD3_BOL = :PCODIGO;
 
 Select count(vd4_cod) from estmvvd4 where vd4_bol = :PCODIGO Into vCnt;
 if (vCnt > 1) then
 vCnt = 65;
 
 For select
 vd4_alm, :pData + (vd4_vec - vd4_cad), vd4_val, vd4_tip,
 vd4_finan, vd4_item, vd4_boleto, vd4_banco, vd4_agencia, vd4_conta,
 vd4_num_doc, vd4_antecipado
 from estmvvd4
 Where VD4_BOL = :PCODIGO
 Into
 vVd4Alm, vVd4Vec, vVd4Val, vVd4Tip, vVd4Finan, vVd4Item, vVd4Boleto,
 vVd4Banco, vVd4Agencia, vVd4Conta, vVd4NumDoc, vVd4Antecipado do
 begin
 if (vCnt > 1) then
 begin
 vVd4Doc = cast(vVd1Not as varchar(10)) || '/' || ascii_char(vCnt);
 vCnt = vCnt + 1;
 end
 else
 vVd4Doc = cast(vVd1Not as varchar(10));
 
 Insert Into ESTMVVD4
 (
 vd4_cod, vd4_alm, vd4_cad, vd4_bol, vd4_vec, vd4_val, vd4_tip,
 vd4_finan, vd4_item, vd4_doc, vd4_boleto, vd4_banco, vd4_agencia, vd4_conta,
 vd4_num_doc, vd4_antecipado
 ) values (
 (Select VCODIGO From maxtabelacodigo('ESTMVVD4','VD4_COD')),
 :vVd4Alm, cast('today' as date), :vNovoCod, :vVd4Vec, :vVd4Val, :vVd4Tip,
 :vVd4Finan, :vVd4Item, :vVd4Doc, :vVd4Boleto, :vVd4Banco, :vVd4Agencia,
 :vVd4Conta, :vVd4NumDoc, :vVd4Antecipado);
 
 end
 
 
 Insert Into ESTMVVD5
 (
 vd5_cod, vd5_bol, vd5_ent, vd5_tip, vd5_num, vd5_cop, vd5_cep, vd5_end,
 vd5_bai, vd5_cid, vd5_est, vd5_ref, vd5_alm, vd5_cad, vd5_nom, vd5_cnp,
 vd5_ies, vd5_fis, vd5_tipent
 )
 select
 (Select VCODIGO From maxtabelacodigo('ESTMVVD5','VD5_COD')), :vNovoCod,
 vd5_ent, vd5_tip, vd5_num, vd5_cop, vd5_cep, vd5_end,
 vd5_bai, vd5_cid, vd5_est, vd5_ref, vd5_alm, vd5_cad, vd5_nom, vd5_cnp,
 vd5_ies, vd5_fis, vd5_tipent
 from estmvvd5
 Where VD5_BOL = :PCODIGO;
 
 Insert Into ESTMVVD13
 (
 vd13_bol, vd13_var, vd13_data, vd13_real, vd13_texto, dat_cad, dat_atu,
 ativo, use_cad, use_atu
 )
 select :vNovoCod, vd13_var, vd13_data, vd13_real, vd13_texto, dat_cad, dat_atu,
 ativo, use_cad, use_atu
 from estmvvd13
 Where VD13_BOL = :PCODIGO;
 
 if (pRelacionar = 1) then
 Insert Into ESTMVVD14 (vd14_bol, vd14_ori, vd14_item) values
 (:vNovoCod, :pCodigo,
 coalesce((Select max(vd14_item)+1 from estmvvd14 where vd14_ori = :pCodigo),1));
 
 suspend;
 end
^

ALTER PROCEDURE RETIRA_CARACTERES (
    PTEXTO VARCHAR(100),
    PCARACTERES VARCHAR(100))
RETURNS (
    RESULT VARCHAR(100))
AS
 declare variable vtamtexto integer;
 declare variable vcnt integer;
 begin
 vtamtexto = strlen(ptexto);
 vcnt = 1;
 result = '';
 while (vcnt <= vtamtexto) do
 begin
 if (upper(pcaracteres) not containing upper(substr(ptexto, vcnt, vcnt))) then
 result = result || substr(ptexto, vcnt, vcnt);
 vcnt = vcnt + 1;
 end
 suspend;
 end
^

ALTER PROCEDURE RETIRAR_ACENTO (
    PTEXTO VARCHAR(4000))
RETURNS (
    RESULT VARCHAR(4000))
AS
 declare variable vvalor varchar(4000);
 declare variable i integer;
 begin
 i = 1;
 Result = '';
 while (i <= strlen(pTexto)) do
 begin
 vValor = substr(pTexto, i, i);
 if (vValor = 'á') then Result = Result || 'a';
 else if (vValor = 'à') then Result = Result || 'a';
 else if (vValor = 'ã') then Result = Result || 'a';
 else if (vValor = 'â') then Result = Result || 'a';
 else if (vValor = 'é') then Result = Result || 'e';
 else if (vValor = 'è') then Result = Result || 'e';
 else if (vValor = 'ê') then Result = Result || 'e';
 else if (vValor = 'í') then Result = Result || 'i';
 else if (vValor = 'ì') then Result = Result || 'i';
 else if (vValor = 'î') then Result = Result || 'i';
 else if (vValor = 'ó') then Result = Result || 'o';
 else if (vValor = 'ò') then Result = Result || 'o';
 else if (vValor = 'ô') then Result = Result || 'o';
 else if (vValor = 'õ') then Result = Result || 'o';
 else if (vValor = 'ú') then Result = Result || 'u';
 else if (vValor = 'ù') then Result = Result || 'u';
 else if (vValor = 'û') then Result = Result || 'u';
 else if (vValor = 'ü') then Result = Result || 'u';
 else if (vValor = 'ç') then Result = Result || 'c';
 else if (vValor = 'Á') then Result = Result || 'A';
 else if (vValor = 'À') then Result = Result || 'A';
 else if (vValor = 'Ã') then Result = Result || 'A';
 else if (vValor = 'Â') then Result = Result || 'A';
 else if (vValor = 'É') then Result = Result || 'E';
 else if (vValor = 'È') then Result = Result || 'E';
 else if (vValor = 'Ê') then Result = Result || 'E';
 else if (vValor = 'Í') then Result = Result || 'I';
 else if (vValor = 'Ì') then Result = Result || 'I';
 else if (vValor = 'Î') then Result = Result || 'I';
 else if (vValor = 'Ó') then Result = Result || 'O';
 else if (vValor = 'Ò') then Result = Result || 'O';
 else if (vValor = 'Ô') then Result = Result || 'O';
 else if (vValor = 'Õ') then Result = Result || 'O';
 else if (vValor = 'Ú') then Result = Result || 'U';
 else if (vValor = 'Ù') then Result = Result || 'U';
 else if (vValor = 'Û') then Result = Result || 'U';
 else if (vValor = 'Ü') then Result = Result || 'U';
 else if (vValor = 'Ç') then Result = Result || 'C';
 else Result = Result || vValor;
 i = i + 1;
 end
 suspend;
 end
^

ALTER PROCEDURE RETIRAR_NAO_NUMERICOS (
    PTEXTO VARCHAR(100))
RETURNS (
    RESULT VARCHAR(100))
AS
 declare variable vtamtexto integer;
 declare variable vcnt integer;
 begin
 vtamtexto = strlen(ptexto);
 vcnt = 1;
 result = '';
 while (vcnt <= vtamtexto) do
 begin
 if (substr(ptexto, vcnt, vcnt) in ('0','1','2','3','4','5','6','7','8','9')) then
 result = result || substr(ptexto, vcnt, vcnt);
 vcnt = vcnt + 1;
 end
 suspend;
 end
^

ALTER PROCEDURE RETORNA_TAXADIARIA (
    PMOEDA INTEGER,
    PDATA TIMESTAMP)
RETURNS (
    RESULT DOUBLE PRECISION)
AS
 DECLARE VARIABLE VANO INTEGER;
 DECLARE VARIABLE VMES INTEGER;
 DECLARE VARIABLE VVALOR VARCHAR(600);
 DECLARE VARIABLE VERRO INTEGER;
 begin
 vAno = extract(year from :pdata);
 vMes = extract(month from :pdata);
 Select resultado, encontrado
 from itemstring(
 (select (Select Result from FLOAT_TO_STRING(cdindice.IND_TX01)) || "@" || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX02)) || "@" || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX03)) || "@" || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX04)) || "@" || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX05)) || "@" ||
 (Select Result from FLOAT_TO_STRING(cdindice.IND_TX06)) || "@" || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX07)) || "@" || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX08)) || "@" || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX09)) || "@" || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX10)) || "@" ||
 (Select Result from FLOAT_TO_STRING(cdindice.IND_TX11)) || "@" || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX12)) || "@" || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX13)) || "@" || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX14)) || "@" || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX15)) || "@" ||
 (Select Result from FLOAT_TO_STRING(cdindice.IND_TX16)) || "@" || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX17)) || "@" || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX18)) || "@" || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX19)) || "@" || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX20)) || "@" ||
 (Select Result from FLOAT_TO_STRING(cdindice.IND_TX21)) || "@" || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX22)) || "@" || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX23)) || "@" || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX24)) || "@" || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX25)) || "@" ||
 (Select Result from FLOAT_TO_STRING(cdindice.IND_TX26)) || "@" || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX27)) || "@" || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX28)) || "@" || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX29)) || "@" || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX30)) || "@" || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX31))
 from cdindice where cdindice.ind_ano = :vAno and cdindice.ind_mes = :vmes and cdindice.ind_moe = :pmoeda),
 extract(day from :pdata), "@")
 into VVALOR, VERRO;
 if (VERRO = 1) then
 RESULT = cast(VVALOR as double precision);
 suspend;
 end
^

ALTER PROCEDURE RETORNA_TAXAMENSAL (
    PMOE INTEGER,
    PDATA TIMESTAMP)
RETURNS (
    RESULT DOUBLE PRECISION)
AS
 DECLARE VARIABLE VANO INTEGER;
 DECLARE VARIABLE VMES INTEGER;
 begin
 VMES = extract(month from :PDATA);
 VANO = extract(year from :PDATA);
 SELECT IND_TXM FROM CDINDICE
 WHERE IND_MES = :VMES
 AND IND_ANO = :VANO
 AND IND_MOE = :PMOE
 INTO Result;
 suspend;
 end
^

ALTER PROCEDURE SALDO_DA_CONTA_NA_DATA (
    PCONTADE VARCHAR(30),
    PCONTAATE VARCHAR(30),
    PATIVO VARCHAR(1),
    PTIPODE VARCHAR(30),
    PTIPOATE VARCHAR(30),
    PPLANODE VARCHAR(40),
    PPLANOATE VARCHAR(40),
    PCENTRODE VARCHAR(40),
    PCENTROATE VARCHAR(40),
    PCENTROAUXDE VARCHAR(40),
    PCENTROAUXATE VARCHAR(40),
    PBALANCETE INTEGER,
    PDATA TIMESTAMP)
RETURNS (
    RSALDO DOUBLE PRECISION,
    RFLAG INTEGER)
AS
 DECLARE VARIABLE VSALDO DOUBLE PRECISION;
 DECLARE VARIABLE VSALDOANTERIOR DOUBLE PRECISION;
 DECLARE VARIABLE VDATFEC DATE;
 DECLARE VARIABLE VCONTA INTEGER;
 DECLARE VARIABLE VDTI DATE;
 begin
 if (pContaAte is Null) then
 pContaAte = pContaDe;
 if (pTipoAte is Null) then
 pTipoAte = pTipoDe;
 if ((Upper(pAtivo) = "A") or (Upper(pAtivo) = "I")) then
 pAtivo = Upper(pAtivo);
 else
 pAtivo = "%";
 rSaldo = 0;
 for
 select con_fec, con_cod
 from cdcon, cdtipconta
 where
 ((:pContaDe is Null) or ((cdcon.con_nom >= :pContaDe) and (cdcon.con_nom <= :pContaAte)))
 and cdcon.Ativo like :pAtivo
 and cdtipconta.tip_cod = cdcon.con_tip
 order by cdcon.con_nom
 into vDatFec, vConta
 do begin
 if (vDatFec > pData)
 then begin
 for
 select 0.0 As SaldoAnterior,
 sum(lge_val) As Saldo
 from MvLGE
 LEFT JOIN CDCCUSTAUX ON LGE_CCUSTO2 = CDCCUSTAUX.CUS_COD
 , cdcon, cdpla, cdccust
 where cdcon.con_cod = :vconta
 and mvlge.lge_con = cdcon.con_cod
 and cdpla.pla_cod = lge_pla
 and mvlge.lge_ope <= :pData
 and mvlge.lge_ccusto = cdccust.cus_cod
 and mvlge.lge_pla = cdpla.pla_cod
 and ((cdccust.cus_cod >= :PCENTRODE and cdccust.cus_cod <= :PCENTROATE) OR (:PCENTRODE is Null))
 and ((CDCCUSTAUX.cus_ord >= :PCENTROAUXDE and CDCCUSTAUX.cus_ord <= :PCENTROAUXATE) OR (:PCENTROAUXDE is Null))
 and ((cdpla.pla_cod >= :PPLANODE and cdpla.pla_cod <= :PPLANOATE) OR (:PPLANODE is Null))
 group By cdcon.con_moe
 union
 select
 (cdcon.con_primeiro_saldo) As SaldoAnterior,
 (select Sum(morlge.lge_val)
 from mOrlge
 LEFT JOIN CDCCUSTAUX ON LGE_CCUSTO2 = CDCCUSTAUX.CUS_COD
 , cdpla, cdccust
 where lge_con = cdcon.con_cod and lge_ope <= :pData
 and cdpla.pla_cod = lge_pla
 and ((cdccust.cus_cod >= :PCENTRODE and cdccust.cus_cod <= :PCENTROATE) OR (:PCENTRODE is Null))
 and ((CDCCUSTAUX.cus_ord >= :PCENTROAUXDE and CDCCUSTAUX.cus_ord <= :PCENTROAUXATE) OR (:PCENTROAUXDE is Null))
 and ((cdpla.pla_cod >= :PPLANODE and cdpla.pla_cod <= :PPLANOATE) OR (:PPLANODE is Null))
 and morlge.lge_ccusto = cdccust.cus_cod
 and mOrlge.lge_pla = cdpla.pla_cod ) As Saldo
 from cdcon
 where cdcon.con_cod = :vconta
 into vSaldo, vSaldoAnterior
 do begin
 if (not vSaldo is null) then
 rSaldo = rSaldo + vSaldo;
 if (not vSaldoAnterior is null) then
 rSaldo = rSaldo + vSaldoAnterior;
 end
 end
 else begin
 for
 select cdcon.con_sal,
 (select Sum(mvlge.lge_val)
 from mvlge
 LEFT JOIN CDCCUSTAUX ON LGE_CCUSTO2 = CDCCUSTAUX.CUS_COD
 , cdpla, cdccust
 where lge_con = cdcon.con_cod and lge_ope <= :pData
 and cdpla.pla_cod = lge_pla
 and ((cdccust.cus_cod >= :PCENTRODE and cdccust.cus_cod <= :PCENTROATE) OR (:PCENTRODE is Null))
 and ((CDCCUSTAUX.cus_ord >= :PCENTROAUXDE and CDCCUSTAUX.cus_ord <= :PCENTROAUXATE) OR (:PCENTROAUXDE is Null))
 and ((cdpla.pla_cod >= :PPLANODE and cdpla.pla_cod <= :PPLANOATE) OR (:PPLANODE is Null))
 and mvlge.lge_ccusto = cdccust.cus_cod
 and mvlge.lge_pla = cdpla.pla_cod ) As Saldo
 from cdcon
 where cdcon.con_cod = :vconta
 into vSaldo, vSaldoAnterior
 do begin
 if (not vSaldo is null) then
 rSaldo = rSaldo + vSaldo;
 if (not vSaldoAnterior is null) then
 rSaldo = rSaldo + vSaldoAnterior;
 end
 select min(mvlge.lge_ope) from mvlge where mvlge.lge_con=:vconta
 into :VDTI;
 select cdcon.con_sal from cdcon
 where cdcon.con_cod = cast(:vconta as integer)
 into rflag;
 end
 end
 suspend;
 end
^

ALTER PROCEDURE SALDO_DEVOLUCOES (
    PBOLETA VARCHAR(13))
RETURNS (
    SALDO DOUBLE PRECISION)
AS
 DECLARE VARIABLE PPRODUTO INTEGER;
 DECLARE VARIABLE WBOL VARCHAR(13);
 DECLARE VARIABLE WPRO INTEGER;
 DECLARE VARIABLE WCOR VARCHAR(3);
 DECLARE VARIABLE WMED VARCHAR(3);
 DECLARE VARIABLE WVAL DOUBLE PRECISION;
 DECLARE VARIABLE WVALTOT DOUBLE PRECISION;
 DECLARE VARIABLE WTRA varchar(3);
 BEGIN
 
 WVALTOT=0;
 FOR SELECT VD9_BOL,VD10_PRO,VD10_COR,VD10_MED
 FROM ESTMVVD9, ESTMVVD10 WHERE VD9_ASC=:pBoleta AND VD10_VD9=VD9_COD INTO WBOL, WPRO, WCOR, WMED DO
 BEGIN
 SELECT TRA_TIP_TRA FROM ESTMVVD1, CDTRA1 WHERE VD1_COD=:WBOL AND TRA_COD=VD1_TRA INTO WTRA;
 IF (WTRA='TRC') THEN
 BEGIN
 SELECT FIRST 1 (VD2_QTD*VD2_VLR) AS TOT FROM ESTMVVD2
 WHERE VD2_BOL=:WBOL AND VD2_PRO=:WPRO
 AND ( (VD2_COR=:WCOR) or (:WCOR IS NULL) or (:WCOR ='') )
 AND ( (VD2_MED=:WMED) or (:WMED IS NULL) or (:WMED ='') )
 INTO WVAL;
 WVALTOT=WVALTOT+WVAL;
 END
 END
 
 SALDO=WVALTOT;
 SUSPEND;
 
 END
^

ALTER PROCEDURE SALDO_PEDIDO (
    PVD2COD INTEGER,
    PSALFEC INTEGER)
RETURNS (
    PSALDO DOUBLE PRECISION,
    PQUANT DOUBLE PRECISION)
AS
 declare variable vvd1can varchar(2);
 declare variable vvd1vtp double precision;
 declare variable vvd1dsv double precision;
 declare variable vvd1dsp double precision;
 declare variable vvd2vlr double precision;
 declare variable vvd2qtd double precision;
 declare variable vvd2dsc double precision;
 declare variable vvd10pd double precision;
 declare variable vpb double precision;
 declare variable vpd double precision;
 declare variable vcred double precision;
 declare variable vvdcod varchar(13);
 begin
 For Select
 vd1_canc, v1.vd1_valor_totalb,
 VD1_COD, VD1_DESC_V, VD1_DESC_P, vd2_vlr, vd2_qtd, descontoitem,
 Coalesce((Select sum(vd10_qtd)
 from estmvvd10, estmvvd9
 where vd10_vd9 = vd9_cod
 and vd10_pro = v2.vd2_pro
 and Coalesce(vd10_cor,'') = Coalesce(v2.vd2_cor,'')
 and Coalesce(vd10_med,'') = Coalesce(v2.vd2_med,'')
 and vd9_asc = v2.vd2_bol
 and vd9_asc_cad = v2.vd2_cad
 and vd9_asc_alm = v2.vd2_alm ),0) -
 Coalesce((Select sum(vd2_qtd)
 from estmvvd2 vd2
 where vd2.vd2_bol = v2.vd2_bol
 and vd2.vd2_item < v2.vd2_item
 and vd2.vd2_pro = v2.vd2_pro
 and Coalesce(vd2.vd2_cor,'') = Coalesce(v2.vd2_cor,'')
 and Coalesce(vd2.vd2_med,'') = Coalesce(v2.vd2_med,'')),0)
 from estmvvd1 v1, estmvvd2 v2
 where vd2_cod = :pVd2Cod
 and vd1_cod = vd2_bol
 and vd1_alm = vd2_alm
 and vd1_cad = vd2_cad
 Into vVd1Can, vVd1Vtp, vVdCod, vVd1DsV, vVd1DsP, vVd2Vlr, vVd2Qtd, vVd2Dsc, vVd10Pd Do
 begin
 if (vVd10Pd < 0) then
 vVd10Pd = 0;
 
 Select Saldo from SALDO_DEVOLUCOES(:vVdCod) into vCred;
 if (vCred is Null) then
 vCred = 0;
 vVd1DsV = vVd1DsV+vCred;
 
 if (vVd2Qtd is Null) then
 vVd2Qtd = 0;
 if (vVd2Dsc is Null) then
 vVd2Dsc = 0;
 if (vVd10Pd is Null) then
 vVd10Pd = 0;
 if (vVd2Vlr is Null) then
 vVd2Vlr = 0;
 if (vVd1DsP is Null) then
 vVd1DsP = 0;
 if (vVd1DsV is Null) then
 vVd1DsV = 0;
 if (vVd1Vtp is Null) then
 vVd1Vtp = 0;
 
 if ((vVd1Can = "BP") and (vVd2Qtd >= vVd10Pd)) then
 pQuant = (vVd2Qtd - vVd10Pd);
 else if (vVd1Can = "A") then
 pQuant = vVd2Qtd;
 else if ((pSalFec > 0) and ((vVd1Can = "FN") or (vVd1Can = "F") or (vVd1Can = "P") )) then
 BEGIN
 pQuant = vVd2Qtd;
 IF ( (vVd1Vtp<=0) AND (vVd1Can = "P") ) THEN
 vVd1Vtp=(pQuant * vVd2Vlr) * ((100.0 - vVd2Dsc) / 100.0);
 END
 else
 pQuant = 0;
 
 vPB = (pQuant * vVd2Vlr) * ((100.0 - vVd2Dsc) / 100.0);
 
 if (vVd1Vtp > 0) then
 begin
 vPD = (((vPB * vVd1DsP) + (((vVd1DsV * 100.00) / vVd1Vtp) * vPB)) / 100.00);
 pSaldo = vPB - vPD;
 end
 else
 begin
 pSaldo = vPB;
 end
 Suspend;
 end
 end
^

ALTER PROCEDURE SALDO_PEDIDO_VD1 (
    PVD1COD VARCHAR(13),
    PSALFEC INTEGER)
RETURNS (
    PSALDO DOUBLE PRECISION,
    PQUANT DOUBLE PRECISION,
    PSALDO_FIN DOUBLE PRECISION)
AS
 DECLARE VARIABLE VVD1CAN VARCHAR(2);
 DECLARE VARIABLE VVD1VTP DOUBLE PRECISION;
 DECLARE VARIABLE VVD1DSV DOUBLE PRECISION;
 DECLARE VARIABLE VVD1DSP DOUBLE PRECISION;
 DECLARE VARIABLE VVD2VLR DOUBLE PRECISION;
 DECLARE VARIABLE VVD2QTD DOUBLE PRECISION;
 DECLARE VARIABLE VVD2DSC DOUBLE PRECISION;
 DECLARE VARIABLE VVD10PD DOUBLE PRECISION;
 DECLARE VARIABLE VSALDO DOUBLE PRECISION;
 DECLARE VARIABLE VQUANT DOUBLE PRECISION;
 DECLARE VARIABLE VPB DOUBLE PRECISION;
 DECLARE VARIABLE VPD DOUBLE PRECISION;
 DECLARE VARIABLE VCRED DOUBLE PRECISION;
 DECLARE VARIABLE VPERCENT DOUBLE PRECISION;
 DECLARE VARIABLE VNPARC INTEGER;
 begin
 pSaldo = 0;
 pQuant = 0;
 For Select
 vd1_canc,
 estmvvd1.vd1_total_nota_semdescto,
 VD1_DESC_V,
 VD1_DESC_P,
 vd2_vlr,
 vd2_qtd,
 descontoitem,
 coalesce((Select sum(coalesce(vd10_qtd,0))
 from estmvvd10, estmvvd9
 where vd10_vd9 = vd9_cod
 and vd10_pro = estmvvd2.vd2_pro
 and vd10_cor = estmvvd2.vd2_cor
 and vd10_med = estmvvd2.vd2_med
 and vd9_asc = estmvvd2.vd2_bol
 and vd9_asc_cad = estmvvd2.vd2_cad
 and vd9_asc_alm = estmvvd2.vd2_alm ), 0)
 from estmvvd1, estmvvd2
 where vd1_cod = :pVd1Cod
 and vd1_cod = vd2_bol
 and vd1_alm = vd2_alm
 and vd1_cad = vd2_cad
 Into vVd1Can, vVd1Vtp, vVd1DsV, vVd1DsP, vVd2Vlr, vVd2Qtd, vVd2Dsc, vVd10Pd Do
 begin
 
 Select Saldo from SALDO_DEVOLUCOES(:PVD1COD) into vCred;
 if (vCred is Null) then
 vCred = 0;
 vVd1DsV = vVd1DsV+vCred;
 if (vVd2Qtd is Null) then
 vVd2Qtd = 0;
 if (vVd2Dsc is Null) then
 vVd2Dsc = 0;
 if (vVd10Pd is Null) then
 vVd10Pd = 0;
 if (vVd2Vlr is Null) then
 vVd2Vlr = 0;
 if (vVd1DsP is Null) then
 vVd1DsP = 0;
 if (vVd1DsV is Null) then
 vVd1DsV = 0;
 if (vVd1Vtp is Null) then
 vVd1Vtp = 0;
 
 if ((vVd1Can = "BP") and (vVd2Qtd >= vVd10Pd)) then
 vQuant = (vVd2Qtd - vVd10Pd);
 else if (vVd1Can = "A") then
 vQuant = vVd2Qtd;
 else if ((pSalFec > 0) and ((vVd1Can = "FN") or (vVd1Can = "F") or (vVd1Can = "P") )) then
 BEGIN
 vQuant = vVd2Qtd;
 IF ( (vVd1Vtp<=0) AND (vVd1Can = "P") ) THEN
 vVd1Vtp=(vQuant * vVd2Vlr) * ((100.0 - vVd2Dsc) / 100.0);
 END
 else
 vQuant = 0;
 
 vPB = (vQuant * vVd2Vlr) * ((100.0 - vVd2Dsc) / 100.0);
 
 if (vVd1Vtp > 0) then
 begin
 vPD = (((vPB * vVd1DsP) + (( (vVd1DsV * 100.00) / vVd1Vtp) * vPB)) / 100.00);
 vSaldo = vPB - vPD;
 end
 else
 begin
 vPD = 0;
 vSaldo = 0;
 end
 
 pQuant = pQuant + vQuant;
 pSaldo = pSaldo + vSaldo;
 
 end
 
 Select COUNT(VD4_COD),
 SUM(
 CASE
 WHEN (TIP_FIN = 'S') THEN ((VD4_VAL * 100) / VD3_VLRL)
 ELSE 0
 END)
 From Estmvvd4, cdtipd, estmvvd3
 Where vd4_bol = :PVD1COD
 and vd3_bol = vd4_bol
 and tip_cod = vd4_tip
 Into vNParc, vPercent;
 
 pSaldo_Fin = vPercent * pSaldo / 100 ;
 
 Suspend;
 end
^

ALTER PROCEDURE SALDO_VALOR_VD1 (
    PDATADE TIMESTAMP,
    PDATAATE TIMESTAMP)
RETURNS (
    VD1_COD VARCHAR(13),
    VD1_VALOR_TOTALL DOUBLE PRECISION,
    LIQUIDO DOUBLE PRECISION,
    TRA_NOM VARCHAR(40),
    ALM_FANT VARCHAR(20),
    VD1_NOT INTEGER,
    VD1_CAD TIMESTAMP)
AS
 declare variable wdescp double precision;
 declare variable wdescv double precision;
 declare variable wcod varchar(13);
 declare variable wvd1_valor_totall double precision;
 declare variable wliq double precision;
 declare variable wcred varchar(13);
 declare variable wtra integer;
 declare variable wtiptra varchar(3);
 declare variable walm integer;
 BEGIN
 
 FOR SELECT VD1_CAD, VD1_NOT, VD1_ALM, VD1_TRA, VD1_DESC_P, VD1_DESC_V, VD1_COD, VD1_VALOR_TOTALL,
 Sum((VD2_VLR - (Coalesce(DESCONTOITEM,0) / 100 * VD2_VLR) + (Coalesce(VD2_ALIQUOTA_IPI,0) / 100 * VD2_VLR)) * VD2_QTD * (CASE WHEN UNI_USA_DIM_NO_PRECO = 'T' THEN COALESCE(NULLIF(VD2_CMP,0),1) * COALESCE(NULLIF(VD2_LRG,0),1) * COALESCE(NULLIF(VD2_ALT,0),1) ELSE 1 END)) -
 Sum((VD2_VLR - (Coalesce(DESCONTOITEM,0) / 100 * VD2_VLR) + (Coalesce(VD2_ALIQUOTA_IPI,0) / 100 * VD2_VLR)) * VD2_QTD * (CASE WHEN UNI_USA_DIM_NO_PRECO = 'T' THEN COALESCE(NULLIF(VD2_CMP,0),1) * COALESCE(NULLIF(VD2_LRG,0),1) * COALESCE(NULLIF(VD2_ALT,0),1) ELSE 1 END)) * ( Coalesce(VD1_DESC_P,0) / 100 ) -
 Coalesce(VD1_DESC_V,0) + VD1_VALOR_FRETE + VD1_VALOR_SEGURO + VD1_OUTRAS_DESPESAS + VD1_VALB_SUB_TRIBUTA
 FROM ESTMVVD1 INNER JOIN ESTMVVD2 ON (VD1_COD=VD2_BOL) INNER JOIN CDTRA1 ON (VD1_TRA = TRA_COD) LEFT JOIN CDPRO ON (PRO_COD = VD2_PRO) LEFT JOIN CDUNIDADE ON (PRO_UNI = CODIGO)
 WHERE TRA_DIGITA_ICMS = 'F'
 and TRA_DIGITA_IPI = 'F'
 and TRA_DIGITA_TOTAL_LIQUIDO = 'F'
 and TRA_DIGITA_TOTAL_BRUTO = 'F'
 and VD1_ORIGEM <> 'CNT'
 and vd1_canc <> 'C'
 and vd1_canc <> 'P'
 and vd1_canc <> 'TP'
 and ((:PDATADE IS NULL) OR ( (VD1_CAD >= :PDATADE) ))
 GROUP BY VD1_NOT, VD1_ALM, VD1_CAD, VD1_TRA, VD1_DESC_P, VD1_DESC_V,VD1_COD, VD1_VALOR_TOTALL, VD1_VALOR_IPI, VD1_VALOR_FRETE, VD1_VALOR_SEGURO, VD1_OUTRAS_DESPESAS, VD1_VALB_SUB_TRIBUTA
 HAVING
 (ABS((
 Sum( (VD2_VLR - (Coalesce(DESCONTOITEM,0) / 100 * VD2_VLR) + (Coalesce(VD2_ALIQUOTA_IPI,0) / 100 * VD2_VLR)) * VD2_QTD ) -
 Sum( (VD2_VLR - (Coalesce(DESCONTOITEM,0) / 100 * VD2_VLR) + (Coalesce(VD2_ALIQUOTA_IPI,0) / 100 * VD2_VLR)) * VD2_QTD ) * ( Coalesce(VD1_DESC_P,0) / 100 ) -
 Coalesce(VD1_DESC_V,0) - (VD1_VALOR_TOTALL - VD1_VALOR_FRETE - VD1_VALOR_SEGURO - VD1_OUTRAS_DESPESAS + VD1_VALB_SUB_TRIBUTA)) * 100) > 0.05)
 and
 (ABS((
 Sum((VD2_VLR - (Coalesce(DESCONTOITEM,0) / 100 * VD2_VLR) + (Coalesce(VD2_ALIQUOTA_IPI,0) / 100 * VD2_VLR)) * VD2_QTD * COALESCE(NULLIF(VD2_CMP,0),1) * COALESCE(NULLIF(VD2_LRG,0),1) * COALESCE(NULLIF(VD2_ALT,0),1)) -
 Sum((VD2_VLR - (Coalesce(DESCONTOITEM,0) / 100 * VD2_VLR) + (Coalesce(VD2_ALIQUOTA_IPI,0) / 100 * VD2_VLR)) * VD2_QTD * COALESCE(NULLIF(VD2_CMP,0),1) * COALESCE(NULLIF(VD2_LRG,0),1) * COALESCE(NULLIF(VD2_ALT,0),1)) * ( Coalesce(VD1_DESC_P,0) / 100 ) -
 Coalesce(VD1_DESC_V,0) - (VD1_VALOR_TOTALL - VD1_VALOR_FRETE - VD1_VALOR_SEGURO - VD1_OUTRAS_DESPESAS + VD1_VALB_SUB_TRIBUTA)) * 100) > 0.05)
 ORDER BY VD1_CAD
 INTO VD1_CAD, VD1_NOT, wAlm, wTra, wDESCP, wDESCV, wCOD, wVD1_VALOR_TOTALL, wLiq DO
 
 BEGIN
 
 SELECT TRA_TIP_TRA, TRA_NOM FROM CDTRA1 WHERE TRA_COD=:wTra INTO wTipTra, TRA_NOM;
 SELECT ALM_FANT FROM CDALM WHERE ALM_COD=:wAlm INTO ALM_FANT;
 
 wCred='';
 if ((wCOD is not null) and (wCOD<>'') and (wTipTra<>'PDD') and (wTipTra<>'PDC') ) then
 BEGIN
 SELECT FIRST 1 'C' FROM ESTMVVD9 WHERE VD9_ASC=:wCOD Into wCred;
 if (wCred is Null) then
 wCred = '';
 END
 
 IF ((ABS(wVD1_VALOR_TOTALL - (Cast(wLiq * 100 as integer) / 100)) > 0.05) and not (wCred<>'') and (wLiq >= 0)) then
 BEGIN
 VD1_COD = wCOD;
 VD1_VALOR_TOTALL = Cast(wVD1_VALOR_TOTALL * 100 as integer) / 100;
 LIQUIDO = Cast(wLiq * 100 as integer) / 100;
 
 SUSPEND;
 END
 
 END
 
 END
^

ALTER PROCEDURE SALVAULTIMOREAJUSTE (
    PTIPO VARCHAR(1))
AS
BEGIN
  EXIT;
END
^

ALTER PROCEDURE SEQUENCIA_NF_PROD (
    DATA_DE TIMESTAMP,
    DATA_ATE TIMESTAMP)
RETURNS (
    VD1_NOT DOUBLE PRECISION,
    FORM_NOM VARCHAR(45),
    CLI_RED VARCHAR(75),
    CLI_NOM VARCHAR(60),
    NOM_ENT VARCHAR(75),
    VD1_QUANTIDADE DOUBLE PRECISION,
    ALM_NOM VARCHAR(50),
    VD1_CAD TIMESTAMP,
    VD1_VALOR_TOTALL DOUBLE PRECISION,
    VD1_VALOR_ICMS DOUBLE PRECISION,
    VD1_COD VARCHAR(13),
    VD1_CFOP INTEGER,
    CFO_CFO VARCHAR(20),
    VD1_CANC VARCHAR(2),
    CFO_NOM VARCHAR(100),
    SERIE_NOM VARCHAR(5),
    STATUS VARCHAR(20),
    PGT_NOM VARCHAR(100),
    VD1_VALOR_TOTALB DOUBLE PRECISION)
AS
 declare variable voldn double precision;
 declare variable voldalm varchar(50);
 declare variable vvez integer;
 declare variable tvd1_not double precision;
 declare variable tform_nom varchar(45);
 declare variable tcli_red varchar(75);
 declare variable tcli_nom varchar(60);
 declare variable tnom_ent varchar(75);
 declare variable tvd1_quantidade double precision;
 declare variable talm_nom varchar(50);
 declare variable tvd1_cad date;
 declare variable tvd1_valor_totall double precision;
 declare variable tvd1_valor_icms double precision;
 declare variable tvd1_cod varchar(13);
 declare variable tvd1_cfop integer;
 declare variable tcfo_cfo varchar(20);
 declare variable tvd1_canc varchar(2);
 declare variable tcfo_nom varchar(100);
 declare variable tserie_nom varchar(5);
 declare variable tstatus varchar(20);
 declare variable tpgt_nom varchar(100);
 declare variable tvd1_valor_totalb double precision;
 BEGIN
 vOLDN = 0;
 vOLDALM = '';
 vVEZ = 0;
 FOR
 SELECT DISTINCT VD1_NOT, FORM_NOM,
 CASE WHEN (VD1_CLI <> 0) THEN CLI_RED WHEN (VD1_FOR <> 0) THEN FOR_RED ELSE 'SEM ENTIDADE' END,
 CASE WHEN (VD1_CLI <> 0) THEN NOM_ENT WHEN (VD1_FOR <> 0) THEN FOR_RZS ELSE 'SEM ENTIDADE' END, VD1_QUANTIDADE, ALM_NOM, VD1_CAD, VD1_TOTALL_PRODUTO,
 VD1_VALOR_ICMS, VD1_COD, VD1_CFOP, CFO_CFO, VD1_CANC, CFO_NOM, SERIE_NOM,
 STATUS, PGT_NOM, VD1_TOTALB_PRODUTO, CLI_NOM
 FROM CDFORM, CDALM, ESTMVVD1
 INNER JOIN CDSTATUS ON (CDSTATUS.STA_SIG = ESTMVVD1.VD1_CANC)
 LEFT JOIN CDPRESTSER ON (ESTMVVD1.VD1_PRESTSER = PRE_COD)
 LEFT JOIN CDCLI ON (ESTMVVD1.VD1_CLI = CLI_COD)
 LEFT JOIN CDFOR ON (ESTMVVD1.VD1_FOR = FOR_COD)
 LEFT JOIN CDPRESTSER ON (ESTMVVD1.VD1_PRESTSER = PRE_COD)
 LEFT JOIN ESTMVVD3 ON (ESTMVVD1.VD1_COD=VD3_BOL)
 LEFT JOIN CDPGT ON (ESTMVVD3.VD3_PGT=PGT_COD)
 LEFT JOIN CDCFO ON (ESTMVVD1.VD1_CFOP=CFO_COD), CDSERIENF, CDTRA1, CDTRA3
 WHERE VD1_ALM = ALM_COD
 AND TRA_COD = VD1_TRA
 AND CDTRA1.TRA_COD = CDTRA3.TRA_TRA
 AND CDTRA3.TRA_FORM = CDFORM.FORM_COD
 and cdform.form_alm = cdalm.alm_cod
 AND FORM_SERIE = SERIE_COD
 AND (TRA_LAY_PDV = "PRO" OR TRA_LAY_PDV = "PS")
 AND FORM_IMPRESSO IN (SELECT NOME FROM CDIMPRESO WHERE TIPOFORM = 'NFP' or TIPOFORM = 'NFE')
 AND ( (ESTMVVD1.VD1_CAD >= :DATA_DE) OR (:DATA_DE IS NULL) )
 AND ( (ESTMVVD1.VD1_CAD <= :DATA_ATE) OR (:DATA_ATE IS NULL) )
 AND ( (STA_SIG='P')
 OR (STA_SIG='F')
 OR (STA_SIG='FN')
 OR (STA_SIG='C') )
 ORDER BY ALM_NOM, SERIE_NOM ASC, VD1_NOT
 INTO VD1_NOT, FORM_NOM, CLI_RED, NOM_ENT, VD1_QUANTIDADE,
 ALM_NOM, VD1_CAD, VD1_VALOR_TOTALL, VD1_VALOR_ICMS, VD1_COD,
 VD1_CFOP, CFO_CFO, VD1_CANC, CFO_NOM, SERIE_NOM, STATUS,
 PGT_NOM, VD1_VALOR_TOTALB, CLI_NOM DO
 BEGIN
 
 IF ((vVEZ = 0) OR (vOLDALM <> ALM_NOM) OR (vOLDN = 0) OR ( vOLDN>VD1_NOT)) THEN
 BEGIN
 vOLDN = VD1_NOT;
 vOLDALM = ALM_NOM;
 vVEZ = 1;
 END
 
 IF ((VD1_NOT > 0) AND (vOLDN <= VD1_NOT)) THEN
 BEGIN
 tVD1_NOT = VD1_NOT;
 tFORM_NOM = FORM_NOM;
 tCLI_RED = CLI_RED;
 tCLI_NOM = CLI_NOM;
 tNOM_ENT = NOM_ENT;
 tVD1_QUANTIDADE = VD1_QUANTIDADE;
 tALM_NOM = ALM_NOM;
 tVD1_CAD = VD1_CAD;
 tVD1_VALOR_TOTALL = VD1_VALOR_TOTALL;
 tVD1_VALOR_ICMS = VD1_VALOR_ICMS;
 tVD1_COD = VD1_COD;
 tVD1_CFOP = VD1_CFOP;
 tCFO_CFO = CFO_CFO;
 tVD1_CANC = VD1_CANC;
 tCFO_NOM = CFO_NOM;
 tSERIE_NOM = SERIE_NOM;
 tSTATUS = STATUS;
 tPGT_NOM = PGT_NOM;
 TVD1_VALOR_TOTALB = VD1_VALOR_TOTALB;
 
 WHILE ((vOLDN < tVD1_NOT) AND (vOLDALM = ALM_NOM)) DO
 BEGIN
 VD1_NOT = vOLDN;
 FORM_NOM = '*NÃO IMPRESSA OU CANCELADA';
 CLI_RED = '*NÃO IMPRESSA OU CANCELADA';
 CLI_NOM = '*NÃO IMPRESSA OU CANCELADA';
 NOM_ENT = '*NÃO IMPRESSA OU CANCELADA';
 VD1_QUANTIDADE = NULL;
 VD1_VALOR_TOTALL = NULL;
 VD1_VALOR_ICMS = NULL;
 VD1_COD = NULL;
 VD1_CFOP = NULL;
 CFO_CFO = NULL;
 VD1_CANC = NULL;
 CFO_NOM = NULL;
 SERIE_NOM = SERIE_NOM;
 VD1_VALOR_TOTALB = NULL;
 STATUS = NULL;
 SUSPEND;
 vOldN = vOldN + 1;
 END
 
 VD1_NOT = tVD1_NOT;
 FORM_NOM = tFORM_NOM;
 CLI_RED = tCLI_RED;
 CLI_NOM = tCLI_NOM;
 NOM_ENT = tNOM_ENT;
 VD1_QUANTIDADE = tVD1_QUANTIDADE;
 ALM_NOM = tALM_NOM;
 VD1_CAD = tVD1_CAD;
 VD1_VALOR_TOTALL = tVD1_VALOR_TOTALL;
 VD1_VALOR_ICMS = tVD1_VALOR_ICMS;
 VD1_COD = tVD1_COD;
 VD1_CFOP = tVD1_CFOP;
 CFO_CFO = tCFO_CFO;
 VD1_CANC = tVD1_CANC;
 CFO_NOM = tCFO_NOM;
 SERIE_NOM = tSERIE_NOM;
 STATUS = tSTATUS;
 PGT_NOM = tPGT_NOM;
 VD1_VALOR_TOTALB = TVD1_VALOR_TOTALB;
 
 SUSPEND;
 vOldN = vOldN + 1;
 END
 ELSE
 IF (VD1_NOT = 0) THEN
 BEGIN
 SUSPEND;
 END
 ELSE
 BEGIN
 SUSPEND;
 vOldN = vOldN + 1;
 END
 END
 
 END
^

ALTER PROCEDURE SEQUENCIA_NF_SERV (
    DATA_DE TIMESTAMP,
    DATA_ATE TIMESTAMP)
RETURNS (
    VD1_NOT DOUBLE PRECISION,
    FORM_NOM VARCHAR(45),
    CLI_RED VARCHAR(75),
    CLI_NOM VARCHAR(60),
    NOM_ENT VARCHAR(75),
    VD1_QUANTIDADE DOUBLE PRECISION,
    ALM_NOM VARCHAR(50),
    VD1_CAD TIMESTAMP,
    VD1_VALOR_TOTALL DOUBLE PRECISION,
    VD1_VALOR_ICMS DOUBLE PRECISION,
    VD1_COD VARCHAR(13),
    VD1_CFOP INTEGER,
    CFO_CFO VARCHAR(20),
    VD1_CANC VARCHAR(2),
    CFO_NOM VARCHAR(100),
    SERIE_NOM VARCHAR(5),
    STATUS VARCHAR(20),
    PGT_NOM VARCHAR(100),
    VD1_IMPOSTO3 DOUBLE PRECISION,
    VD1_IMPOSTO4 DOUBLE PRECISION,
    VD1_IMPOSTO5 DOUBLE PRECISION,
    VD1_IMPOSTO6 DOUBLE PRECISION,
    VD1_INSS DOUBLE PRECISION,
    VD1_IRRF DOUBLE PRECISION,
    PRE_NOM VARCHAR(50),
    VD1_VALOR_TOTALB DOUBLE PRECISION,
    VD1_CLI_ISS DOUBLE PRECISION)
AS
 declare variable voldn double precision;
 declare variable voldalm varchar(50);
 declare variable vvez integer;
 declare variable tvd1_not double precision;
 declare variable tform_nom varchar(45);
 declare variable tcli_red varchar(75);
 declare variable tcli_nom varchar(60);
 declare variable tnom_ent varchar(75);
 declare variable tvd1_quantidade double precision;
 declare variable talm_nom varchar(50);
 declare variable tvd1_cad date;
 declare variable tvd1_valor_totall double precision;
 declare variable tvd1_valor_icms double precision;
 declare variable tvd1_cod varchar(13);
 declare variable tvd1_cfop integer;
 declare variable tcfo_cfo varchar(20);
 declare variable tvd1_canc varchar(2);
 declare variable tcfo_nom varchar(100);
 declare variable tserie_nom varchar(5);
 declare variable tstatus varchar(20);
 declare variable tpgt_nom varchar(100);
 declare variable tvd1_imposto3 double precision;
 declare variable tvd1_imposto4 double precision;
 declare variable tvd1_imposto5 double precision;
 declare variable tvd1_imposto6 double precision;
 declare variable tvd1_inss double precision;
 declare variable tvd1_irrf double precision;
 declare variable tpre_nom varchar(50);
 declare variable tvd1_valor_totalb double precision;
 declare variable tvd1_cli_iss double precision;
 BEGIN
 vOLDN = 0;
 vOLDALM = '';
 vVEZ = 0;
 FOR
 SELECT DISTINCT
 VD1_NOT, FORM_NOM, COALESCE(CLI_RED, FOR_RED), COALESCE(NOM_ENT,FOR_RZS), VD1_QUANTSERVI, ALM_NOM, VD1_CAD,
 VD1_TOTALL_SERVICO, VD1_VALOR_ICMS, VD1_COD, VD1_CFOP, CFO_CFO,
 VD1_CANC, CFO_NOM, SERIE_NOM, STATUS, PGT_NOM,
 COALESCE(VD1_IMPOSTO3, 0) AS VD1_IMPOSTO3,
 COALESCE(VD1_IMPOSTO4, 0) AS VD1_IMPOSTO4,
 COALESCE(VD1_IMPOSTO5, 0) AS VD1_IMPOSTO5,
 COALESCE(VD1_IMPOSTO6, 0) AS VD1_IMPOSTO6,
 COALESCE(VD1_INSS, 0) AS VD1_INSS,
 COALESCE(VD1_IRRF, 0) AS VD1_IRRF,
 PRE_NOM, VD1_TOTALB_SERVICO, VD1_CLI_ISS, CLI_NOM
 FROM CDFORM, ESTMVVD1
 INNER JOIN CDSTATUS ON(CDSTATUS.STA_SIG = ESTMVVD1.VD1_CANC)
 LEFT JOIN CDPRESTSER ON(ESTMVVD1.VD1_PRESTSER = PRE_COD)
 LEFT JOIN ESTMVVD3 ON(ESTMVVD1.VD1_COD = VD3_BOL)
 LEFT JOIN CDCLI ON (ESTMVVD1.VD1_CLI = CLI_COD)
 LEFT JOIN CDFOR ON (ESTMVVD1.VD1_FOR = FOR_COD)
 LEFT JOIN CDPGT ON(ESTMVVD3.VD3_PGT = PGT_COD),
 CDCFO, CDALM, CDTRA3, CDSERIENF, CDTRA1
 WHERE VD1_ALM = ALM_COD
 AND TRA_COD = VD1_TRA
 AND CDTRA1.TRA_COD = CDTRA3.TRA_TRA
 AND CDTRA3.TRA_FORM = CDFORM.FORM_COD
 AND CDFORM.form_alm = CDALM.ALM_COD
 AND FORM_SERIE = SERIE_COD
 AND ESTMVVD1.VD1_CFOP = CFO_COD
 AND VD1_ORIGEM <> 'DDO'
 AND VD1_ORIGEM <> 'DDS'
 AND TRA_LAY_PDV = 'SER'
 AND (TRA_MODULO = 'FAT')
 AND ((STA_SIG = 'P')
 OR (STA_SIG = 'F')
 OR (STA_SIG = 'FN')
 OR (STA_SIG = 'C'))
 AND ( (ESTMVVD1.VD1_CAD >= :DATA_DE) OR (:DATA_DE IS NULL) )
 AND ( (ESTMVVD1.VD1_CAD <= :DATA_ATE) OR (:DATA_ATE IS NULL) )
 ORDER BY ALM_NOM, SERIE_NOM ASC, VD1_NOT
 INTO VD1_NOT, FORM_NOM, CLI_RED, NOM_ENT, VD1_QUANTIDADE,
 ALM_NOM, VD1_CAD, VD1_VALOR_TOTALL, VD1_VALOR_ICMS, VD1_COD,
 VD1_CFOP, CFO_CFO, VD1_CANC, CFO_NOM, SERIE_NOM, STATUS,
 PGT_NOM, VD1_IMPOSTO3, VD1_IMPOSTO4, VD1_IMPOSTO5,
 VD1_IMPOSTO6, VD1_INSS, VD1_IRRF, PRE_NOM, VD1_VALOR_TOTALB, VD1_CLI_ISS, CLI_NOM DO
 BEGIN
 IF ((vVEZ = 0) OR (vOLDALM <> ALM_NOM) OR (vOLDN = 0)) THEN
 BEGIN
 vOLDN = VD1_NOT;
 vOLDALM = ALM_NOM;
 vVEZ = 1;
 END
 
 IF ((VD1_NOT > 0) AND (vOLDN < VD1_NOT)) THEN
 BEGIN
 tVD1_NOT = VD1_NOT;
 tFORM_NOM = FORM_NOM;
 tCLI_RED = CLI_RED;
 tCLI_NOM = CLI_NOM;
 tNOM_ENT = NOM_ENT;
 tVD1_QUANTIDADE = VD1_QUANTIDADE;
 tALM_NOM = ALM_NOM;
 tVD1_CAD = VD1_CAD;
 tVD1_VALOR_TOTALL = VD1_VALOR_TOTALL;
 tVD1_VALOR_ICMS = VD1_VALOR_ICMS;
 tVD1_COD = VD1_COD;
 tVD1_CFOP = VD1_CFOP;
 tCFO_CFO = CFO_CFO;
 tVD1_CANC = VD1_CANC;
 tCFO_NOM = CFO_NOM;
 tSERIE_NOM = SERIE_NOM;
 tSTATUS = STATUS;
 tPGT_NOM = PGT_NOM;
 tVD1_IMPOSTO3 = VD1_IMPOSTO3;
 tVD1_IMPOSTO4 = VD1_IMPOSTO4;
 tVD1_IMPOSTO5 = VD1_IMPOSTO5;
 tVD1_IMPOSTO6 = VD1_IMPOSTO6;
 tVD1_INSS = VD1_INSS;
 tVD1_IRRF = VD1_IRRF;
 tPRE_NOM = PRE_NOM;
 tVD1_VALOR_TOTALB = VD1_VALOR_TOTALB;
 tVD1_CLI_ISS = VD1_CLI_ISS;
 
 WHILE ((vOLDN < tVD1_NOT) AND (vOLDALM = ALM_NOM)) DO
 BEGIN
 VD1_NOT = vOLDN;
 FORM_NOM = '*NÃO IMPRESSA OU CANCELADA';
 CLI_RED = '*NÃO IMPRESSA OU CANCELADA';
 CLI_NOM = '*NÃO IMPRESSA OU CANCELADA';
 NOM_ENT = '*NÃO IMPRESSA OU CANCELADA';
 VD1_QUANTIDADE = NULL;
 VD1_VALOR_TOTALL = NULL;
 VD1_VALOR_ICMS = NULL;
 VD1_COD = NULL;
 VD1_CFOP = NULL;
 CFO_CFO = NULL;
 VD1_CANC = NULL;
 CFO_NOM = NULL;
 SERIE_NOM = SERIE_NOM;
 STATUS = NULL;
 PGT_NOM = NULL;
 VD1_IMPOSTO3 = NULL;
 VD1_IMPOSTO4 = NULL;
 VD1_IMPOSTO5 = NULL;
 VD1_IMPOSTO6 = NULL;
 VD1_INSS = NULL;
 VD1_IRRF = NULL;
 PRE_NOM = NULL;
 VD1_VALOR_TOTALB = NULL;
 VD1_CLI_ISS = NULL;
 SUSPEND;
 vOldN = vOldN + 1;
 END
 VD1_NOT = tVD1_NOT;
 FORM_NOM = tFORM_NOM;
 CLI_RED = tCLI_RED;
 CLI_NOM = tCLI_NOM;
 NOM_ENT = tNOM_ENT;
 VD1_QUANTIDADE = tVD1_QUANTIDADE;
 ALM_NOM = tALM_NOM;
 VD1_CAD = tVD1_CAD;
 VD1_VALOR_TOTALL = tVD1_VALOR_TOTALL;
 VD1_VALOR_ICMS = tVD1_VALOR_ICMS;
 VD1_COD = tVD1_COD;
 VD1_CFOP = tVD1_CFOP;
 CFO_CFO = tCFO_CFO;
 VD1_CANC = tVD1_CANC;
 CFO_NOM = tCFO_NOM;
 SERIE_NOM = tSERIE_NOM;
 STATUS = tSTATUS;
 PGT_NOM = tPGT_NOM;
 VD1_IMPOSTO3 = tVD1_IMPOSTO3;
 VD1_IMPOSTO4 = tVD1_IMPOSTO4;
 VD1_IMPOSTO5 = tVD1_IMPOSTO5;
 VD1_IMPOSTO6 = tVD1_IMPOSTO6;
 VD1_INSS = tVD1_INSS;
 VD1_IRRF = tVD1_IRRF;
 PRE_NOM = tPRE_NOM;
 VD1_VALOR_TOTALB = tVD1_VALOR_TOTALB;
 VD1_CLI_ISS = tVD1_CLI_ISS;
 
 SUSPEND;
 vOldN = vOldN + 1;
 END
 ELSE
 IF (VD1_NOT = 0) THEN
 BEGIN
 SUSPEND;
 END
 ELSE
 BEGIN
 SUSPEND;
 vOldN = vOldN + 1;
 END
 END
 END
^

ALTER PROCEDURE SINALPLANO (
    PVALOR DOUBLE PRECISION,
    PPLANO VARCHAR(40))
RETURNS (
    VALOR DOUBLE PRECISION)
AS
declare variable sinal varchar(1);
begin
   select pla_cre
   from cdpla
   where pla_cod = :pPlano
   into sinal;
   if (sinal = '-') then
      Valor = pValor * -1;
   else
      Valor = pValor;
   Suspend;
end
^

ALTER PROCEDURE SP_GEN_CDSAFEST_NF_CAIXAS_ID
RETURNS (
    ID INTEGER)
AS
 BEGIN
 ID = GEN_ID(GEN_CDSAFEST_NF_CAIXAS_ID, 1);
 SUSPEND;
 END
^

ALTER PROCEDURE SP_GEN_CDSAFEST_NF_ITENS_ID
RETURNS (
    ID INTEGER)
AS
 BEGIN
 ID = GEN_ID(GEN_CDSAFEST_NF_ITENS_ID, 1);
 SUSPEND;
 END
^

ALTER PROCEDURE SP_GEN_CDSAFEST_NFS_ID
RETURNS (
    ID INTEGER)
AS
 BEGIN
 ID = GEN_ID(GEN_CDSAFEST_NFS_ID, 1);
 SUSPEND;
 END
^

ALTER PROCEDURE SP_ROL (
    PVENCIMENTO DATE,
    PSTRIKE FLOAT,
    PTIPO VARCHAR(1),
    PATIVO INTEGER)
RETURNS (
    IDCOMPRA BIGINT,
    STRIKECOMPRA FLOAT,
    VENCIMENTO DATE,
    IDVENDA BIGINT,
    STRIKEVENDA FLOAT)
AS
DECLARE VARIABLE VIDCOMPRA BIGINT;
DECLARE VARIABLE VSTRIKECOMPRA FLOAT;
DECLARE VARIABLE VVENCIMENTO DATE;
DECLARE VARIABLE VIDVENDA BIGINT;
DECLARE VARIABLE VSTRIKEVENDA FLOAT;
DECLARE VARIABLE VVENCTO2 DATE;
DECLARE VARIABLE VVENCTO3 DATE;
BEGIN
  /* Busca Primeiro Vencto */
  SELECT FIRST 1 DISTINCT VENCIMENTO FROM CDOPCOES WHERE VENCIMENTO >=:pvencimento into :vvencimento;

  for
    SELECT FIRST 2 DISTINCT VENCIMENTO FROM CDOPCOES WHERE VENCIMENTO >=:pvencimento into :vvencto2
    do BEGIN
       VVENCTO3=:vvencto2;
       SUSPEND;
    end

  /* Busca primeira opcao */
   for
     select
    a.id, a.strike, a.VENCIMENTO
    from cdopcoes a
    where a.ATIVO=:pAtivo
    and a.tipo=:pTipo
    and (a.vencimento >= :vVENCIMENTO)
    and (cast(a.vencimento as date) < :vvencto3)
    and a.strike  < (:pSTRIKE/.65)
    and a.strike > (:pSTRIKE *.65)

    ORDER BY a.vencimento, a.STRiKE
    into :idcompra, :strikecompra, :VENCIMENTO
    do Begin
        /* Busca Venda */
        select first 1
        a.id, a.strike
        from cdopcoes a
        where a.ATIVO=:pAtivo
        and a.tipo=:pTipo
        and a.vencimento > :VENCIMENTO
        and a.strike >= :STRIKECompra
        ORDER BY a.vencimento, a.STRiKE
        into :IDvenda,:STRIKEVenda;
     SUSPEND;
    end
END
^

ALTER PROCEDURE SP_SITUACAO_ATUAL (
    POP INTEGER,
    PCODCLI INTEGER)
RETURNS (
    VNOMEOP VARCHAR(30),
    VSTRIKE FLOAT,
    VVENCIMENTO DATE,
    VQTDE INTEGER,
    VVALOR FLOAT,
    VVALORHIST FLOAT,
    VDTPREGAO DATE,
    VNOME VARCHAR(30),
    VTIPOOP VARCHAR(1))
AS
DECLARE VARIABLE VOP VARCHAR(1);
BEGIN
   vOP = 'C';
  /* Busca Primeiro Vencto */
    select first 1 op.dtpregao from mvope op where status = 'A' and OPE_CLI = :pCodCli
    and op.idOP=:pOP order by  op.dtpregao desc
    into :vDtPregao;
  /* Busca Primeiro Nome */
    select first 1 OP.nome  from mvope op where status = 'A' and OPE_CLI = :pCodCli
    and op.idOP=:pOP order by  op.dtpregao
    into :vNome;

  for
    SELECT aNomeOP, aStrike, aVencto, sum(aqtde), sum(avalor), sum(avalorHist) from vw_sit
    where aidop=:pop and acli=:pcodcli
     group by aNomeOP, aStrike, aVencto
     having sum(aqtde) <> 0
     order by astrike
     into :vNomeOP,:vStrike, :vVencimento, :vQtde, : vValor,:vValorHist

   do BEGIN

     select FIRST 1 op from mvop2 op2
       LEFT JOIN mvope OP ON OP.id=OP2.ope  left join cdopcoes cdop on cdop.id=op2.opcao
      where IDOP= :pOP   AND cdop.nome=:vNomeOP and OPE_CLI = :pCodCli
     into :vTipoop;
       SUSPEND;
    end
END
^

ALTER PROCEDURE SP_TESTE (
    PVENCIMENTO DATE,
    PSTRIKE FLOAT,
    PTIPO VARCHAR(1),
    PATIVO INTEGER)
RETURNS (
    IDCOMPRA BIGINT,
    STRIKECOMPRA FLOAT,
    VENCIMENTO DATE,
    IDVENDA BIGINT,
    STRIKEVENDA FLOAT)
AS
DECLARE VARIABLE VIDCOMPRA BIGINT;
DECLARE VARIABLE VSTRIKECOMPRA FLOAT;
DECLARE VARIABLE VVENCIMENTO DATE;
DECLARE VARIABLE VIDVENDA BIGINT;
DECLARE VARIABLE VSTRIKEVENDA FLOAT;
DECLARE VARIABLE VVENCTO2 DATE;
DECLARE VARIABLE VVENCTO3 DATE;
BEGIN
  /* Busca Primeiro Vencto */
  SELECT FIRST 1 DISTINCT VENCIMENTO FROM CDOPCOES WHERE VENCIMENTO >=:pvencimento into :vvencimento;

  for
    SELECT FIRST 2 DISTINCT VENCIMENTO FROM CDOPCOES WHERE VENCIMENTO >=:pvencimento into :vvencto2
    do BEGIN
       VVENCTO3=:vvencto2;
       SUSPEND;
    end

  /* Busca primeira opcao */
   for
     select
    a.id, a.strike, a.VENCIMENTO
    from cdopcoes a
    where a.ATIVO=:pAtivo
    and a.tipo=:pTipo
    and (a.vencimento >= :vVENCIMENTO)
    and (cast(a.vencimento as date) < :vvencto3)
    and a.strike  < (:pSTRIKE/.85)
    and a.strike > (:pSTRIKE *.85)
    ORDER BY a.vencimento, a.STRiKE
    into :idcompra, :strikecompra, :VENCIMENTO
    do Begin
        /* Busca Venda */
        select first 1
        a.id, a.strike
        from cdopcoes a
        where a.ATIVO=:pAtivo
        and a.tipo=:pTipo
        and a.vencimento > :VENCIMENTO
        and a.strike >= :STRIKECompra
        ORDER BY a.vencimento, a.STRiKE
        into :IDvenda,:STRIKEVenda;
     SUSPEND;
    end
END
^

ALTER PROCEDURE STR_LENGTH (
    PTEXTO VARCHAR(100))
RETURNS (
    RESULT INTEGER)
AS
 DECLARE VARIABLE VCNT INTEGER;
 begin
 vCNT = 0;
 RESULT = vCNT;
 while (PTEXTO <> "") do
 begin
 VCNT=VCNT+1;
 Ptexto = substring(PTEXTO from 2 for 100);
 result = VCNT;
 end
 suspend;
 end
^

ALTER PROCEDURE STRING_HORA (
    VAL DOUBLE PRECISION)
RETURNS (
    HORA VARCHAR(10))
AS
 DECLARE VARIABLE S VARCHAR(10);
 DECLARE VARIABLE MINUTOS INTEGER;
 DECLARE VARIABLE HORAS INTEGER;
 BEGIN
 IF (VAL >= 0.5) THEN
 HORAS = CAST((VAL - 0.5) AS INTEGER);
 ELSE
 IF (VAL <= -0.5) THEN
 HORAS = CAST((VAL + 0.5) AS INTEGER);
 ELSE
 HORAS = CAST(VAL AS INTEGER);
 MINUTOS = CAST (((VAL - HORAS) * 60) AS INTEGER);
 IF (MINUTOS < 0) THEN
 MINUTOS = (MINUTOS * -1);
 IF (MINUTOS < 10) then
 s = CAST(HORAS AS VARCHAR(4)) || ":0" || CAST(MINUTOS AS VARCHAR(1));
 ELSE
 s = CAST(HORAS AS VARCHAR(4)) || ":" || CAST(MINUTOS AS VARCHAR(4));
 HORA = S;
 suspend;
 END
^

ALTER PROCEDURE SUGESTAO_DE_COMPRA (
    VPARAMCOR INTEGER,
    VPARAMMED INTEGER,
    VPARAMPRECOCOR INTEGER,
    VPARAMPRECOMED INTEGER,
    VPARAMESTDDV INTEGER,
    VCASAS_DECIMAIS INTEGER,
    VALM_DE VARCHAR(20),
    VALM_ATE VARCHAR(20),
    VPRODUTO_DE VARCHAR(100),
    VPRODUTO_ATE VARCHAR(100),
    VCOR_DE VARCHAR(30),
    VCOR_ATE VARCHAR(30),
    VMEDIDA_DE VARCHAR(30),
    VMEDIDA_ATE VARCHAR(30),
    VCAT_DE VARCHAR(30),
    VCAT_ATE VARCHAR(30),
    VTIP_DE VARCHAR(30),
    VTIP_ATE VARCHAR(30),
    VMAR_DE VARCHAR(30),
    VMAR_ATE VARCHAR(30),
    VGRU_DE VARCHAR(30),
    VGRU_ATE VARCHAR(30),
    VSUBGRU_DE VARCHAR(30),
    VSUBGRU_ATE VARCHAR(30),
    VSITTRIB_DE VARCHAR(10),
    VSITTRIB_ATE VARCHAR(10),
    PDATADE TIMESTAMP,
    PDATAATE TIMESTAMP,
    VFILTROTIPO VARCHAR(20),
    PCORRECAO DOUBLE PRECISION,
    PMINPADRAO INTEGER,
    PMAXPADRAO INTEGER,
    PSOITENSCOMVENDA INTEGER,
    PSEISMESES INTEGER)
RETURNS (
    ALM_COD INTEGER,
    ALM_FANT VARCHAR(20),
    PRO_COD INTEGER,
    COR_COD VARCHAR(3),
    MED_COD VARCHAR(3),
    PRO_INT VARCHAR(15),
    PRO_BAR VARCHAR(15),
    PRO_CM VARCHAR(21),
    PRO_NOM VARCHAR(100),
    COR_NOM VARCHAR(30),
    MED_NOM VARCHAR(30),
    ESTDDV DOUBLE PRECISION,
    ESTQTD DOUBLE PRECISION,
    VENDADDV DOUBLE PRECISION,
    VENDAQTD DOUBLE PRECISION,
    COMPRADDV DOUBLE PRECISION,
    COMPRAQTD DOUBLE PRECISION,
    TOTALDDV DOUBLE PRECISION,
    TOTALQTD DOUBLE PRECISION,
    ESTMINDDV DOUBLE PRECISION,
    ESTMINQTD DOUBLE PRECISION,
    ESTMAXDDV DOUBLE PRECISION,
    ESTMAXQTD DOUBLE PRECISION,
    VNDQTD DOUBLE PRECISION,
    VNDDIA DOUBLE PRECISION,
    PRZENT DOUBLE PRECISION,
    SUGCMPDDV DOUBLE PRECISION,
    SUGCMPQTD DOUBLE PRECISION,
    TIPO VARCHAR(2),
    DESCRICAO VARCHAR(50),
    PRO_ULTC DOUBLE PRECISION,
    PRO_CUSM DOUBLE PRECISION,
    PRO_TBA DOUBLE PRECISION,
    PRO_TBB DOUBLE PRECISION,
    PRO_TBC DOUBLE PRECISION,
    PRO_TBD DOUBLE PRECISION,
    PRO_TBE DOUBLE PRECISION,
    PRO_TBF DOUBLE PRECISION,
    PRO_TBG DOUBLE PRECISION,
    PRO_TBH DOUBLE PRECISION,
    PRO_TBI DOUBLE PRECISION,
    PRO_TBJ DOUBLE PRECISION,
    PRO_TBK DOUBLE PRECISION,
    PRO_TBL DOUBLE PRECISION,
    PRO_TBM DOUBLE PRECISION,
    PRO_TBN DOUBLE PRECISION,
    PRO_TBO DOUBLE PRECISION,
    PRO_TBP DOUBLE PRECISION,
    PRO_TBQ DOUBLE PRECISION,
    PRO_TBR DOUBLE PRECISION,
    PRO_TBS DOUBLE PRECISION,
    PRO_TBT DOUBLE PRECISION,
    PRO_TBU DOUBLE PRECISION,
    PRO_TBV DOUBLE PRECISION,
    PRO_TBW DOUBLE PRECISION,
    PRO_TBX DOUBLE PRECISION,
    PRO_TBY DOUBLE PRECISION,
    PRO_TBZ DOUBLE PRECISION,
    PRO_DESCONTO DOUBLE PRECISION,
    PRO_VAL_DE TIMESTAMP,
    PRO_VAL_ATE TIMESTAMP,
    PRO_IPI DOUBLE PRECISION,
    PRO_COMISSAO DOUBLE PRECISION,
    PRO_ICM DOUBLE PRECISION,
    VMES6 DOUBLE PRECISION,
    VMES5 DOUBLE PRECISION,
    VMES4 DOUBLE PRECISION,
    VMES3 DOUBLE PRECISION,
    VMES2 DOUBLE PRECISION,
    VMES1 DOUBLE PRECISION,
    VULTENTRADA VARCHAR(30),
    VDATENTRADA TIMESTAMP,
    VQTDULTENT DOUBLE PRECISION)
AS
 DECLARE VARIABLE VDIFDATA DOUBLE PRECISION;
 DECLARE VARIABLE VSOMA DOUBLE PRECISION;
 DECLARE VARIABLE VTRA_TIP VARCHAR(10);
 DECLARE VARIABLE VDATANT DATE;
 DECLARE VARIABLE VESTANT DOUBLE PRECISION;
 DECLARE VARIABLE VVD1CAD DATE;
 DECLARE VARIABLE VSOMA1 DOUBLE PRECISION;
 DECLARE VARIABLE VSOMA2 DOUBLE PRECISION;
 DECLARE VARIABLE VSOMA3 DOUBLE PRECISION;
 DECLARE VARIABLE VSOMA4 DOUBLE PRECISION;
 DECLARE VARIABLE VSOMA5 DOUBLE PRECISION;
 DECLARE VARIABLE VSOMA6 DOUBLE PRECISION;
 begin
 vMes6 = 0;
 vMes5 = 0;
 vMes4 = 0;
 vMes3 = 0;
 vMes2 = 0;
 vMes1 = 0;
 vSoma6 = 0;
 vSoma5 = 0;
 vSoma4 = 0;
 vSoma3 = 0;
 vSoma2 = 0;
 vSoma1 = 0;
 if (pSeisMeses is null) then
 pSeisMeses = 0;
 if (pSeisMeses = 1) then
 begin
 pDataAte = cast('today' as date);
 execute procedure encodedate(extract(year from addmonth(pdataate, -5)),
 extract(month from addmonth(pdataate, -5)), 1) returning_values (pDataDe);
 end
 if (pSoItensComVenda is null) then
 pSoItensComVenda = 0;
 if (vFiltroTipo is null) then
 vFiltroTipo = '';
 if (pDataDe is null) then
 begin
 pDataDe = cast('today' as date) - 30;
 pDataAte = cast('today' as date);
 end
 else
 if (pDataAte is null) then
 pDataAte = pDataDe;
 VDIFDATA = pDataAte - pDataDe;
 if (vAlm_ate is null) then
 vAlm_ate = vAlm_de;
 if (VPARAMCOR is null) then
 VPARAMCOR = 0;
 if (VPARAMMED is null) then
 VPARAMMED = 0;
 if (VPARAMPRECOCOR is null) then
 VPARAMPRECOCOR = 0;
 if (VPARAMPRECOMED is null) then
 VPARAMPRECOMED = 0;
 if (VPARAMESTDDV is null) then
 VPARAMESTDDV = 0;
 if (PCORRECAO is null) then
 PCORRECAO = 0;
 if (PMINPADRAO is null) then
 PMINPADRAO = 0;
 if (PMAXPADRAO is null) then
 PMAXPADRAO = 0;
 For
 Select
 CDPRO.PRO_COD, CDPRO.PRO_INT, CDPRO.PRO_BAR, CDPROCM.PRO_COD,
 CDPRO.PRO_NOM, CDCOR.COR_COD, CDCOR.COR_NOM, CDMED.MED_COD,
 CDMED.MED_NOM, CDALM.ALM_COD, CDALM.ALM_FANT,
 Coalesce(nullif(cdpromaxmin.pro_min_qtd, 0),:pMinPadrao), Coalesce(nullif(cdpromaxmin.pro_max_qtd, 0),:pMaxPadrao),
 Coalesce(nullif(cdpromaxmin.pro_min_ddv, 0),:pMinPadrao), Coalesce(nullif(cdpromaxmin.pro_max_ddv, 0),:pMaxPadrao),
 cdpropre.pro_ultc, cdpropre.pro_cusm, cdpropre.pro_tba, cdpropre.pro_tbb,
 cdpropre.pro_tbc, cdpropre.pro_tbd, cdpropre.pro_tbe, cdpropre.pro_tbf,
 cdpropre.pro_tbg, cdpropre.pro_tbh, cdpropre.pro_tbi, cdpropre.pro_tbj,
 cdpropre.pro_tbk, cdpropre.pro_tbl, cdpropre.pro_tbm, cdpropre.pro_tbn,
 cdpropre.pro_tbo, cdpropre.pro_tbp, cdpropre.pro_tbq, cdpropre.pro_tbr,
 cdpropre.pro_tbs, cdpropre.pro_tbt, cdpropre.pro_tbu, cdpropre.pro_tbv,
 cdpropre.pro_tbw, cdpropre.pro_tbx, cdpropre.pro_tby, cdpropre.pro_tbz,
 cdpropre.pro_desconto, cdpropre.pro_val_de, cdpropre.pro_val_ate,
 cdproicms.icm_ali, cdpro.pro_ipi, CDPROPRE.pro_comissao
 From CDPRO left join CDALM2 on (cdalm2.alm_cod <> 0)
 left join CDPROCM on ((:VPARAMMED + :VPARAMCOR > 0) and CDPRO.pro_cod = CDPROCM.pro_pro)
 left join CDCOR on (CDCOR.cor_cod = CDPROCM.pro_cor)
 left join CDMED on (CDMED.med_cod = CDPROCM.pro_med)
 left join cdmar on (cdpro.pro_mar = cdmar.mar_cod)
 left join cdtipp on (cdpro.pro_tip = cdtipp.tip_cod)
 left join cdcatpro on (cdpro.pro_cat = cdcatpro.cat_cod)
 left join cdgrup on (cdpro.pro_gru = cdgrup.gru_cod)
 left join cdsubgrup on (cdpro.pro_subgru = cdsubgrup.gru_cod)
 left join cdsit on (cdpro.pro_sit = cdsit.sit_cod)
 left join cdpromaxmin on (cdpromaxmin.pro_pro = cdpro.pro_cod
 and ((:vPARAMCOR = 0) or (cdpromaxmin.pro_cor = CDCOR.cor_cod))
 and ((:vPARAMMED = 0) or (cdpromaxmin.pro_med = CDMED.med_cod)))
 left join cdalm on ((cdpromaxmin.pro_alm is null) or (cdpromaxmin.pro_alm = cdalm.alm_cod))
 left join cdpropre on ((cdpropre.pro_pro = cdpro.pro_cod)
 and ((:vPARAMPRECOCOR = 0) or (cdpropre.pro_cor = CDCOR.cor_cod))
 and ((:vPARAMPRECOMED = 0) or (cdpropre.pro_med = CDMED.med_cod)))
 left join cdest on (cdest.est_est = cdalm.alm_est)
 left join cdproicms on (cdproicms.icm_pro = cdpro.pro_cod and cdproicms.icm_est = cdest.est_cod)
 Where ((:vProduto_De is null) or (pro_nom between :vProduto_De and :vProduto_Ate))
 and ((:vAlm_de is null) or (cdalm.alm_fant between :vAlm_de and :vAlm_ate))
 and ((:vcor_de is null) or (cdcor.cor_nom between :vcor_de and :vcor_ate))
 and ((:vmedida_de is null) or (cdmed.med_nom between :vmedida_de and :vmedida_ate))
 and ((:vmar_de is null) or (cdmar.mar_nom between :vmar_de and :vmar_ate))
 and ((:vtip_de is null) or (cdtipp.tip_nom between :vtip_de and :vtip_ate))
 and ((:vcat_de is null) or (cdcatpro.cat_nom between :vcat_de and :vcat_ate))
 and ((:vgru_de is null) or (cdgrup.gru_nom between :vgru_de and :vgru_ate))
 and ((:vsubgru_de is null) or (cdsubgrup.gru_nom between :vsubgru_de and :vsubgru_ate))
 and ((:vsittrib_de is null) or (cdsit.sit_cst between :vsittrib_de and :vsittrib_ate))
 and (cdpro.ativo = 'A')
 and ((:vParamCor <> 1) or (:vParamMed <> 1) or (cdprocm.ativo = 'A'))
 Order by alm_fant, CDPRO.PRO_NOM
 Into pro_cod, pro_int, pro_bar, pro_cm, pro_nom, cor_cod, cor_nom,
 med_cod, med_nom, alm_cod, alm_fant, estminqtd, estmaxqtd,
 estminddv, estmaxddv, pro_ultc, pro_cusm, pro_tba, pro_tbb, pro_tbc, pro_tbd,
 pro_tbe, pro_tbf, pro_tbg, pro_tbh, pro_tbi, pro_tbj, pro_tbk, pro_tbl,
 pro_tbm, pro_tbn, pro_tbo, pro_tbp, pro_tbq, pro_tbr, pro_tbs, pro_tbt,
 pro_tbu, pro_tbv, pro_tbw, pro_tbx, pro_tby, pro_tbz, pro_desconto,
 pro_val_de, pro_val_ate, pro_icm, pro_ipi, PRO_COMISSAO do
 begin
 
 ESTQTD = 0;
 Select Coalesce(EST_SAL, 0)
 From MVEST
 Where EST_ALM = :alm_cod
 and EST_PRO = :pro_cod
 and ((:vPARAMCOR = 0) or (EST_COR = :cor_cod))
 and ((:vPARAMMED = 0) or (EST_TAM = :med_cod))
 into ESTQTD;
 
 VNDQTD = 0;
 VNDDIA = 0;
 COMPRAQTD = 0;
 COMPRADDV = 0;
 VENDAQTD = 0;
 VENDADDV = 0;
 VULTENTRADA = null;
 VDATENTRADA = null;
 VQTDULTENT = NULL;
 
 Select avg((Select max(vd1_cad) from estmvvd1, estmvvd9 where vd1_cod = vd9_bol and vd9_asc = A.vd1_cod) - vd2_cad)
 From estmvvd1 A, estmvvd2, cdtra1
 Where estmvvd2.vd2_pro = :pro_cod
 and estmvvd2.vd2_bol = estmvvd1.vd1_cod
 and estmvvd1.vd1_tra = cdtra1.tra_cod
 and (cdtra1.tra_tip_tra = 'PDC')
 and (estmvvd1.vd1_cad between :pdatade and :pdataate)
 and estmvvd1.vd1_alm = :alm_cod
 and estmvvd1.vd1_canc in ('BP', 'BT')
 into PRZENT;
 
 if (PRZENT is null) then
 PRZENT = 0;
 
 if (pseismeses <> 1) then
 begin
 select saldo from estoque_na_data(0,0,:PDATADE,:alm_cod, :pro_cod, null, null, 2) into vESTANT;
 if (Coalesce(vESTANT,0) <> 0) then
 VDATANT = PDATADE;
 else
 VDATANT = null;
 
 vDIFDATA = 0;
 For Select
 vd1_cad, (select saldo from estoque_na_data(0,0,estmvvd1.vd1_cad-1,:alm_cod, :pro_cod, null, null, 2))
 From estmvvd1, estmvvd2, cdtra1
 Where estmvvd2.vd2_pro = :pro_cod
 and ((:VPARAMCOR <= 0) or (estmvvd2.vd2_cor = :cor_cod))
 and ((:VPARAMMED <= 0) or (estmvvd2.vd2_med = :med_cod))
 and estmvvd2.vd2_bol = estmvvd1.vd1_cod
 and estmvvd1.vd1_tra = cdtra1.tra_cod
 and (((cdtra1.tra_inf = '-') or (cdtra1.tra_inf = '+')) and (estmvvd1.vd1_cad between :pdatade and :pdataate))
 and estmvvd1.vd1_alm = :alm_cod
 and estmvvd1.vd1_canc in ('FN', 'F', 'BP', 'P')
 group by vd1_cad
 order by vd1_cad
 into :VVD1CAD, :VESTANT do
 begin
 if (VDATANT is null) then
 VDATANT = vVD1CAD;
 if (Coalesce(vESTANT,0) <> 0) then
 VDIFDATA = VDIFDATA + (vVD1CAD - VDATANT);
 VDATANT = VVD1CAD;
 end
 
 if (Coalesce(ESTQTD,0) <> 0) then
 VDIFDATA = VDIFDATA + (PDATAATE - VDATANT);
 end
 
 vMes6 = 0;
 vMes5 = 0;
 vMes4 = 0;
 vMes3 = 0;
 vMes2 = 0;
 vMes1 = 0;
 
 vSoma6 = 0;
 vSoma5 = 0;
 vSoma4 = 0;
 vSoma3 = 0;
 vSoma2 = 0;
 vSoma1 = 0;
 
 For Select
 Coalesce(sum((Select sum(pQUANT) from saldo_pedido(estmvvd2.vd2_cod, 1))), 0),
 cdtra1.tra_tip_tra,
 coalesce(sum(case when (((cdtra1.tra_inf = '-') or ((cdtra1.tra_tip_tra = 'TRC') and (cdtra1.tra_inf = '+'))) and (estmvvd1.vd1_cad between :pdatade and :pdataate) and (VD1_CAD < addmonth(:pDataDe,1))) then (case when (cdtra1.tra_inf = '+') then estmvvd2.vd2_qtd * -1 else estmvvd2.vd2_qtd end) else 0 end), 0) MES6,
 coalesce(sum(case when (((cdtra1.tra_inf = '-') or ((cdtra1.tra_tip_tra = 'TRC') and (cdtra1.tra_inf = '+'))) and (estmvvd1.vd1_cad between :pdatade and :pdataate) and (VD1_CAD < addmonth(:pDataDe,2)) and (VD1_CAD >= addmonth(:pDataDe,1))) then (case when (cdtra1.tra_inf = '+') then estmvvd2.vd2_qtd * -1 else estmvvd2.vd2_qtd end) else 0 end), 0) MES5,
 coalesce(sum(case when (((cdtra1.tra_inf = '-') or ((cdtra1.tra_tip_tra = 'TRC') and (cdtra1.tra_inf = '+'))) and (estmvvd1.vd1_cad between :pdatade and :pdataate) and (VD1_CAD < addmonth(:pDataDe,3)) and (VD1_CAD >= addmonth(:pDataDe,2))) then (case when (cdtra1.tra_inf = '+') then estmvvd2.vd2_qtd * -1 else estmvvd2.vd2_qtd end) else 0 end), 0) MES4,
 coalesce(sum(case when (((cdtra1.tra_inf = '-') or ((cdtra1.tra_tip_tra = 'TRC') and (cdtra1.tra_inf = '+'))) and (estmvvd1.vd1_cad between :pdatade and :pdataate) and (VD1_CAD < addmonth(:pDataDe,4)) and (VD1_CAD >= addmonth(:pDataDe,3))) then (case when (cdtra1.tra_inf = '+') then estmvvd2.vd2_qtd * -1 else estmvvd2.vd2_qtd end) else 0 end), 0) MES3,
 coalesce(sum(case when (((cdtra1.tra_inf = '-') or ((cdtra1.tra_tip_tra = 'TRC') and (cdtra1.tra_inf = '+'))) and (estmvvd1.vd1_cad between :pdatade and :pdataate) and (VD1_CAD < addmonth(:pDataDe,5)) and (VD1_CAD >= addmonth(:pDataDe,4))) then (case when (cdtra1.tra_inf = '+') then estmvvd2.vd2_qtd * -1 else estmvvd2.vd2_qtd end) else 0 end), 0) MES2,
 coalesce(sum(case when (((cdtra1.tra_inf = '-') or ((cdtra1.tra_tip_tra = 'TRC') and (cdtra1.tra_inf = '+'))) and (estmvvd1.vd1_cad between :pdatade and :pdataate) and (VD1_CAD >= addmonth(:pDataDe,5))) then (case when (cdtra1.tra_inf = '+') then estmvvd2.vd2_qtd * -1 else estmvvd2.vd2_qtd end) else 0 end), 0) MES1
 From estmvvd1, estmvvd2, cdtra1
 Where estmvvd2.vd2_pro = :pro_cod
 and ((:VPARAMCOR <= 0) or (estmvvd2.vd2_cor = :cor_cod))
 and ((:VPARAMMED <= 0) or (estmvvd2.vd2_med = :med_cod))
 and estmvvd2.vd2_bol = estmvvd1.vd1_cod
 and estmvvd1.vd1_tra = cdtra1.tra_cod
 and ((cdtra1.tra_tip_tra = 'PDC') or
 (cdtra1.tra_tip_tra = 'PDD') or
 ((cdtra1.tra_inf = '-') and (estmvvd1.vd1_cad between :pdatade and :pdataate)) or
 ((cdtra1.tra_tip_tra = 'TRC') and (cdtra1.tra_inf = '+') and (estmvvd1.vd1_cad between :pdatade and :pdataate)))
 and estmvvd1.vd1_alm = :alm_cod
 and estmvvd1.vd1_canc in ('FN', 'F', 'BP', 'P')
 group by cdtra1.tra_tip_tra
 Into VSOMA, VTRA_TIP, vSoma6, vSoma5, vSoma4, vSoma3, vSoma2, vSoma1 do
 begin
 if (vTRA_TIP = 'PDC') then
 COMPRAQTD = VSOMA;
 else
 if (vTRA_TIP = 'PDD') then
 VENDAQTD = VSOMA;
 else
 VNDQTD = VSOMA;
 end
 
 Select first 1
 COALESCE(NULLIF(VD1_SEU_NUMERO, ''), CAST(VD1_NOT as VARCHAR(30))),
 COALESCE(VD1_DAT_EMISSAO, VD1_CAD),
 VD2_QTD
 From estmvvd1, estmvvd2, cdtra1
 Where estmvvd2.vd2_pro = :pro_cod
 and ((:VPARAMCOR <= 0) or (estmvvd2.vd2_cor = :cor_cod))
 and ((:VPARAMMED <= 0) or (estmvvd2.vd2_med = :med_cod))
 and estmvvd2.vd2_bol = estmvvd1.vd1_cod
 and estmvvd1.vd1_tra = cdtra1.tra_cod
 and cdtra1.tra_tip_tra = 'CMP'
 and estmvvd1.vd1_alm = :alm_cod
 and estmvvd1.vd1_canc in ('FN', 'F', 'P')
 Order by vd1_cad desc, vd1_not desc
 into VULTENTRADA, VDATENTRADA, VQTDULTENT;
 
 if ((vTRA_TIP <> 'PDC') and (vTRA_TIP <> 'PDD') and (pSeisMeses = 1)) then
 begin
 vMes6 = vSoma6;
 vMes5 = vSoma5;
 vMes4 = vSoma4;
 vMes3 = vSoma3;
 vMes2 = vSoma2;
 vMes1 = vSoma1;
 end
 
 if (VDIFDATA <> 0) then
 VNDDIA = (VNDQTD / VDIFDATA);
 else
 VNDDIA = 0;
 
 if (PCORRECAO <> 0) then
 begin
 ESTMAXQTD = ESTMAXQTD / 100 * (100 + PCORRECAO);
 ESTMAXDDV = ESTMAXDDV / 100 * (100 + PCORRECAO);
 end
 
 if (VPARAMESTDDV <> 0) then
 begin
 ESTMINQTD = ESTMINDDV * VNDDIA;
 ESTMAXQTD = ESTMAXDDV * VNDDIA;
 end
 
 if (VNDDIA <> 0) then
 begin
 VENDADDV = VENDAQTD / VNDDIA;
 COMPRADDV = COMPRAQTD / VNDDIA;
 ESTDDV = ESTQTD / VNDDIA;
 if (VPARAMESTDDV = 0) then
 begin
 ESTMINDDV = ESTMINQTD / VNDDIA;
 ESTMAXDDV = ESTMAXQTD / VNDDIA;
 end
 end
 else
 begin
 VENDADDV = 0;
 COMPRADDV = 0;
 ESTDDV = 0;
 if (VPARAMESTDDV = 0) then
 begin
 ESTMINDDV = 0;
 ESTMAXDDV = 0;
 end
 end
 
 TOTALDDV = ESTDDV - VENDADDV + COMPRADDV;
 TOTALQTD = ESTQTD - VENDAQTD + COMPRAQTD;
 SUGCMPQTD = 0;
 
 if (ESTMAXQTD - TOTALQTD > 0) then
 begin
 SUGCMPQTD = ESTMAXQTD - TOTALQTD;
 if (ESTMINQTD - TOTALQTD > 0) then
 begin
 TIPO = 'C';
 DESCRICAO = 'Nível crítico';
 end
 else
 if ((ESTMINQTD + (ESTMAXQTD - ESTMINQTD) / 2) - TOTALQTD > 0) then
 begin
 TIPO = 'B';
 DESCRICAO = 'Nível baixo';
 end
 else
 if ((ESTMAXQTD - TOTALQTD) >= 0) then
 begin
 TIPO = 'N';
 DESCRICAO = 'Nível normal';
 end
 else
 begin
 TIPO = 'E';
 DESCRICAO = 'Excesso de estoque';
 end
 end
 else
 begin
 TIPO = 'E';
 DESCRICAO = 'Excesso de estoque';
 end
 
 if (VNDDIA <> 0) then
 SUGCMPDDV = SUGCMPQTD / VNDDIA;
 else
 SUGCMPDDV = 0;
 if (((vFiltroTipo = '') or (vFiltroTipo containing TIPO)) and
 ((pSoItensComVenda <> 1) or (VNDDIA > 0))) then
 suspend;
 end
 end
^

ALTER PROCEDURE VAC_FIN_CONFEC
AS
declare variable vData timestamp;
declare variable vDia integer;
declare variable vMes integer;
declare variable vAno integer;
declare variable vConta integer;
begin
   For
      Select (Select max(lge_ope) from morlge where lge_con = cdcon.con_cod), con_cod
      From cdcon
      Where con_cod = (Select distinct lge_con from morlge where lge_con =cdcon.con_cod)
        and (
               ((Select max(lge_ope) from morlge where lge_con = cdcon.con_cod) > con_fec)
             or
               (con_fec is null)
             )
         and (
               ((Select max(lge_ope) from morlge where lge_con = cdcon.con_cod) <
                 (Select min(lge_ope) from mvlge where lge_con = cdcon.con_cod))
              or
               ((Select min(lge_ope) from mvlge where lge_con = cdcon.con_cod) is null)
             )
      Into vData, vConta Do
   Begin
      Execute Procedure DecodeDate(vData) Returning_values(vAno, vMes, vDia);
      Execute Procedure DaysOfMonth(vAno, vMes) Returning_values(vDia);
      Execute Procedure EncodeDate(vAno, vMes, vDia) Returning_values(vData);
      Update cdcon Set con_fec = :vData where con_cod = :vConta;
   End
end
^

ALTER PROCEDURE VAC_FIN_DUPLICIDADE
AS
Begin
   Delete From morlge
   Where Exists (Select lge_cod
                 from mvlge
                 where lge_cod = morlge.lge_cod
                   and lge_val = morlge.lge_val
                   and lge_ope = morlge.lge_ope
                   and lge_con = morlge.lge_con
                );
End
^

ALTER PROCEDURE VAC_FIN_SALDO (
    PCONTA INTEGER,
    PTIPO INTEGER)
AS
 begin
 if (pTipo = 0) then
 Update cdcon B set con_primeiro_saldo =
 (((Select (Cast((A.con_sal * 100) As Integer)/100.0) From cdcon A Where A.con_cod = B.con_cod)-
 (SELECT (Cast((WSALDO1 * 100) As Integer)/100.0) FROM CHECASALDODACONTA(:PCONTA))) +
 (Select (Cast((A.con_primeiro_saldo * 100) As Integer)/100.0) From cdcon A Where A.con_cod = B.con_cod))
 where con_cod = :pConta;
 else
 Update cdcon B set con_sal = (SELECT (Cast((WSALDO1 * 100) As Integer) / 100.0) FROM CHECASALDODACONTA(:PCONTA))
 where con_cod = :pConta;
 end
^

ALTER PROCEDURE VALIDA_CONTAGEM (
    VAL1 DOUBLE PRECISION,
    VAL2 DOUBLE PRECISION,
    VAL3 DOUBLE PRECISION,
    VAL4 DOUBLE PRECISION,
    VAL5 DOUBLE PRECISION,
    NUM_CONT_EXIGIDAS INTEGER)
RETURNS (
    RESULT DOUBLE PRECISION,
    VALIDO INTEGER,
    COMPLETA INTEGER)
AS
 DECLARE VARIABLE NVAL1 INTEGER;
 DECLARE VARIABLE NVAL2 INTEGER;
 DECLARE VARIABLE NVAL3 INTEGER;
 DECLARE VARIABLE NVAL4 INTEGER;
 DECLARE VARIABLE NVAL5 INTEGER;
 begin
 if (NUM_CONT_EXIGIDAS is null) then
 NUM_CONT_EXIGIDAS = 2;
 Valido = 0;
 Result = 0;
 Completa = 0;
 NVAL1 = 1;
 NVAL2 = 1;
 NVAL3 = 1;
 NVAL4 = 1;
 NVAL5 = 1;

 if (VAL2 = VAL1) then
 begin
 NVAL1 = NVAL1 + 1;
 NVAL2 = NVAL2 + 1;
 end
 if (VAL3 = VAL1) then
 begin
 NVAL1 = NVAL1 + 1;
 NVAL3 = NVAL3 + 1;
 end
 if (VAL4 = VAL1) then
 begin
 NVAL1 = NVAL1 + 1;
 NVAL4 = NVAL4 + 1;
 end
 if (VAL5 = VAL1) then
 begin
 NVAL1 = NVAL1 + 1;
 NVAL5 = NVAL5 + 1;
 end

 if (VAL3 = VAL2) then
 begin
 NVAL2 = NVAL2 + 1;
 NVAL3 = NVAL3 + 1;
 end
 if (VAL4 = VAL2) then
 begin
 NVAL2 = NVAL2 + 1;
 NVAL4 = NVAL4 + 1;
 end
 if (VAL5 = VAL2) then
 begin
 NVAL2 = NVAL2 + 1;
 NVAL5 = NVAL5 + 1;
 end

 if (VAL4 = VAL3) then
 begin
 NVAL3 = NVAL3 + 1;
 NVAL4 = NVAL4 + 1;
 end
 if (VAL5 = VAL3) then
 begin
 NVAL3 = NVAL3 + 1;
 NVAL5 = NVAL5 + 1;
 end

 if (VAL5 = VAL4) then
 begin
 NVAL4 = NVAL4 + 1;
 NVAL5 = NVAL5 + 1;
 end

 if (VAL1 is null) then NVAL1 = 0;
 if (VAL2 is null) then NVAL2 = 0;
 if (VAL3 is null) then NVAL3 = 0;
 if (VAL4 is null) then NVAL4 = 0;
 if (VAL5 is null) then NVAL5 = 0;

 if (((NVAL1 > NVAL2) or ((NVAL1 = NVAL2) and (VAL1 = VAL2))) and
 ((NVAL1 > NVAL3) or ((NVAL1 = NVAL3) and (VAL1 = VAL3))) and
 ((NVAL1 > NVAL4) or ((NVAL1 = NVAL4) and (VAL1 = VAL4))) and
 ((NVAL1 > NVAL5) or ((NVAL1 = NVAL5) and (VAL1 = VAL5)))) then
 begin
 Result = VAL1;
 Valido = 1;
 end

 if (((NVAL2 > NVAL1) or ((NVAL2 = NVAL1) and (VAL2 = VAL1))) and
 ((NVAL2 > NVAL3) or ((NVAL2 = NVAL3) and (VAL2 = VAL3))) and
 ((NVAL2 > NVAL4) or ((NVAL2 = NVAL4) and (VAL2 = VAL4))) and
 ((NVAL2 > NVAL5) or ((NVAL2 = NVAL5) and (VAL2 = VAL5)))) then
 begin
 Result = VAL2;
 Valido = 1;
 end

 if (((NVAL3 > NVAL1) or ((NVAL3 = NVAL1) and (VAL3 = VAL1))) and
 ((NVAL3 > NVAL2) or ((NVAL3 = NVAL2) and (VAL3 = VAL2))) and
 ((NVAL3 > NVAL4) or ((NVAL3 = NVAL4) and (VAL3 = VAL4))) and
 ((NVAL3 > NVAL5) or ((NVAL3 = NVAL5) and (VAL3 = VAL5)))) then
 begin
 Result = VAL3;
 Valido = 1;
 end

 if (((NVAL4 > NVAL1) or ((NVAL4 = NVAL1) and (VAL4 = VAL1))) and
 ((NVAL4 > NVAL2) or ((NVAL4 = NVAL2) and (VAL4 = VAL2))) and
 ((NVAL4 > NVAL3) or ((NVAL4 = NVAL3) and (VAL4 = VAL3))) and
 ((NVAL4 > NVAL5) or ((NVAL4 = NVAL5) and (VAL4 = VAL5)))) then
 begin
 Result = VAL4;
 Valido = 1;
 end

 if (((NVAL5 > NVAL1) or ((NVAL5 = NVAL1) and (VAL5 = VAL1))) and
 ((NVAL5 > NVAL2) or ((NVAL5 = NVAL2) and (VAL5 = VAL2))) and
 ((NVAL5 > NVAL3) or ((NVAL5 = NVAL3) and (VAL5 = VAL3))) and
 ((NVAL5 > NVAL4) or ((NVAL5 = NVAL4) and (VAL5 = VAL4)))) then
 begin
 Result = VAL5;
 Valido = 1;
 end

 if (((NUM_CONT_EXIGIDAS < 1) or (VAL1 is not null)) and
 ((NUM_CONT_EXIGIDAS < 2) or (VAL2 is not null)) and
 ((NUM_CONT_EXIGIDAS < 3) or (VAL3 is not null)) and
 ((NUM_CONT_EXIGIDAS < 4) or (VAL4 is not null)) and
 ((NUM_CONT_EXIGIDAS < 5) or (VAL5 is not null))) then
 COMPLETA = 1;

 suspend;
 end
^

ALTER PROCEDURE VALIDA_ITEM_CONT_NO_SETOR (
    CON_ALM INTEGER,
    CON_PRO INTEGER,
    CON_COR VARCHAR(3),
    CON_MED VARCHAR(3),
    CON_DAT TIMESTAMP,
    CON_SET INTEGER,
    NUM_CONT_EXIGIDAS INTEGER)
RETURNS (
    RESULT DOUBLE PRECISION,
    VAL1 DOUBLE PRECISION,
    VAL2 DOUBLE PRECISION,
    VAL3 DOUBLE PRECISION,
    VAL4 DOUBLE PRECISION,
    VAL5 DOUBLE PRECISION,
    VALIDO INTEGER,
    COMPLETO INTEGER)
AS
 DECLARE VARIABLE VQTD DOUBLE PRECISION;
 DECLARE VARIABLE VNUM INTEGER;
 begin
 VAL1 = NULL;
 VAL2 = NULL;
 VAL3 = NULL;
 VAL4 = NUll;
 VAL5 = NUll;
 for
 select CON_QTD, CON_NUM
 from mvcontest1 A, mvcontest2 B
 where A.con_cod = B.con_con
 and A.con_alm = :con_alm
 and A.con_dat = :con_dat
 and A.con_set = :con_set
 and B.con_pro = :con_pro
 and ((:con_cor is null) or (B.con_cor = :con_cor))
 and ((:con_med is null) or (B.con_med = :con_med))
 into vQTD, vNUM do
 begin
 if (vnum = 1) then
 val1 = vQTD;
 else if (vnum = 2) then
 val2 = vQTD;
 else if (vnum = 3) then
 val3 = vQTD;
 else if (vnum = 4) then
 val4 = vQTD;
 else if (vnum = 5) then
 val5 = vQTD;
 end
 Execute Procedure valida_contagem(:val1,:val2,:val3,:val4,:val5,:num_cont_exigidas)
 returning_values(Result, valido, completo);
 suspend;
 end
^

ALTER PROCEDURE VDAY (
    ADATE TIMESTAMP)
RETURNS (
    RESULT INTEGER)
AS
BEGIN
  Result = CAST(CAST(ADate AS VARCHAR(2)) AS INTEGER);
  WHEN ANY DO Result = CAST(CAST(ADate AS VARCHAR(1)) AS INTEGER);
END
^

ALTER PROCEDURE VER_ANIVERSARIO_NO_PERIODO (
    PNASCIMENTO TIMESTAMP,
    PDATA_DE TIMESTAMP,
    PDATA_ATE TIMESTAMP)
RETURNS (
    RESULTADO INTEGER)
AS
 begin
 resultado = 0;
 if
 ((case
 when (Extract(month From :pNASCIMENTO) = 2 and Extract(day From :pNASCIMENTO) = 29)
 then cast('03/01' as date)-1
 else Cast(Extract(month From :pNASCIMENTO) || '/' || Extract(day From :pNASCIMENTO) as date)
 end >=
 case
 when (Extract(month From :pDATA_DE) = 2 and Extract(day From :pDATA_DE) = 29)
 then cast('03/01' as date)-1
 else Cast(Extract(month From :pDATA_DE) || '/' || Extract(day From :pDATA_DE) as date)
 end)
 And
 (case
 when (Extract(month From :pNASCIMENTO) = 2 and Extract(day From :pNASCIMENTO) = 29)
 then cast('03/01' as date)-1
 else Cast(Extract(month From :pNASCIMENTO) || '/' || Extract(day From :pNASCIMENTO) as date)
 end <=
 case
 when (Extract(month From :pDATA_ATE) = 2 and Extract(day From :pDATA_DE) = 29)
 then cast('03/01' as date)-1
 else Cast(Extract(month From :pDATA_ATE) || '/' || Extract(day From :pDATA_ATE) as date)
 end)
 ) then
 resultado = 1;
 suspend;
 end
^

ALTER PROCEDURE VERCAIXA (
    PDATADE TIMESTAMP,
    PDATAATE TIMESTAMP,
    PFILIALDE INTEGER,
    PFILIALATE INTEGER,
    PCAIXADE DOUBLE PRECISION,
    PCAIXAATE DOUBLE PRECISION)
RETURNS (
    TIP_COD INTEGER,
    TIP_NOM VARCHAR(30),
    VALOR DOUBLE PRECISION,
    CAIXA INTEGER,
    DATA TIMESTAMP,
    TIPO VARCHAR(3),
    OPE VARCHAR(2),
    FILIAL INTEGER,
    TRANSACAO INTEGER,
    REC_REC TIMESTAMP)
AS
 begin
 if (pDATAATE is null) then
 pDATAATE = pDATADE;
 if (pFILIALATE is null) then
 pFILIALATE = pFILIALDE;
 if (pCAIXAATE is null) then
 pCAIXAATE = pCAIXADE;
 For
 SELECT B.TIP_COD,B.TIP_NOM, A.VD4_VAL AS VALOR, C.VD1_CAI AS CAIXA, A.VD4_CAD AS DATA, "MOV" AS TIPO, C.VD1_CANC AS OPE, C.VD1_ALM AS FILIAL, C.VD1_TRA AS TRANSACAO, CAST("01/01/1001" AS DATE) AS REC_REC
 FROM ESTMVVD4 A, CDTIPD B, ESTMVVD1 C, CDTRA1 D
 WHERE VD4_BOL=VD1_COD AND VD4_ALM=VD1_ALM AND VD4_CAD=VD1_CAD
 AND VD1_FOR=0 AND ((VD1_CANC <> "C" and vd1_canc <> 'CF') OR VD1_CANC IS NULL)
 AND TIP_COD=VD4_TIP AND TRA_COD=VD1_TRA AND TRA_TIP_TRA<>"CMP"
 AND ((:pDATADE IS NULL) OR ((VD4_CAD >= :pDATADE) and (VD4_CAD <= :pDATAATE)))
 AND ((:PFILIALDE IS NULL) OR ((VD1_ALM >= :pFILIALDE) and (VD1_ALM <= :pFILIALATE)))
 AND ((:PCAIXADE IS NULL) OR ((VD1_CAI >= :pCAIXADE) and (VD1_CAI <= :pCAIXAATE)))
 UNION ALL
 SELECT 0, TIP_NOM, VD8_VAL, VD7_CAI AS CAIXA, VD7_DAT AS DATA, "CAI" AS TIPO, VD8_OPE AS OPE, VD7_ALM AS FILIAL, 0 AS TRANSACAO, CAST("01/01/1001" AS DATE) AS REC_REC
 FROM ESTMVVD7, ESTMVVD8, CDTIPD
 WHERE VD8_COD=VD7_COD AND TIP_COD=VD8_TIP
 AND ((:pDATADE IS NULL) OR ((VD7_DAT >= :pDATADE) and (VD7_DAT <= :pDATAATE)))
 AND ((:PFILIALDE IS NULL) OR ((VD7_ALM >= :pFILIALDE) and (VD7_ALM <= :pFILIALATE)))
 AND ((:PCAIXADE IS NULL) OR ((VD7_CAI >= :pCAIXADE) and (VD7_CAI <= :pCAIXAATE)))
 UNION ALL
 SELECT 0, TIP_NOM, REC_VAL, VD1_CAI AS CAIXA, MVCOREC.REC_DAT AS DATA, "REC" AS TIPO, REC_BAI || " " AS OPE, ESTMVVD1.VD1_ALM AS FILIAL, ESTMVVD1.VD1_TRA AS TRANSACAO, REC_REC
 FROM MVCOREC, CDTIPD, ESTMVVD1, CDTRA1
 WHERE TIP_COD=REC_TIP AND TIP_PAG = "S" AND VD1_COD=REC_VD1COD
 AND VD1_CAD=REC_DAT AND VD1_ALM=REC_ORI AND VD1_FOR=0 and TRA_COD=VD1_TRA AND TRA_TIP_TRA<>"CMP"
 AND ((:pDATADE IS NULL) OR ((REC_DAT >= :pDATADE) and (REC_DAT <= :pDATAATE)))
 AND ((:PFILIALDE IS NULL) OR ((VD1_ALM >= :pFILIALDE) and (VD1_ALM <= :pFILIALATE)))
 AND ((:PCAIXADE IS NULL) OR ((VD1_CAI >= :pCAIXADE) and (VD1_CAI <= :pCAIXAATE)))
 into TIP_COD, TIP_NOM, VALOR, CAIXA, DATA, TIPO, OPE, FILIAL, TRANSACAO, REC_REC do
 begin
 suspend;
 end
 end
^

ALTER PROCEDURE VERIFADUPLICIDCORMED (
    PCOD VARCHAR(21),
    PPRO INTEGER,
    PCOR VARCHAR(3),
    PMED VARCHAR(3))
RETURNS (
    PRO INTEGER,
    COR VARCHAR(3),
    MED VARCHAR(3))
AS
 Begin
 FOR SELECT PRO_PRO, PRO_COR, PRO_MED FROM CDPROCM WHERE
 PRO_COD=:pCod and pro_Cod is not null and pro_cod<>''
 INTO Pro, Cor, Med DO
 BEGIN
 IF ((:Pro<>:pPro) or (:Cor<>pCor) or (:Med<>pMed)) THEN
 Suspend;
 END
 End
^

ALTER PROCEDURE VERIFICA_TRANSFERENCIA
AS
 DECLARE VARIABLE VCOD INTEGER;
 DECLARE VARIABLE VTRA INTEGER;
 begin
 for
 Select lge_cod, lge_tra
 From mvlge A
 Where A.lge_pla = "1"
 and (Exists(Select lge_cod from mvlge where lge_pla = "1" and lge_cod = A.lge_tra and A.lge_cod <> lge_tra)
 or Exists(Select lge_cod from morlge b where b.lge_pla = "1" and b.lge_cod = A.lge_tra and A.lge_cod <> B.lge_tra))
 into vcod,vtra do
 begin
 update mvlge set lge_tra=:vcod
 where lge_cod = :vtra;
 update morlge set lge_tra=:vcod
 where lge_cod = :vtra;
 end
 end
^

ALTER PROCEDURE VMONTH (
    ADATE TIMESTAMP)
RETURNS (
    RESULT INTEGER)
AS
DECLARE VARIABLE WorkDate DATE;
DECLARE VARIABLE WorkDay  INTEGER;
BEGIN
  WorkDate = ADate;
  Result = 1;
  WHILE(CAST(WorkDate AS VARCHAR(5)) <> "1-JAN") DO
  BEGIN
    EXECUTE PROCEDURE VDay(WorkDate) RETURNING_VALUES WorkDay;
    IF(WorkDay = 1) THEN Result = Result+1;
    WorkDate = WorkDate-1;
  END
END
^

ALTER PROCEDURE VYEAR (
    ADATE TIMESTAMP)
RETURNS (
    RESULT INTEGER)
AS
DECLARE VARIABLE ElapsedDays  INTEGER;
DECLARE VARIABLE ElapsedYears INTEGER;
BEGIN
  /* Lets go to the begin of the year */
  WHILE(CAST(ADate AS VARCHAR(5)) <> "1-JAN") DO
    ADate = ADate -1;
  ElapsedDays = ADate -"1.1.1901";
  Result = (ElapsedDays *400 /146097)+1901;
END
^


SET TERM ; ^


/******************************************************************************/
/*                                   Roles                                    */
/******************************************************************************/

CREATE ROLE RDB$ADMIN;
