ALTER TRIGGER cdgraurisco_biu0
AS
 begin
 new.gra_enq_desc = CASE new.GRA_ENQ WHEN 'BIO' THEN 'Biológico' WHEN 'ERG' THEN 'Ergonômico' WHEN 'FIS' THEN 'Físico' WHEN 'MEC' THEN 'Mecânico' WHEN 'QUI' THEN 'Químico' WHEN 'SEM' THEN 'Sem Riscos' END;
 end
 commit;

ALTER TRIGGER MVEMAILMARKETING2_BI
AS
 BEGIN
 IF (NEW.EMA2_COD IS NULL) THEN
 NEW.EMA2_COD = GEN_ID(GEN_MVEMAILMARKETING2_ID,1);
 NEW.ema2_status_descricao =
 CASE NEW.EMA2_STATUS
 WHEN 'LID' THEN 'Mensagem lida'
 WHEN 'REC' THEN 'Mensagem recebida'
 WHEN 'EXC' THEN 'Usuário pediu para ser excluído'
 WHEN 'CAI' THEN 'Caixa postal cheia'
 WHEN 'INV' THEN 'E-mail inválido'
 ELSE ''
 END;
 END

 COMMIT;

ALTER PROCEDURE SEQUENCIA_NF_PROD (
    DATA_DE TIMESTAMP,
    DATA_ATE TIMESTAMP)
RETURNS ( 
    VD1_NOT DOUBLE PRECISION,
    FORM_NOM VARCHAR(45),
    CLI_RED VARCHAR(75),
    CLI_NOM VARCHAR(60),
    NOM_ENT VARCHAR(75),
    VD1_QUANTIDADE DOUBLE PRECISION,
    ALM_NOM VARCHAR(50),
    VD1_CAD TIMESTAMP,
    VD1_VALOR_TOTALL DOUBLE PRECISION,
    VD1_VALOR_ICMS DOUBLE PRECISION,
    VD1_COD VARCHAR(13),
    VD1_CFOP INTEGER,
    CFO_CFO VARCHAR(20),
    VD1_CANC VARCHAR(2),
    CFO_NOM VARCHAR(100),
    SERIE_NOM VARCHAR(5),
    STATUS VARCHAR(20),
    PGT_NOM VARCHAR(100),
    VD1_VALOR_TOTALB DOUBLE PRECISION)
 AS
declare variable voldn double precision;
 declare variable voldalm varchar(50);
 declare variable vvez integer;
 declare variable tvd1_not double precision;
 declare variable tform_nom varchar(45);
 declare variable tcli_red varchar(75);
 declare variable tcli_nom varchar(60);
 declare variable tnom_ent varchar(75);
 declare variable tvd1_quantidade double precision;
 declare variable talm_nom varchar(50);
 declare variable tvd1_cad date;
 declare variable tvd1_valor_totall double precision;
 declare variable tvd1_valor_icms double precision;
 declare variable tvd1_cod varchar(13);
 declare variable tvd1_cfop integer;
 declare variable tcfo_cfo varchar(20);
 declare variable tvd1_canc varchar(2);
 declare variable tcfo_nom varchar(100);
 declare variable tserie_nom varchar(5);
 declare variable tstatus varchar(20);
 declare variable tpgt_nom varchar(100);
 declare variable tvd1_valor_totalb double precision;
BEGIN
 vOLDN = 0;
 vOLDALM = '';
 vVEZ = 0;
 FOR
 SELECT DISTINCT VD1_NOT, FORM_NOM,
 CASE WHEN (VD1_CLI <> 0) THEN CLI_RED WHEN (VD1_FOR <> 0) THEN FOR_RED ELSE 'SEM ENTIDADE' END,
 CASE WHEN (VD1_CLI <> 0) THEN NOM_ENT WHEN (VD1_FOR <> 0) THEN FOR_RZS ELSE 'SEM ENTIDADE' END, VD1_QUANTIDADE, ALM_NOM, VD1_CAD, VD1_TOTALL_PRODUTO,
 VD1_VALOR_ICMS, VD1_COD, VD1_CFOP, CFO_CFO, VD1_CANC, CFO_NOM, SERIE_NOM,
 STATUS, PGT_NOM, VD1_TOTALB_PRODUTO, CLI_NOM
 FROM CDFORM, CDALM, ESTMVVD1
 INNER JOIN CDSTATUS ON (CDSTATUS.STA_SIG = ESTMVVD1.VD1_CANC)
 LEFT JOIN CDPRESTSER ON (ESTMVVD1.VD1_PRESTSER = PRE_COD)
 LEFT JOIN CDCLI ON (ESTMVVD1.VD1_CLI = CLI_COD)
 LEFT JOIN CDFOR ON (ESTMVVD1.VD1_FOR = FOR_COD)
 LEFT JOIN ESTMVVD3 ON (ESTMVVD1.VD1_COD=VD3_BOL)
 LEFT JOIN CDPGT ON (ESTMVVD3.VD3_PGT=PGT_COD)
 LEFT JOIN CDCFO ON (ESTMVVD1.VD1_CFOP=CFO_COD), CDSERIENF, CDTRA1, CDTRA3
 WHERE VD1_ALM = ALM_COD
 AND TRA_COD = VD1_TRA
 AND CDTRA1.TRA_COD = CDTRA3.TRA_TRA
 AND CDTRA3.TRA_FORM = CDFORM.FORM_COD
 and cdform.form_alm = cdalm.alm_cod
 AND FORM_SERIE = SERIE_COD
 AND (TRA_LAY_PDV = 'PRO' OR TRA_LAY_PDV = 'PS')
 AND FORM_IMPRESSO IN (SELECT NOME FROM CDIMPRESO WHERE TIPOFORM = 'NFP' or TIPOFORM = 'NFE')
 AND ( (ESTMVVD1.VD1_CAD >= :DATA_DE) OR (:DATA_DE IS NULL) )
 AND ( (ESTMVVD1.VD1_CAD <= :DATA_ATE) OR (:DATA_ATE IS NULL) )
 AND ( (STA_SIG='P')
 OR (STA_SIG='F')
 OR (STA_SIG='FN')
 OR (STA_SIG='C') )
 ORDER BY ALM_NOM, SERIE_NOM ASC, VD1_NOT
 INTO VD1_NOT, FORM_NOM, CLI_RED, NOM_ENT, VD1_QUANTIDADE,
 ALM_NOM, VD1_CAD, VD1_VALOR_TOTALL, VD1_VALOR_ICMS, VD1_COD,
 VD1_CFOP, CFO_CFO, VD1_CANC, CFO_NOM, SERIE_NOM, STATUS,
 PGT_NOM, VD1_VALOR_TOTALB, CLI_NOM DO
 BEGIN

 IF ((vVEZ = 0) OR (vOLDALM <> ALM_NOM) OR (vOLDN = 0) OR ( vOLDN>VD1_NOT)) THEN
 BEGIN
 vOLDN = VD1_NOT;
 vOLDALM = ALM_NOM;
 vVEZ = 1;
 END

 IF ((VD1_NOT > 0) AND (vOLDN <= VD1_NOT)) THEN
 BEGIN
 tVD1_NOT = VD1_NOT;
 tFORM_NOM = FORM_NOM;
 tCLI_RED = CLI_RED;
 tCLI_NOM = CLI_NOM;
 tNOM_ENT = NOM_ENT;
 tVD1_QUANTIDADE = VD1_QUANTIDADE;
 tALM_NOM = ALM_NOM;
 tVD1_CAD = VD1_CAD;
 tVD1_VALOR_TOTALL = VD1_VALOR_TOTALL;
 tVD1_VALOR_ICMS = VD1_VALOR_ICMS;
 tVD1_COD = VD1_COD;
 tVD1_CFOP = VD1_CFOP;
 tCFO_CFO = CFO_CFO;
 tVD1_CANC = VD1_CANC;
 tCFO_NOM = CFO_NOM;
 tSERIE_NOM = SERIE_NOM;
 tSTATUS = STATUS;
 tPGT_NOM = PGT_NOM;
 TVD1_VALOR_TOTALB = VD1_VALOR_TOTALB;

 WHILE ((vOLDN < tVD1_NOT) AND (vOLDALM = ALM_NOM)) DO
 BEGIN
 VD1_NOT = vOLDN;
 FORM_NOM = '*NÃO IMPRESSA OU CANCELADA';
 CLI_RED = '*NÃO IMPRESSA OU CANCELADA';
 CLI_NOM = '*NÃO IMPRESSA OU CANCELADA';
 NOM_ENT = '*NÃO IMPRESSA OU CANCELADA';
 VD1_QUANTIDADE = NULL;
 VD1_VALOR_TOTALL = NULL;
 VD1_VALOR_ICMS = NULL;
 VD1_COD = NULL;
 VD1_CFOP = NULL;
 CFO_CFO = NULL;
 VD1_CANC = NULL;
 CFO_NOM = NULL;
 SERIE_NOM = SERIE_NOM;
 VD1_VALOR_TOTALB = NULL;
 STATUS = NULL;
 SUSPEND;
 vOldN = vOldN + 1;
 END

 VD1_NOT = tVD1_NOT;
 FORM_NOM = tFORM_NOM;
 CLI_RED = tCLI_RED;
 CLI_NOM = tCLI_NOM;
 NOM_ENT = tNOM_ENT;
 VD1_QUANTIDADE = tVD1_QUANTIDADE;
 ALM_NOM = tALM_NOM;
 VD1_CAD = tVD1_CAD;
 VD1_VALOR_TOTALL = tVD1_VALOR_TOTALL;
 VD1_VALOR_ICMS = tVD1_VALOR_ICMS;
 VD1_COD = tVD1_COD;
 VD1_CFOP = tVD1_CFOP;
 CFO_CFO = tCFO_CFO;
 VD1_CANC = tVD1_CANC;
 CFO_NOM = tCFO_NOM;
 SERIE_NOM = tSERIE_NOM;
 STATUS = tSTATUS;
 PGT_NOM = tPGT_NOM;
 VD1_VALOR_TOTALB = TVD1_VALOR_TOTALB;

 SUSPEND;
 vOldN = vOldN + 1;
 END
 ELSE
 IF (VD1_NOT = 0) THEN
 BEGIN
 SUSPEND;
 END
 ELSE
 BEGIN
 SUSPEND;
 vOldN = vOldN + 1;
 END
 END

 END

 commit;

ALTER PROCEDURE SEQUENCIA_NF_SERV (
    DATA_DE TIMESTAMP,
    DATA_ATE TIMESTAMP)
RETURNS ( 
    VD1_NOT DOUBLE PRECISION,
    FORM_NOM VARCHAR(45),
    CLI_RED VARCHAR(75),
    CLI_NOM VARCHAR(60),
    NOM_ENT VARCHAR(75),
    VD1_QUANTIDADE DOUBLE PRECISION,
    ALM_NOM VARCHAR(50),
    VD1_CAD TIMESTAMP,
    VD1_VALOR_TOTALL DOUBLE PRECISION,
    VD1_VALOR_ICMS DOUBLE PRECISION,
    VD1_COD VARCHAR(13),
    VD1_CFOP INTEGER,
    CFO_CFO VARCHAR(20),
    VD1_CANC VARCHAR(2),
    CFO_NOM VARCHAR(100),
    SERIE_NOM VARCHAR(5),
    STATUS VARCHAR(20),
    PGT_NOM VARCHAR(100),
    VD1_IMPOSTO3 DOUBLE PRECISION,
    VD1_IMPOSTO4 DOUBLE PRECISION,
    VD1_IMPOSTO5 DOUBLE PRECISION,
    VD1_IMPOSTO6 DOUBLE PRECISION,
    VD1_INSS DOUBLE PRECISION,
    VD1_IRRF DOUBLE PRECISION,
    PRE_NOM VARCHAR(50),
    VD1_VALOR_TOTALB DOUBLE PRECISION,
    VD1_CLI_ISS DOUBLE PRECISION)
 AS
declare variable voldn double precision;
 declare variable voldalm varchar(50);
 declare variable vvez integer;
 declare variable tvd1_not double precision;
 declare variable tform_nom varchar(45);
 declare variable tcli_red varchar(75);
 declare variable tcli_nom varchar(60);
 declare variable tnom_ent varchar(75);
 declare variable tvd1_quantidade double precision;
 declare variable talm_nom varchar(50);
 declare variable tvd1_cad date;
 declare variable tvd1_valor_totall double precision;
 declare variable tvd1_valor_icms double precision;
 declare variable tvd1_cod varchar(13);
 declare variable tvd1_cfop integer;
 declare variable tcfo_cfo varchar(20);
 declare variable tvd1_canc varchar(2);
 declare variable tcfo_nom varchar(100);
 declare variable tserie_nom varchar(5);
 declare variable tstatus varchar(20);
 declare variable tpgt_nom varchar(100);
 declare variable tvd1_imposto3 double precision;
 declare variable tvd1_imposto4 double precision;
 declare variable tvd1_imposto5 double precision;
 declare variable tvd1_imposto6 double precision;
 declare variable tvd1_inss double precision;
 declare variable tvd1_irrf double precision;
 declare variable tpre_nom varchar(50);
 declare variable tvd1_valor_totalb double precision;
 declare variable tvd1_cli_iss double precision;
 BEGIN
 vOLDN = 0;
 vOLDALM = '';
 vVEZ = 0;
 FOR
 SELECT DISTINCT
 VD1_NOT, FORM_NOM, COALESCE(CLI_RED, FOR_RED), COALESCE(NOM_ENT,FOR_RZS), VD1_QUANTSERVI, ALM_NOM, VD1_CAD,
 VD1_TOTALL_SERVICO, VD1_VALOR_ICMS, VD1_COD, VD1_CFOP, CFO_CFO,
 VD1_CANC, CFO_NOM, SERIE_NOM, STATUS, PGT_NOM,
 COALESCE(VD1_IMPOSTO3, 0) AS VD1_IMPOSTO3,
 COALESCE(VD1_IMPOSTO4, 0) AS VD1_IMPOSTO4,
 COALESCE(VD1_IMPOSTO5, 0) AS VD1_IMPOSTO5,
 COALESCE(VD1_IMPOSTO6, 0) AS VD1_IMPOSTO6,
 COALESCE(VD1_INSS, 0) AS VD1_INSS,
 COALESCE(VD1_IRRF, 0) AS VD1_IRRF,
 PRE_NOM, VD1_TOTALB_SERVICO, VD1_CLI_ISS, CLI_NOM
 FROM CDFORM, ESTMVVD1
 INNER JOIN CDSTATUS ON(CDSTATUS.STA_SIG = ESTMVVD1.VD1_CANC)
 LEFT JOIN CDPRESTSER ON(ESTMVVD1.VD1_PRESTSER = PRE_COD)
 LEFT JOIN ESTMVVD3 ON(ESTMVVD1.VD1_COD = VD3_BOL)
 LEFT JOIN CDCLI ON (ESTMVVD1.VD1_CLI = CLI_COD)
 LEFT JOIN CDFOR ON (ESTMVVD1.VD1_FOR = FOR_COD)
 LEFT JOIN CDPGT ON(ESTMVVD3.VD3_PGT = PGT_COD),
 CDCFO, CDALM, CDTRA3, CDSERIENF, CDTRA1
 WHERE VD1_ALM = ALM_COD
 AND TRA_COD = VD1_TRA
 AND CDTRA1.TRA_COD = CDTRA3.TRA_TRA
 AND CDTRA3.TRA_FORM = CDFORM.FORM_COD
 AND CDFORM.form_alm = CDALM.ALM_COD
 AND FORM_SERIE = SERIE_COD
 AND ESTMVVD1.VD1_CFOP = CFO_COD
 AND VD1_ORIGEM <> 'DDO'
 AND VD1_ORIGEM <> 'DDS'
 AND TRA_LAY_PDV = 'SER'
 AND (TRA_MODULO = 'FAT')
 AND ((STA_SIG = 'P')
 OR (STA_SIG = 'F')
 OR (STA_SIG = 'FN')
 OR (STA_SIG = 'C'))
 AND ( (ESTMVVD1.VD1_CAD >= :DATA_DE) OR (:DATA_DE IS NULL) )
 AND ( (ESTMVVD1.VD1_CAD <= :DATA_ATE) OR (:DATA_ATE IS NULL) )
 ORDER BY ALM_NOM, SERIE_NOM ASC, VD1_NOT
 INTO VD1_NOT, FORM_NOM, CLI_RED, NOM_ENT, VD1_QUANTIDADE,
 ALM_NOM, VD1_CAD, VD1_VALOR_TOTALL, VD1_VALOR_ICMS, VD1_COD,
 VD1_CFOP, CFO_CFO, VD1_CANC, CFO_NOM, SERIE_NOM, STATUS,
 PGT_NOM, VD1_IMPOSTO3, VD1_IMPOSTO4, VD1_IMPOSTO5,
 VD1_IMPOSTO6, VD1_INSS, VD1_IRRF, PRE_NOM, VD1_VALOR_TOTALB, VD1_CLI_ISS, CLI_NOM DO
 BEGIN
 IF ((vVEZ = 0) OR (vOLDALM <> ALM_NOM) OR (vOLDN = 0)) THEN
 BEGIN
 vOLDN = VD1_NOT;
 vOLDALM = ALM_NOM;
 vVEZ = 1;
 END

 IF ((VD1_NOT > 0) AND (vOLDN < VD1_NOT)) THEN
 BEGIN
 tVD1_NOT = VD1_NOT;
 tFORM_NOM = FORM_NOM;
 tCLI_RED = CLI_RED;
 tCLI_NOM = CLI_NOM;
 tNOM_ENT = NOM_ENT;
 tVD1_QUANTIDADE = VD1_QUANTIDADE;
 tALM_NOM = ALM_NOM;
 tVD1_CAD = VD1_CAD;
 tVD1_VALOR_TOTALL = VD1_VALOR_TOTALL;
 tVD1_VALOR_ICMS = VD1_VALOR_ICMS;
 tVD1_COD = VD1_COD;
 tVD1_CFOP = VD1_CFOP;
 tCFO_CFO = CFO_CFO;
 tVD1_CANC = VD1_CANC;
 tCFO_NOM = CFO_NOM;
 tSERIE_NOM = SERIE_NOM;
 tSTATUS = STATUS;
 tPGT_NOM = PGT_NOM;
 tVD1_IMPOSTO3 = VD1_IMPOSTO3;
 tVD1_IMPOSTO4 = VD1_IMPOSTO4;
 tVD1_IMPOSTO5 = VD1_IMPOSTO5;
 tVD1_IMPOSTO6 = VD1_IMPOSTO6;
 tVD1_INSS = VD1_INSS;
 tVD1_IRRF = VD1_IRRF;
 tPRE_NOM = PRE_NOM;
 tVD1_VALOR_TOTALB = VD1_VALOR_TOTALB;
 tVD1_CLI_ISS = VD1_CLI_ISS;

 WHILE ((vOLDN < tVD1_NOT) AND (vOLDALM = ALM_NOM)) DO
 BEGIN
 VD1_NOT = vOLDN;
 FORM_NOM = '*NÃO IMPRESSA OU CANCELADA';
 CLI_RED = '*NÃO IMPRESSA OU CANCELADA';
 CLI_NOM = '*NÃO IMPRESSA OU CANCELADA';
 NOM_ENT = '*NÃO IMPRESSA OU CANCELADA';
 VD1_QUANTIDADE = NULL;
 VD1_VALOR_TOTALL = NULL;
 VD1_VALOR_ICMS = NULL;
 VD1_COD = NULL;
 VD1_CFOP = NULL;
 CFO_CFO = NULL;
 VD1_CANC = NULL;
 CFO_NOM = NULL;
 SERIE_NOM = SERIE_NOM;
 STATUS = NULL;
 PGT_NOM = NULL;
 VD1_IMPOSTO3 = NULL;
 VD1_IMPOSTO4 = NULL;
 VD1_IMPOSTO5 = NULL;
 VD1_IMPOSTO6 = NULL;
 VD1_INSS = NULL;
 VD1_IRRF = NULL;
 PRE_NOM = NULL;
 VD1_VALOR_TOTALB = NULL;
 VD1_CLI_ISS = NULL;
 SUSPEND;
 vOldN = vOldN + 1;
 END
 VD1_NOT = tVD1_NOT;
 FORM_NOM = tFORM_NOM;
 CLI_RED = tCLI_RED;
 CLI_NOM = tCLI_NOM;
 NOM_ENT = tNOM_ENT;
 VD1_QUANTIDADE = tVD1_QUANTIDADE;
 ALM_NOM = tALM_NOM;
 VD1_CAD = tVD1_CAD;
 VD1_VALOR_TOTALL = tVD1_VALOR_TOTALL;
 VD1_VALOR_ICMS = tVD1_VALOR_ICMS;
 VD1_COD = tVD1_COD;
 VD1_CFOP = tVD1_CFOP;
 CFO_CFO = tCFO_CFO;
 VD1_CANC = tVD1_CANC;
 CFO_NOM = tCFO_NOM;
 SERIE_NOM = tSERIE_NOM;
 STATUS = tSTATUS;
 PGT_NOM = tPGT_NOM;
 VD1_IMPOSTO3 = tVD1_IMPOSTO3;
 VD1_IMPOSTO4 = tVD1_IMPOSTO4;
 VD1_IMPOSTO5 = tVD1_IMPOSTO5;
 VD1_IMPOSTO6 = tVD1_IMPOSTO6;
 VD1_INSS = tVD1_INSS;
 VD1_IRRF = tVD1_IRRF;
 PRE_NOM = tPRE_NOM;
 VD1_VALOR_TOTALB = tVD1_VALOR_TOTALB;
 VD1_CLI_ISS = tVD1_CLI_ISS;

 SUSPEND;
 vOldN = vOldN + 1;
 END
 ELSE
 IF (VD1_NOT = 0) THEN
 BEGIN
 SUSPEND;
 END
 ELSE
 BEGIN
 SUSPEND;
 vOldN = vOldN + 1;
 END
 END
 END

 COMMIT;

ALTER PROCEDURE CONVERTER_MESES_EM_ANOS_MESES (
    PMESES INTEGER,
    PAGRUPAR_ANOS INTEGER)
RETURNS ( 
    RESULT VARCHAR(1000))
 AS
declare variable vanos integer;
 declare variable vmeses integer;
 declare variable vresultano varchar(100);
 begin
 if (Coalesce(pagrupar_anos,0) = 1) then
 begin
 VMESES = mod(PMESES, 12);
 VANOS = (PMESES - VMESES) / 12;
 end
 else
 VMESES = PMESES;
 RESULT = '';
 if (VMESES > 0) then
 begin
 if (VMESES = 1) then
 RESULT = '1 Mês';
 else
 RESULT = Cast(VMESES as integer) || ' Meses';
 end
 if (VANOS > 0) then
 begin
 if (VANOS = 1) then
 VRESULTANO = '1 Ano';
 else
 VRESULTANO = Cast(VANOS as integer) || ' Anos';
 if (RESULT <> '') then
 RESULT = VRESULTANO || ' e ' || RESULT;
 else
 RESULT = VRESULTANO;
 end
 suspend;
 end

 COMMIT;

ALTER PROCEDURE CONVERTER_MESES_EM_FREQUENCIA (
    PMESES INTEGER)
RETURNS ( 
    RESULT VARCHAR(1000))
 AS
begin
 Select RESULT From CONVERTER_MESES_EM_ANOS_MESES(:PMESES, 0) Into RESULT;
 if (RESULT = '1 Mês') then
 RESULT = 'Mensal';
 else if (RESULT = '2 Meses') then
 RESULT = 'Bimestral';
 else if (RESULT = '3 Meses') then
 RESULT = 'Trimestral';
 else if (RESULT = '6 Meses') then
 RESULT = 'Semestral';
 else if ((RESULT = '1 Ano') or (RESULT = '12 Meses')) then
 RESULT = 'Anual';
 else if ((RESULT = '2 Anos') or (RESULT = '24 Meses')) then
 RESULT = 'Bienal';
 suspend;
 end

 COMMIT;

ALTER PROCEDURE CHAR_LOWER (
    PCHAR VARCHAR(1))
RETURNS ( 
    RESULT VARCHAR(1))
 AS
BEGIN
 IF (PCHAR = 'A') THEN
 RESULT = 'a';
 ELSE IF (PCHAR = 'B') THEN
 RESULT = 'b';
 ELSE IF (PCHAR = 'C') THEN
 RESULT = 'c';
 ELSE IF (PCHAR = 'D') THEN
 RESULT = 'd';
 ELSE IF (PCHAR = 'E') THEN
 RESULT = 'e';
 ELSE IF (PCHAR = 'F') THEN
 RESULT = 'f';
 ELSE IF (PCHAR = 'G') THEN
 RESULT = 'g';
 ELSE IF (PCHAR = 'H') THEN
 RESULT = 'h';
 ELSE IF (PCHAR = 'I') THEN
 RESULT = 'i';
 ELSE IF (PCHAR = 'J') THEN
 RESULT = 'j';
 ELSE IF (PCHAR = 'K') THEN
 RESULT = 'k';
 ELSE IF (PCHAR = 'L') THEN
 RESULT = 'l';
 ELSE IF (PCHAR = 'M') THEN
 RESULT = 'm';
 ELSE IF (PCHAR = 'N') THEN
 RESULT = 'n';
 ELSE IF (PCHAR = 'O') THEN
 RESULT = 'o';
 ELSE IF (PCHAR = 'P') THEN
 RESULT = 'p';
 ELSE IF (PCHAR = 'Q') THEN
 RESULT = 'q';
 ELSE IF (PCHAR = 'R') THEN
 RESULT = 'r';
 ELSE IF (PCHAR = 'S') THEN
 RESULT = 's';
 ELSE IF (PCHAR = 'T') THEN
 RESULT = 't';
 ELSE IF (PCHAR = 'U') THEN
 RESULT = 'u';
 ELSE IF (PCHAR = 'V') THEN
 RESULT = 'v';
 ELSE IF (PCHAR = 'W') THEN
 RESULT = 'w';
 ELSE IF (PCHAR = 'X') THEN
 RESULT = 'x';
 ELSE IF (PCHAR = 'Y') THEN
 RESULT = 'y';
 ELSE IF (PCHAR = 'Z') THEN
 RESULT = 'z';

 ELSE IF (PCHAR = 'À') THEN
 RESULT = 'à';
 ELSE IF (PCHAR = 'Á') THEN
 RESULT = 'á';
 ELSE IF (PCHAR = 'Ã') THEN
 RESULT = 'ã';
 ELSE IF (PCHAR = 'Â') THEN
 RESULT = 'â';

 ELSE IF (PCHAR = 'Ç') THEN
 RESULT = 'ç';

 ELSE IF (PCHAR = 'É') THEN
 RESULT = 'é';
 ELSE IF (PCHAR = 'Ê') THEN
 RESULT = 'ê';

 ELSE IF (PCHAR = 'Í') THEN
 RESULT = 'í';

 ELSE IF (PCHAR = 'Ó') THEN
 RESULT = 'ó';
 ELSE IF (PCHAR = 'Õ') THEN
 RESULT = 'õ';

 ELSE IF (PCHAR = 'Ú') THEN
 RESULT = 'ú';

 ELSE IF (PCHAR = 'Ñ') THEN
 RESULT = 'ñ';
 ELSE
 RESULT = PCHAR;
 SUSPEND;
 END

 COMMIT;

ALTER PROCEDURE RETIRAR_ACENTO (
    PTEXTO VARCHAR(4000))
RETURNS ( 
    RESULT VARCHAR(4000))
 AS
declare variable vvalor varchar(4000);
 declare variable i integer;
 begin
 i = 1;
 Result = '';
 while (i <= strlen(pTexto)) do
 begin
 vValor = substr(pTexto, i, i);
 if (vValor = 'á') then Result = Result || 'a';
 else if (vValor = 'à') then Result = Result || 'a';
 else if (vValor = 'ã') then Result = Result || 'a';
 else if (vValor = 'â') then Result = Result || 'a';
 else if (vValor = 'é') then Result = Result || 'e';
 else if (vValor = 'è') then Result = Result || 'e';
 else if (vValor = 'ê') then Result = Result || 'e';
 else if (vValor = 'í') then Result = Result || 'i';
 else if (vValor = 'ì') then Result = Result || 'i';
 else if (vValor = 'î') then Result = Result || 'i';
 else if (vValor = 'ó') then Result = Result || 'o';
 else if (vValor = 'ò') then Result = Result || 'o';
 else if (vValor = 'ô') then Result = Result || 'o';
 else if (vValor = 'õ') then Result = Result || 'o';
 else if (vValor = 'ú') then Result = Result || 'u';
 else if (vValor = 'ù') then Result = Result || 'u';
 else if (vValor = 'û') then Result = Result || 'u';
 else if (vValor = 'ü') then Result = Result || 'u';
 else if (vValor = 'ç') then Result = Result || 'c';
 else if (vValor = 'Á') then Result = Result || 'A';
 else if (vValor = 'À') then Result = Result || 'A';
 else if (vValor = 'Ã') then Result = Result || 'A';
 else if (vValor = 'Â') then Result = Result || 'A';
 else if (vValor = 'É') then Result = Result || 'E';
 else if (vValor = 'È') then Result = Result || 'E';
 else if (vValor = 'Ê') then Result = Result || 'E';
 else if (vValor = 'Í') then Result = Result || 'I';
 else if (vValor = 'Ì') then Result = Result || 'I';
 else if (vValor = 'Î') then Result = Result || 'I';
 else if (vValor = 'Ó') then Result = Result || 'O';
 else if (vValor = 'Ò') then Result = Result || 'O';
 else if (vValor = 'Ô') then Result = Result || 'O';
 else if (vValor = 'Õ') then Result = Result || 'O';
 else if (vValor = 'Ú') then Result = Result || 'U';
 else if (vValor = 'Ù') then Result = Result || 'U';
 else if (vValor = 'Û') then Result = Result || 'U';
 else if (vValor = 'Ü') then Result = Result || 'U';
 else if (vValor = 'Ç') then Result = Result || 'C';
 else Result = Result || vValor;
 i = i + 1;
 end
 suspend;
 end

 COMMIT;

 ALTER PROCEDURE CHAR_UPPER (
    PCHAR VARCHAR(1))
RETURNS ( 
    RESULT VARCHAR(1))
 AS
BEGIN
 IF (PCHAR = 'a') THEN
 RESULT = 'A';
 ELSE IF (PCHAR = 'b') THEN
 RESULT = 'B';
 ELSE IF (PCHAR = 'c') THEN
 RESULT = 'C';
 ELSE IF (PCHAR = 'd') THEN
 RESULT = 'D';
 ELSE IF (PCHAR = 'e') THEN
 RESULT = 'E';
 ELSE IF (PCHAR = 'f') THEN
 RESULT = 'F';
 ELSE IF (PCHAR = 'g') THEN
 RESULT = 'G';
 ELSE IF (PCHAR = 'h') THEN
 RESULT = 'H';
 ELSE IF (PCHAR = 'i') THEN
 RESULT = 'I';
 ELSE IF (PCHAR = 'j') THEN
 RESULT = 'J';
 ELSE IF (PCHAR = 'k') THEN
 RESULT = 'K';
 ELSE IF (PCHAR = 'l') THEN
 RESULT = 'L';
 ELSE IF (PCHAR = 'm') THEN
 RESULT = 'M';
 ELSE IF (PCHAR = 'n') THEN
 RESULT = 'N';
 ELSE IF (PCHAR = 'o') THEN
 RESULT = 'O';
 ELSE IF (PCHAR = 'p') THEN
 RESULT = 'P';
 ELSE IF (PCHAR = 'q') THEN
 RESULT = 'Q';
 ELSE IF (PCHAR = 'r') THEN
 RESULT = 'R';
 ELSE IF (PCHAR = 's') THEN
 RESULT = 'S';
 ELSE IF (PCHAR = 't') THEN
 RESULT = 'T';
 ELSE IF (PCHAR = 'u') THEN
 RESULT = 'U';
 ELSE IF (PCHAR = 'v') THEN
 RESULT = 'V';
 ELSE IF (PCHAR = 'w') THEN
 RESULT = 'W';
 ELSE IF (PCHAR = 'x') THEN
 RESULT = 'X';
 ELSE IF (PCHAR = 'y') THEN
 RESULT = 'Y';
 ELSE IF (PCHAR = 'z') THEN
 RESULT = 'Z';

 ELSE IF (PCHAR = 'à') THEN
 RESULT = 'À';
 ELSE IF (PCHAR = 'á') THEN
 RESULT = 'Á';
 ELSE IF (PCHAR = 'ã') THEN
 RESULT = 'Ã';
 ELSE IF (PCHAR = 'â') THEN
 RESULT = 'Â';

 ELSE IF (PCHAR = 'ç') THEN
 RESULT = 'Ç';

 ELSE IF (PCHAR = 'é') THEN
 RESULT = 'É';
 ELSE IF (PCHAR = 'ê') THEN
 RESULT = 'Ê';

 ELSE IF (PCHAR = 'í') THEN
 RESULT = 'Í';

 ELSE IF (PCHAR = 'ó') THEN
 RESULT = 'Ó';
 ELSE IF (PCHAR = 'õ') THEN
 RESULT = 'Õ';

 ELSE IF (PCHAR = 'ú') THEN
 RESULT = 'Ú';

 ELSE IF (PCHAR = 'ñ') THEN
 RESULT = 'Ñ';
 ELSE
 RESULT = PCHAR;
 SUSPEND;
 END

 COMMIT;

 ALTER PROCEDURE ATUALIZAR_FINANCEIRO_VD4 (
    PVD4COD INTEGER)
 AS
declare variable vdoc varchar(12);
 declare variable vvalor double precision;
 declare variable vdatavec date;
 declare variable vtip integer;
 declare variable vcli integer;
 declare variable vconta integer;
 declare variable vcarteira integer;
 declare variable vccusto varchar(40);
 declare variable vplano varchar(40);
 declare variable vvd1cod varchar(13);
 declare variable vvd1cad date;
 declare variable vvd1alm integer;
 declare variable vtranom varchar(40);
 declare variable valmfant varchar(20);
 declare variable vobs varchar(60);
 declare variable vvd1not integer;
 declare variable vtipfin varchar(1);
 begin
 SELECT CDCLI.CLI_CCUSTO, CDCLI.CLI_PLA, CDCLI.CLI_CONTA, CDCLI.CLI_CARTEIRA,
 CDALM.ALM_FANT,
 CDTRA1.TRA_NOM,
 ESTMVVD1.VD1_CLI, ESTMVVD1.VD1_NOT, ESTMVVD1.VD1_COD, ESTMVVD1.VD1_CAD, ESTMVVD1.VD1_ALM,
 ESTMVVD4.VD4_VEC, ESTMVVD4.VD4_DOC, ESTMVVD4.VD4_VAL, ESTMVVD4.VD4_TIP,
 CDTIPD.TIP_FIN
 FROM ESTMVVD4, ESTMVVD1, CDCLI, CDALM, CDTRA1, CDTIPD
 WHERE ESTMVVD4.VD4_BOL = ESTMVVD1.VD1_COD
 AND ESTMVVD1.VD1_TRA = CDTRA1.TRA_COD
 AND CDALM.ALM_COD = ESTMVVD1.VD1_ALM
 AND CDCLI.CLI_COD = CDALM.ALM_CLI
 AND ESTMVVD4.VD4_TIP = CDTIPD.TIP_COD
 AND ESTMVVD4.VD4_COD = :pvd4cod
 Into vccusto, vplano, vconta, vcarteira, valmfant, vtranom,
 vcli, vvd1not, vvd1cod, vvd1cad, vvd1alm, vdatavec, vdoc, vvalor,
 vtip, vtipfin;

 vobs = vtranom || ' - N. ' || vvd1not || ' - ' || valmfant;

 if (vtipfin = 'S') then
 begin
 insert into mvcorec (rec_cod, rec_doc, rec_ccusto, rec_dat, rec_tip, rec_vec,
 rec_val, rec_moe, rec_cob, rec_con, rec_cli, rec_car, rec_emi, rec_bai,
 rec_tot, rec_eminom, rec_emicpf, rec_emirg, rec_emitel, rec_dfp, rec_bor,
 cli_fil, rec_cobravel, rec_pla, rec_desagio, dat_cad, dat_atu, ativo,
 rec_nossonumero, rec_vd1cod, rec_obs, rec_ori, rec_baifil, rec_baiver,
 rec_rec, rec_vog, rec_jbor, rec_nbor, rec_dtbor, rec_proj2, rec_pla2,
 rec_ccusto2, rec_for_vinc, rec_obs1, rec_sit_bol, rec_desd)
 values ((Select VCODIGO From maxtabelacodigo('MVCOREC','REC_COD')),
 :vdoc, :vccusto, :vvd1cad, :vtip, :vdatavec, :vvalor, null, '',
 :vconta, :vcli, :vcarteira, :vvd1cad, '', 'T', null, null, null, null,
 'D', null, :vvd1alm, 'T', :vplano, null, 'today', 'today', 'A', 0,
 :vvd1cod, :vobs, :vvd1alm, null, null, null, :vdatavec, null,
 null, null, null, null, null, null, null, null, null);
 end
 end

 COMMIT;

ALTER PROCEDURE RELATORIOS_DE_PROJETOS (
    PMODELO VARCHAR(30),
    PPLANODE VARCHAR(30),
    PPLANOATE VARCHAR(30),
    PPROJETODE VARCHAR(60),
    PPROJETOATE VARCHAR(60),
    PDATADE TIMESTAMP,
    PDATAATE TIMESTAMP,
    PSTATUSPROJ VARCHAR(1),
    PFLAG VARCHAR(3),
    PHORASFUN VARCHAR(1))
RETURNS ( 
    RCODIGOPROJ INTEGER,
    RCODIGOPROJ2 INTEGER,
    RPROJETO VARCHAR(60),
    RETAPA VARCHAR(40),
    RPLANODECONTAS VARCHAR(30),
    RTOTALORCAM DOUBLE PRECISION,
    RTOTAL DOUBLE PRECISION,
    RSTATUS VARCHAR(20),
    RSTATUSETAPA VARCHAR(20))
 AS
DECLARE VARIABLE WPROJ_NOM VARCHAR(60);
 DECLARE VARIABLE WAUX_PROJ_NOM VARCHAR(60);
 DECLARE VARIABLE WVALOR DOUBLE PRECISION;
 DECLARE VARIABLE WSOMA DOUBLE PRECISION;
 DECLARE VARIABLE WPROJ2_NOM VARCHAR(40);
 DECLARE VARIABLE WAUX_PROJ2_NOM VARCHAR(40);
 DECLARE VARIABLE WPLA_NOM VARCHAR(30);
 DECLARE VARIABLE WAUX_PLA_NOM VARCHAR(30);
 DECLARE VARIABLE WPROJ2_ORCAM DOUBLE PRECISION;
 DECLARE VARIABLE WPROJ_COD INTEGER;
 DECLARE VARIABLE WAUX_PROJ_COD INTEGER;
 DECLARE VARIABLE WPROJ2_COD INTEGER;
 DECLARE VARIABLE WAUX_PROJ2_COD INTEGER;
 DECLARE VARIABLE WPROJ_STATUS VARCHAR(20);
 DECLARE VARIABLE WPROJ2_STATUS VARCHAR(20);
 DECLARE VARIABLE WAUX_PROJ_STATUS VARCHAR(20);
 DECLARE VARIABLE WAUX_PROJ2_STATUS VARCHAR(20);
 DECLARE VARIABLE RMAODEOBRA DOUBLE PRECISION;
 BEGIN
 IF (PFLAG = 'COM') THEN
 BEGIN
 FOR
 SELECT PROJ_COD, PROJ2_COD, PROJ_NOM,
 CASE PROJ_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ_STATUS,
 CASE PROJ2_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ2_STATUS,
 SUM(LGE_VAL), PROJ2_NOM, PROJ2_ORCAM, PLA_NOM
 FROM MVLGE INNER JOIN CDPLA ON CDPLA.PLA_COD = MVLGE.LGE_PLA
 LEFT JOIN CDPROJ2 ON CDPROJ2.PROJ2_COD = MVLGE.LGE_PROJ2
 LEFT JOIN CDPROJ ON CDPROJ2.PROJ2_PROJ = CDPROJ.PROJ_COD

 WHERE LGE_PLA <> '1' AND
 LGE_PLA <> '2' AND
 PROJ_COD IS NOT NULL

 AND ((:PPLANODE IS NULL) OR ((PLA_NOM >= :PPLANODE) AND (PLA_NOM <=:PPLANOATE)))
 AND ((:PPROJETODE IS NULL) OR ((PROJ_NOM >= :PPROJETODE) AND (PROJ_NOM <=:PPROJETOATE)))

 AND ((:PDATADE IS NULL) OR ((LGE_EMI >= :PDATADE) AND (LGE_EMI <= :PDATAATE)))
 AND ((:PSTATUSPROJ IS NULL) OR (PROJ_STATUS = :PSTATUSPROJ))


 GROUP BY PROJ_COD, PROJ2_COD, PROJ_NOM, PROJ_STATUS, PROJ2_STATUS, PROJ2_NOM, PROJ2_ORCAM, PLA_NOM

 UNION ALL

 SELECT PROJ_COD, PROJ2_COD, PROJ_NOM,
 CASE PROJ_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ_STATUS,
 CASE PROJ2_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ2_STATUS,
 SUM(DOB_VAL), PROJ2_NOM, PROJ2_ORCAM, PLA_NOM
 FROM MVLGED INNER JOIN CDPLA ON CDPLA.PLA_COD = MVLGED.DOB_PLA
 LEFT JOIN CDPROJ2 ON CDPROJ2.PROJ2_COD = MVLGED.DOB_PROJ2
 LEFT JOIN CDPROJ ON CDPROJ2.PROJ2_PROJ = CDPROJ.PROJ_COD

 WHERE PROJ_COD IS NOT NULL

 AND ((:PPLANODE IS NULL) OR ((PLA_NOM >= :PPLANODE) AND (PLA_NOM <=:PPLANOATE)))
 AND ((:PPROJETODE IS NULL) OR ((PROJ_NOM >= :PPROJETODE) AND (PROJ_NOM <=:PPROJETOATE)))

 AND ((:PDATADE IS NULL) OR ((DOB_EMI >= :PDATADE) AND (DOB_EMI <= :PDATAATE)))
 AND ((:PSTATUSPROJ IS NULL) OR (PROJ_STATUS = :PSTATUSPROJ))

 GROUP BY PROJ_COD, PROJ2_COD, PROJ_NOM,PROJ_STATUS, PROJ2_STATUS, PROJ2_NOM, PROJ2_ORCAM, PLA_NOM

 UNION ALL

 SELECT PROJ_COD, PROJ2_COD, PROJ_NOM,
 CASE PROJ_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ_STATUS,
 CASE PROJ2_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ2_STATUS,
 SUM(LGE_VAL), PROJ2_NOM,PROJ2_ORCAM, PLA_NOM
 FROM MORLGE INNER JOIN CDPLA ON CDPLA.PLA_COD = MORLGE.LGE_PLA
 LEFT JOIN CDPROJ2 ON CDPROJ2.PROJ2_COD = MORLGE.LGE_PROJ2
 LEFT JOIN CDPROJ ON CDPROJ2.PROJ2_PROJ = CDPROJ.PROJ_COD

 WHERE LGE_PLA <> '1' AND
 LGE_PLA <> '2' AND
 PROJ_COD IS NOT NULL

 AND ((:PPLANODE IS NULL) OR ((PLA_NOM >= :PPLANODE) AND (PLA_NOM <=:PPLANOATE)))
 AND ((:PPROJETODE IS NULL) OR ((PROJ_NOM >= :PPROJETODE) AND (PROJ_NOM <=:PPROJETOATE)))

 AND ((:PDATADE IS NULL) OR ((LGE_EMI >= :PDATADE) AND (LGE_EMI <= :PDATAATE)))
 AND ((:PSTATUSPROJ IS NULL) OR (PROJ_STATUS = :PSTATUSPROJ))

 GROUP BY PROJ_COD, PROJ2_COD, PROJ_NOM, PROJ_STATUS, PROJ2_STATUS, PROJ2_NOM, PROJ2_ORCAM, PLA_NOM

 UNION ALL

 SELECT PROJ_COD, PROJ2_COD, PROJ_NOM,
 CASE PROJ_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ_STATUS,
 CASE PROJ2_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ2_STATUS,
 SUM(DOB_VAL), PROJ2_NOM, PROJ2_ORCAM, PLA_NOM
 FROM MORLGED INNER JOIN CDPLA ON CDPLA.PLA_COD = MORLGED.DOB_PLA
 LEFT JOIN CDPROJ2 ON CDPROJ2.PROJ2_COD = MORLGED.DOB_PROJ2
 LEFT JOIN CDPROJ ON CDPROJ2.PROJ2_PROJ = CDPROJ.PROJ_COD

 WHERE PROJ_COD IS NOT NULL

 AND ((:PPLANODE IS NULL) OR ((PLA_NOM >= :PPLANODE) AND (PLA_NOM <=:PPLANOATE)))
 AND ((:PPROJETODE IS NULL) OR ((PROJ_NOM >= :PPROJETODE) AND (PROJ_NOM <=:PPROJETOATE)))

 AND ((:PDATADE IS NULL) OR ((DOB_EMI >= :PDATADE) AND (DOB_EMI <= :PDATAATE)))
 AND ((:PSTATUSPROJ IS NULL) OR (PROJ_STATUS = :PSTATUSPROJ))

 GROUP BY PROJ_COD, PROJ2_COD, PROJ_NOM, PROJ_STATUS, PROJ2_STATUS, PROJ2_NOM, PROJ2_ORCAM, PLA_NOM

 UNION ALL

 SELECT PROJ_COD, PROJ2_COD, PROJ_NOM,
 CASE PROJ_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ_STATUS,
 CASE PROJ2_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ2_STATUS,
 SUM(REC_VAL), PROJ2_NOM, PROJ2_ORCAM, PLA_NOM
 FROM MVCOREC INNER JOIN CDPLA ON CDPLA.PLA_COD = MVCOREC.REC_PLA
 LEFT JOIN CDPROJ2 ON CDPROJ2.PROJ2_COD = MVCOREC.REC_PROJ2
 LEFT JOIN CDPROJ ON CDPROJ2.PROJ2_PROJ = CDPROJ.PROJ_COD

 WHERE PROJ_COD IS NOT NULL

 AND ((:PPLANODE IS NULL) OR ((PLA_NOM >= :PPLANODE) AND (PLA_NOM <=:PPLANOATE)))
 AND ((:PPROJETODE IS NULL) OR ((PROJ_NOM >= :PPROJETODE) AND (PROJ_NOM <=:PPROJETOATE)))

 AND ((:PDATADE IS NULL) OR ((REC_EMI >= :PDATADE) AND (REC_EMI <= :PDATAATE)))
 AND ((:PSTATUSPROJ IS NULL) OR (PROJ_STATUS = :PSTATUSPROJ))

 GROUP BY PROJ_COD, PROJ2_COD, PROJ_NOM, PROJ_STATUS, PROJ2_STATUS, PROJ2_NOM, PROJ2_ORCAM, PLA_NOM

 UNION ALL

 SELECT PROJ_COD, PROJ2_COD, PROJ_NOM,
 CASE PROJ_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ_STATUS,
 CASE PROJ2_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ2_STATUS,
 SUM(PAG_VAL) * -1, PROJ2_NOM, PROJ2_ORCAM, PLA_NOM FROM MVCOPAG INNER JOIN CDPLA ON CDPLA.PLA_COD = MVCOPAG.PAG_PLA
 LEFT JOIN CDPROJ2 ON CDPROJ2.PROJ2_COD = MVCOPAG.PAG_PROJ2
 LEFT JOIN CDPROJ ON CDPROJ2.PROJ2_PROJ = CDPROJ.PROJ_COD

 WHERE PROJ_COD IS NOT NULL

 AND ((:PPLANODE IS NULL) OR ((PLA_NOM >= :PPLANODE) AND (PLA_NOM <=:PPLANOATE)))
 AND ((:PPROJETODE IS NULL) OR ((PROJ_NOM >= :PPROJETODE) AND (PROJ_NOM <=:PPROJETOATE)))

 AND ((:PDATADE IS NULL) OR ((PAG_EMI >= :PDATADE) AND (PAG_EMI <= :PDATAATE)))
 AND ((:PSTATUSPROJ IS NULL) OR (PROJ_STATUS = :PSTATUSPROJ))

 GROUP BY PROJ_COD, PROJ2_COD, PROJ_NOM, PROJ_STATUS, PROJ2_STATUS, PROJ2_NOM, PROJ2_ORCAM, PLA_NOM
 ORDER BY 3, 5

 INTO WPROJ_COD, WPROJ2_COD, WPROJ_NOM, WPROJ_STATUS, WPROJ2_STATUS, WVALOR, WPROJ2_NOM, WPROJ2_ORCAM, WPLA_NOM DO
 BEGIN

 IF (PMODELO = 'RESUMIDO') THEN
 BEGIN
 IF (COALESCE(WAUX_PROJ_NOM, '') <> WPROJ_NOM) THEN
 BEGIN
 RTOTAL =:WSOMA;
 RPROJETO =:WAUX_PROJ_NOM;
 RPLANODECONTAS = '';
 RETAPA = '';
 RCODIGOPROJ =: WAUX_PROJ_COD;
 RSTATUSETAPA = '';
 RSTATUS = :WAUX_PROJ_STATUS;

 WAUX_PROJ_COD =:WPROJ_COD;
 WAUX_PROJ_NOM =:WPROJ_NOM;
 WAUX_PROJ_STATUS = :WPROJ_STATUS;
 WSOMA = 0;

 IF (RTOTAL IS NOT NULL) THEN
 BEGIN
 SELECT SUM(PROJ2_ORCAM) FROM CDPROJ2
 WHERE PROJ2_PROJ =:RCODIGOPROJ INTO RTOTALORCAM;

 IF (PHORASFUN = 'S') THEN
 BEGIN
 SELECT SUM((SELECT SUM(FUN_CUSTOHORA) FROM CDFUN F WHERE F.FUN_COD = G.FUN_COD) *
 (SELECT SUM(PROJ2_TEMPO) * 24 FROM CDPROJ2 A WHERE A.PROJ2_COD = B.PROJ2_COD))
 AS MAODEOBRA
 FROM CDFUN G LEFT JOIN CDPROJ4 ON G.FUN_COD = PROJ4_ENT
 LEFT JOIN CDPROJ2 B ON PROJ4_PROJ = PROJ2_COD
 WHERE B.PROJ2_COD IN
 (SELECT PROJ2_COD FROM CDPROJ2
 WHERE PROJ2_PROJ IN (SELECT PROJ_COD FROM CDPROJ where PROJ_COD = :RCODIGOPROJ))
 AND PROJ4_FLAG = 'F' INTO :RMAODEOBRA;
 RTOTAL = RTOTAL + COALESCE(:RMAODEOBRA, 0);
 END
 SUSPEND;
 END
 END
 IF (WVALOR IS NOT NULL) THEN
 WSOMA = WSOMA + WVALOR;


 END
 ELSE IF (PMODELO = 'ABERTO_PROJ_ETP') THEN
 BEGIN
 IF(COALESCE(WAUX_PROJ2_NOM, '') <> WPROJ2_NOM AND
 COALESCE(WAUX_PROJ_NOM, '') = WPROJ_NOM OR
 (COALESCE(WAUX_PROJ_NOM, '') <> WPROJ_NOM))
 THEN
 BEGIN
 RTOTAL =:WSOMA;
 RPROJETO =:WAUX_PROJ_NOM;
 RETAPA =:WAUX_PROJ2_NOM;
 RPLANODECONTAS = '';
 RCODIGOPROJ =:WAUX_PROJ_COD;
 RCODIGOPROJ2 =:WAUX_PROJ2_COD;
 RSTATUS =: WAUX_PROJ_STATUS;
 RSTATUSETAPA = :WAUX_PROJ2_STATUS;

 WSOMA = 0;

 IF (RTOTAL IS NOT NULL) THEN
 BEGIN
 SELECT SUM(PROJ2_ORCAM) FROM CDPROJ2
 WHERE PROJ2_COD =:RCODIGOPROJ2 INTO RTOTALORCAM;
 SUSPEND;

 IF (PHORASFUN = 'S') THEN
 BEGIN
 IF(WAUX_PROJ_NOM <> WPROJ_NOM)THEN
 BEGIN
 SELECT SUM((SELECT SUM(FUN_CUSTOHORA) FROM CDFUN F WHERE F.FUN_COD = G.FUN_COD) *
 (SELECT SUM(PROJ2_TEMPO) * 24 FROM CDPROJ2 A WHERE A.PROJ2_COD = B.PROJ2_COD))
 AS MAODEOBRA
 FROM CDFUN G LEFT JOIN CDPROJ4 ON G.FUN_COD = PROJ4_ENT
 LEFT JOIN CDPROJ2 B ON PROJ4_PROJ = PROJ2_COD
 WHERE B.PROJ2_COD = :RCODIGOPROJ2
 AND PROJ4_FLAG = 'F' INTO :RMAODEOBRA;
 RTOTAL =COALESCE(:RMAODEOBRA, 0);
 RPROJETO =:WAUX_PROJ_NOM;
 RETAPA = 'Custo de mão de obra';
 RPLANODECONTAS = '';
 RCODIGOPROJ =:WAUX_PROJ_COD;
 RCODIGOPROJ2 = NULL;
 RSTATUS = '';
 RSTATUSETAPA = '';
 SUSPEND;
 END
 END
 END
 WAUX_PROJ2_COD =:WPROJ2_COD;
 WAUX_PROJ_COD =:WPROJ_COD;
 WAUX_PROJ_NOM =:WPROJ_NOM;
 WAUX_PROJ2_NOM =:WPROJ2_NOM;
 WAUX_PROJ_STATUS = :WPROJ_STATUS;
 WAUX_PROJ2_STATUS = :WPROJ2_STATUS;
 END
 IF (WAUX_PROJ_NOM = WPROJ_NOM) THEN
 IF (WAUX_PROJ2_NOM = WPROJ2_NOM ) THEN
 IF (WVALOR IS NOT NULL) THEN
 WSOMA = WSOMA + WVALOR;

 END
 ELSE IF (PMODELO = 'ABERTO_PROJ_ETP_PCONTAS') THEN
 BEGIN
 IF (COALESCE(WAUX_PLA_NOM,'') <> WPLA_NOM OR
 COALESCE(WAUX_PROJ2_NOM, '') <> WPROJ2_NOM AND
 COALESCE(WAUX_PROJ_NOM, '') = WPROJ_NOM OR
 (COALESCE(WAUX_PROJ_NOM, '') <> WPROJ_NOM)) THEN
 BEGIN
 RTOTAL = :WSOMA;
 RPLANODECONTAS =: WAUX_PLA_NOM;
 RETAPA =: WAUX_PROJ2_NOM;
 RPROJETO =: WAUX_PROJ_NOM;
 RCODIGOPROJ =: WAUX_PROJ_COD;
 RCODIGOPROJ2 =: WAUX_PROJ2_COD;
 RSTATUS = :WAUX_PROJ_STATUS;
 RSTATUSETAPA = :WAUX_PROJ2_STATUS;

 WSOMA = 0;

 IF(RTOTAL IS NOT NULL)THEN
 BEGIN
 SELECT SUM(PROJ2_ORCAM) FROM CDPROJ2
 WHERE PROJ2_COD =:RCODIGOPROJ2 INTO RTOTALORCAM;
 SUSPEND;

 IF(PHORASFUN = 'S')THEN
 BEGIN
 IF(WAUX_PROJ_NOM <> WPROJ_NOM)THEN
 BEGIN
 SELECT SUM((SELECT SUM(FUN_CUSTOHORA) FROM CDFUN F WHERE F.FUN_COD = G.FUN_COD) *
 (SELECT SUM(PROJ2_TEMPO) * 24 FROM CDPROJ2 A WHERE A.PROJ2_COD = B.PROJ2_COD))
 AS MAODEOBRA
 FROM CDFUN G LEFT JOIN CDPROJ4 ON G.FUN_COD = PROJ4_ENT
 LEFT JOIN CDPROJ2 B ON PROJ4_PROJ = PROJ2_COD
 WHERE B.PROJ2_COD = :RCODIGOPROJ2
 AND PROJ4_FLAG = 'F' INTO :RMAODEOBRA;

 RTOTAL = :RMAODEOBRA;
 RPLANODECONTAS = '';
 RETAPA = 'Custos de mão de obra';
 RPROJETO = :WAUX_PROJ_NOM;
 RCODIGOPROJ = :WAUX_PROJ_COD;
 RCODIGOPROJ2 = NULL;
 RSTATUS = '';
 RSTATUSETAPA = '';
 SUSPEND;
 END
 END
 END
 WAUX_PROJ2_COD =: WPROJ2_COD;
 WAUX_PROJ_COD =: WPROJ_COD;
 WAUX_PLA_NOM = WPLA_NOM;
 WAUX_PROJ2_NOM = WPROJ2_NOM;
 WAUX_PROJ_NOM = WPROJ_NOM;
 WAUX_PROJ_STATUS = :WPROJ_STATUS;
 WAUX_PROJ2_STATUS = :WPROJ2_STATUS;
 END

 IF (WAUX_PROJ_NOM = WPROJ_NOM) THEN
 IF (WAUX_PROJ2_NOM = WPROJ2_NOM) THEN
 IF (WAUX_PLA_NOM = WPLA_NOM) THEN
 IF (WVALOR IS NOT NULL) THEN
 WSOMA = WSOMA + WVALOR;
 END
 END
 END
 ELSE IF (PFLAG = 'OPE') THEN
 BEGIN
 FOR
 SELECT PROJ_COD, PROJ2_COD, PROJ_NOM,
 CASE PROJ_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ_STATUS,
 CASE PROJ2_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ2_STATUS,
 SUM(LGE_VAL), PROJ2_NOM, PROJ2_ORCAM, PLA_NOM
 FROM MVLGE INNER JOIN CDPLA ON CDPLA.PLA_COD = MVLGE.LGE_PLA
 LEFT JOIN CDPROJ2 ON CDPROJ2.PROJ2_COD = MVLGE.LGE_PROJ2
 LEFT JOIN CDPROJ ON CDPROJ2.PROJ2_PROJ = CDPROJ.PROJ_COD

 WHERE LGE_PLA <> '1' AND
 LGE_PLA <> '2' AND
 PROJ_COD IS NOT NULL

 AND ((:PPLANODE IS NULL) OR ((PLA_NOM >= :PPLANODE) AND (PLA_NOM <=:PPLANOATE)))
 AND ((:PPROJETODE IS NULL) OR ((PROJ_NOM >= :PPROJETODE) AND (PROJ_NOM <=:PPROJETOATE)))

 AND ((:PDATADE IS NULL) OR ((LGE_EMI >= :PDATADE) AND (LGE_EMI <= :PDATAATE)))
 AND ((:PSTATUSPROJ IS NULL) OR (PROJ_STATUS = :PSTATUSPROJ))

 GROUP BY PROJ_COD, PROJ2_COD, PROJ_NOM, PROJ_STATUS, PROJ2_STATUS, PROJ2_NOM, PROJ2_ORCAM, PLA_NOM

 UNION ALL

 SELECT PROJ_COD, PROJ2_COD, PROJ_NOM,
 CASE PROJ_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ_STATUS,
 CASE PROJ2_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ2_STATUS,
 SUM(DOB_VAL), PROJ2_NOM, PROJ2_ORCAM, PLA_NOM
 FROM MVLGED INNER JOIN CDPLA ON CDPLA.PLA_COD = MVLGED.DOB_PLA
 LEFT JOIN CDPROJ2 ON CDPROJ2.PROJ2_COD = MVLGED.DOB_PROJ2
 LEFT JOIN CDPROJ ON CDPROJ2.PROJ2_PROJ = CDPROJ.PROJ_COD

 WHERE PROJ_COD IS NOT NULL

 AND ((:PPLANODE IS NULL) OR ((PLA_NOM >= :PPLANODE) AND (PLA_NOM <=:PPLANOATE)))
 AND ((:PPROJETODE IS NULL) OR ((PROJ_NOM >= :PPROJETODE) AND (PROJ_NOM <=:PPROJETOATE)))

 AND ((:PDATADE IS NULL) OR ((DOB_EMI >= :PDATADE) AND (DOB_EMI <= :PDATAATE)))
 AND ((:PSTATUSPROJ IS NULL) OR (PROJ_STATUS = :PSTATUSPROJ))

 GROUP BY PROJ_COD, PROJ2_COD, PROJ_NOM, PROJ_STATUS, PROJ2_STATUS, PROJ2_NOM, PROJ2_ORCAM, PLA_NOM

 UNION ALL

 SELECT PROJ_COD, PROJ2_COD, PROJ_NOM,
 CASE PROJ_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ_STATUS,
 CASE PROJ2_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ2_STATUS,
 SUM(LGE_VAL), PROJ2_NOM, PROJ2_ORCAM, PLA_NOM
 FROM MORLGE INNER JOIN CDPLA ON CDPLA.PLA_COD = MORLGE.LGE_PLA
 LEFT JOIN CDPROJ2 ON CDPROJ2.PROJ2_COD = MORLGE.LGE_PROJ2
 LEFT JOIN CDPROJ ON CDPROJ2.PROJ2_PROJ = CDPROJ.PROJ_COD

 WHERE LGE_PLA <> '1' AND
 LGE_PLA <> '2' AND
 PROJ_COD IS NOT NULL

 AND ((:PPLANODE IS NULL) OR ((PLA_NOM >= :PPLANODE) AND (PLA_NOM <=:PPLANOATE)))
 AND ((:PPROJETODE IS NULL) OR ((PROJ_NOM >= :PPROJETODE) AND (PROJ_NOM <=:PPROJETOATE)))

 AND ((:PDATADE IS NULL) OR ((LGE_EMI >= :PDATADE) AND (LGE_EMI <= :PDATAATE)))
 AND ((:PSTATUSPROJ IS NULL) OR (PROJ_STATUS = :PSTATUSPROJ))

 GROUP BY PROJ_COD, PROJ2_COD, PROJ_NOM, PROJ_STATUS, PROJ2_STATUS, PROJ2_NOM, PROJ2_ORCAM, PLA_NOM

 UNION ALL

 SELECT PROJ_COD, PROJ2_COD, PROJ_NOM,
 CASE PROJ_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ_STATUS,
 CASE PROJ2_STATUS
 WHEN 'C' THEN 'CANCELADO'
 WHEN 'F' THEN 'FINALIZADO'
 WHEN 'A' THEN 'EM ANDAMENTO'
 ELSE 'ELABORANDO' END PROJ2_STATUS,
 SUM(DOB_VAL), PROJ2_NOM, PROJ2_ORCAM, PLA_NOM
 FROM MORLGED INNER JOIN CDPLA ON CDPLA.PLA_COD = MORLGED.DOB_PLA
 LEFT JOIN CDPROJ2 ON CDPROJ2.PROJ2_COD = MORLGED.DOB_PROJ2
 LEFT JOIN CDPROJ ON CDPROJ2.PROJ2_PROJ = CDPROJ.PROJ_COD

 WHERE PROJ_COD IS NOT NULL

 AND ((:PPLANODE IS NULL) OR ((PLA_NOM >= :PPLANODE) AND (PLA_NOM <=:PPLANOATE)))
 AND ((:PPROJETODE IS NULL) OR ((PROJ_NOM >= :PPROJETODE) AND (PROJ_NOM <=:PPROJETOATE)))

 AND ((:PDATADE IS NULL) OR ((DOB_EMI >= :PDATADE) AND (DOB_EMI <= :PDATAATE)))
 AND ((:PSTATUSPROJ IS NULL) OR (PROJ_STATUS = :PSTATUSPROJ))

 GROUP BY PROJ_COD, PROJ2_COD, PROJ_NOM, PROJ_STATUS, PROJ2_STATUS, PROJ2_NOM, PROJ2_ORCAM, PLA_NOM
 ORDER BY 3, 5

 INTO WPROJ_COD, WPROJ2_COD, WPROJ_NOM, WPROJ_STATUS, WPROJ2_STATUS, WVALOR, WPROJ2_NOM, WPROJ2_ORCAM, WPLA_NOM DO

 BEGIN

 IF (PMODELO = 'RESUMIDO') THEN
 BEGIN
 IF (COALESCE(WAUX_PROJ_NOM, '') <> WPROJ_NOM) THEN
 BEGIN
 RTOTAL =:WSOMA;
 RPROJETO =:WAUX_PROJ_NOM;
 RPLANODECONTAS = '';
 RETAPA = '';
 RCODIGOPROJ =: WAUX_PROJ_COD;
 RSTATUSETAPA = '';
 RSTATUS = :WAUX_PROJ_STATUS;

 WAUX_PROJ_COD =:WPROJ_COD;
 WAUX_PROJ_NOM =:WPROJ_NOM;
 WAUX_PROJ_STATUS = :WPROJ_STATUS;
 WSOMA = 0;

 IF (RTOTAL IS NOT NULL) THEN
 BEGIN
 SELECT SUM(PROJ2_ORCAM) FROM CDPROJ2
 WHERE PROJ2_PROJ =:RCODIGOPROJ INTO RTOTALORCAM;

 IF (PHORASFUN = 'S') THEN
 BEGIN
 SELECT SUM((SELECT SUM(FUN_CUSTOHORA) FROM CDFUN F WHERE F.FUN_COD = G.FUN_COD) *
 (SELECT SUM(PROJ2_TEMPO) * 24 FROM CDPROJ2 A WHERE A.PROJ2_COD = B.PROJ2_COD))
 AS MAODEOBRA
 FROM CDFUN G LEFT JOIN CDPROJ4 ON G.FUN_COD = PROJ4_ENT
 LEFT JOIN CDPROJ2 B ON PROJ4_PROJ = PROJ2_COD
 WHERE B.PROJ2_COD IN
 (SELECT PROJ2_COD FROM CDPROJ2
 WHERE PROJ2_PROJ IN (SELECT PROJ_COD FROM CDPROJ where PROJ_COD = :RCODIGOPROJ))
 AND PROJ4_FLAG = 'F' INTO :RMAODEOBRA;
 RTOTAL = RTOTAL + COALESCE(:RMAODEOBRA, 0);
 END
 SUSPEND;
 END
 END
 IF (WVALOR IS NOT NULL) THEN
 WSOMA = WSOMA + WVALOR;


 END
 ELSE IF (PMODELO = 'ABERTO_PROJ_ETP') THEN
 BEGIN
 IF(COALESCE(WAUX_PROJ2_NOM, '') <> WPROJ2_NOM AND
 COALESCE(WAUX_PROJ_NOM, '') = WPROJ_NOM OR
 (COALESCE(WAUX_PROJ_NOM, '') <> WPROJ_NOM))
 THEN
 BEGIN
 RTOTAL =:WSOMA;
 RPROJETO =:WAUX_PROJ_NOM;
 RETAPA =:WAUX_PROJ2_NOM;
 RPLANODECONTAS = '';
 RCODIGOPROJ =:WAUX_PROJ_COD;
 RCODIGOPROJ2 =:WAUX_PROJ2_COD;
 RSTATUS = :WAUX_PROJ_STATUS;
 RSTATUSETAPA = :WAUX_PROJ2_STATUS;

 WSOMA = 0;

 IF (RTOTAL IS NOT NULL) THEN
 BEGIN
 SELECT SUM(PROJ2_ORCAM) FROM CDPROJ2
 WHERE PROJ2_COD =:RCODIGOPROJ2 INTO RTOTALORCAM;
 SUSPEND;

 IF (PHORASFUN = 'S') THEN
 BEGIN
 IF(WAUX_PROJ_NOM <> WPROJ_NOM)THEN
 BEGIN
 SELECT SUM((SELECT SUM(FUN_CUSTOHORA) FROM CDFUN F WHERE F.FUN_COD = G.FUN_COD) *
 (SELECT SUM(PROJ2_TEMPO) * 24 FROM CDPROJ2 A WHERE A.PROJ2_COD = B.PROJ2_COD))
 AS MAODEOBRA
 FROM CDFUN G LEFT JOIN CDPROJ4 ON G.FUN_COD = PROJ4_ENT
 LEFT JOIN CDPROJ2 B ON PROJ4_PROJ = PROJ2_COD
 WHERE B.PROJ2_COD = :RCODIGOPROJ2
 AND PROJ4_FLAG = 'F' INTO :RMAODEOBRA;
 RTOTAL =COALESCE(:RMAODEOBRA, 0);
 RPROJETO =:WAUX_PROJ_NOM;
 RETAPA = 'Custo de mão de obra';
 RPLANODECONTAS = '';
 RCODIGOPROJ =:WAUX_PROJ_COD;
 RCODIGOPROJ2 = NULL;
 RSTATUS = '';
 RSTATUSETAPA = '';
 SUSPEND;
 END
 END
 END
 WAUX_PROJ2_COD =:WPROJ2_COD;
 WAUX_PROJ_COD =:WPROJ_COD;
 WAUX_PROJ_NOM =:WPROJ_NOM;
 WAUX_PROJ2_NOM =:WPROJ2_NOM;
 WAUX_PROJ_STATUS = :WPROJ_STATUS;
 WAUX_PROJ2_STATUS = :WPROJ2_STATUS;

 END
 IF (WAUX_PROJ_NOM = WPROJ_NOM) THEN
 IF (WAUX_PROJ2_NOM = WPROJ2_NOM ) THEN
 IF (WVALOR IS NOT NULL) THEN
 WSOMA = WSOMA + WVALOR;

 END
 ELSE IF (PMODELO = 'ABERTO_PROJ_ETP_PCONTAS') THEN
 BEGIN
 IF (COALESCE(WAUX_PLA_NOM,'') <> WPLA_NOM OR
 COALESCE(WAUX_PROJ2_NOM, '') <> WPROJ2_NOM AND
 COALESCE(WAUX_PROJ_NOM, '') = WPROJ_NOM OR
 (COALESCE(WAUX_PROJ_NOM, '') <> WPROJ_NOM)) THEN
 BEGIN
 RTOTAL = :WSOMA;
 RPLANODECONTAS =: WAUX_PLA_NOM;
 RETAPA =: WAUX_PROJ2_NOM;
 RPROJETO =: WAUX_PROJ_NOM;
 RCODIGOPROJ =: WAUX_PROJ_COD;
 RCODIGOPROJ2 =: WAUX_PROJ2_COD;
 RSTATUS = :WAUX_PROJ_STATUS;
 RSTATUSETAPA = :WAUX_PROJ2_STATUS;


 WSOMA = 0;

 IF(RTOTAL IS NOT NULL)THEN
 BEGIN
 SELECT SUM(PROJ2_ORCAM) FROM CDPROJ2
 WHERE PROJ2_COD =:RCODIGOPROJ2 INTO RTOTALORCAM;
 SUSPEND;

 IF(PHORASFUN = 'S')THEN
 BEGIN
 IF(WAUX_PROJ_NOM <> WPROJ_NOM)THEN
 BEGIN
 SELECT SUM((SELECT SUM(FUN_CUSTOHORA) FROM CDFUN F WHERE F.FUN_COD = G.FUN_COD) *
 (SELECT SUM(PROJ2_TEMPO) * 24 FROM CDPROJ2 A WHERE A.PROJ2_COD = B.PROJ2_COD))
 AS MAODEOBRA
 FROM CDFUN G LEFT JOIN CDPROJ4 ON G.FUN_COD = PROJ4_ENT
 LEFT JOIN CDPROJ2 B ON PROJ4_PROJ = PROJ2_COD
 WHERE B.PROJ2_COD = :RCODIGOPROJ2
 AND PROJ4_FLAG = 'F' INTO :RMAODEOBRA;

 RTOTAL = :RMAODEOBRA;
 RPLANODECONTAS = '';
 RETAPA = 'Custos de mão de obra';
 RPROJETO = :WAUX_PROJ_NOM;
 RCODIGOPROJ = :WAUX_PROJ_COD;
 RCODIGOPROJ2 = NULL;
 RSTATUS = '';
 RSTATUSETAPA = '';
 SUSPEND;
 END
 END

 END
 WAUX_PROJ2_COD =: WPROJ2_COD;
 WAUX_PROJ_COD =: WPROJ_COD;
 WAUX_PLA_NOM = WPLA_NOM;
 WAUX_PROJ2_NOM = WPROJ2_NOM;
 WAUX_PROJ_NOM = WPROJ_NOM;
 WAUX_PROJ_STATUS = :WPROJ_STATUS;
 WAUX_PROJ2_STATUS = :WPROJ2_STATUS;
 END
 IF (WAUX_PROJ_NOM = WPROJ_NOM) THEN
 IF (WAUX_PROJ2_NOM = WPROJ2_NOM) THEN
 IF (WAUX_PLA_NOM = WPLA_NOM) THEN
 IF (WVALOR IS NOT NULL) THEN
 WSOMA = WSOMA + WVALOR;
 END
 END
 END

 IF (PMODELO = 'RESUMIDO') THEN
 BEGIN
 RTOTAL =:WSOMA;
 RPROJETO =:WAUX_PROJ_NOM;
 RPLANODECONTAS = '';
 RETAPA = '';
 RCODIGOPROJ =: WAUX_PROJ_COD;
 RSTATUSETAPA = '';
 RSTATUS = :WAUX_PROJ_STATUS;

 IF (RTOTAL IS NOT NULL) THEN
 BEGIN
 SELECT SUM(PROJ2_ORCAM) FROM CDPROJ2
 WHERE PROJ2_PROJ =:RCODIGOPROJ INTO RTOTALORCAM;

 IF (PHORASFUN = 'S') THEN
 BEGIN
 SELECT SUM((SELECT SUM(FUN_CUSTOHORA) FROM CDFUN F WHERE F.FUN_COD = G.FUN_COD) *
 (SELECT SUM(PROJ2_TEMPO) * 24 FROM CDPROJ2 A WHERE A.PROJ2_COD = B.PROJ2_COD))
 AS MAODEOBRA
 FROM CDFUN G LEFT JOIN CDPROJ4 ON G.FUN_COD = PROJ4_ENT
 LEFT JOIN CDPROJ2 B ON PROJ4_PROJ = PROJ2_COD
 WHERE B.PROJ2_COD IN
 (SELECT PROJ2_COD FROM CDPROJ2
 WHERE PROJ2_PROJ IN (SELECT PROJ_COD FROM CDPROJ where PROJ_COD = :RCODIGOPROJ))
 AND PROJ4_FLAG = 'F' INTO :RMAODEOBRA;
 RTOTAL = RTOTAL + COALESCE(:RMAODEOBRA, 0);
 END
 SUSPEND;
 END
 END
 ELSE IF (PMODELO = 'ABERTO_PROJ_ETP') THEN
 BEGIN
 RTOTAL =:WSOMA;
 RPROJETO =:WAUX_PROJ_NOM;
 RETAPA =:WAUX_PROJ2_NOM;
 RPLANODECONTAS = '';
 RCODIGOPROJ =:WAUX_PROJ_COD;
 RCODIGOPROJ2 =:WAUX_PROJ2_COD;
 RSTATUS = :WAUX_PROJ_STATUS;
 RSTATUSETAPA =: WAUX_PROJ2_STATUS;

 IF (RTOTAL IS NOT NULL) THEN
 BEGIN
 SELECT SUM(PROJ2_ORCAM) FROM CDPROJ2
 WHERE PROJ2_COD =:RCODIGOPROJ2 INTO RTOTALORCAM;
 SUSPEND;

 IF (PHORASFUN = 'S') THEN
 BEGIN
 IF(WAUX_PROJ_NOM <> WPROJ_NOM)THEN
 BEGIN
 SELECT SUM((SELECT SUM(FUN_CUSTOHORA) FROM CDFUN F WHERE F.FUN_COD = G.FUN_COD) *
 (SELECT SUM(PROJ2_TEMPO) * 24 FROM CDPROJ2 A WHERE A.PROJ2_COD = B.PROJ2_COD))
 AS MAODEOBRA
 FROM CDFUN G LEFT JOIN CDPROJ4 ON G.FUN_COD = PROJ4_ENT
 LEFT JOIN CDPROJ2 B ON PROJ4_PROJ = PROJ2_COD
 WHERE B.PROJ2_COD = :RCODIGOPROJ2
 AND PROJ4_FLAG = 'F' INTO :RMAODEOBRA;
 RTOTAL =COALESCE(:RMAODEOBRA, 0);
 RPROJETO =:WAUX_PROJ_NOM;
 RETAPA = 'Custo de mão de obra';
 RPLANODECONTAS = '';
 RCODIGOPROJ =:WAUX_PROJ_COD;
 RCODIGOPROJ2 = NULL;
 RSTATUS = '';
 RSTATUSETAPA = '';
 SUSPEND;
 END
 END
 END

 END
 ELSE IF (PMODELO = 'ABERTO_PROJ_ETP_PCONTAS') THEN
 BEGIN
 RTOTAL = :WSOMA;
 RPLANODECONTAS =: WAUX_PLA_NOM;
 RETAPA =: WAUX_PROJ2_NOM;
 RPROJETO =: WAUX_PROJ_NOM;
 RCODIGOPROJ =: WAUX_PROJ_COD;
 RCODIGOPROJ2 =: WAUX_PROJ2_COD;
 RSTATUS = :WAUX_PROJ_STATUS;
 RSTATUSETAPA =: WAUX_PROJ2_STATUS;

 IF(RTOTAL IS NOT NULL)THEN
 BEGIN
 SELECT SUM(PROJ2_ORCAM) FROM CDPROJ2
 WHERE PROJ2_COD =:RCODIGOPROJ2 INTO RTOTALORCAM;
 SUSPEND;

 IF(PHORASFUN = 'S')THEN
 BEGIN
 SELECT SUM((SELECT SUM(FUN_CUSTOHORA) FROM CDFUN F WHERE F.FUN_COD = G.FUN_COD) *
 (SELECT SUM(PROJ2_TEMPO) * 24 FROM CDPROJ2 A WHERE A.PROJ2_COD = B.PROJ2_COD))
 AS MAODEOBRA
 FROM CDFUN G LEFT JOIN CDPROJ4 ON G.FUN_COD = PROJ4_ENT
 LEFT JOIN CDPROJ2 B ON PROJ4_PROJ = PROJ2_COD
 WHERE B.PROJ2_COD = :RCODIGOPROJ2
 AND PROJ4_FLAG = 'F' INTO :RMAODEOBRA;

 RTOTAL = :RMAODEOBRA;
 RPLANODECONTAS = '';
 RETAPA = 'Custos de mão de obra';
 RPROJETO = :WAUX_PROJ_NOM;
 RCODIGOPROJ = :WAUX_PROJ_COD;
 RCODIGOPROJ2 = NULL;
 RSTATUS = '';
 RSTATUSETAPA = '';
 SUSPEND;
 END
 END
 END

 END

 COMMIT;

 CREATE OR ALTER VIEW TRANSFERENCIAS(
  VD1_COD_ORI,
    VD1_ALM_ORI,
    VD1_CAD_ORI,
    VD1_COD_DES,
    VD1_ALM_DES,
    VD1_CAD_DES,
    VD1_TRA_ORI,
    VD1_TRA_DES,
    TRA_NOM_ORI,
    TRA_NOM_DES,
    ALM_FANT_ORI,
    ALM_FANT_DES,
    STAT_ORI,
    STAT_DES,
    VD1_NOT_ORI,
    VD1_NOT_DES,
    STATUS_ORI,
    STATUS_DES)
AS
SELECT A.VD1_COD, A.VD1_ALM, A.VD1_CAD, A.VD1_FILHO, B.VD1_ALM, B.VD1_CAD,
 A.VD1_TRA, B.VD1_TRA,
 (SELECT TRA_NOM FROM CDTRA1 WHERE TRA_COD=A.VD1_TRA),
 (SELECT TRA_NOM FROM CDTRA1 WHERE TRA_COD=B.VD1_TRA),
 (SELECT ALM_FANT FROM CDALM WHERE ALM_COD=A.VD1_ALM),
 (SELECT ALM_FANT FROM CDALM WHERE ALM_COD=B.VD1_ALM),
 A.VD1_CANC,B.VD1_CANC, A.VD1_NOT,B.VD1_NOT,A.STATUS,B.STATUS
 FROM ESTMVVD1 A, ESTMVVD1 B, CDTRA1
 WHERE TRA_TIP_TRA='TRS' AND A.VD1_TRA=TRA_COD AND B.VD1_COD=A.VD1_FILHO;

 COMMIT;

 CREATE OR ALTER VIEW AGENDA(
  CON_NOM,
    CON_RED,
    CON_CEP,
    CON_LOG,
    CON_END,
    CON_NUM,
    CON_BAI,
    CON_COP,
    CON_CGC,
    CON_EMA,
    CON_WWW,
    IES,
    DAT_CAD,
    DAT_ATU,
    CON,
    CON_COD,
    CON_CID,
    CON_EST,
    CON_FIS,
    TELEFONE,
    RAMAL,
    ATIVO)
AS
Select con_RED, con_red, con_cep, con_log,
 con_end, con_num, con_bai, Cast(con_cop as Varchar(30)) AS CON_COP,
 con_cgc, con_ema, con_www, Cast(con_ies as Varchar(19)) AS IES,
 dat_cad, dat_atu , 'CON' AS CON , con_cod,
 con_cid, con_est, con_fis, con_tel AS TELEFONE,
 CAST(' ' as VARCHAR(10)) AS RAMAL, ATIVO
 From cdcont
 Where con_pub = 'T'
 Union All
 Select cli_RED, cli_red, cli_cep, cli_log,
 cli_end, cli_num, cli_bai, cli_cop AS CON_COP,
 cli_cpf, cli_ema, cli_www, cli_rg AS IES,
 dat_cad, dat_atu, 'CLI' AS CON , cli_cod,
 cli_cid, cli_est, cli_fis, cli_tel AS TELEFONE,
 CAST(' ' as VARCHAR(10)) AS RAMAL, ATIVO
 From cdcli
 Union All
 Select for_RED, for_red, for_cep, for_log,
 for_end, for_num, for_bai, Cast(for_cop as Varchar(30)) AS CON_COP,
 for_cgc, for_ema, for_www, Cast(for_ies as Varchar(19)) AS IES,
 dat_cad, dat_atu, 'FOR' AS CON , for_cod ,
 for_cid, for_est, for_fis, for_tel AS TELEFONE,
 CAST(' ' as VARCHAR(10)) AS RAMAL, ATIVO
 From cdfor
 Union All
 Select rep_RED, rep_red, rep_cep, rep_log,
 rep_end, rep_num, rep_bai, Cast(rep_cop as Varchar(30)) AS CON_COP,
 rep_cgc, rep_ema, rep_www, Cast(rep_ies as Varchar(19)) AS IES,
 dat_cad, dat_atu, 'REP' AS CON , rep_cod ,
 rep_cid, rep_est, rep_fis, rep_tel AS TELEFONE,
 CAST(' ' as VARCHAR(10)) AS RAMAL, ATIVO
 From cdrep
 Union All
 Select Cast(fun_nom as Varchar(75)), fun_red, fun_cep, fun_log,
 fun_end, fun_num, fun_bai, Cast(fun_cop as Varchar(30)) AS fun_COP,
 fun_cpf, fun_ema, fun_www, fun_rg AS IES,
 dat_cad, dat_atu, 'FUN' AS CON , fun_cod,
 fun_cid, fun_est, fun_ven, fun_tel AS TELEFONE, FUN_RAMAL, ATIVO
 from cdfun
 Union All
 Select Cast(trs_nom as Varchar(75)),trs_red, trs_cep, trs_log,
 trs_end, Cast(trs_num as Varchar(10)), trs_bai, Cast(trs_cop as Varchar(30)) AS trs_COP,
 trs_cgc, trs_ema, trs_www, Cast(trs_ies as Varchar(19)) AS IES,
 dat_cad, dat_atu, 'TRS' AS CON , trs_cod,
 trs_cid, trs_est, ativo as cli_fis, trs_te1 AS TELEFONE,
 CAST(' ' as VARCHAR(10)) AS RAMAL, ATIVO
 from cdtrs;

 commit;

ALTER PROCEDURE DAYOFWEEK (
    ADATE TIMESTAMP)
RETURNS ( 
    RESULT INTEGER)
 AS
DECLARE VARIABLE Elapsed INTEGER;
BEGIN
  EXECUTE PROCEDURE ElapsedDays('1.1.96', ADate) RETURNING_VALUES Elapsed;
  EXECUTE PROCEDURE Modulus(Elapsed, 7) RETURNING_VALUES Result;
END

COMMIT;

ALTER PROCEDURE ESPIAOVD1 
RETURNS ( 
    ITEM VARCHAR(13),
    PROXIMO VARCHAR(13),
    ALM_COD VARCHAR(3),
    SALTO DOUBLE PRECISION,
    VD1_COD VARCHAR(16),
    VD1_CAD TIMESTAMP)
 AS
BEGIN
 FOR
 SELECT
 SUBSTRING( VD1_COD FROM 1 FOR 10 ),
 Cast((SELECT RESULT FROM COMPLETA_STRING(estmvvd1.VD1_ALM_DIGITA,'0',3,-1)) as varchar(3)), VD1_CAD
 FROM estmvvd1 WHERE VD1_ALM_DIGITA IS NOT NULL ORDER BY 2,1
 INTO :PROXIMO, :ALM_COD, :VD1_CAD
 DO
 BEGIN
 
 IF( (ITEM IS NOT NULL) AND (PROXIMO IS NOT NULL) AND
 (CAST(PROXIMO AS DOUBLE PRECISION) > CAST(ITEM AS DOUBLE PRECISION)) ) THEN
 BEGIN
 
 SALTO = CAST((CAST(PROXIMO AS DOUBLE PRECISION) - CAST(ITEM AS DOUBLE PRECISION)) AS INTEGER);
 
 IF ( SALTO > 1 ) THEN
 SUSPEND;
 END
 
 ITEM = PROXIMO;
 VD1_COD = ITEM || ALM_COD;
 
 END
 END

 COMMIT;

 ALTER PROCEDURE LEFTTRIM (
    TEXTO VARCHAR(100))
RETURNS ( 
    RESULT VARCHAR(100))
 AS
begin
 while ((texto is not null) and (texto <> '') and (substring(texto from 1 for 1) = ' ')) do
 texto = substring(texto from 2 for 100);
 result = texto;
 suspend;
 end

 COMMIT;

 ALTER PROCEDURE ADD_FREQUENCIA (
    ADATE TIMESTAMP,
    FREQ VARCHAR(3))
RETURNS ( 
    RESULT TIMESTAMP)
 AS
BEGIN
 IF (FREQ='ANU') THEN
 EXECUTE PROCEDURE ADDMONTH(ADATE, 12) RETURNING_VALUES (RESULT);
 ELSE IF (FREQ='MEN') THEN
 EXECUTE PROCEDURE ADDMONTH(ADATE, 1) RETURNING_VALUES (RESULT);
 ELSE IF (FREQ='BIM') THEN
 EXECUTE PROCEDURE ADDMONTH(ADATE, 2) RETURNING_VALUES (RESULT);
 ELSE IF (FREQ='TRI') THEN
 EXECUTE PROCEDURE ADDMONTH(ADATE, 3) RETURNING_VALUES (RESULT);
 ELSE IF (FREQ='QUA') THEN
 EXECUTE PROCEDURE ADDMONTH(ADATE, 4) RETURNING_VALUES (RESULT);
 ELSE IF ( (FREQ='SEM') OR (FREQ='SMT') ) THEN
 EXECUTE PROCEDURE ADDMONTH(ADATE, 6) RETURNING_VALUES (RESULT);
 ELSE IF ((FREQ='7DI') OR (FREQ='SMA')) THEN
 RESULT = ADATE + 7;
 ELSE IF (FREQ='QUI') THEN
 RESULT = ADATE + 15;
 ELSE IF (FREQ='DIA') THEN
 RESULT = ADATE + 1;
 ELSE
 RESULT = ADATE;
 END

 COMMIT;

 ALTER PROCEDURE ATZ_PREV_PAG 
 AS
DECLARE VARIABLE WDTLIMITE DATE;
 DECLARE VARIABLE WDTEMISSAO DATE;
 DECLARE VARIABLE WDTVENC DATE;
 DECLARE VARIABLE WPARCELAS INTEGER;
 DECLARE VARIABLE WPARCELASRESTANTES INTEGER;
 DECLARE VARIABLE WMSG VARCHAR(30);
 DECLARE VARIABLE WYEAR INTEGER;
 DECLARE VARIABLE WMONTH INTEGER;
 DECLARE VARIABLE WDAY INTEGER;
 DECLARE VARIABLE WPROXNR INTEGER;
 DECLARE VARIABLE WPRE_COD INTEGER;
 DECLARE VARIABLE WPRE_FOR INTEGER;
 DECLARE VARIABLE WPRE_FRE VARCHAR(3);
 DECLARE VARIABLE WPRE_TIP INTEGER;
 DECLARE VARIABLE WPRE_PAR INTEGER;
 DECLARE VARIABLE WPRE_VAL DOUBLE PRECISION;
 DECLARE VARIABLE WPRE_CON INTEGER;
 DECLARE VARIABLE WPRE_DAT DATE;
 DECLARE VARIABLE WPRE_PLA VARCHAR(40);
 DECLARE VARIABLE WPRE_ATU DATE;
 DECLARE VARIABLE WPRE_ANT INTEGER;
 DECLARE VARIABLE WPRE_PARTOT INTEGER;
 DECLARE VARIABLE WPRE_HIS VARCHAR(60);
 DECLARE VARIABLE WPRE_CCUSTO VARCHAR(40);
 DECLARE VARIABLE WPRE_EMI DATE;
 DECLARE VARIABLE WPRE_DIA INTEGER;
 DECLARE VARIABLE WDIA_MES INTEGER;
 DECLARE VARIABLE WP_LIBER_PREV VARCHAR(1);
 DECLARE VARIABLE WPRE_CCUSTO2 INTEGER;
 DECLARE VARIABLE WPRE_PLA2 INTEGER;
 BEGIN
 FOR SELECT PRE_COD, PRE_FOR,PRE_FRE,PRE_TIP,PRE_PAR,PRE_VAL,PRE_CON,PRE_DAT,PRE_PLA,PRE_ATU,PRE_ANT,PRE_PARTOT,PRE_HIS,PRE_CCUSTO,PRE_EMI,CAST(PRE_DIA AS INTEGER),PRE_CCUSTO2,PRE_PLA2
 FROM CDPREPAG
 WHERE (PRE_ATU < 'TODAY' OR PRE_ATU IS NULL)
 AND NOT PRE_EMI IS NULL
 INTO :wPRE_COD, :wPRE_FOR,:wPRE_FRE,:wPRE_TIP,:wPRE_PAR,:wPRE_VAL,:wPRE_CON,:wPRE_DAT,:wPRE_PLA,:wPRE_ATU,:wPRE_ANT,:wPRE_PARTOT,:wPRE_HIS,:wPRE_CCUSTO,:wPRE_EMI,:wPRE_DIA,:wPRE_CCUSTO2,:wPRE_PLA2
 DO
 BEGIN
 wDTLIMITE = CAST('TODAY' AS DATE) + wPRE_ANT;
 wDTVENC = wPRE_DAT;
 wDTEMISSAO = wPRE_EMI;
 wPARCELASRESTANTES = wPRE_PAR;
 wPARCELAS = 1;
 WHILE ((wPARCELAS <= wPRE_PAR) AND (wDTLIMITE > wDTVENC)) DO
 BEGIN
 SELECT p_liber_prev FROM parametfin INTO Wp_liber_prev;
 IF (wPARCELASRESTANTES = 999) THEN
 BEGIN
 IF (Wp_liber_prev='E') THEN
 BEGIN
 EXECUTE PROCEDURE DecodeDate(wDTEMISSAO) RETURNING_VALUES(wYear, wMonth, wDay);
 END
 ELSE
 BEGIN
 EXECUTE PROCEDURE DecodeDate(wDTVENC) RETURNING_VALUES(wYear, wMonth, wDay);
 END
 IF (wPRE_FRE = 'DIA') THEN
 wMSG = CAST(wDay AS VARCHAR(2)) || '/' || CAST(wMonth AS VARCHAR(2)) || '/' || CAST(wYear AS CHAR(4));
 ELSE IF (wPRE_FRE = 'QUI') THEN
 BEGIN
 IF (wDay > 15) THEN
 wMSG = CAST(wMonth AS VARCHAR(2)) || '/' || CAST(wYear AS CHAR(4)) || '-' || 'A';
 ELSE
 wMSG = CAST(wMonth AS VARCHAR(2)) || '/' || CAST(wYear AS CHAR(4)) || '-' || 'B';
 END
 ELSE IF (wPRE_FRE = 'SMA') THEN
 BEGIN
 IF (wDay < 8) THEN
 wMSG = CAST(wMonth AS VARCHAR(2)) || '/' || CAST(wYear AS CHAR(4)) || '-' || 'A';
 ELSE IF (wDay < 15) THEN
 wMSG = CAST(wMonth AS VARCHAR(2)) || '/' || CAST(wYear AS CHAR(4)) || '-' || 'B';
 ELSE IF (wDay < 22) THEN
 wMSG = CAST(wMonth AS VARCHAR(2)) || '/' || CAST(wYear AS CHAR(4)) || '-' || 'C';
 ELSE IF (wDay < 29) THEN
 wMSG = CAST(wMonth AS VARCHAR(2)) || '/' || CAST(wYear AS CHAR(4)) || '-' || 'D';
 ELSE
 wMSG = CAST(wMonth AS VARCHAR(2)) || '/' || CAST(wYear AS CHAR(4)) || '-' || 'E';
 END
 ELSE
 wMSG = CAST(wMonth AS VARCHAR(2)) || '/' || CAST(wYear AS CHAR(4));
 END
 ELSE
 BEGIN
 wMSG = CAST( CAST(wPRE_PARTOT - wPARCELASRESTANTES + 1 AS INTEGER) AS VARCHAR(5) ) || '/' || CAST(wPRE_PARTOT AS VARCHAR(3));
 END
 IF (EXISTS(SELECT PAG_COD FROM MVCOPAG)) THEN
 SELECT MAX(PAG_COD)+1 FROM MVCOPAG INTO :wPROXNR;
 ELSE
 wPROXNR = 1;
 IF (EXISTS(SELECT TABELA FROM CODIGO WHERE UPPER(TABELA)='MVCOPAG')) THEN
 UPDATE CODIGO SET ULTIMOCODIGO = :wPROXNR WHERE UPPER(TABELA)='MVCOPAG';
 ELSE
 INSERT INTO CODIGO (TABELA, ULTIMOCODIGO) VALUES ('MVCOPAG', :wPROXNR);
 INSERT INTO MVCOPAG ( PAG_COD, PAG_DOC, PAG_CCUSTO, PAG_DAT, PAG_TIP, PAG_VEC, PAG_VAL, PAG_MOE, PAG_CON, PAG_FOR,
 PAG_EMI, PAG_OBS, PAG_BAI, PAG_TOT, PAG_DFP, PAG_CHEQUE,
 PAG_PLA, PAG_DESAGIO, DAT_CAD, DAT_ATU, ATIVO, PAG_VOG, PAG_BAIVER, PAG_CCUSTO2, PAG_PLA2)
 VALUES (:wPROXNR, :wMSG, :wPRE_CCUSTO, NULL, :wPRE_TIP,:wDTVENC,:wPRE_VAL,NULL, :wPRE_CON, :wPRE_FOR,
 :wDTEMISSAO,:wPRE_HIS,'N', NULL, 'P',NULL,
 :wPRE_PLA, NULL, 'NOW', 'NOW', 'A', :wDTVENC, 'S', :wPRE_CCUSTO2, :wPRE_PLA2);
 EXECUTE PROCEDURE ADD_FREQUENCIA ( wDTVENC, wPRE_FRE) RETURNING_VALUES :wDTVENC;
 EXECUTE PROCEDURE DecodeDate(wDTVENC) RETURNING_VALUES(wYear, wMonth, wDay);
 EXECUTE PROCEDURE DAYSOFMONTH (wYear, wMonth) RETURNING_VALUES (wDIA_MES);
 IF ((wDIA_MES >= wPRE_DIA) AND (wDay <> wPRE_DIA) AND (wPRE_FRE<>'DIA') AND (wPRE_FRE<>'QUI') AND (wPRE_FRE<>'SMA') ) THEN
 EXECUTE PROCEDURE EncodeDate(wYear, wMonth, wPRE_DIA) RETURNING_VALUES(wDTVENC);
 EXECUTE PROCEDURE ADD_FREQUENCIA ( wDTEMISSAO, wPRE_FRE) RETURNING_VALUES :wDTEMISSAO;
 IF (wPARCELASRESTANTES<>999) THEN
 wPARCELASRESTANTES = wPARCELASRESTANTES - 1;
 wPARCELAS = wPARCELAS + 1;
 END
 IF (wPARCELASRESTANTES=0) THEN
 DELETE FROM CDPREPAG WHERE PRE_COD=:wPRE_COD;
 ELSE
 UPDATE CDPREPAG SET
 PRE_DAT = :wDTVENC,
 PRE_EMI = :wDTEMISSAO,
 PRE_PAR = :wPARCELASRESTANTES,
 PRE_ATU = 'TODAY'
 WHERE PRE_COD=:wPRE_COD;
 END
 delete from mvcopag where pag_dat < '01/01/1900';
 END

 COMMIT;

 ALTER PROCEDURE APROVA_ORCAMENTO (
    PCOD VARCHAR(13),
    PALM INTEGER,
    PTRA INTEGER,
    PCODVD1 VARCHAR(13),
    PCLI INTEGER,
    PCON VARCHAR(40),
    PFOR INTEGER,
    PCAI INTEGER,
    PVEN INTEGER,
    PCOMP INTEGER,
    PREP INTEGER,
    PTRS INTEGER,
    PPREST INTEGER,
    PPGT INTEGER,
    PUSER INTEGER,
    PNOT INTEGER,
    PCODFORM INTEGER)
 AS
declare variable wmodulo varchar(3);
 declare variable wlayoutpdv varchar(3);
 declare variable wqtdvd2 double precision;
 declare variable wvd1_ven integer;
 declare variable wvd1_cai integer;
 declare variable wvd1_cli integer;
 declare variable wvd1_rep integer;
 declare variable wvd1_for integer;
 declare variable wvd1_trs integer;
 declare variable wvd1_prestser integer;
 declare variable wvd1_comp integer;
 declare variable wvd1_contato varchar(40);
 declare variable wtotliq double precision;
 declare variable wtotbru double precision;
 declare variable vvd1_not integer;
 declare variable vvd1_desc_p double precision;
 declare variable vvd1_desc_v double precision;
 declare variable vvd1_acresc double precision;
 declare variable vvd1_tipo_formulario integer;
 declare variable vvd1_obs blob sub_type 1 segment size 4096;
 declare variable vvd1_obs2 blob sub_type 1 segment size 4096;
 declare variable vvd1_obs3 blob sub_type 1 segment size 4096;
 declare variable vvd1_obs4 blob sub_type 1 segment size 4096;
 declare variable vvd1_alm_digita integer;
 declare variable vvd1_use_cad integer;
 declare variable vvd1_use_atu integer;
 declare variable vvd1_origem varchar(3);
 declare variable wdsp double precision;
 declare variable wdsv double precision;
 BEGIN

 SELECT TRA_MODULO, TRA_LAY_PDV FROM CDTRA1 WHERE TRA_COD=:PTRA INTO WMODULO, WLAYOUTPDV;

 select vd1_ven, vd1_cai, vd1_cli, vd1_rep, vd1_for,
 vd1_trs, vd1_prestser, VD1_COMP, VD1_CONTATO
 from estmvvd1 where vd1_cod=:PCOD and vd1_alm=:PALM
 INTO Wvd1_ven, Wvd1_cai, Wvd1_cli, Wvd1_rep, Wvd1_for,
 Wvd1_trs, Wvd1_prestser, WVD1_COMP, WVD1_CONTATO;

 IF (PCLI<>0) THEN
 Wvd1_cli=:PCLI;

 IF (PCON<>'') THEN
 WVD1_CONTATO=:PCON;

 IF (PFOR<>0) THEN
 Wvd1_for=:PFOR;

 IF (PCAI<>0) THEN
 Wvd1_cai=:PCAI;

 IF (PVEN <>0) THEN
 Wvd1_ven=:PVEN;

 IF (PCOMP<>0) THEN
 WVD1_COMP=:PCOMP;

 IF (PREP<>0) THEN
 Wvd1_rep=:PREP;

 IF (PTRS<>0) THEN
 Wvd1_trs=:PTRS;

 IF (PPREST<>0) THEN
 Wvd1_prestser=:PPREST;

 SELECT Sum( ((VD2_VLR*VD2_QTD) - (DESCONTOITEM/100)*(VD2_VLR*VD2_QTD)) ) , Sum( (VD2_VLR*VD2_QTD) ), SUM(VD2_QTD) FROM ESTMVVD2
 WHERE VD2_BOL=:PCOD AND VD2_ALM=:PALM AND VD2_TIPO='A'
 INTO WTOTLIQ, WTOTBRU, WQTDVD2;

 select vd1_not, vd1_desc_p, vd1_desc_v, vd1_acresc,
 vd1_tipo_formulario, vd1_obs, vd1_obs2, vd1_obs3, vd1_obs4,
 vd1_alm_digita, vd1_use_cad, vd1_use_atu, VD1_ORIGEM
 from estmvvd1 where vd1_cod=:PCOD and vd1_alm=:PALM into
 Vvd1_not, Vvd1_desc_p, Vvd1_desc_v, Vvd1_acresc,
 Vvd1_tipo_formulario, Vvd1_obs, Vvd1_obs2, Vvd1_obs3, Vvd1_obs4,
 Vvd1_alm_digita, Vvd1_use_cad, Vvd1_use_atu, VVD1_ORIGEM;

 IF ((pCodForm<>0) AND (NOT pCodForm IS NULL)) THEN
 Vvd1_tipo_formulario=pCodForm;

 select vd3_dsp, vd3_dsv from estmvvd3
 WHERE VD3_BOL=:PCOD AND VD3_ALM=:PALM AND VD3_PGT=:PPGT INTO WDSP, WDSV;

 if ((not WDSP is null) and (WDSP>0)) then
 begin
 WTOTLIQ = :WTOTLIQ - (:WTOTLIQ * (WDSP / 100));
 end

 if ((not WDSV is null) and (WDSV>0)) then
 begin
 WTOTLIQ = :WTOTLIQ - WDSV;
 end

 if(:wdsp is not null)then
 vvd1_desc_p = :wdsp;

 INSERT INTO ESTMVVD1 (
 VD1_ALM, VD1_CAD, VD1_COD, vd1_not, vd1_tra, vd1_Ven, vd1_cai, vd1_pgt,
 vd1_desc_p, vd1_desc_v, vd1_acresc, vd1_Cli, vd1_rep, vd1_for,
 vd1_trs,  VD1_QUANTIDADE, VD1_QUANTPECAS, VD1_VALOR_TOTALL,
 VD1_ORIGEM, vd1_tipo_formulario, VD1_COMP,
 VD1_TOTALB_PRODUTO, VD1_TOTALL_PRODUTO,
 VD1_TOTALB_SERVICO, VD1_TOTALL_SERVICO, VD1_QUANTSERVI,
 VD1_VALOR_FRETE, VD1_VALOR_SEGURO, VD1_OUTRAS_DESPESAS,
 vd1_obs, vd1_obs2, vd1_obs3, vd1_obs4,
 VD1_VALOR_TOTALB, VD1_TOTAL_NOTA_SEMDESCTO, vd1_canc, status,
 VD1_PRESTSER, VD1_CONTATO, vd1_alm_digita, vd1_use_cad, vd1_use_atu, vd1_atu ) VALUES (
 :PALM, CAST('TODAY' AS DATE), :PCODVD1, :pNot, :PTRA, :Wvd1_ven, :Wvd1_cai, :PPGT,
 :Vvd1_desc_p, :Vvd1_desc_v, :Vvd1_acresc, :Wvd1_cli, :Wvd1_rep, :Wvd1_for,
 :Wvd1_trs,  :WQTDVD2, :WQTDVD2, :WTOTLIQ,
 :WMODULO, :Vvd1_tipo_formulario, :WVD1_COMP,
 CASE WHEN :WLAYOUTPDV <> 'SER' THEN :WTOTBRU ELSE 0 END, CASE WHEN :WLAYOUTPDV <> 'SER' THEN :WTOTLIQ ELSE 0 END,
 CASE WHEN :WLAYOUTPDV = 'SER' THEN :WTOTBRU ELSE 0 END, CASE WHEN :WLAYOUTPDV = 'SER' THEN :WTOTLIQ ELSE 0 END, CASE WHEN :WLAYOUTPDV = 'SER' THEN :WQTDVD2 ELSE 0 END,
 0, 0, 0,
 :Vvd1_obs, :Vvd1_obs2, :Vvd1_obs3, :Vvd1_obs4,
 :WTOTBRU, :WTOTBRU, 'FN', 'FINALIZADO',
 :Wvd1_prestser, :WVD1_CONTATO, :Vvd1_alm_digita, :pUser, :pUser,
 CAST('TODAY' AS DATE));

 UPDATE ESTMVVD1 SET VD1_FILHO=:PCODVD1, VD1_CANC='AP', STATUS='APROVADO' WHERE VD1_COD=:PCOD AND VD1_ALM=:PALM;

 INSERT INTO ESTMVVD2 (vd2_cod, vd2_bol, vd2_alm, vd2_cad, vd2_pro, vd2_vlr,
 vd2_qtd, vd2_ent, vd2_cor, vd2_med, vd2_ser, vd2_item, vd2_aliquota_ipi,
 vd2_aliquota_icms, vd2_descricao, vd2_aliquota_iss, reducaobaseicms,
 descontoitem, unidade, classificacaofiscal, vd2_materia_aplicada,
 vd2_situacaotributaria, vd2_finalidade, vd2_tipo, vd2_obs1, vd2_obs2,
 vd2_obs3, vd2_obs4, vd2_unm, vd2_alt, vd2_cmp, vd2_lrg, vd2_gar, vd2_nserie,
 vd2_ambiente, vd2_obs_blob, vd2_sub_tributa)
 select
 (SELECT MAX(VD2_COD)+1 FROM ESTMVVD2), :PCODVD1, :PALM, cast('today' as date),
 vd2_pro, vd2_vlr, vd2_qtd, vd2_ent,
 vd2_cor, vd2_med, vd2_ser, vd2_item, vd2_aliquota_ipi, vd2_aliquota_icms,
 vd2_descricao, vd2_aliquota_iss, reducaobaseicms, descontoitem, unidade,
 classificacaofiscal, vd2_materia_aplicada, vd2_situacaotributaria,
 vd2_finalidade, vd2_tipo, vd2_obs1, vd2_obs2, vd2_obs3, vd2_obs4, vd2_unm,
 vd2_alt, vd2_cmp, vd2_lrg, vd2_gar, VD2_NSERIE, vd2_ambiente,
 vd2_obs_blob, vd2_sub_tributa
 from estmvvd2 WHERE VD2_BOL=:PCOD AND VD2_ALM=:PALM AND VD2_TIPO='A';

 if ((PPGT is not null) and (PPGT <> 0)) then
 begin
 INSERT INTO estmvvd3 (vd3_cod, vd3_alm, vd3_cad, vd3_bol, vd3_pgt, vd3_dsv, vd3_dsp, vd3_vlrl, vd3_item, vd3_dest)
 select (SELECT MAX(VD3_COD)+1 FROM ESTMVVD3), :PALM, cast('today' as date), :PCODVD1, :PPGT, vd3_dsv, vd3_dsp, :WTOTLIQ,
 vd3_item, vd3_dest
 from estmvvd3 WHERE VD3_BOL=:PCOD AND VD3_ALM=:PALM AND VD3_PGT=:PPGT;
 end

 INSERT INTO ESTMVVD5 (vd5_cod, vd5_bol, vd5_ent, vd5_tip, vd5_num, vd5_cop, vd5_cep, vd5_end, vd5_bai, vd5_cid, vd5_est, vd5_ref, vd5_alm, vd5_cad, vd5_nom, vd5_cnp, vd5_ies, vd5_fis, vd5_tipent, vd5_pais, vd5_prov)
 select (SELECT MAX(VD5_COD)+1 FROM ESTMVVD5), :PCODVD1, vd5_ent, vd5_tip, vd5_num, vd5_cop, vd5_cep, vd5_end,
 vd5_bai, vd5_cid, vd5_est, vd5_ref, :PALM, cast('today' as date), vd5_nom, vd5_cnp, vd5_ies,
 vd5_fis, vd5_tipent, vd5_pais, vd5_prov
 from estmvvd5 WHERE VD5_BOL=:PCOD AND VD5_ALM=:PALM;

 UPDATE CODIGO SET ULTIMOCODIGO=(SELECT MAX(VD2_COD) FROM ESTMVVD2) WHERE TABELA='ESTMVVD2';
 UPDATE CODIGO SET ULTIMOCODIGO=(SELECT MAX(VD3_COD) FROM ESTMVVD3) WHERE TABELA='ESTMVVD3';
 UPDATE CODIGO SET ULTIMOCODIGO=(SELECT MAX(VD5_COD) FROM ESTMVVD5) WHERE TABELA='ESTMVVD5';

 END

 COMMIT;

 ALTER PROCEDURE GERA_CDPROPRE (
    PPRODUTO INTEGER,
    PATIVO VARCHAR(1),
    PMARGEM DOUBLE PRECISION,
    PDESCONTO DOUBLE PRECISION,
    PVAL_DE TIMESTAMP,
    PVAL_ATE TIMESTAMP,
    PCOMISSAO DOUBLE PRECISION)
RETURNS ( 
    RESULT VARCHAR(1))
 AS
declare variable wregpropre integer;
 declare variable wregpro integer;
BEGIN
 IF ( NOT EXISTS( SELECT * FROM CDPROPRE WHERE PRO_PRO = :pPRODUTO ) ) THEN
 BEGIN
 INSERT INTO CDPROPRE( PRO_PRO, PRO_COR, PRO_MED, PRO_MARGEM_MARKUP, PRO_ULTC, PRO_CUSM, ATIVO, PRO_DESCONTO, PRO_VAL_DE, PRO_VAL_ATE, PRO_COMISSAO, DAT_ATU, DAT_CAD ) VALUES( :pPRODUTO, '', '', :pMARGEM, 0, 0, 'A', :pDESCONTO, :pVAL_DE, :pVAL_ATE, :pCOMISSAO, 'today', 'today' );
 END
 ELSE
 BEGIN
 UPDATE CDPROPRE SET PRO_MARGEM_MARKUP=:pMARGEM, ATIVO='A', PRO_DESCONTO=:pDESCONTO, PRO_VAL_DE=:pVAL_DE, PRO_VAL_ATE=:pVAL_ATE, PRO_COMISSAO=:pCOMISSAO, DAT_ATU = 'today' WHERE PRO_PRO = :pPRODUTO;
 END

 SELECT COUNT(PRO_PRO) FROM CDPROPRE INTO :wRegPropre;
 SELECT COUNT(PRO_COD) AS REGISTROS FROM CDPRO INTO :wRegPro;
 IF (wRegPropre <> wRegPro) THEN
 BEGIN
 INSERT INTO CDPROHIS(PRO_TAB,PRO_ANT,PRO_DEP,PRO_DAT,PRO_HIS) VALUES( 'CDPROPRE', :wRegPropre, (SELECT COUNT(PRO_PRO) FROM CDPROPRE), CAST('TODAY' AS DATE), 'PROCEDURE GERA_CDPROPRE' );
 INSERT INTO CDPROHIS(PRO_TAB,PRO_ANT,PRO_DEP,PRO_DAT,PRO_HIS) VALUES( 'CDPRO', :wRegPro, (SELECT COUNT(PRO_COD) FROM CDPRO), CAST('TODAY' AS DATE), 'PROCEDURE GERA_CDPROPRE' );
 END

 END

 COMMIT;

 ALTER PROCEDURE EXCLUIPRODUTOSVELHOS (
    PUSACORMEDIDA VARCHAR(1))
 AS
DECLARE VARIABLE WPRO INTEGER;
 DECLARE VARIABLE WCOR VARCHAR(3);
 DECLARE VARIABLE WMED VARCHAR(3);
 DECLARE VARIABLE WREGPROPRE INTEGER;
 DECLARE VARIABLE WREGPRO INTEGER;
 DECLARE VARIABLE WREGPROCM INTEGER;
 DECLARE VARIABLE WEXECUTAPROC VARCHAR(1);
 BEGIN

 wExecutaProc='F';

 SELECT COUNT(PRO_PRO) FROM CDPROCM INTO :wRegProcm;
 SELECT COUNT(PRO_COD) AS REGISTROS FROM CDPRO INTO :wRegPro;
 SELECT COUNT(PRO_PRO) FROM CDPROPRE INTO :wRegPropre;

 IF (PUSACORMEDIDA='S') THEN
 BEGIN
 IF (wRegPropre <> wRegProcm) THEN
 wExecutaProc = 'T';
 END
 ELSE
 BEGIN
 IF (wRegPropre <> wRegPro) THEN
 wExecutaProc = 'T';
 END

 IF (wExecutaProc = 'T') THEN
 BEGIN
 IF (PUSACORMEDIDA='S') THEN
 BEGIN
 FOR SELECT PRO_PRO, PRO_COR, PRO_MED FROM CDPROPRE INTO :WPRO, :WCOR, :WMED DO
 BEGIN
 IF ( NOT EXISTS( SELECT * FROM CDPROCM WHERE PRO_PRO = :WPRO AND PRO_COR = :WCOR AND PRO_MED = :WMED ) ) THEN
 BEGIN
 DELETE FROM CDPROPRE WHERE PRO_PRO = :WPRO AND PRO_COR = :WCOR AND PRO_MED = :WMED;
 END
 END
 END

 Delete from cdpropre Where pro_pro Not In ( Select pro_cod From cdpro );
 Delete from cdprocm Where pro_pro Not In ( Select pro_cod From cdpro );

 IF (PUSACORMEDIDA='S') THEN
 DELETE FROM CDPROPRE WHERE (PRO_COR IS NULL OR PRO_COR='') OR (PRO_MED IS NULL OR PRO_COR='');

 IF (PUSACORMEDIDA<>'S') THEN
 BEGIN
 DELETE FROM CDPROPRE WHERE PRO_PRO IN (SELECT PRO_PRO
 FROM CDPROPRE
 GROUP BY PRO_PRO
 HAVING COUNT(PRO_PRO) > 1);
 END

 INSERT INTO CDPROHIS(PRO_TAB,PRO_ANT,PRO_DEP,PRO_DAT,PRO_HIS) VALUES( 'CDPROCM', :wRegProcm, (SELECT COUNT(PRO_PRO) FROM CDPROCM), CAST('TODAY' AS DATE), 'PROCEDURE EXCLUIPRODUTOSVELHOS' );
 INSERT INTO CDPROHIS(PRO_TAB,PRO_ANT,PRO_DEP,PRO_DAT,PRO_HIS) VALUES( 'CDPROPRE', :wRegPropre, (SELECT COUNT(PRO_PRO) FROM CDPROPRE), CAST('TODAY' AS DATE), 'PROCEDURE EXCLUIPRODUTOSVELHOS' );
 INSERT INTO CDPROHIS(PRO_TAB,PRO_ANT,PRO_DEP,PRO_DAT,PRO_HIS) VALUES( 'CDPRO', :wRegPro, (SELECT COUNT(PRO_COD) FROM CDPRO), CAST('TODAY' AS DATE), 'PROCEDURE EXCLUIPRODUTOSVELHOS' );

 END
 END

 COMMIT;

 ALTER PROCEDURE REFAZCDPROPRE (
    PUSACORMEDIDA VARCHAR(1))
 AS
BEGIN
 IF (PUSACORMEDIDA='S') THEN
 BEGIN
 Insert Into cdpropre ( pro_pro, PRO_MARGEM_MARKUP ,pro_cor ,pro_med ,ativo, DAT_ATU, DAT_CAD)
 Select cdpro.pro_cod, cdpro.PRO_MARGEM_MARKUP
 ,cdprocm.pro_cor, cdprocm.pro_med, cdprocm.ativo, 'today', 'today'
 From cdpro, cdprocm
 Where cdpro.pro_cod <> 0
 and cdprocm.pro_pro = cdpro.pro_cod
 and not exists( select * from cdpropre where cdpropre.pro_pro=cdpro.pro_cod
 and cdpropre.pro_cor=cdprocm.pro_cor
 and cdpropre.pro_med=cdprocm.pro_med)
 and (pro_cor<>'' and pro_med<>'');
 END
 ELSE
 BEGIN
 Insert Into cdpropre ( pro_pro, PRO_MARGEM_MARKUP,ativo, DAT_ATU, DAT_CAD, pro_cor, pro_med)
 Select cdpro.pro_cod, cdpro.PRO_MARGEM_MARKUP,'A', 'today', 'today', '',''
 From cdpro Where cdpro.pro_cod <> 0
 and not exists( select * from cdpropre where cdpropre.pro_pro=cdpro.pro_cod);
 END
 END

 COMMIT;

 ALTER PROCEDURE BALANCETE_MES_A_MES (
    PPLANO VARCHAR(40),
    PPROJETO VARCHAR(60),
    PFORNECATE VARCHAR(75),
    PFORNECDE VARCHAR(75),
    PCLIENTEATE VARCHAR(75),
    PCLIENTEDE VARCHAR(75),
    PCONTADE VARCHAR(30),
    PCONTAATE VARCHAR(30),
    PCCUSTODE VARCHAR(40),
    PCCUSTOATE VARCHAR(40),
    PDATAINI TIMESTAMP,
    PDATAFIN TIMESTAMP)
RETURNS (
    RMESES INTEGER,
    RMES1 DOUBLE PRECISION,
    RMES2 DOUBLE PRECISION,
    RMES3 DOUBLE PRECISION,
    RMES4 DOUBLE PRECISION,
    RMES5 DOUBLE PRECISION,
    RMES6 DOUBLE PRECISION,
    RMES7 DOUBLE PRECISION,
    RMES8 DOUBLE PRECISION,
    RMES9 DOUBLE PRECISION,
    RMES10 DOUBLE PRECISION,
    RMES11 DOUBLE PRECISION,
    RMES12 DOUBLE PRECISION,
    RTOTAL DOUBLE PRECISION)
 AS
DECLARE VARIABLE VDIA INTEGER;
 DECLARE VARIABLE VMES INTEGER;
 DECLARE VARIABLE VANO INTEGER;
 DECLARE VARIABLE VCNT INTEGER;
 DECLARE VARIABLE VSOMA DOUBLE PRECISION;
 DECLARE VARIABLE VTOTAL DOUBLE PRECISION;
 DECLARE VARIABLE VDATAINI DATE;
 DECLARE VARIABLE VDATAFIN DATE;
 BEGIN
 IF (pContaAte IS NULL) THEN
 pContaAte = pContaDe;
 IF (pCCustoAte IS NULL) THEN
 pCCustoAte = pCCustoDe;
 IF (pClienteAte IS NULL) THEN
 pClienteAte = pClienteDe;
 IF (pFornecAte IS NULL) THEN
 pFornecAte = pFornecDe;
 rMes1 = 0;
 rMes2 = 0;
 rMes3 = 0;
 rMes4 = 0;
 rMes5 = 0;
 rMes6 = 0;
 rMes7 = 0;
 rMes8 = 0;
 rMes9 = 0;
 rMes10 = 0;
 rMes11 = 0;
 rMes12 = 0;
 rTotal = 0;
 vCnt = 0;
 EXECUTE PROCEDURE DecodeDate(pDataIni) RETURNING_VALUES(vAno, vMes, vDia);
 EXECUTE PROCEDURE EncodeDate(vAno, vMes, 01) RETURNING_VALUES(vDataIni);
 WHILE (vDataIni <= pDataFin) DO
 BEGIN
 vTotal = 0;
 vCnt = vCnt + 1;
 EXECUTE PROCEDURE DecodeDate(vDataIni) RETURNING_VALUES(vAno, vMes, vDia);
 EXECUTE PROCEDURE DaysOfMonth(vAno, vMes) RETURNING_VALUES(vDia);
 EXECUTE PROCEDURE EncodeDate(vAno, vMes, vDia) RETURNING_VALUES(vDataFin);
 FOR
 SELECT SUM(lge_val)
 FROM MVLGE
 WHERE (MVLGE.LGE_TIP <> 'D' OR MVLGE.LGE_TIP IS NULL)
 AND MVLGE.LGE_PLA LIKE :pPLANO || '%'
 AND MVLGE.LGE_OPE >= :vDATAINI
 AND MVLGE.LGE_OPE <= :vDATAFIN
 AND ((:pContaDe IS NULL) OR (lge_con IN (SELECT con_cod FROM cdcon WHERE con_nom >= :pContaDe AND con_nom <= :pContaAte)))
 AND ((:pCCustoDe IS NULL) OR ((mvlge.lge_ccusto >= :pCCustoDe) AND (mvlge.lge_ccusto <= :pCCustoAte)))
 AND ((:pClienteDe IS NULL) OR (lge_cli IN (SELECT cli_cod FROM cdcli WHERE cli_red >= :pClienteDe AND cli_red <= :pClienteAte)))
 AND ((:pFornecDe IS NULL) OR (lge_for IN (SELECT for_cod FROM cdfor WHERE for_red >= :pFornecDe AND for_red <= :pFornecAte)))
 AND ((:pProjeto IS NULL) OR (lge_proj2 IN (SELECT proj2_cod FROM MVLGE,cdproj2,cdproj WHERE lge_proj2 = proj2_cod AND proj_nom = :pProjeto AND proj2_proj = proj_cod)))
 UNION ALL
 SELECT SUM(dob_val)
 FROM MVLGED
 WHERE MVLGED.DOB_PLA LIKE :pPLANO || '%'
 AND MVLGED.DOB_OPE >= :vDATAINI
 AND MVLGED.DOB_OPE <= :vDATAFIN
 AND ((:pContaDe IS NULL) OR (dob_con IN (SELECT con_cod FROM cdcon WHERE con_nom >= :pContaDe AND con_nom <= :pContaAte)))
 AND ((:pCCustoDe IS NULL) OR ((mvlged.dob_ccusto >= :pCCustoDe) AND (mvlged.dob_ccusto <= :pCCustoAte)))
 AND ((:pClienteDe IS NULL) OR (dob_cli IN (SELECT cli_cod FROM cdcli WHERE cli_red >= :pClienteDe AND cli_red <= :pClienteAte)))
 AND ((:pFornecDe IS NULL) OR (dob_for IN (SELECT for_cod FROM cdfor WHERE for_red >= :pFornecDe AND for_red <= :pFornecAte)))
 AND ((:pProjeto IS NULL) OR (dob_proj2 IN (SELECT proj2_cod FROM mvlged,cdproj2,cdproj WHERE dob_proj2 = proj2_cod AND proj_nom = :pProjeto AND proj2_proj = proj_cod)))
 UNION ALL
 SELECT SUM(lge_val)
 FROM MORLGE
 WHERE (MORLGE.LGE_TIP <> 'D' OR MORLGE.LGE_TIP IS NULL)
 AND MORLGE.LGE_PLA LIKE :pPLANO || '%'
 AND MORLGE.LGE_OPE >= :vDATAINI
 AND MORLGE.LGE_OPE <= :vDATAFIN
 AND ((:pContaDe IS NULL) OR (lge_con IN (SELECT con_cod FROM cdcon WHERE con_nom >= :pContaDe AND con_nom <= :pContaAte)))
 AND ((:pCCustoDe IS NULL) OR ((morlge.lge_ccusto >= :pCCustoDe) AND (morlge.lge_ccusto <= :pCCustoAte)))
 AND ((:pClienteDe IS NULL) OR (lge_cli IN (SELECT cli_cod FROM cdcli WHERE cli_red >= :pClienteDe AND cli_red <= :pClienteAte)))
 AND ((:pFornecDe IS NULL) OR (lge_for IN (SELECT for_cod FROM cdfor WHERE for_red >= :pFornecDe AND for_red <= :pFornecAte)))
 AND ((:pProjeto IS NULL) OR (lge_proj2 IN (SELECT proj2_cod FROM morlge,cdproj2,cdproj WHERE lge_proj2 = proj2_cod AND proj_nom = :pProjeto AND proj2_proj = proj_cod)))
 UNION ALL
 SELECT SUM(dob_val)
 FROM MORLGED
 WHERE MORLGED.DOB_PLA LIKE :pPLANO || '%'
 AND MORLGED.DOB_OPE >= :vDATAINI
 AND MORLGED.DOB_OPE <= :vDATAFIN
 AND ((:pContaDe IS NULL) OR (dob_con IN (SELECT con_cod FROM cdcon WHERE con_nom >= :pContaDe AND con_nom <= :pContaAte)))
 AND ((:pCCustoDe IS NULL) OR ((morlged.dob_ccusto >= :pCCustoDe) AND (morlged.dob_ccusto <= :pCCustoAte)))
 AND ((:pClienteDe IS NULL) OR (dob_cli IN (SELECT cli_cod FROM cdcli WHERE cli_red >= :pClienteDe AND cli_red <= :pClienteAte)))
 AND ((:pFornecDe IS NULL) OR (dob_for IN (SELECT for_cod FROM cdfor WHERE for_red >= :pFornecDe AND for_red <= :pFornecAte)))
 AND ((:pProjeto IS NULL) OR (dob_proj2 IN (SELECT proj2_cod FROM morlged,cdproj2,cdproj WHERE dob_proj2 = proj2_cod AND proj_nom = :pProjeto AND proj2_proj = proj_cod)))
 INTO vSoma DO
 IF (NOT vSoma IS NULL) THEN
 vTotal = vSoma + vTotal;
 IF (vCnt = 1) THEN
 rMes1 = vTotal;
 ELSE IF (vCnt = 2) THEN
 rMes2 = vTotal;
 ELSE IF (vCnt = 3) THEN
 rMes3 = vTotal;
 ELSE IF (vCnt = 4) THEN
 rMes4 = vTotal;
 ELSE IF (vCnt = 5) THEN
 rMes5 = vTotal;
 ELSE IF (vCnt = 6) THEN
 rMes6 = vTotal;
 ELSE IF (vCnt = 7) THEN
 rMes7 = vTotal;
 ELSE IF (vCnt = 8) THEN
 rMes8 = vTotal;
 ELSE IF (vCnt = 9) THEN
 rMes9 = vTotal;
 ELSE IF (vCnt = 10) THEN
 rMes10 = vTotal;
 ELSE IF (vCnt = 11) THEN
 rMes11 = vTotal;
 ELSE IF (vCnt = 12) THEN
 rMes12 = vTotal;
 rTotal = rTotal + vTotal;
 vDataIni = vDataFin + 1;
 rMeses = vCnt;
 END
 SUSPEND;
 END

 COMMIT;


 ALTER PROCEDURE SALDO_DA_CONTA_NA_DATA (
    PCONTADE VARCHAR(30),
    PCONTAATE VARCHAR(30),
    PATIVO VARCHAR(1),
    PTIPODE VARCHAR(30),
    PTIPOATE VARCHAR(30),
    PPLANODE VARCHAR(40),
    PPLANOATE VARCHAR(40),
    PCENTRODE VARCHAR(40),
    PCENTROATE VARCHAR(40),
    PCENTROAUXDE VARCHAR(40),
    PCENTROAUXATE VARCHAR(40),
    PBALANCETE INTEGER,
    PDATA TIMESTAMP)
RETURNS (
    RSALDO DOUBLE PRECISION,
    RFLAG INTEGER)
 AS
DECLARE VARIABLE VSALDO DOUBLE PRECISION;
 DECLARE VARIABLE VSALDOANTERIOR DOUBLE PRECISION;
 DECLARE VARIABLE VDATFEC DATE;
 DECLARE VARIABLE VCONTA INTEGER;
 DECLARE VARIABLE VDTI DATE;
 begin
 if (pContaAte is Null) then
 pContaAte = pContaDe;
 if (pTipoAte is Null) then
 pTipoAte = pTipoDe;
 if ((Upper(pAtivo) = 'A') or (Upper(pAtivo) = 'I')) then
 pAtivo = Upper(pAtivo);
 else
 pAtivo = '%';
 rSaldo = 0;
 for
 select con_fec, con_cod
 from cdcon, cdtipconta
 where
 ((:pContaDe is Null) or ((cdcon.con_nom >= :pContaDe) and (cdcon.con_nom <= :pContaAte)))
 and cdcon.Ativo like :pAtivo
 and cdtipconta.tip_cod = cdcon.con_tip
 order by cdcon.con_nom
 into vDatFec, vConta
 do begin
 if (vDatFec > pData)
 then begin
 for
 select 0.0 As SaldoAnterior,
 sum(lge_val) As Saldo
 from MvLGE
 LEFT JOIN CDCCUSTAUX ON LGE_CCUSTO2 = CDCCUSTAUX.CUS_COD
 , cdcon, cdpla, cdccust
 where cdcon.con_cod = :vconta
 and mvlge.lge_con = cdcon.con_cod
 and cdpla.pla_cod = lge_pla
 and mvlge.lge_ope <= :pData
 and mvlge.lge_ccusto = cdccust.cus_cod
 and mvlge.lge_pla = cdpla.pla_cod
 and ((cdccust.cus_cod >= :PCENTRODE and cdccust.cus_cod <= :PCENTROATE) OR (:PCENTRODE is Null))
 and ((CDCCUSTAUX.cus_ord >= :PCENTROAUXDE and CDCCUSTAUX.cus_ord <= :PCENTROAUXATE) OR (:PCENTROAUXDE is Null))
 and ((cdpla.pla_cod >= :PPLANODE and cdpla.pla_cod <= :PPLANOATE) OR (:PPLANODE is Null))
 group By cdcon.con_moe
 union
 select
 (cdcon.con_primeiro_saldo) As SaldoAnterior,
 (select Sum(morlge.lge_val)
 from mOrlge
 LEFT JOIN CDCCUSTAUX ON LGE_CCUSTO2 = CDCCUSTAUX.CUS_COD
 , cdpla, cdccust
 where lge_con = cdcon.con_cod and lge_ope <= :pData
 and cdpla.pla_cod = lge_pla
 and ((cdccust.cus_cod >= :PCENTRODE and cdccust.cus_cod <= :PCENTROATE) OR (:PCENTRODE is Null))
 and ((CDCCUSTAUX.cus_ord >= :PCENTROAUXDE and CDCCUSTAUX.cus_ord <= :PCENTROAUXATE) OR (:PCENTROAUXDE is Null))
 and ((cdpla.pla_cod >= :PPLANODE and cdpla.pla_cod <= :PPLANOATE) OR (:PPLANODE is Null))
 and morlge.lge_ccusto = cdccust.cus_cod
 and mOrlge.lge_pla = cdpla.pla_cod ) As Saldo
 from cdcon
 where cdcon.con_cod = :vconta
 into vSaldo, vSaldoAnterior
 do begin
 if (not vSaldo is null) then
 rSaldo = rSaldo + vSaldo;
 if (not vSaldoAnterior is null) then
 rSaldo = rSaldo + vSaldoAnterior;
 end
 end
 else begin
 for
 select cdcon.con_sal,
 (select Sum(mvlge.lge_val)
 from mvlge
 LEFT JOIN CDCCUSTAUX ON LGE_CCUSTO2 = CDCCUSTAUX.CUS_COD
 , cdpla, cdccust
 where lge_con = cdcon.con_cod and lge_ope <= :pData
 and cdpla.pla_cod = lge_pla
 and ((cdccust.cus_cod >= :PCENTRODE and cdccust.cus_cod <= :PCENTROATE) OR (:PCENTRODE is Null))
 and ((CDCCUSTAUX.cus_ord >= :PCENTROAUXDE and CDCCUSTAUX.cus_ord <= :PCENTROAUXATE) OR (:PCENTROAUXDE is Null))
 and ((cdpla.pla_cod >= :PPLANODE and cdpla.pla_cod <= :PPLANOATE) OR (:PPLANODE is Null))
 and mvlge.lge_ccusto = cdccust.cus_cod
 and mvlge.lge_pla = cdpla.pla_cod ) As Saldo
 from cdcon
 where cdcon.con_cod = :vconta
 into vSaldo, vSaldoAnterior
 do begin
 if (not vSaldo is null) then
 rSaldo = rSaldo + vSaldo;
 if (not vSaldoAnterior is null) then
 rSaldo = rSaldo + vSaldoAnterior;
 end
 select min(mvlge.lge_ope) from mvlge where mvlge.lge_con=:vconta
 into :VDTI;
 select cdcon.con_sal from cdcon
 where cdcon.con_cod = cast(:vconta as integer)
 into rflag;
 end
 end
 suspend;
 end

 COMMIT;

 ALTER PROCEDURE PROCESSO_REQUISICAO_COTACAO (
    PUSUARIO INTEGER,
    PCOM2 INTEGER,
    PDECISAO INTEGER,
    PAUXILIAR INTEGER,
    PSITUACAO INTEGER)
RETURNS (
    RESULT VARCHAR(100))
 AS
DECLARE VARIABLE VAPROVADOR INTEGER;
 DECLARE VARIABLE VTIPOSETOR INTEGER;
 DECLARE VARIABLE VSTATUS INTEGER;
 DECLARE VARIABLE VPROXIMO INTEGER;
 DECLARE VARIABLE VUSUARIO_NOME VARCHAR(100);
 DECLARE VARIABLE VMOVIMENTO INTEGER;
 DECLARE VARIABLE VALM_MANUT VARCHAR(1);
 DECLARE VARIABLE VTIPOITEM INTEGER;
 DECLARE VARIABLE VAPROVA_COTACAO VARCHAR(1);
 DECLARE VARIABLE VCOTACAO INTEGER;
 DECLARE VARIABLE VVALOR_SEM_APROVACAO DOUBLE PRECISION;
 DECLARE VARIABLE VVALOR_COTACAO INTEGER;
 DECLARE VARIABLE VITEM INTEGER;
 DECLARE VARIABLE VREQUISICAO INTEGER;
 begin
 select P_VERIFICA_ALM_MANUT, P_VALOR_SEM_APROVACAO, P_APROVA_PARA_COTAR
 from parametcomp
 into valm_manut,vvalor_sem_aprovacao,vaprova_cotacao;

 Select USE_NOM
 From CDUSER
 Where USE_COD = :pusuario
 into vusuario_nome;

 Select COM2_TIPO, COM2_COM1, COM2_SIT, COM2_COM8
 From MVCOM2
 Where COM2_COD = :pcom2
 into vtipoitem, vmovimento, vStatus, vcotacao;

 Select COM1_COD
 From MVCOM1
 Where COM1_COD = :vmovimento
 into vrequisicao;


 if (vStatus = 1) then
 if (pDecisao = 0) then
 vStatus = -1;
 else begin
 Select Count(SET2_COD)
 From CDSETOR2
 Where SET2_USE = :PUSUARIO
 Into vAprovador;

 if ((vAprovador is null) or (vAprovador <= 0)) then
 begin
 Update MVCOM2
 set COM2_SIT = 2
 Where COM2_COD = :pcom2;

 For Select SET2_USE
 From CDSETOR2, CDSETOR3
 Where SET2_SET = SET2_SET
 and SET3_USE = :PUSUARIO
 into vAprovador do
 Execute procedure envia_aviso(:vAprovador,'Requisicao a aprovar',
 'Número ' || :vrequisicao || ' de ' || :vusuario_nome,
 'TFRMREQUISICAO', :vrequisicao);

 Result = 'Item aguardando aprovação';
 end
 else
 vStatus = 2;
 end

 if (vStatus = 2) then
 if (pDecisao = 0) then
 vStatus = -1;
 else begin
 if (vAlm_Manut = 'T') then
 begin
 Update MVCOM2
 set COM2_SIT = 3
 Where COM2_COD = :pcom2;

 For Select SET3_USE
 From CDSETOR3, CDSETOR1
 Where SET3_SET = SET_COD
 and ((SET_TIP = 1 and :vtipoitem in (0,1))
 or (SET_TIP = 2 and :vtipoitem in (2,3)))
 into vaprovador do
 Execute procedure envia_aviso(:vAprovador,'Requisição a atender',
 'Número ' || :vrequisicao || ' de ' || :vusuario_nome,
 'TFRMREQUISICAO', :vrequisicao);

 Result = 'Item aguardando verificação de disponibilidade';
 end
 else
 vStatus = 3;
 end

 if (vStatus = 3) then
 if (pDecisao = 1) then
 vStatus = 10;
 else begin
 if (vAprova_Cotacao = 'T') then
 begin
 Update MVCOM2
 set COM2_SIT = 5
 Where COM2_COD = :pcom2;

 For Select SET2_USE
 From CDSETOR2, CDSETOR1
 Where SET2_SET = SET_COD
 and (SET_TIP = 3)
 Into vAprovador do
 Execute procedure envia_aviso(:vAprovador,'Cotação a aprovar',
 'Número ' || :vcotacao || ' de ' || :vusuario_nome,
 'TFRMREQUISICAO', :vrequisicao);

 Result = 'Item aguardando aprovação de cotação';
 end
 else
 begin
 vStatus = 5;
 pDecisao = 1;
 end
 end


 if (vStatus = 5) then
 if (pDecisao = 0) then
 vStatus = -1;
 else begin
 Update MVCOM2
 set COM2_SIT = 6
 Where COM2_COD = :pcom2;

 For Select SET3_USE
 From CDSETOR3, CDSETOR1
 Where SET3_SET = SET_COD
 and (SET_TIP = 3)
 Into vAprovador do
 Execute procedure envia_aviso(:vAprovador,'Cotação pendente',
 'Número ' || :vcotacao, 'TFRMREQUISICAO', :vrequisicao);


 Result = 'Item aguardando cotação';
 end

 if (vStatus = 6) then
 if (pDecisao = 0) then
 vStatus = -1;
 else begin
 Select sum(com9_val)
 From mvcom9, mvcom6
 where com9_com2 = :pcom2
 and com6_com9 = com9_cod
 Into vValor_cotacao;
 if (vValor_Cotacao <= vValor_Sem_Aprovacao) then
 vStatus = 7;
 else
 begin
 Update MVCOM2
 set COM2_SIT = 7
 Where COM2_COD = :pcom2;

 Update MVCOM8
 set COM8_STA = 2
 Where COM8_COD in (Select COM2_COM8 FROM MVCOM2 Where COM2_COD = :pcom2);

 For Select SET3_USE
 From CDSETOR3, CDSETOR1
 Where SET3_SET = SET_COD
 and (SET_TIP = 3)
 Into vAprovador do
 Execute procedure envia_aviso(:vAprovador,'Cotação pendente',
 'Número ' || :vcotacao, 'TFRMREQUISICAO', :vrequisicao);
 end

 Result = 'Item aguardando cotação';
 end

 if (vStatus = 7) then
 if (pAuxiliar = 0) then
 begin
 if (pDecisao = 0) then
 vStatus = -1;
 else
 begin
 Update MVCOM2
 set COM2_SIT = 6
 Where COM2_COD = :pcom2;

 Update MVCOM8
 set COM8_STA = 1
 Where COM8_COD in (Select COM2_COM8 FROM MVCOM2 Where COM2_COD = :pcom2);

 Result = 'Item retornou a cotação';
 end
 end
 else
 begin
 Update MVCOM2
 set COM2_SIT = 8
 Where COM2_COD = :pcom2;

 Update MVCOM8
 set COM8_STA = 3
 Where COM8_COD in (Select COM2_COM8 FROM MVCOM2 Where COM2_COD = :pcom2);

 Result = 'Item em compras';
 end

 if (vStatus = 8) then
 if (vAlm_Manut = 'T') then
 begin
 Update MVCOM2
 set COM2_SIT = 9
 Where COM2_COD = :pcom2;

 For Select SET3_USE
 From CDSETOR3, CDSETOR1
 Where SET3_SET = SET_COD
 and ((SET_TIP = 1 and :vtipoitem in (0,1))
 or (SET_TIP = 2 and :vtipoitem in (2,3)))
 Into vAprovador do
 Execute procedure envia_aviso(:vAprovador,'Requisição aguardando baixa',
 'Número ' || :vrequisicao || ' de ' || :vusuario_nome,
 'TFRMREQUISICAO', :vrequisicao);

 Result = 'Item aguardando baixa';
 end
 else vStatus = 11;

 if (vStatus = 8) then
 if (vAlm_Manut = 'T') then
 begin
 Update MVCOM2
 set COM2_SIT = 9
 Where COM2_COD = :pcom2;

 For Select SET2_USE
 From CDSETOR2, CDSETOR1
 Where SET2_SET = SET_COD
 and ((SET_TIP = 1 and :vtipoitem in (0,1))
 or (SET_TIP = 2 and :vtipoitem in (2,3)))
 Into vAprovador do
 Execute procedure envia_aviso(:vAprovador,'Requisição aguardando baixa',
 'Número ' || :vrequisicao || ' de ' || :vusuario_nome,
 'TFRMREQUISICAO', :vrequisicao);

 Result = 'Item aguardando baixa';
 end
 else vStatus = 11;

 if (vStatus = 9) then
 if (pDecisao = 1) then
 begin
 Update MVCOM2
 set COM2_SIT = 10
 Where COM2_COD = :pcom2;

 For Select SET3_USE
 From CDSETOR3, CDSETOR1
 Where SET3_SET = SET_COD
 and ((SET_TIP = 1 and :vtipoitem in (0,1))
 or (SET_TIP = 2 and :vtipoitem in (2,3)))
 Into vAprovador do
 Execute procedure envia_aviso(:vAprovador,'Requisição aguardando execução',
 'Número ' || :vrequisicao || ' de ' || :vusuario_nome,
 'TFRMREQUISICAO', :vrequisicao);

 Result = 'Item aguardando execução';
 end
 else vStatus = -1;

 if (vStatus = 10) then
 begin
 Update MVCOM2
 set COM2_SIT = 11
 Where COM2_COD = :pcom2;

 Execute procedure envia_aviso(:pusuario,'Aguardando confirmação',
 'Número ' || :vrequisicao, 'TFRMREQUISICAO', :vrequisicao);

 Result = 'Item aguardando confirmação de recebimento';
 end

 if (vStatus = 11) then
 begin
 Update MVCOM2
 set COM2_SIT = 12
 Where COM2_COD = :pcom2;

 Result = 'Item finalizado';
 end

 if (vStatus = -1) then
 begin
 Update MVCOM2
 set COM2_SIT = 0
 Where COM2_COD = :pcom2;

 Execute procedure envia_aviso(:pusuario,'Item(ns) cancelado(s)',
 'Número ' || :vrequisicao, 'TFRMREQUISICAO', :vrequisicao);

 Result = 'Item(ns) cancelados';
 end

 suspend;
 end

 commit;

 ALTER PROCEDURE ATUALIZA_CONFERENCIA (
    PFILIAL INTEGER,
    PDATA TIMESTAMP)
 AS
DECLARE VARIABLE WREC_COD INTEGER;
 DECLARE VARIABLE WREC_DOC VARCHAR(12);
 DECLARE VARIABLE WREC_CCUSTO VARCHAR(40);
 DECLARE VARIABLE WREC_CLI INTEGER;
 DECLARE VARIABLE WDESAGIO DOUBLE PRECISION;
 DECLARE VARIABLE WTIP_DESENCAIXE INTEGER;
 DECLARE VARIABLE WTIP_DESAGIO INTEGER;
 DECLARE VARIABLE WREC_VAL DOUBLE PRECISION;
 DECLARE VARIABLE WREC_VEC DATE;
 BEGIN

 FOR SELECT REC_COD, REC_DOC, REC_CCUSTO, REC_CLI FROM MVCOREC WHERE DAT_ATU=:PDATA AND REC_ORI=:PFILIAL AND REC_BAIFIL='S' AND REC_TOT='T' INTO :WREC_COD, :WREC_DOC, :WREC_CCUSTO, :WREC_CLI DO
 BEGIN
 IF ( EXISTS( SELECT * FROM MVCOREC WHERE REC_DOC=:WREC_DOC AND REC_CCUSTO=:WREC_CCUSTO AND REC_CLI=:WREC_CLI AND REC_ORI=:PFILIAL AND REC_COD<>:WREC_COD) ) THEN
 BEGIN
 DELETE FROM MVCOREC WHERE REC_DOC=:WREC_DOC AND REC_CCUSTO=:WREC_CCUSTO AND REC_CLI=:WREC_CLI AND REC_ORI=:PFILIAL AND REC_BAIFIL='N' AND REC_COD<>:WREC_COD;
 END
 END

 FOR SELECT TIP_DESENCAIXE,TIP_DESAGIO,REC_VAL,REC_VEC,REC_COD FROM MVCOREC,CDTIPD WHERE REC_BAIVER='N' AND REC_ORI=:PFILIAL AND (REC_DAT=:PDATA OR REC_REC=:PDATA) AND TIP_ATUALIZA='CON' AND REC_TIP=TIP_COD INTO :WTIP_DESENCAIXE, :WTIP_DESAGIO, :WREC_VAL, :WREC_VEC, :WREC_COD DO
 BEGIN
 IF ( :WTIP_DESENCAIXE >0 ) THEN
 BEGIN
 WREC_VEC = :WREC_VEC+:WTIP_DESENCAIXE;
 UPDATE MVCOREC SET REC_VEC=:WREC_VEC WHERE REC_COD=:WREC_COD;
 END
 IF ( :WTIP_DESAGIO >0 ) THEN
 BEGIN
 WDESAGIO = (:WREC_VAL/100)*:WTIP_DESAGIO;
 WREC_VAL = :WREC_VAL-:WDESAGIO;
 UPDATE MVCOREC SET REC_VAL=:WREC_VAL WHERE REC_COD=:WREC_COD;
 END
 END

 UPDATE MVCOREC SET REC_BAIVER='S'
 WHERE REC_BAIVER='N'
 AND REC_ORI=:PFILIAL
 AND REC_DAT=:PDATA;

 FOR SELECT REC_COD FROM MVCOREC, CDTIPD WHERE REC_DAT=:PDATA AND REC_ORI=:PFILIAL AND TIP_CONSOL='S' AND REC_VD1COD<>0 AND REC_TIP=TIP_COD INTO :WREC_COD DO
 BEGIN
 DELETE FROM MVCOREC WHERE REC_COD=:WREC_COD;
 END

 END
 commit;

 ALTER PROCEDURE ATZ_PREV_REC 
 AS
DECLARE VARIABLE WDTLIMITE DATE;
 DECLARE VARIABLE WDTEMISSAO DATE;
 DECLARE VARIABLE WDTVENC DATE;
 DECLARE VARIABLE WPARCELAS INTEGER;
 DECLARE VARIABLE WPARCELASRESTANTES INTEGER;
 DECLARE VARIABLE WMSG VARCHAR(30);
 DECLARE VARIABLE WYEAR INTEGER;
 DECLARE VARIABLE WMONTH INTEGER;
 DECLARE VARIABLE WDAY INTEGER;
 DECLARE VARIABLE WPROXNR INTEGER;
 DECLARE VARIABLE WPRE_COD INTEGER;
 DECLARE VARIABLE WPRE_CLI INTEGER;
 DECLARE VARIABLE WPRE_FRE VARCHAR(3);
 DECLARE VARIABLE WPRE_TIP INTEGER;
 DECLARE VARIABLE WPRE_PAR INTEGER;
 DECLARE VARIABLE WPRE_VAL DOUBLE PRECISION;
 DECLARE VARIABLE WPRE_CON INTEGER;
 DECLARE VARIABLE WPRE_DAT DATE;
 DECLARE VARIABLE WPRE_PLA VARCHAR(40);
 DECLARE VARIABLE WPRE_ATU DATE;
 DECLARE VARIABLE WPRE_ANT INTEGER;
 DECLARE VARIABLE WPRE_PARTOT INTEGER;
 DECLARE VARIABLE WPRE_HIS VARCHAR(60);
 DECLARE VARIABLE WPRE_CCUSTO VARCHAR(40);
 DECLARE VARIABLE WPRE_EMI DATE;
 DECLARE VARIABLE WPRE_CAR INTEGER;
 DECLARE VARIABLE WPRE_DIA INTEGER;
 DECLARE VARIABLE WDIA_MES INTEGER;
 DECLARE VARIABLE WP_LIBER_PREV VARCHAR(1);
 DECLARE VARIABLE WPRE_CCUSTO2 VARCHAR(40);
 DECLARE VARIABLE WPRE_PLA2 VARCHAR(40);
 BEGIN
 FOR
 SELECT PRE_COD, PRE_CLI, PRE_FRE, PRE_TIP, PRE_PAR, PRE_VAL, PRE_CON,
 PRE_DAT, PRE_PLA, PRE_ATU, PRE_ANT, PRE_PARTOT, PRE_HIS, PRE_CCUSTO,
 PRE_EMI, PRE_CAR,
 CAST ((SELECT RESULT FROM REMOVE_INV_CHAR( CDPREREC.PRE_DIA )) AS INTEGER),
 PRE_CCUSTO2, PRE_PLA2
 FROM CDPREREC
 WHERE (PRE_ATU < 'TODAY' OR PRE_ATU IS NULL)
 AND NOT PRE_EMI IS NULL
 ORDER BY PRE_COD
 INTO :wPRE_COD, :wPRE_CLI,:wPRE_FRE,:wPRE_TIP,:wPRE_PAR,:wPRE_VAL,:wPRE_CON,
 :wPRE_DAT, :wPRE_PLA,:wPRE_ATU,:wPRE_ANT,:wPRE_PARTOT,:wPRE_HIS,:wPRE_CCUSTO,
 :wPRE_EMI,:wPRE_CAR,:wPRE_DIA, :WPRE_CCUSTO2, :WPRE_PLA2
 DO
 BEGIN
 wDTLIMITE = CAST('TODAY' AS DATE) + wPRE_ANT;
 wDTVENC = wPRE_DAT;
 wDTEMISSAO = wPRE_EMI;
 wPARCELASRESTANTES = wPRE_PAR;
 wPARCELAS = 1;
 
 WHILE ((wPARCELAS <= wPRE_PAR) AND (wDTLIMITE > wDTVENC)) DO
 BEGIN
 SELECT p_liber_prev FROM parametfin INTO Wp_liber_prev;
 IF (wPARCELASRESTANTES = 999) THEN
 BEGIN
 IF (Wp_liber_prev='E') THEN
 BEGIN
 EXECUTE PROCEDURE DecodeDate(wDTEMISSAO) RETURNING_VALUES(wYear, wMonth, wDay);
 END
 ELSE
 BEGIN
 EXECUTE PROCEDURE DecodeDate(wDTVENC) RETURNING_VALUES(wYear, wMonth, wDay);
 END
 IF (wPRE_FRE = 'DIA') THEN
 wMSG = CAST(wDay AS VARCHAR(2)) || '/' || CAST(wMonth AS VARCHAR(2)) || '/' || CAST(wYear AS CHAR(4));
 ELSE IF (wPRE_FRE = 'QUI') THEN
 BEGIN
 IF (wDay < 16) THEN
 wMSG = CAST(wMonth AS VARCHAR(2)) || '/' || CAST(wYear AS CHAR(4)) || '-' || 'A';
 ELSE
 wMSG = CAST(wMonth AS VARCHAR(2)) || '/' || CAST(wYear AS CHAR(4)) || '-' || 'B';
 END
 ELSE IF (wPRE_FRE = 'SMA') THEN
 BEGIN
 IF (wDay < 8) THEN
 wMSG = CAST(wMonth AS VARCHAR(2)) || '/' || CAST(wYear AS CHAR(4)) || '-' || 'A';
 ELSE IF (wDay < 15) THEN
 wMSG = CAST(wMonth AS VARCHAR(2)) || '/' || CAST(wYear AS CHAR(4)) || '-' || 'B';
 ELSE IF (wDay < 22) THEN
 wMSG = CAST(wMonth AS VARCHAR(2)) || '/' || CAST(wYear AS CHAR(4)) || '-' || 'C';
 ELSE IF (wDay < 29) THEN
 wMSG = CAST(wMonth AS VARCHAR(2)) || '/' || CAST(wYear AS CHAR(4)) || '-' || 'D';
 ELSE
 wMSG = CAST(wMonth AS VARCHAR(2)) || '/' || CAST(wYear AS CHAR(4)) || '-' || 'E';
 END
 ELSE
 wMSG = CAST(wMonth AS VARCHAR(2)) || '/' || CAST(wYear AS CHAR(4));
 END
 ELSE
 wMSG = CAST( CAST(wPRE_PARTOT - wPARCELASRESTANTES + 1 AS INTEGER) AS VARCHAR(5) ) || '/' || CAST(wPRE_PARTOT AS VARCHAR(3));
 
 IF (EXISTS(SELECT REC_COD FROM MVCOREC)) THEN
 SELECT MAX(REC_COD)+1 FROM MVCOREC INTO :wPROXNR;
 ELSE
 wPROXNR = 1;
 
 IF (EXISTS(SELECT TABELA FROM CODIGO WHERE UPPER(TABELA)='MVCOREC')) THEN
 UPDATE CODIGO SET ULTIMOCODIGO = :wPROXNR WHERE UPPER(TABELA)='MVCOREC';
 ELSE
 INSERT INTO CODIGO (TABELA, ULTIMOCODIGO) VALUES ('MVCOREC', :wPROXNR);
 
 INSERT INTO MVCOREC ( REC_COD, REC_DOC, REC_CCUSTO, REC_DAT, REC_TIP, REC_VEC, REC_VAL, REC_MOE, REC_COB, REC_CON, REC_CLI,
 REC_CAR, REC_EMI, REC_OBS, REC_BAI, REC_TOT, REC_EMINOM, REC_EMICPF, REC_EMIRG, REC_EMITEL, REC_DFP, REC_BOR, CLI_FIL, REC_COBRAVEL,
 REC_PLA, REC_DESAGIO, DAT_CAD, DAT_ATU, ATIVO, REC_BAIVER, REC_BAIFIL, REC_ORI, REC_VD1COD, REC_VOG, REC_CCUSTO2, REC_PLA2)
 VALUES (:wPROXNR, :wMSG, :wPRE_CCUSTO, NULL, :wPRE_TIP,:wDTVENC,:wPRE_VAL,NULL,NULL, :wPRE_CON, :wPRE_CLI,
 :wPRE_CAR,:wDTEMISSAO,:wPRE_HIS,'N', 'T', NULL, NULL, NULL, NULL, 'P',NULL, 1, 'T',
 :wPRE_PLA, NULL, CAST('TODAY' AS DATE), CAST('TODAY' AS DATE), 'A', 'S', 'N', (SELECT ALM_COD FROM CDALM2), 0, :wDTVENC, :WPRE_CCUSTO2, :WPRE_PLA2);
 
 EXECUTE PROCEDURE ADD_FREQUENCIA ( wDTVENC, wPRE_FRE) RETURNING_VALUES :wDTVENC;
 EXECUTE PROCEDURE DecodeDate(wDTVENC) RETURNING_VALUES(wYear, wMonth, wDay);
 EXECUTE PROCEDURE DAYSOFMONTH (wYear, wMonth) RETURNING_VALUES (wDIA_MES);
 
 IF ((wDIA_MES >= wPRE_DIA) AND (wDay <> wPRE_DIA) AND (wPRE_FRE<>'DIA') AND (wPRE_FRE<>'QUI') AND (wPRE_FRE<>'SMA') ) THEN
 EXECUTE PROCEDURE EncodeDate(wYear, wMonth, wPRE_DIA) RETURNING_VALUES(wDTVENC);
 
 EXECUTE PROCEDURE ADD_FREQUENCIA ( wDTEMISSAO, wPRE_FRE) RETURNING_VALUES :wDTEMISSAO;
 
 IF (wPARCELASRESTANTES<>999) THEN
 wPARCELASRESTANTES = wPARCELASRESTANTES - 1;
 wPARCELAS = wPARCELAS + 1;
 END
 
 IF (wPARCELASRESTANTES=0) THEN
 DELETE FROM CDPREREC WHERE PRE_COD=:wPRE_COD;
 ELSE
 UPDATE CDPREREC SET
 PRE_DAT = :wDTVENC,
 PRE_EMI = :wDTEMISSAO,
 PRE_PAR = :wPARCELASRESTANTES,
 PRE_ATU = 'TODAY'
 WHERE PRE_COD=:wPRE_COD;
 
 END
 END

 commit;

 ALTER PROCEDURE RELDURACAO (
    PDIAS INTEGER,
    PDATADE TIMESTAMP,
    PDATAATE TIMESTAMP,
    PTIPO INTEGER,
    PPRODE VARCHAR(100),
    PPROATE VARCHAR(100),
    PALMDE VARCHAR(50),
    PALMATE VARCHAR(50),
    PMARDE VARCHAR(30),
    PMARATE VARCHAR(30),
    PGRUDE VARCHAR(30),
    PGRUATE VARCHAR(30),
    PSGRUDE VARCHAR(30),
    PSGRUATE VARCHAR(30),
    PTIPDE VARCHAR(30),
    PTIPATE VARCHAR(30),
    PTRADE VARCHAR(40),
    PTRAATE VARCHAR(40),
    PCATDE VARCHAR(30),
    PCATATE VARCHAR(30))
RETURNS (
    CUPOM VARCHAR(6),
    MOVIMENTO DOUBLE PRECISION,
    FATURAMENTO DOUBLE PRECISION,
    EST_SAL DOUBLE PRECISION,
    PRO_COD INTEGER,
    PRO_INT VARCHAR(15),
    PRO_BAR VARCHAR(15),
    PRO_NOM VARCHAR(100),
    DURACAO DOUBLE PRECISION,
    TIP_NOM VARCHAR(30),
    MAR_NOM VARCHAR(30),
    GRU_NOM VARCHAR(30),
    SUBGRUPO VARCHAR(30),
    COR_NOM VARCHAR(30),
    MED_NOM VARCHAR(30),
    CODIGO VARCHAR(21),
    CATEGORIA VARCHAR(30))
 AS
DECLARE VARIABLE WPRODUTO INTEGER;
 DECLARE VARIABLE WMOVIMENTO DOUBLE PRECISION;
 DECLARE VARIABLE WFATURAMENTO DOUBLE PRECISION;
 DECLARE VARIABLE WDURACAO DOUBLE PRECISION;
 DECLARE VARIABLE WEST_SAL INTEGER;
 DECLARE VARIABLE WCONT INTEGER;
 DECLARE VARIABLE WCUPOM VARCHAR(6);
 DECLARE VARIABLE WPRO_INT VARCHAR(15);
 DECLARE VARIABLE WPRO_BAR VARCHAR(15);
 DECLARE VARIABLE WPRO_NOM VARCHAR(100);
 DECLARE VARIABLE WTIP_NOM VARCHAR(30);
 DECLARE VARIABLE WMAR_NOM VARCHAR(30);
 DECLARE VARIABLE WGRU_NOM VARCHAR(30);
 DECLARE VARIABLE WSUBGRUPO VARCHAR(30);
 DECLARE VARIABLE WCATEGORIA VARCHAR(30);
 begin
 PRO_COD=0;
 MOVIMENTO=0;
 FATURAMENTO=0;
 EST_SAL=0;
 WDURACAO=0;
 WCONT=0;
 CUPOM='';
 PRO_INT='';
 PRO_BAR='';
 PRO_NOM='';
 TIP_NOM='';
 MAR_NOM='';
 GRU_NOM='';
 SUBGRUPO='';
 CATEGORIA='';
 IF (PTIPO=0) THEN
 BEGIN
 For
 Select Distinct Count( vd1_cod ) As Cupom
 ,sum(vd2_qtd) As Movimento
 ,Sum( (vd2_vlr*vd2_qtd) ) As Faturamento
 ,est_sal
 ,cdpro.pro_cod,cdpro.pro_int,cdpro.pro_bar,cdpro.pro_nom
 From estmvvd1,cdpro,mvest,cdtra1,CDMAR,CDGRUP,CDSUBGRUP,CDCATPRO, CDTIPP, CDALM
 ,estmvvd2 left outer join cdprocm on (estmvvd2.vd2_pro = cdprocm.pro_pro and estmvvd2.vd2_cor = cdprocm.pro_cor and estmvvd2.vd2_med = cdprocm.pro_med )
 left outer join cdmed on estmvvd2.vd2_med = cdmed.med_cod
 left outer join cdcor on estmvvd2.vd2_cor = cdcor.cor_cod
 Where vd2_pro = cdpro.pro_cod
 and vd2_bol = vd1_cod
 and vd2_pro = est_pro and vd2_alm = est_alm and vd2_med = est_tam
 and vd2_cor = est_cor and vd1_canc <> 'C'
 and PRO_MAR = MAR_COD and PRO_TIP = TIP_COD
 and PRO_CAT = CAT_COD
 and vd2_alm = alm_cod
 and PRO_GRU = CDGRUP.GRU_COD
 and PRO_SUBGRU = CDSUBGRUP.GRU_COD
 and TRA_TIP_TRA = 'VND' and vd1_tra = tra_cod
 and ESTMVVD1.VD1_CAD >= :PDATADE and ESTMVVD1.VD1_CAD <= :PDATAATE
 and ( (CDPRO.PRO_NOM >= :PPRODE and CDPRO.PRO_NOM <= :PPROATE) OR (:PPRODE IS NULL) )
 and ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 and ( (CDMAR.MAR_NOM >= :PMARDE and CDMAR.MAR_NOM <= :PMARATE) OR (:PMARDE IS NULL) )
 and ( (CDGRUP.GRU_NOM >= :PGRUDE and CDGRUP.GRU_NOM <= :PGRUATE) OR (:PGRUDE IS NULL) )
 and ( (CDSUBGRUP.GRU_NOM >= :PSGRUDE and CDSUBGRUP.GRU_NOM <= :PSGRUATE) OR (:PSGRUDE IS NULL) )
 and ( (CDTIPP.TIP_NOM >= :PTIPDE and CDTIPP.TIP_NOM <= :PTIPATE) OR (:PTIPDE IS NULL) )
 and ( (CDCATPRO.CAT_NOM >= :PCATDE and CDCATPRO.CAT_NOM <= :PCATATE) OR (:PCATDE IS NULL) )
 and ( (CDTRA1.TRA_NOM >= :PTRADE and CDTRA1.TRA_NOM <= :PTRAATE) OR (:PTRADE IS NULL) )
 Group By cdpro.pro_nom, cdpro.pro_int, cdpro.pro_bar, cdpro.pro_cod,cdprocm.pro_cod, cdmed.med_nom, cdcor.cor_nom, est_sal
 ORDER BY PRO_COD ASC
 INTO :WCUPOM,:WMOVIMENTO,:WFATURAMENTO,:WEST_SAL,:WPRODUTO,:WPRO_INT,:WPRO_BAR,:WPRO_NOM
 DO
 BEGIN
 IF (WCONT=0) THEN
 BEGIN
 PRO_COD=WPRODUTO;
 END
 WCONT=WCONT+1;
 IF (:MOVIMENTO>0) THEN
 BEGIN
 DURACAO = ( est_sal / (:MOVIMENTO/:pDIAS) );
 DURACAO = (CAST((DURACAO * 100) as integer) / 100);
 END
 ELSE
 DURACAO = 0;
 IF (:WPRODUTO<>PRO_COD) THEN
 BEGIN
 SUSPEND;
 MOVIMENTO=0;
 FATURAMENTO=0;
 EST_SAL=0;
 DURACAO=0;
 END
 CUPOM=WCUPOM;
 PRO_INT=WPRO_INT;
 PRO_BAR=WPRO_BAR;
 PRO_NOM=WPRO_NOM;
 TIP_NOM=WTIP_NOM;
 MAR_NOM=WMAR_NOM;
 GRU_NOM=WGRU_NOM;
 SUBGRUPO=WSUBGRUPO;
 MOVIMENTO=MOVIMENTO+WMOVIMENTO;
 FATURAMENTO=FATURAMENTO+WFATURAMENTO;
 EST_SAL=EST_SAL+WEST_SAL;
 DURACAO=DURACAO+WDURACAO;
 PRO_COD=WPRODUTO;
 END
 SUSPEND;
 END
 IF (PTIPO=1) THEN
 BEGIN
 For
 Select Distinct Count( vd1_cod ) As Cupom
 ,sum(vd2_qtd) As Movimento
 ,Sum( (vd2_vlr*vd2_qtd) ) As Faturamento
 ,est_sal
 ,cdpro.pro_cod,cdpro.pro_int,cdpro.pro_bar,cdpro.pro_nom,mar_nom
 From estmvvd1,cdpro,mvest,cdtra1,CDMAR,CDGRUP,CDSUBGRUP,CDCATPRO, CDTIPP, CDALM
 ,estmvvd2 left outer join cdprocm on (estmvvd2.vd2_pro = cdprocm.pro_pro and estmvvd2.vd2_cor = cdprocm.pro_cor and estmvvd2.vd2_med = cdprocm.pro_med )
 left outer join cdmed on estmvvd2.vd2_med = cdmed.med_cod
 left outer join cdcor on estmvvd2.vd2_cor = cdcor.cor_cod
 Where vd2_pro = cdpro.pro_cod
 and vd2_bol = vd1_cod
 and vd2_pro = est_pro and vd2_alm = est_alm and vd2_med = est_tam
 and vd2_cor = est_cor and vd1_canc <> 'C'
 and PRO_MAR = MAR_COD and PRO_TIP = TIP_COD
 and PRO_CAT = CAT_COD
 and vd2_alm = alm_cod
 and PRO_GRU = CDGRUP.GRU_COD
 and PRO_SUBGRU = CDSUBGRUP.GRU_COD
 and TRA_TIP_TRA = 'VND' and vd1_tra = tra_cod
 and ESTMVVD1.VD1_CAD >= :PDATADE and ESTMVVD1.VD1_CAD <= :PDATAATE
 and ( (CDPRO.PRO_NOM >= :PPRODE and CDPRO.PRO_NOM <= :PPROATE) OR (:PPRODE IS NULL) )
 and ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 and ( (CDMAR.MAR_NOM >= :PMARDE and CDMAR.MAR_NOM <= :PMARATE) OR (:PMARDE IS NULL) )
 and ( (CDGRUP.GRU_NOM >= :PGRUDE and CDGRUP.GRU_NOM <= :PGRUATE) OR (:PGRUDE IS NULL) )
 and ( (CDSUBGRUP.GRU_NOM >= :PSGRUDE and CDSUBGRUP.GRU_NOM <= :PSGRUATE) OR (:PSGRUDE IS NULL) )
 and ( (CDTIPP.TIP_NOM >= :PTIPDE and CDTIPP.TIP_NOM <= :PTIPATE) OR (:PTIPDE IS NULL) )
 and ( (CDCATPRO.CAT_NOM >= :PCATDE and CDCATPRO.CAT_NOM <= :PCATATE) OR (:PCATDE IS NULL) )
 and ( (CDTRA1.TRA_NOM >= :PTRADE and CDTRA1.TRA_NOM <= :PTRAATE) OR (:PTRADE IS NULL) )
 Group By cdpro.pro_nom, cdpro.pro_int, cdpro.pro_bar, cdpro.pro_cod, cdprocm.pro_cod, cdmed.med_nom, cdcor.cor_nom, cdmar.mar_nom, est_sal
 ORDER BY PRO_COD ASC
 INTO :WCUPOM,:WMOVIMENTO,:WFATURAMENTO,:WEST_SAL,:WPRODUTO,:WPRO_INT,:WPRO_BAR,:WPRO_NOM,:WMAR_NOM
 DO
 BEGIN
 IF (WCONT=0) THEN
 BEGIN
 PRO_COD=WPRODUTO;
 END
 WCONT=WCONT+1;
 IF (:MOVIMENTO>0) THEN
 BEGIN
 DURACAO = ( est_sal / (:MOVIMENTO/:pDIAS) );
 DURACAO = (CAST((DURACAO * 100) as integer) / 100);
 END
 ELSE
 DURACAO = 0;
 IF (:WPRODUTO<>PRO_COD) THEN
 BEGIN
 SUSPEND;
 MOVIMENTO=0;
 FATURAMENTO=0;
 EST_SAL=0;
 DURACAO=0;
 END
 CUPOM=WCUPOM;
 PRO_INT=WPRO_INT;
 PRO_BAR=WPRO_BAR;
 PRO_NOM=WPRO_NOM;
 TIP_NOM=WTIP_NOM;
 MAR_NOM=WMAR_NOM;
 GRU_NOM=WGRU_NOM;
 SUBGRUPO=WSUBGRUPO;
 MOVIMENTO=MOVIMENTO+WMOVIMENTO;
 FATURAMENTO=FATURAMENTO+WFATURAMENTO;
 EST_SAL=EST_SAL+WEST_SAL;
 DURACAO=DURACAO+WDURACAO;
 PRO_COD=WPRODUTO;
 END
 SUSPEND;
 END
 IF (PTIPO=2) THEN
 BEGIN
 For
 Select Distinct Count( vd1_cod ) As Cupom
 ,sum(vd2_qtd) As Movimento
 ,Sum( (vd2_vlr*vd2_qtd) ) As Faturamento
 ,est_sal
 ,cdpro.pro_cod,cdpro.pro_int,cdpro.pro_bar,cdpro.pro_nom,tip_nom
 From estmvvd1,cdpro,mvest,cdtra1,CDMAR,CDGRUP,CDSUBGRUP,CDCATPRO, CDTIPP, CDALM
 ,estmvvd2 left outer join cdprocm on (estmvvd2.vd2_pro = cdprocm.pro_pro and estmvvd2.vd2_cor = cdprocm.pro_cor and estmvvd2.vd2_med = cdprocm.pro_med )
 left outer join cdmed on estmvvd2.vd2_med = cdmed.med_cod
 left outer join cdcor on estmvvd2.vd2_cor = cdcor.cor_cod
 Where vd2_pro = cdpro.pro_cod
 and vd2_bol = vd1_cod
 and vd2_pro = est_pro and vd2_alm = est_alm and vd2_med = est_tam
 and vd2_cor = est_cor and vd1_canc <> 'C'
 and PRO_MAR = MAR_COD and PRO_TIP = TIP_COD
 and PRO_CAT = CAT_COD
 and vd2_alm = alm_cod
 and PRO_GRU = CDGRUP.GRU_COD
 and PRO_SUBGRU = CDSUBGRUP.GRU_COD
 and TRA_TIP_TRA = 'VND' and vd1_tra = tra_cod
 and ESTMVVD1.VD1_CAD >= :PDATADE and ESTMVVD1.VD1_CAD <= :PDATAATE
 and ( (CDPRO.PRO_NOM >= :PPRODE and CDPRO.PRO_NOM <= :PPROATE) OR (:PPRODE IS NULL) )
 and ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 and ( (CDMAR.MAR_NOM >= :PMARDE and CDMAR.MAR_NOM <= :PMARATE) OR (:PMARDE IS NULL) )
 and ( (CDGRUP.GRU_NOM >= :PGRUDE and CDGRUP.GRU_NOM <= :PGRUATE) OR (:PGRUDE IS NULL) )
 and ( (CDSUBGRUP.GRU_NOM >= :PSGRUDE and CDSUBGRUP.GRU_NOM <= :PSGRUATE) OR (:PSGRUDE IS NULL) )
 and ( (CDTIPP.TIP_NOM >= :PTIPDE and CDTIPP.TIP_NOM <= :PTIPATE) OR (:PTIPDE IS NULL) )
 and ( (CDCATPRO.CAT_NOM >= :PCATDE and CDCATPRO.CAT_NOM <= :PCATATE) OR (:PCATDE IS NULL) )
 and ( (CDTRA1.TRA_NOM >= :PTRADE and CDTRA1.TRA_NOM <= :PTRAATE) OR (:PTRADE IS NULL) )
 Group By cdpro.pro_nom, cdpro.pro_int, cdpro.pro_bar, cdtipp.tip_nom, cdpro.pro_cod, mvest.est_sal,cdprocm.pro_cod, cdmed.med_nom, cdcor.cor_nom
 ORDER BY PRO_COD ASC
 INTO :WCUPOM,:WMOVIMENTO,:WFATURAMENTO,:WEST_SAL,:WPRODUTO,:WPRO_INT,:WPRO_BAR,:WPRO_NOM,:WTIP_NOM
 DO
 BEGIN
 IF (WCONT=0) THEN
 BEGIN
 PRO_COD=WPRODUTO;
 END
 WCONT=WCONT+1;
 IF (:MOVIMENTO>0) THEN
 BEGIN
 DURACAO = ( est_sal / (:MOVIMENTO/:pDIAS) );
 DURACAO = (CAST((DURACAO * 100) as integer) / 100);
 END
 ELSE
 DURACAO = 0;
 IF (:WPRODUTO<>PRO_COD) THEN
 BEGIN
 SUSPEND;
 MOVIMENTO=0;
 FATURAMENTO=0;
 EST_SAL=0;
 DURACAO=0;
 END
 CUPOM=WCUPOM;
 PRO_INT=WPRO_INT;
 PRO_BAR=WPRO_BAR;
 PRO_NOM=WPRO_NOM;
 TIP_NOM=WTIP_NOM;
 MAR_NOM=WMAR_NOM;
 GRU_NOM=WGRU_NOM;
 SUBGRUPO=WSUBGRUPO;
 MOVIMENTO=MOVIMENTO+WMOVIMENTO;
 FATURAMENTO=FATURAMENTO+WFATURAMENTO;
 EST_SAL=EST_SAL+WEST_SAL;
 DURACAO=DURACAO+WDURACAO;
 PRO_COD=WPRODUTO;
 END
 SUSPEND;
 END
 IF (PTIPO=3) THEN
 BEGIN
 For
 Select Distinct Count( vd1_cod ) As Cupom
 ,sum(vd2_qtd) As Movimento
 ,Sum( (vd2_vlr*vd2_qtd) ) As Faturamento
 ,est_sal
 ,cdpro.pro_cod,cdpro.pro_int,cdpro.pro_bar,cdpro.pro_nom, CDGRUP.GRU_NOM, CDSUBGRUP.GRU_NOM AS SUBGRUPO
 From estmvvd1,cdpro,mvest,cdtra1,CDMAR,CDGRUP,CDSUBGRUP,CDCATPRO, CDTIPP, CDALM
 ,estmvvd2 left outer join cdprocm on (estmvvd2.vd2_pro = cdprocm.pro_pro and estmvvd2.vd2_cor = cdprocm.pro_cor and estmvvd2.vd2_med = cdprocm.pro_med )
 left outer join cdmed on estmvvd2.vd2_med = cdmed.med_cod
 left outer join cdcor on estmvvd2.vd2_cor = cdcor.cor_cod
 Where vd2_pro = cdpro.pro_cod
 and vd2_bol = vd1_cod
 and vd2_pro = est_pro and vd2_alm = est_alm and vd2_med = est_tam
 and vd2_cor = est_cor and vd1_canc <> 'C'
 and PRO_MAR = MAR_COD and PRO_TIP = TIP_COD
 and PRO_CAT = CAT_COD
 and vd2_alm = alm_cod
 and PRO_GRU = CDGRUP.GRU_COD
 and PRO_SUBGRU = CDSUBGRUP.GRU_COD
 and TRA_TIP_TRA = 'VND' and vd1_tra = tra_cod
 and ESTMVVD1.VD1_CAD >= :PDATADE and ESTMVVD1.VD1_CAD <= :PDATAATE
 and ( (CDPRO.PRO_NOM >= :PPRODE and CDPRO.PRO_NOM <= :PPROATE) OR (:PPRODE IS NULL) )
 and ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 and ( (CDMAR.MAR_NOM >= :PMARDE and CDMAR.MAR_NOM <= :PMARATE) OR (:PMARDE IS NULL) )
 and ( (CDGRUP.GRU_NOM >= :PGRUDE and CDGRUP.GRU_NOM <= :PGRUATE) OR (:PGRUDE IS NULL) )
 and ( (CDSUBGRUP.GRU_NOM >= :PSGRUDE and CDSUBGRUP.GRU_NOM <= :PSGRUATE) OR (:PSGRUDE IS NULL) )
 and ( (CDTIPP.TIP_NOM >= :PTIPDE and CDTIPP.TIP_NOM <= :PTIPATE) OR (:PTIPDE IS NULL) )
 and ( (CDCATPRO.CAT_NOM >= :PCATDE and CDCATPRO.CAT_NOM <= :PCATATE) OR (:PCATDE IS NULL) )
 and ( (CDTRA1.TRA_NOM >= :PTRADE and CDTRA1.TRA_NOM <= :PTRAATE) OR (:PTRADE IS NULL) )
 Group By cdpro.pro_nom, cdpro.pro_int, cdpro.pro_bar, cdpro.pro_cod, mvest.est_sal, CDGRUP.GRU_NOM, CDSUBGRUP.GRU_NOM,cdprocm.pro_cod, cdmed.med_nom, cdcor.cor_nom
 ORDER BY PRO_COD ASC
 INTO :WCUPOM,:WMOVIMENTO,:WFATURAMENTO,:WEST_SAL,:WPRODUTO,:WPRO_INT,:WPRO_BAR,:WPRO_NOM,:WGRU_NOM,:WSUBGRUPO
 DO
 BEGIN
 IF (WCONT=0) THEN
 BEGIN
 PRO_COD=WPRODUTO;
 END
 WCONT=WCONT+1;
 IF (:MOVIMENTO>0) THEN
 BEGIN
 DURACAO = ( est_sal / (:MOVIMENTO/:pDIAS) );
 DURACAO = (CAST((DURACAO * 100) as integer) / 100);
 END
 ELSE
 DURACAO = 0;
 IF (:WPRODUTO<>PRO_COD) THEN
 BEGIN
 SUSPEND;
 MOVIMENTO=0;
 FATURAMENTO=0;
 EST_SAL=0;
 DURACAO=0;
 END
 CUPOM=WCUPOM;
 PRO_INT=WPRO_INT;
 PRO_BAR=WPRO_BAR;
 PRO_NOM=WPRO_NOM;
 TIP_NOM=WTIP_NOM;
 MAR_NOM=WMAR_NOM;
 GRU_NOM=WGRU_NOM;
 SUBGRUPO=WSUBGRUPO;
 MOVIMENTO=MOVIMENTO+WMOVIMENTO;
 FATURAMENTO=FATURAMENTO+WFATURAMENTO;
 EST_SAL=EST_SAL+WEST_SAL;
 DURACAO=DURACAO+WDURACAO;
 PRO_COD=WPRODUTO;
 END
 SUSPEND;
 END
 IF (PTIPO=4) THEN
 BEGIN
 For
 Select Distinct Count( vd1_cod ) As Cupom
 ,sum(vd2_qtd) As Movimento
 ,Sum( (vd2_vlr*vd2_qtd) ) As Faturamento
 ,est_sal
 ,cdpro.pro_cod,cdpro.pro_int,cdpro.pro_bar,cdpro.pro_nom,CDSUBGRUP.GRU_NOM AS SUBGRUPO
 From estmvvd1,cdpro,mvest,cdtra1,CDMAR,CDGRUP,CDSUBGRUP,CDCATPRO, CDTIPP, CDALM
 ,estmvvd2 left outer join cdprocm on (estmvvd2.vd2_pro = cdprocm.pro_pro and estmvvd2.vd2_cor = cdprocm.pro_cor and estmvvd2.vd2_med = cdprocm.pro_med )
 left outer join cdmed on estmvvd2.vd2_med = cdmed.med_cod
 left outer join cdcor on estmvvd2.vd2_cor = cdcor.cor_cod
 Where vd2_pro = cdpro.pro_cod
 and vd2_bol = vd1_cod
 and vd2_pro = est_pro and vd2_alm = est_alm and vd2_med = est_tam
 and vd2_cor = est_cor and vd1_canc <> 'C'
 and PRO_MAR = MAR_COD and PRO_TIP = TIP_COD
 and PRO_CAT = CAT_COD
 and vd2_alm = alm_cod
 and PRO_GRU = CDGRUP.GRU_COD
 and PRO_SUBGRU = CDSUBGRUP.GRU_COD
 and TRA_TIP_TRA = 'VND' and vd1_tra = tra_cod
 and ESTMVVD1.VD1_CAD >= :PDATADE and ESTMVVD1.VD1_CAD <= :PDATAATE
 and ( (CDPRO.PRO_NOM >= :PPRODE and CDPRO.PRO_NOM <= :PPROATE) OR (:PPRODE IS NULL) )
 and ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 and ( (CDMAR.MAR_NOM >= :PMARDE and CDMAR.MAR_NOM <= :PMARATE) OR (:PMARDE IS NULL) )
 and ( (CDGRUP.GRU_NOM >= :PGRUDE and CDGRUP.GRU_NOM <= :PGRUATE) OR (:PGRUDE IS NULL) )
 and ( (CDSUBGRUP.GRU_NOM >= :PSGRUDE and CDSUBGRUP.GRU_NOM <= :PSGRUATE) OR (:PSGRUDE IS NULL) )
 and ( (CDTIPP.TIP_NOM >= :PTIPDE and CDTIPP.TIP_NOM <= :PTIPATE) OR (:PTIPDE IS NULL) )
 and ( (CDCATPRO.CAT_NOM >= :PCATDE and CDCATPRO.CAT_NOM <= :PCATATE) OR (:PCATDE IS NULL) )
 and ( (CDTRA1.TRA_NOM >= :PTRADE and CDTRA1.TRA_NOM <= :PTRAATE) OR (:PTRADE IS NULL) )
 Group By cdpro.pro_nom, cdpro.pro_int, cdpro.pro_bar, cdpro.pro_cod, mvest.est_sal, CDSUBGRUP.GRU_NOM,cdprocm.pro_cod, cdmed.med_nom, cdcor.cor_nom
 ORDER BY PRO_COD ASC
 INTO :WCUPOM,:WMOVIMENTO,:WFATURAMENTO,:WEST_SAL,:WPRODUTO,:WPRO_INT,:WPRO_BAR,:WPRO_NOM,:WSUBGRUPO
 DO
 BEGIN
 IF (WCONT=0) THEN
 BEGIN
 PRO_COD=WPRODUTO;
 END
 WCONT=WCONT+1;
 IF (:MOVIMENTO>0) THEN
 BEGIN
 DURACAO = ( est_sal / (:MOVIMENTO/:pDIAS) );
 DURACAO = (CAST((DURACAO * 100) as integer) / 100);
 END
 ELSE
 DURACAO = 0;
 IF (:WPRODUTO<>PRO_COD) THEN
 BEGIN
 SUSPEND;
 MOVIMENTO=0;
 FATURAMENTO=0;
 EST_SAL=0;
 DURACAO=0;
 END
 CUPOM=WCUPOM;
 PRO_INT=WPRO_INT;
 PRO_BAR=WPRO_BAR;
 PRO_NOM=WPRO_NOM;
 TIP_NOM=WTIP_NOM;
 MAR_NOM=WMAR_NOM;
 GRU_NOM=WGRU_NOM;
 SUBGRUPO=WSUBGRUPO;
 MOVIMENTO=MOVIMENTO+WMOVIMENTO;
 FATURAMENTO=FATURAMENTO+WFATURAMENTO;
 EST_SAL=EST_SAL+WEST_SAL;
 DURACAO=DURACAO+WDURACAO;
 PRO_COD=WPRODUTO;
 END
 SUSPEND;
 END
 IF (PTIPO=5) THEN
 BEGIN
 For
 Select Distinct Count( vd1_cod ) As Cupom
 ,sum(vd2_qtd) As Movimento
 ,Sum( (vd2_vlr*vd2_qtd) ) As Faturamento
 ,est_sal
 ,cdpro.pro_cod,cdpro.pro_int,cdpro.pro_bar,cdpro.pro_nom, cat_nom
 From estmvvd1,cdpro,mvest,cdtra1,CDMAR,CDGRUP,CDSUBGRUP,CDCATPRO, CDTIPP, CDALM
 ,estmvvd2 left outer join cdprocm on (estmvvd2.vd2_pro = cdprocm.pro_pro and estmvvd2.vd2_cor = cdprocm.pro_cor and estmvvd2.vd2_med = cdprocm.pro_med )
 left outer join cdmed on estmvvd2.vd2_med = cdmed.med_cod
 left outer join cdcor on estmvvd2.vd2_cor = cdcor.cor_cod
 Where vd2_pro = cdpro.pro_cod
 and vd2_bol = vd1_cod
 and vd2_pro = est_pro and vd2_alm = est_alm and vd2_med = est_tam
 and vd2_cor = est_cor and vd1_canc <> 'C'
 and PRO_MAR = MAR_COD and PRO_TIP = TIP_COD
 and PRO_CAT = CAT_COD
 and vd2_alm = alm_cod
 and PRO_GRU = CDGRUP.GRU_COD
 and PRO_SUBGRU = CDSUBGRUP.GRU_COD
 and TRA_TIP_TRA = 'VND' and vd1_tra = tra_cod
 and ESTMVVD1.VD1_CAD >= :PDATADE and ESTMVVD1.VD1_CAD <= :PDATAATE
 and ( (CDPRO.PRO_NOM >= :PPRODE and CDPRO.PRO_NOM <= :PPROATE) OR (:PPRODE IS NULL) )
 and ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 and ( (CDMAR.MAR_NOM >= :PMARDE and CDMAR.MAR_NOM <= :PMARATE) OR (:PMARDE IS NULL) )
 and ( (CDGRUP.GRU_NOM >= :PGRUDE and CDGRUP.GRU_NOM <= :PGRUATE) OR (:PGRUDE IS NULL) )
 and ( (CDSUBGRUP.GRU_NOM >= :PSGRUDE and CDSUBGRUP.GRU_NOM <= :PSGRUATE) OR (:PSGRUDE IS NULL) )
 and ( (CDTIPP.TIP_NOM >= :PTIPDE and CDTIPP.TIP_NOM <= :PTIPATE) OR (:PTIPDE IS NULL) )
 and ( (CDCATPRO.CAT_NOM >= :PCATDE and CDCATPRO.CAT_NOM <= :PCATATE) OR (:PCATDE IS NULL) )
 and ( (CDTRA1.TRA_NOM >= :PTRADE and CDTRA1.TRA_NOM <= :PTRAATE) OR (:PTRADE IS NULL) )
 Group By cdpro.pro_nom, cdpro.pro_int, cdpro.pro_bar, cdpro.pro_cod, mvest.est_sal,CAT_NOM,cdprocm.pro_cod, cdmed.med_nom, cdcor.cor_nom
 ORDER BY PRO_COD ASC
 INTO :WCUPOM,:WMOVIMENTO,:WFATURAMENTO,:WEST_SAL,:WPRODUTO,:WPRO_INT,:WPRO_BAR,:WPRO_NOM,:WCATEGORIA
 DO
 BEGIN
 IF (WCONT=0) THEN
 BEGIN
 PRO_COD=WPRODUTO;
 END
 WCONT=WCONT+1;
 IF (:MOVIMENTO>0) THEN
 BEGIN
 DURACAO = ( est_sal / (:MOVIMENTO/:pDIAS) );
 DURACAO = (CAST((DURACAO * 100) as integer) / 100);
 END
 ELSE
 DURACAO = 0;
 IF (:WPRODUTO<>PRO_COD) THEN
 BEGIN
 SUSPEND;
 MOVIMENTO=0;
 FATURAMENTO=0;
 EST_SAL=0;
 DURACAO=0;
 END
 CUPOM=WCUPOM;
 PRO_INT=WPRO_INT;
 PRO_BAR=WPRO_BAR;
 PRO_NOM=WPRO_NOM;
 TIP_NOM=WTIP_NOM;
 MAR_NOM=WMAR_NOM;
 GRU_NOM=WGRU_NOM;
 CATEGORIA=WCATEGORIA;
 SUBGRUPO=WSUBGRUPO;
 MOVIMENTO=MOVIMENTO+WMOVIMENTO;
 FATURAMENTO=FATURAMENTO+WFATURAMENTO;
 EST_SAL=EST_SAL+WEST_SAL;
 DURACAO=DURACAO+WDURACAO;
 PRO_COD=WPRODUTO;
 END
 SUSPEND;
 END
 END

 commit;

 ALTER PROCEDURE RELDURACAOCORMED (
    PDIAS INTEGER,
    PDATADE TIMESTAMP,
    PDATAATE TIMESTAMP,
    PTIPO INTEGER,
    PPRODE VARCHAR(100),
    PPROATE VARCHAR(100),
    PALMDE VARCHAR(50),
    PALMATE VARCHAR(50),
    PMARDE VARCHAR(30),
    PMARATE VARCHAR(30),
    PGRUDE VARCHAR(30),
    PGRUATE VARCHAR(30),
    PSGRUDE VARCHAR(30),
    PSGRUATE VARCHAR(30),
    PTIPDE VARCHAR(30),
    PTIPATE VARCHAR(30),
    PTRADE VARCHAR(40),
    PTRAATE VARCHAR(40),
    PCATDE VARCHAR(30),
    PCATATE VARCHAR(30))
RETURNS ( 
    CUPOM VARCHAR(6),
    MOVIMENTO DOUBLE PRECISION,
    FATURAMENTO DOUBLE PRECISION,
    EST_SAL DOUBLE PRECISION,
    PRO_COD INTEGER,
    PRO_INT VARCHAR(15),
    PRO_BAR VARCHAR(15),
    PRO_NOM VARCHAR(100),
    DURACAO DOUBLE PRECISION,
    TIP_NOM VARCHAR(30),
    MAR_NOM VARCHAR(30),
    GRU_NOM VARCHAR(30),
    SUBGRUPO VARCHAR(30),
    COR_NOM VARCHAR(30),
    MED_NOM VARCHAR(30),
    CODIGO VARCHAR(21),
    CATEGORIA VARCHAR(30))
 AS
begin
 IF (PTIPO=0) THEN
 BEGIN
 For
 Select Distinct Count( vd1_cod ) As Cupom
 ,sum(vd2_qtd) As Movimento
 ,Sum( (vd2_vlr*vd2_qtd) ) As Faturamento
 ,est_sal
 ,cdpro.pro_cod,cdpro.pro_int,cdpro.pro_bar,cdpro.pro_nom
 ,cdprocm.pro_cod AS CODIGO, cdmed.med_nom, cdcor.cor_nom
 From estmvvd1,cdpro,mvest,cdtra1,CDMAR,CDGRUP,CDSUBGRUP,CDCATPRO, CDTIPP, CDALM
 ,estmvvd2 left outer join cdprocm on (estmvvd2.vd2_pro = cdprocm.pro_pro and estmvvd2.vd2_cor = cdprocm.pro_cor and estmvvd2.vd2_med = cdprocm.pro_med )
 left outer join cdmed on estmvvd2.vd2_med = cdmed.med_cod
 left outer join cdcor on estmvvd2.vd2_cor = cdcor.cor_cod
 Where vd2_pro = cdpro.pro_cod
 and vd2_bol = vd1_cod
 and vd2_pro = est_pro and vd2_alm = est_alm and vd2_med = est_tam
 and vd2_cor = est_cor and vd1_canc <> 'C'
 and PRO_MAR = MAR_COD and PRO_TIP = TIP_COD
 and PRO_CAT = CAT_COD
 and vd2_alm = alm_cod
 and PRO_GRU = CDGRUP.GRU_COD
 and PRO_SUBGRU = CDSUBGRUP.GRU_COD
 and TRA_TIP_TRA = 'VND' and vd1_tra = tra_cod
 and ESTMVVD1.VD1_CAD >= :PDATADE and ESTMVVD1.VD1_CAD <= :PDATAATE
 and ( (CDPRO.PRO_NOM >= :PPRODE and CDPRO.PRO_NOM <= :PPROATE) OR (:PPRODE IS NULL) )
 and ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 and ( (CDMAR.MAR_NOM >= :PMARDE and CDMAR.MAR_NOM <= :PMARATE) OR (:PMARDE IS NULL) )
 and ( (CDGRUP.GRU_NOM >= :PGRUDE and CDGRUP.GRU_NOM <= :PGRUATE) OR (:PGRUDE IS NULL) )
 and ( (CDSUBGRUP.GRU_NOM >= :PSGRUDE and CDSUBGRUP.GRU_NOM <= :PSGRUATE) OR (:PSGRUDE IS NULL) )
 and ( (CDTIPP.TIP_NOM >= :PTIPDE and CDTIPP.TIP_NOM <= :PTIPATE) OR (:PTIPDE IS NULL) )
 and ( (CDCATPRO.CAT_NOM >= :PCATDE and CDCATPRO.CAT_NOM <= :PCATATE) OR (:PCATDE IS NULL) )
 and ( (CDTRA1.TRA_NOM >= :PTRADE and CDTRA1.TRA_NOM <= :PTRAATE) OR (:PTRADE IS NULL) )
 Group By cdpro.pro_nom, cdpro.pro_int, cdpro.pro_bar, cdpro.pro_cod,cdprocm.pro_cod, cdmed.med_nom, cdcor.cor_nom, est_sal
 INTO :CUPOM,:MOVIMENTO,:FATURAMENTO,:EST_SAL,:PRO_COD,:PRO_INT,:PRO_BAR,:PRO_NOM, :CODIGO, :MED_NOM, COR_NOM
 DO
 BEGIN
 IF (:MOVIMENTO>0) THEN
 BEGIN
 DURACAO = ( est_sal / (:MOVIMENTO/:pDIAS) );
 DURACAO = (CAST((DURACAO * 100) as integer) / 100);
 END
 ELSE
 DURACAO = 0;
 SUSPEND;
 END
 END
 IF (PTIPO=1) THEN
 BEGIN
 For
 Select Distinct Count( vd1_cod ) As Cupom
 ,Sum(vd2_qtd) As Movimento
 ,Sum( (vd2_vlr*vd2_qtd) ) As Faturamento
 ,est_sal
 ,cdpro.pro_cod,cdpro.pro_int,cdpro.pro_bar,cdpro.pro_nom,MAR_NOM
 ,cdprocm.pro_cod AS CODIGO, cdmed.med_nom, cdcor.cor_nom
 From estmvvd1,cdpro,mvest,cdtra1,CDMAR,CDGRUP,CDSUBGRUP,CDCATPRO, CDTIPP, CDALM
 ,estmvvd2 left outer join cdprocm on (estmvvd2.vd2_pro = cdprocm.pro_pro and estmvvd2.vd2_cor = cdprocm.pro_cor and estmvvd2.vd2_med = cdprocm.pro_med )
 left outer join cdmed on estmvvd2.vd2_med = cdmed.med_cod
 left outer join cdcor on estmvvd2.vd2_cor = cdcor.cor_cod
 Where vd2_pro = cdpro.pro_cod
 and vd2_bol = vd1_cod
 and vd2_pro = est_pro and vd2_alm = est_alm and vd2_med = est_tam
 and vd2_cor = est_cor and vd1_canc <> 'C'
 and PRO_MAR = MAR_COD and PRO_TIP = TIP_COD
 and PRO_CAT = CAT_COD
 and vd2_alm = alm_cod
 and PRO_GRU = CDGRUP.GRU_COD
 and PRO_SUBGRU = CDSUBGRUP.GRU_COD
 and TRA_TIP_TRA = 'VND' and vd1_tra = tra_cod
 and ESTMVVD1.VD1_CAD >= :PDATADE and ESTMVVD1.VD1_CAD <= :PDATAATE
 and ( (CDPRO.PRO_NOM >= :PPRODE and CDPRO.PRO_NOM <= :PPROATE) OR (:PPRODE IS NULL) )
 and ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 and ( (CDMAR.MAR_NOM >= :PMARDE and CDMAR.MAR_NOM <= :PMARATE) OR (:PMARDE IS NULL) )
 and ( (CDGRUP.GRU_NOM >= :PGRUDE and CDGRUP.GRU_NOM <= :PGRUATE) OR (:PGRUDE IS NULL) )
 and ( (CDSUBGRUP.GRU_NOM >= :PSGRUDE and CDSUBGRUP.GRU_NOM <= :PSGRUATE) OR (:PSGRUDE IS NULL) )
 and ( (CDTIPP.TIP_NOM >= :PTIPDE and CDTIPP.TIP_NOM <= :PTIPATE) OR (:PTIPDE IS NULL) )
 and ( (CDCATPRO.CAT_NOM >= :PCATDE and CDCATPRO.CAT_NOM <= :PCATATE) OR (:PCATDE IS NULL) )
 and ( (CDTRA1.TRA_NOM >= :PTRADE and CDTRA1.TRA_NOM <= :PTRAATE) OR (:PTRADE IS NULL) )
 Group By cdpro.pro_nom, cdpro.pro_int, cdpro.pro_bar, cdmar.mar_nom, cdpro.pro_cod, mvest.est_sal,cdprocm.pro_cod, cdmed.med_nom, cdcor.cor_nom
 INTO :CUPOM,:MOVIMENTO,:FATURAMENTO,:EST_SAL,:PRO_COD,:PRO_INT,:PRO_BAR,:PRO_NOM,:MAR_NOM, :CODIGO, :MED_NOM, COR_NOM DO
 BEGIN
 IF (:MOVIMENTO>0) THEN
 BEGIN
 DURACAO = ( est_sal / (:MOVIMENTO/:pDIAS) );
 DURACAO = (CAST((DURACAO * 100) as integer) / 100);
 END
 ELSE
 DURACAO = 0;
 SUSPEND;
 END
 END
 IF (PTIPO=2) THEN
 BEGIN
 For
 Select Distinct Count( vd1_cod ) As Cupom
 ,Sum(vd2_qtd) As Movimento
 ,Sum( (vd2_vlr*vd2_qtd) ) As Faturamento
 ,est_sal
 ,cdpro.pro_cod,cdpro.pro_int,cdpro.pro_bar,cdpro.pro_nom,TIP_NOM
 ,cdprocm.pro_cod AS CODIGO, cdmed.med_nom, cdcor.cor_nom
 From estmvvd1,cdpro,mvest,cdtra1,CDMAR,CDGRUP,CDSUBGRUP,CDCATPRO, CDTIPP, CDALM
 ,estmvvd2 left outer join cdprocm on (estmvvd2.vd2_pro = cdprocm.pro_pro and estmvvd2.vd2_cor = cdprocm.pro_cor and estmvvd2.vd2_med = cdprocm.pro_med )
 left outer join cdmed on estmvvd2.vd2_med = cdmed.med_cod
 left outer join cdcor on estmvvd2.vd2_cor = cdcor.cor_cod
 Where vd2_pro = cdpro.pro_cod
 and vd2_bol = vd1_cod
 and vd2_pro = est_pro and vd2_alm = est_alm and vd2_med = est_tam
 and vd2_cor = est_cor and vd1_canc <> 'C'
 and PRO_MAR = MAR_COD and PRO_TIP = TIP_COD
 and PRO_CAT = CAT_COD
 and vd2_alm = alm_cod
 and PRO_GRU = CDGRUP.GRU_COD
 and PRO_SUBGRU = CDSUBGRUP.GRU_COD
 and TRA_TIP_TRA = 'VND' and vd1_tra = tra_cod
 and ESTMVVD1.VD1_CAD >= :PDATADE and ESTMVVD1.VD1_CAD <= :PDATAATE
 and ( (CDPRO.PRO_NOM >= :PPRODE and CDPRO.PRO_NOM <= :PPROATE) OR (:PPRODE IS NULL) )
 and ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 and ( (CDMAR.MAR_NOM >= :PMARDE and CDMAR.MAR_NOM <= :PMARATE) OR (:PMARDE IS NULL) )
 and ( (CDGRUP.GRU_NOM >= :PGRUDE and CDGRUP.GRU_NOM <= :PGRUATE) OR (:PGRUDE IS NULL) )
 and ( (CDSUBGRUP.GRU_NOM >= :PSGRUDE and CDSUBGRUP.GRU_NOM <= :PSGRUATE) OR (:PSGRUDE IS NULL) )
 and ( (CDTIPP.TIP_NOM >= :PTIPDE and CDTIPP.TIP_NOM <= :PTIPATE) OR (:PTIPDE IS NULL) )
 and ( (CDCATPRO.CAT_NOM >= :PCATDE and CDCATPRO.CAT_NOM <= :PCATATE) OR (:PCATDE IS NULL) )
 and ( (CDTRA1.TRA_NOM >= :PTRADE and CDTRA1.TRA_NOM <= :PTRAATE) OR (:PTRADE IS NULL) )
 Group By cdpro.pro_nom, cdpro.pro_int, cdpro.pro_bar, CDTIPP.tip_nom, cdpro.pro_cod, mvest.est_sal,cdprocm.pro_cod, cdmed.med_nom, cdcor.cor_nom
 INTO :CUPOM,:MOVIMENTO,:FATURAMENTO,:EST_SAL,:PRO_COD,:PRO_INT,:PRO_BAR,:PRO_NOM,:TIP_NOM, :CODIGO, :MED_NOM, COR_NOM
 DO
 BEGIN
 IF (:MOVIMENTO>0) THEN
 BEGIN
 DURACAO = ( est_sal / (:MOVIMENTO/:pDIAS) );
 DURACAO = (CAST((DURACAO * 100) as integer) / 100);
 END
 ELSE
 DURACAO = 0;
 SUSPEND;
 END
 END
 IF (PTIPO=3) THEN
 BEGIN
 For
 Select Distinct Count( vd1_cod ) As Cupom
 ,Sum(vd2_qtd) As Movimento
 ,Sum( (vd2_vlr*vd2_qtd) ) As Faturamento
 ,est_sal
 ,cdpro.pro_cod,cdpro.pro_int,cdpro.pro_bar,cdpro.pro_nom,CDGRUP.GRU_NOM, CDSUBGRUP.GRU_NOM AS SUBGRUPO
 ,cdprocm.pro_cod AS CODIGO, cdmed.med_nom, cdcor.cor_nom
 From estmvvd1,cdpro,mvest,cdtra1,CDMAR,CDGRUP,CDSUBGRUP,CDCATPRO, CDTIPP, CDALM
 ,estmvvd2 left outer join cdprocm on (estmvvd2.vd2_pro = cdprocm.pro_pro and estmvvd2.vd2_cor = cdprocm.pro_cor and estmvvd2.vd2_med = cdprocm.pro_med )
 left outer join cdmed on estmvvd2.vd2_med = cdmed.med_cod
 left outer join cdcor on estmvvd2.vd2_cor = cdcor.cor_cod
 Where vd2_pro = cdpro.pro_cod
 and vd2_bol = vd1_cod
 and vd2_pro = est_pro and vd2_alm = est_alm and vd2_med = est_tam
 and vd2_cor = est_cor and vd1_canc <> 'C'
 and PRO_MAR = MAR_COD and PRO_TIP = TIP_COD
 and PRO_CAT = CAT_COD
 and vd2_alm = alm_cod
 and PRO_GRU = CDGRUP.GRU_COD
 and PRO_SUBGRU = CDSUBGRUP.GRU_COD
 and TRA_TIP_TRA = 'VND' and vd1_tra = tra_cod
 and ESTMVVD1.VD1_CAD >= :PDATADE and ESTMVVD1.VD1_CAD <= :PDATAATE
 and ( (CDPRO.PRO_NOM >= :PPRODE and CDPRO.PRO_NOM <= :PPROATE) OR (:PPRODE IS NULL) )
 and ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 and ( (CDMAR.MAR_NOM >= :PMARDE and CDMAR.MAR_NOM <= :PMARATE) OR (:PMARDE IS NULL) )
 and ( (CDGRUP.GRU_NOM >= :PGRUDE and CDGRUP.GRU_NOM <= :PGRUATE) OR (:PGRUDE IS NULL) )
 and ( (CDSUBGRUP.GRU_NOM >= :PSGRUDE and CDSUBGRUP.GRU_NOM <= :PSGRUATE) OR (:PSGRUDE IS NULL) )
 and ( (CDTIPP.TIP_NOM >= :PTIPDE and CDTIPP.TIP_NOM <= :PTIPATE) OR (:PTIPDE IS NULL) )
 and ( (CDCATPRO.CAT_NOM >= :PCATDE and CDCATPRO.CAT_NOM <= :PCATATE) OR (:PCATDE IS NULL) )
 and ( (CDTRA1.TRA_NOM >= :PTRADE and CDTRA1.TRA_NOM <= :PTRAATE) OR (:PTRADE IS NULL) )
 Group By cdpro.pro_nom, cdpro.pro_int, cdpro.pro_bar, cdpro.pro_cod, mvest.est_sal, CDGRUP.GRU_NOM, CDSUBGRUP.GRU_NOM,cdprocm.pro_cod, cdmed.med_nom, cdcor.cor_nom
 INTO :CUPOM,:MOVIMENTO,:FATURAMENTO,:EST_SAL,:PRO_COD,:PRO_INT,:PRO_BAR,:PRO_NOM,:GRU_NOM,:SUBGRUPO, :CODIGO, :MED_NOM, COR_NOM
 DO
 BEGIN
 IF (:MOVIMENTO>0) THEN
 BEGIN
 DURACAO = ( est_sal / (:MOVIMENTO/:pDIAS) );
 DURACAO = (CAST((DURACAO * 100) as integer) / 100);
 END
 ELSE
 DURACAO = 0;
 SUSPEND;
 END
 END
 IF (PTIPO=4) THEN
 BEGIN
 For
 Select Distinct Count( vd1_cod ) As Cupom
 ,Sum(vd2_qtd) As Movimento
 ,Sum( (vd2_vlr*vd2_qtd) ) As Faturamento
 ,est_sal
 ,cdpro.pro_cod,cdpro.pro_int,cdpro.pro_bar,cdpro.pro_nom,CDSUBGRUP.GRU_NOM AS SUBGRUPO
 ,cdprocm.pro_cod AS CODIGO, cdmed.med_nom, cdcor.cor_nom
 From estmvvd1,cdpro,mvest,cdtra1,CDMAR,CDGRUP,CDSUBGRUP,CDCATPRO, CDTIPP, CDALM
 ,estmvvd2 left outer join cdprocm on (estmvvd2.vd2_pro = cdprocm.pro_pro and estmvvd2.vd2_cor = cdprocm.pro_cor and estmvvd2.vd2_med = cdprocm.pro_med )
 left outer join cdmed on estmvvd2.vd2_med = cdmed.med_cod
 left outer join cdcor on estmvvd2.vd2_cor = cdcor.cor_cod
 Where vd2_pro = cdpro.pro_cod
 and vd2_bol = vd1_cod
 and vd2_pro = est_pro and vd2_alm = est_alm and vd2_med = est_tam
 and vd2_cor = est_cor and vd1_canc <> 'C'
 and PRO_MAR = MAR_COD and PRO_TIP = TIP_COD
 and PRO_CAT = CAT_COD
 and vd2_alm = alm_cod
 and PRO_GRU = CDGRUP.GRU_COD
 and PRO_SUBGRU = CDSUBGRUP.GRU_COD
 and TRA_TIP_TRA = 'VND' and vd1_tra = tra_cod
 and ESTMVVD1.VD1_CAD >= :PDATADE and ESTMVVD1.VD1_CAD <= :PDATAATE
 and ( (CDPRO.PRO_NOM >= :PPRODE and CDPRO.PRO_NOM <= :PPROATE) OR (:PPRODE IS NULL) )
 and ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 and ( (CDMAR.MAR_NOM >= :PMARDE and CDMAR.MAR_NOM <= :PMARATE) OR (:PMARDE IS NULL) )
 and ( (CDGRUP.GRU_NOM >= :PGRUDE and CDGRUP.GRU_NOM <= :PGRUATE) OR (:PGRUDE IS NULL) )
 and ( (CDSUBGRUP.GRU_NOM >= :PSGRUDE and CDSUBGRUP.GRU_NOM <= :PSGRUATE) OR (:PSGRUDE IS NULL) )
 and ( (CDTIPP.TIP_NOM >= :PTIPDE and CDTIPP.TIP_NOM <= :PTIPATE) OR (:PTIPDE IS NULL) )
 and ( (CDCATPRO.CAT_NOM >= :PCATDE and CDCATPRO.CAT_NOM <= :PCATATE) OR (:PCATDE IS NULL) )
 and ( (CDTRA1.TRA_NOM >= :PTRADE and CDTRA1.TRA_NOM <= :PTRAATE) OR (:PTRADE IS NULL) )
 Group By cdpro.pro_nom, cdpro.pro_int, cdpro.pro_bar, cdpro.pro_cod, mvest.est_sal, CDSUBGRUP.GRU_NOM,cdprocm.pro_cod, cdmed.med_nom, cdcor.cor_nom
 INTO :CUPOM,:MOVIMENTO,:FATURAMENTO,:EST_SAL,:PRO_COD,:PRO_INT,:PRO_BAR,:PRO_NOM,:SUBGRUPO, :CODIGO, :MED_NOM, COR_NOM
 DO
 BEGIN
 IF (:MOVIMENTO>0) THEN
 BEGIN
 DURACAO = ( est_sal / (:MOVIMENTO/:pDIAS) );
 DURACAO = (CAST((DURACAO * 100) as integer) / 100);
 END
 ELSE
 DURACAO = 0;
 SUSPEND;
 END
 END
 IF (PTIPO=5) THEN
 BEGIN
 For
 Select Distinct Count( vd1_cod ) As Cupom
 ,Sum(vd2_qtd) As Movimento
 ,Sum( (vd2_vlr*vd2_qtd) ) As Faturamento
 ,est_sal
 ,cdpro.pro_cod,cdpro.pro_int,cdpro.pro_bar,cdpro.pro_nom,CAT_NOM
 ,cdprocm.pro_cod AS CODIGO, cdmed.med_nom, cdcor.cor_nom
 From estmvvd1,cdpro,mvest,cdtra1,CDMAR,CDGRUP,CDSUBGRUP,CDCATPRO, CDTIPP, CDALM
 ,estmvvd2 left outer join cdprocm on (estmvvd2.vd2_pro = cdprocm.pro_pro and estmvvd2.vd2_cor = cdprocm.pro_cor and estmvvd2.vd2_med = cdprocm.pro_med )
 left outer join cdmed on estmvvd2.vd2_med = cdmed.med_cod
 left outer join cdcor on estmvvd2.vd2_cor = cdcor.cor_cod
 Where vd2_pro = cdpro.pro_cod
 and vd2_bol = vd1_cod
 and vd2_pro = est_pro and vd2_alm = est_alm and vd2_med = est_tam
 and vd2_cor = est_cor and vd1_canc <> 'C'
 and PRO_MAR = MAR_COD and PRO_TIP = TIP_COD
 and PRO_CAT = CAT_COD
 and vd2_alm = alm_cod
 and PRO_GRU = CDGRUP.GRU_COD
 and PRO_SUBGRU = CDSUBGRUP.GRU_COD
 and TRA_TIP_TRA = 'VND' and vd1_tra = tra_cod
 and ESTMVVD1.VD1_CAD >= :PDATADE and ESTMVVD1.VD1_CAD <= :PDATAATE
 and ( (CDPRO.PRO_NOM >= :PPRODE and CDPRO.PRO_NOM <= :PPROATE) OR (:PPRODE IS NULL) )
 and ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 and ( (CDMAR.MAR_NOM >= :PMARDE and CDMAR.MAR_NOM <= :PMARATE) OR (:PMARDE IS NULL) )
 and ( (CDGRUP.GRU_NOM >= :PGRUDE and CDGRUP.GRU_NOM <= :PGRUATE) OR (:PGRUDE IS NULL) )
 and ( (CDSUBGRUP.GRU_NOM >= :PSGRUDE and CDSUBGRUP.GRU_NOM <= :PSGRUATE) OR (:PSGRUDE IS NULL) )
 and ( (CDTIPP.TIP_NOM >= :PTIPDE and CDTIPP.TIP_NOM <= :PTIPATE) OR (:PTIPDE IS NULL) )
 and ( (CDCATPRO.CAT_NOM >= :PCATDE and CDCATPRO.CAT_NOM <= :PCATATE) OR (:PCATDE IS NULL) )
 and ( (CDTRA1.TRA_NOM >= :PTRADE and CDTRA1.TRA_NOM <= :PTRAATE) OR (:PTRADE IS NULL) )
 Group By cdpro.pro_nom, cdpro.pro_int, cdpro.pro_bar, cdpro.pro_cod, mvest.est_sal, cdprocm.pro_cod, cdmed.med_nom, cdcor.cor_nom,CAT_NOM
 INTO :CUPOM,:MOVIMENTO,:FATURAMENTO,:EST_SAL,:PRO_COD,:PRO_INT,:PRO_BAR,:PRO_NOM,:CODIGO, :MED_NOM, COR_NOM, CATEGORIA
 DO
 BEGIN
 IF (:MOVIMENTO>0) THEN
 BEGIN
 DURACAO = ( est_sal / (:MOVIMENTO/:pDIAS) );
 DURACAO = (CAST((DURACAO * 100) as integer) / 100);
 END
 ELSE
 DURACAO = 0;
 SUSPEND;
 END
 END
 END

 commit;

 ALTER PROCEDURE RELDURACAOSCOR (
    PDIAS INTEGER,
    PDATADE TIMESTAMP,
    PDATAATE TIMESTAMP,
    PTIPO INTEGER,
    PPRODE VARCHAR(100),
    PPROATE VARCHAR(100),
    PALMDE VARCHAR(50),
    PALMATE VARCHAR(50),
    PMARDE VARCHAR(30),
    PMARATE VARCHAR(30),
    PGRUDE VARCHAR(30),
    PGRUATE VARCHAR(30),
    PSGRUDE VARCHAR(30),
    PSGRUATE VARCHAR(30),
    PTIPDE VARCHAR(30),
    PTIPATE VARCHAR(30),
    PTRADE VARCHAR(40),
    PTRAATE VARCHAR(40),
    PCATDE VARCHAR(30),
    PCATATE VARCHAR(30))
RETURNS ( 
    CUPOM VARCHAR(6),
    MOVIMENTO DOUBLE PRECISION,
    FATURAMENTO DOUBLE PRECISION,
    EST_SAL DOUBLE PRECISION,
    VD2_ALM INTEGER,
    PRO_COD INTEGER,
    PRO_INT VARCHAR(15),
    PRO_BAR VARCHAR(15),
    PRO_NOM VARCHAR(100),
    DURACAO DOUBLE PRECISION,
    TIP_NOM VARCHAR(30),
    MAR_NOM VARCHAR(30),
    GRU_NOM VARCHAR(30),
    SUBGRUPO VARCHAR(30),
    CATEGORIA VARCHAR(30))
 AS
begin
 IF (PTIPO=0) THEN
 BEGIN
 For
 Select Distinct Count( vd1_cod ) As Cupom
 ,Sum( vd2_qtd ) As Movimento
 ,Sum( (vd2_vlr*vd2_qtd) ) As Faturamento
 ,(Select Sum(est_sal) From mvest Where est_pro=estmvvd2.vd2_pro) as est_sal
 ,estmvvd2.vd2_alm,cdpro.pro_cod,cdpro.pro_int,cdpro.pro_bar,cdpro.pro_nom
 From estmvvd1,cdpro,mvest,cdtra1,CDMAR,CDGRUP,CDSUBGRUP,estmvvd2,CDCATPRO, CDTIPP, CDALM
 Where vd2_pro = cdpro.pro_cod
 and vd2_bol = vd1_cod
 and vd2_pro = est_pro and vd2_alm = est_alm
 and vd1_canc <> 'C'
 and PRO_CAT = CAT_COD
 and PRO_MAR = MAR_COD and PRO_TIP = TIP_COD
 and vd2_alm = alm_cod
 and PRO_GRU = CDGRUP.GRU_COD
 and PRO_SUBGRU = CDSUBGRUP.GRU_COD
 and TRA_TIP_TRA = 'VND' and vd1_tra = tra_cod
 and ESTMVVD1.VD1_CAD >= :PDATADE and ESTMVVD1.VD1_CAD <= :PDATAATE
 and ( (CDPRO.PRO_NOM >= :PPRODE and CDPRO.PRO_NOM <= :PPROATE) OR (:PPRODE IS NULL) )
 and ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 and ( (CDMAR.MAR_NOM >= :PMARDE and CDMAR.MAR_NOM <= :PMARATE) OR (:PMARDE IS NULL) )
 and ( (CDGRUP.GRU_NOM >= :PGRUDE and CDGRUP.GRU_NOM <= :PGRUATE) OR (:PGRUDE IS NULL) )
 and ( (CDSUBGRUP.GRU_NOM >= :PSGRUDE and CDSUBGRUP.GRU_NOM <= :PSGRUATE) OR (:PSGRUDE IS NULL) )
 and ( (CDTIPP.TIP_NOM >= :PTIPDE and CDTIPP.TIP_NOM <= :PTIPATE) OR (:PTIPDE IS NULL) )
 and ( (CDCATPRO.CAT_NOM >= :PCATDE and CDCATPRO.CAT_NOM <= :PCATATE) OR (:PCATDE IS NULL) )
 and ( (CDTRA1.TRA_NOM >= :PTRADE and CDTRA1.TRA_NOM <= :PTRAATE) OR (:PTRADE IS NULL) )
 Group By cdpro.pro_nom, cdpro.pro_int, cdpro.pro_bar, estmvvd2.vd2_alm, cdpro.pro_cod,estmvvd2.vd2_pro
 INTO :CUPOM,:MOVIMENTO,:FATURAMENTO,:EST_SAL,:VD2_ALM,:PRO_COD,:PRO_INT,:PRO_BAR,:PRO_NOM
 DO
 BEGIN
 IF (:MOVIMENTO>0) THEN
 BEGIN
 DURACAO = ( est_sal / (:MOVIMENTO/:pDIAS) );
 DURACAO = (CAST((DURACAO * 100) as integer) / 100);
 END
 ELSE
 DURACAO = 0;
 SUSPEND;
 END
 END
 IF (PTIPO=1) THEN
 BEGIN
 For
 Select Distinct Count( vd1_cod ) As Cupom
 ,Sum( vd2_qtd ) As Movimento
 ,Sum( (vd2_vlr*vd2_qtd) ) As Faturamento
 ,(Select Sum(est_sal) From mvest Where est_pro=estmvvd2.vd2_pro) as est_sal
 ,estmvvd2.vd2_alm,cdpro.pro_cod,cdpro.pro_int,cdpro.pro_bar,cdpro.pro_nom,MAR_NOM
 From estmvvd1,cdpro,mvest,cdtra1,CDMAR,CDGRUP,CDSUBGRUP,estmvvd2,CDCATPRO, CDTIPP, CDALM
 Where vd2_pro = cdpro.pro_cod
 and vd2_bol = vd1_cod
 and vd2_pro = est_pro and vd2_alm = est_alm
 and vd1_canc <> 'C'
 and PRO_MAR = MAR_COD and PRO_TIP = TIP_COD
 and PRO_CAT = CAT_COD
 and vd2_alm = alm_cod
 and PRO_GRU = CDGRUP.GRU_COD
 and PRO_SUBGRU = CDSUBGRUP.GRU_COD
 and TRA_TIP_TRA = 'VND' and vd1_tra = tra_cod
 and ESTMVVD1.VD1_CAD >= :PDATADE and ESTMVVD1.VD1_CAD <= :PDATAATE
 and ( (CDPRO.PRO_NOM >= :PPRODE and CDPRO.PRO_NOM <= :PPROATE) OR (:PPRODE IS NULL) )
 and ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 and ( (CDMAR.MAR_NOM >= :PMARDE and CDMAR.MAR_NOM <= :PMARATE) OR (:PMARDE IS NULL) )
 and ( (CDGRUP.GRU_NOM >= :PGRUDE and CDGRUP.GRU_NOM <= :PGRUATE) OR (:PGRUDE IS NULL) )
 and ( (CDSUBGRUP.GRU_NOM >= :PSGRUDE and CDSUBGRUP.GRU_NOM <= :PSGRUATE) OR (:PSGRUDE IS NULL) )
 and ( (CDTIPP.TIP_NOM >= :PTIPDE and CDTIPP.TIP_NOM <= :PTIPATE) OR (:PTIPDE IS NULL) )
 and ( (CDCATPRO.CAT_NOM >= :PCATDE and CDCATPRO.CAT_NOM <= :PCATATE) OR (:PCATDE IS NULL) )
 and ( (CDTRA1.TRA_NOM >= :PTRADE and CDTRA1.TRA_NOM <= :PTRAATE) OR (:PTRADE IS NULL) )
 Group By cdpro.pro_nom, cdpro.pro_int, cdpro.pro_bar, cdmar.mar_nom, estmvvd2.vd2_alm, cdpro.pro_cod,estmvvd2.vd2_pro
 INTO :CUPOM,:MOVIMENTO,:FATURAMENTO,:EST_SAL,:VD2_ALM,:PRO_COD,:PRO_INT,:PRO_BAR,:PRO_NOM,:MAR_NOM
 DO
 BEGIN
 IF (:MOVIMENTO>0) THEN
 BEGIN
 DURACAO = ( est_sal / (:MOVIMENTO/:pDIAS) );
 DURACAO = (CAST((DURACAO * 100) as integer) / 100);
 END
 ELSE
 DURACAO = 0;
 SUSPEND;
 END
 END
 IF (PTIPO=2) THEN
 BEGIN
 For
 Select Distinct Count( vd1_cod ) As Cupom
 ,Sum( vd2_qtd ) As Movimento
 ,Sum( (vd2_vlr*vd2_qtd) ) As Faturamento
 ,(Select Sum(est_sal) From mvest Where est_pro=estmvvd2.vd2_pro) as est_sal
 ,estmvvd2.vd2_alm,cdpro.pro_cod,cdpro.pro_int,cdpro.pro_bar,cdpro.pro_nom,TIP_NOM
 From estmvvd1,cdpro,mvest,cdtra1,CDMAR,CDGRUP,CDSUBGRUP,estmvvd2,CDCATPRO, CDTIPP, CDALM
 Where vd2_pro = cdpro.pro_cod
 and vd2_bol = vd1_cod
 and vd2_pro = est_pro and vd2_alm = est_alm
 and vd1_canc <> 'C'
 and PRO_MAR = MAR_COD and PRO_TIP = TIP_COD
 and PRO_CAT = CAT_COD
 and vd2_alm = alm_cod
 and PRO_GRU = CDGRUP.GRU_COD
 and PRO_SUBGRU = CDSUBGRUP.GRU_COD
 and TRA_TIP_TRA = 'VND' and vd1_tra = tra_cod
 and ESTMVVD1.VD1_CAD >= :PDATADE and ESTMVVD1.VD1_CAD <= :PDATAATE
 and ( (CDPRO.PRO_NOM >= :PPRODE and CDPRO.PRO_NOM <= :PPROATE) OR (:PPRODE IS NULL) )
 and ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 and ( (CDMAR.MAR_NOM >= :PMARDE and CDMAR.MAR_NOM <= :PMARATE) OR (:PMARDE IS NULL) )
 and ( (CDGRUP.GRU_NOM >= :PGRUDE and CDGRUP.GRU_NOM <= :PGRUATE) OR (:PGRUDE IS NULL) )
 and ( (CDSUBGRUP.GRU_NOM >= :PSGRUDE and CDSUBGRUP.GRU_NOM <= :PSGRUATE) OR (:PSGRUDE IS NULL) )
 and ( (CDTIPP.TIP_NOM >= :PTIPDE and CDTIPP.TIP_NOM <= :PTIPATE) OR (:PTIPDE IS NULL) )
 and ( (CDCATPRO.CAT_NOM >= :PCATDE and CDCATPRO.CAT_NOM <= :PCATATE) OR (:PCATDE IS NULL) )
 and ( (CDTRA1.TRA_NOM >= :PTRADE and CDTRA1.TRA_NOM <= :PTRAATE) OR (:PTRADE IS NULL) )
 Group By cdpro.pro_nom, cdpro.pro_int, cdpro.pro_bar, cdtipp.tip_nom, estmvvd2.vd2_alm, cdpro.pro_cod,estmvvd2.vd2_pro
 INTO :CUPOM,:MOVIMENTO,:FATURAMENTO,:EST_SAL,:VD2_ALM,:PRO_COD,:PRO_INT,:PRO_BAR,:PRO_NOM,:TIP_NOM
 DO
 BEGIN
 IF (:MOVIMENTO>0) THEN
 BEGIN
 DURACAO = ( est_sal / (:MOVIMENTO/:pDIAS) );
 DURACAO = (CAST((DURACAO * 100) as integer) / 100);
 END
 ELSE
 DURACAO = 0;
 SUSPEND;
 END
 END
 IF (PTIPO=3) THEN
 BEGIN
 For
 Select Distinct Count( vd1_cod ) As Cupom
 ,Sum( vd2_qtd ) As Movimento
 ,Sum( (vd2_vlr*vd2_qtd) ) As Faturamento
 ,(Select Sum(est_sal) From mvest Where est_pro=estmvvd2.vd2_pro) as est_sal
 ,estmvvd2.vd2_alm,cdpro.pro_cod,cdpro.pro_int,cdpro.pro_bar,cdpro.pro_nom,CDGRUP.GRU_NOM, CDSUBGRUP.GRU_NOM AS SUBGRUPO
 From estmvvd1,cdpro,mvest,cdtra1,CDMAR,CDGRUP,CDSUBGRUP,estmvvd2,CDCATPRO, CDTIPP, CDALM
 Where vd2_pro = cdpro.pro_cod
 and vd2_bol = vd1_cod
 and vd2_pro = est_pro and vd2_alm = est_alm
 and vd1_canc <> 'C'
 and PRO_MAR = MAR_COD and PRO_TIP = TIP_COD
 and PRO_CAT = CAT_COD
 and vd2_alm = alm_cod
 and PRO_GRU = CDGRUP.GRU_COD
 and PRO_SUBGRU = CDSUBGRUP.GRU_COD
 and TRA_TIP_TRA = 'VND' and vd1_tra = tra_cod
 and ESTMVVD1.VD1_CAD >= :PDATADE and ESTMVVD1.VD1_CAD <= :PDATAATE
 and ( (CDPRO.PRO_NOM >= :PPRODE and CDPRO.PRO_NOM <= :PPROATE) OR (:PPRODE IS NULL) )
 and ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 and ( (CDMAR.MAR_NOM >= :PMARDE and CDMAR.MAR_NOM <= :PMARATE) OR (:PMARDE IS NULL) )
 and ( (CDGRUP.GRU_NOM >= :PGRUDE and CDGRUP.GRU_NOM <= :PGRUATE) OR (:PGRUDE IS NULL) )
 and ( (CDSUBGRUP.GRU_NOM >= :PSGRUDE and CDSUBGRUP.GRU_NOM <= :PSGRUATE) OR (:PSGRUDE IS NULL) )
 and ( (CDTIPP.TIP_NOM >= :PTIPDE and CDTIPP.TIP_NOM <= :PTIPATE) OR (:PTIPDE IS NULL) )
 and ( (CDCATPRO.CAT_NOM >= :PCATDE and CDCATPRO.CAT_NOM <= :PCATATE) OR (:PCATDE IS NULL) )
 and ( (CDTRA1.TRA_NOM >= :PTRADE and CDTRA1.TRA_NOM <= :PTRAATE) OR (:PTRADE IS NULL) )
 Group By cdpro.pro_nom, cdpro.pro_int, cdpro.pro_bar, estmvvd2.vd2_alm, cdpro.pro_cod, CDGRUP.GRU_NOM, CDSUBGRUP.GRU_NOM,estmvvd2.vd2_pro
 INTO :CUPOM,:MOVIMENTO,:FATURAMENTO,:EST_SAL,:VD2_ALM,:PRO_COD,:PRO_INT,:PRO_BAR,:PRO_NOM,:GRU_NOM,:SUBGRUPO
 DO
 BEGIN
 IF (:MOVIMENTO>0) THEN
 BEGIN
 DURACAO = ( est_sal / (:MOVIMENTO/:pDIAS) );
 DURACAO = (CAST((DURACAO * 100) as integer) / 100);
 END
 ELSE
 DURACAO = 0;
 SUSPEND;
 END
 END
 IF (PTIPO=4) THEN
 BEGIN
 For
 Select Distinct Count( vd1_cod ) As Cupom
 ,Sum( vd2_qtd ) As Movimento
 ,Sum( (vd2_vlr*vd2_qtd) ) As Faturamento
 ,(Select Sum(est_sal) From mvest Where est_pro=estmvvd2.vd2_pro) as est_sal
 ,estmvvd2.vd2_alm,cdpro.pro_cod,cdpro.pro_int,cdpro.pro_bar,cdpro.pro_nom,CDSUBGRUP.GRU_NOM AS SUBGRUPO
 From estmvvd1,cdpro,mvest,cdtra1,CDMAR,CDGRUP,CDSUBGRUP,estmvvd2,CDCATPRO, CDTIPP, CDALM
 Where vd2_pro = cdpro.pro_cod
 and vd2_bol = vd1_cod
 and vd2_pro = est_pro and vd2_alm = est_alm
 and vd1_canc <> 'C'
 and PRO_CAT = CAT_COD
 and PRO_MAR = MAR_COD and PRO_TIP = TIP_COD
 and vd2_alm = alm_cod
 and PRO_GRU = CDGRUP.GRU_COD
 and PRO_SUBGRU = CDSUBGRUP.GRU_COD
 and TRA_TIP_TRA = 'VND' and vd1_tra = tra_cod
 and ESTMVVD1.VD1_CAD >= :PDATADE and ESTMVVD1.VD1_CAD <= :PDATAATE
 and ( (CDPRO.PRO_NOM >= :PPRODE and CDPRO.PRO_NOM <= :PPROATE) OR (:PPRODE IS NULL) )
 and ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 and ( (CDMAR.MAR_NOM >= :PMARDE and CDMAR.MAR_NOM <= :PMARATE) OR (:PMARDE IS NULL) )
 and ( (CDGRUP.GRU_NOM >= :PGRUDE and CDGRUP.GRU_NOM <= :PGRUATE) OR (:PGRUDE IS NULL) )
 and ( (CDSUBGRUP.GRU_NOM >= :PSGRUDE and CDSUBGRUP.GRU_NOM <= :PSGRUATE) OR (:PSGRUDE IS NULL) )
 and ( (CDTIPP.TIP_NOM >= :PTIPDE and CDTIPP.TIP_NOM <= :PTIPATE) OR (:PTIPDE IS NULL) )
 and ( (CDCATPRO.CAT_NOM >= :PCATDE and CDCATPRO.CAT_NOM <= :PCATATE) OR (:PCATDE IS NULL) )
 and ( (CDTRA1.TRA_NOM >= :PTRADE and CDTRA1.TRA_NOM <= :PTRAATE) OR (:PTRADE IS NULL) )
 Group By cdpro.pro_nom, cdpro.pro_int, cdpro.pro_bar, CDSUBGRUP.GRU_NOM, estmvvd2.vd2_alm, cdpro.pro_cod,estmvvd2.vd2_pro
 INTO :CUPOM,:MOVIMENTO,:FATURAMENTO,:EST_SAL,:VD2_ALM,:PRO_COD,:PRO_INT,:PRO_BAR,:PRO_NOM,:SUBGRUPO
 DO
 BEGIN
 IF (:MOVIMENTO>0) THEN
 BEGIN
 DURACAO = ( est_sal / (:MOVIMENTO/:pDIAS) );
 DURACAO = (CAST((DURACAO * 100) as integer) / 100);
 END
 ELSE
 DURACAO = 0;
 SUSPEND;
 END
 END
 IF (PTIPO=5) THEN
 BEGIN
 For
 Select Distinct Count( vd1_cod ) As Cupom
 ,Sum( vd2_qtd ) As Movimento
 ,Sum( (vd2_vlr*vd2_qtd) ) As Faturamento
 ,(Select Sum(est_sal) From mvest Where est_pro=estmvvd2.vd2_pro) as est_sal
 ,estmvvd2.vd2_alm,cdpro.pro_cod,cdpro.pro_int,cdpro.pro_bar,cdpro.pro_nom,CDCATPRO.CAT_NOM AS CATEGORIA
 From estmvvd1,cdpro,mvest,cdtra1,CDMAR,CDGRUP,CDSUBGRUP,estmvvd2,CDCATPRO, CDTIPP, CDALM
 Where vd2_pro = cdpro.pro_cod
 and vd2_bol = vd1_cod
 and vd2_pro = est_pro and vd2_alm = est_alm
 and vd1_canc <> 'C'
 and PRO_MAR = MAR_COD and PRO_CAT = CAT_COD
 and PRO_TIP = TIP_COD
 and vd2_alm = alm_cod
 and PRO_GRU = CDGRUP.GRU_COD
 and PRO_SUBGRU = CDSUBGRUP.GRU_COD
 and TRA_TIP_TRA = 'VND' and vd1_tra = tra_cod
 and ESTMVVD1.VD1_CAD >= :PDATADE and ESTMVVD1.VD1_CAD <= :PDATAATE
 and ( (CDPRO.PRO_NOM >= :PPRODE and CDPRO.PRO_NOM <= :PPROATE) OR (:PPRODE IS NULL) )
 and ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 and ( (CDMAR.MAR_NOM >= :PMARDE and CDMAR.MAR_NOM <= :PMARATE) OR (:PMARDE IS NULL) )
 and ( (CDGRUP.GRU_NOM >= :PGRUDE and CDGRUP.GRU_NOM <= :PGRUATE) OR (:PGRUDE IS NULL) )
 and ( (CDSUBGRUP.GRU_NOM >= :PSGRUDE and CDSUBGRUP.GRU_NOM <= :PSGRUATE) OR (:PSGRUDE IS NULL) )
 and ( (CDTIPP.TIP_NOM >= :PTIPDE and CDTIPP.TIP_NOM <= :PTIPATE) OR (:PTIPDE IS NULL) )
 and ( (CDCATPRO.CAT_NOM >= :PCATDE and CDCATPRO.CAT_NOM <= :PCATATE) OR (:PCATDE IS NULL) )
 and ( (CDTRA1.TRA_NOM >= :PTRADE and CDTRA1.TRA_NOM <= :PTRAATE) OR (:PTRADE IS NULL) )
 Group By cdpro.pro_nom, cdpro.pro_int, cdpro.pro_bar, CAT_NOM, estmvvd2.vd2_alm, cdpro.pro_cod,estmvvd2.vd2_pro
 INTO :CUPOM,:MOVIMENTO,:FATURAMENTO,:EST_SAL,:VD2_ALM,:PRO_COD,:PRO_INT,:PRO_BAR,:PRO_NOM,:CATEGORIA
 DO
 BEGIN
 IF (:MOVIMENTO>0) THEN
 BEGIN
 DURACAO = ( est_sal / (:MOVIMENTO/:pDIAS) );
 DURACAO = (CAST((DURACAO * 100) as integer) / 100);
 END
 ELSE
 DURACAO = 0;
 SUSPEND;
 END
 END
 END

 commit;

 ALTER PROCEDURE ATUALIZA_INDICE (
    PDTATUAL TIMESTAMP,
    PVLRINICIAL DOUBLE PRECISION,
    PDTINICIAL TIMESTAMP,
    PMOE INTEGER)
RETURNS ( 
    RESULT DOUBLE PRECISION,
    RET_FLAG INTEGER,
    RET_INDICE DOUBLE PRECISION,
    RET_DATA TIMESTAMP)
 AS
DECLARE VARIABLE VTAXA DOUBLE PRECISION;
 DECLARE VARIABLE VATU INTEGER;
 DECLARE VARIABLE VANO INTEGER;
 DECLARE VARIABLE VANOA INTEGER;
 DECLARE VARIABLE VINI INTEGER;
 DECLARE VARIABLE VFLAGM VARCHAR(1);
 DECLARE VARIABLE VVLIN DOUBLE PRECISION;
 DECLARE VARIABLE VVLFI DOUBLE PRECISION;
 DECLARE VARIABLE VNAC VARCHAR(1);
 begin
 ret_flag = 1;
 VINI = extract(month from :pdtinicial);
 VATU = extract(month from :pdtatual);
 VANO = extract(year from :pdtinicial);
 VANOA = extract(year from :pdtatual);
 select cdmoe.moe_flag, cdmoe.moe_nac from cdmoe
 where cdmoe.moe_cod = :pmoe into vflagM, vnac;
 if (VFLAGM <> 'M') then
 begin
 PDTINICIAL = cast(cast(VINI as varchar(2)) || '/01/' || cast(VANO as varchar(4)) as date);
 PDTATUAL = cast(cast(VATU as varchar(2)) || '/01/' || extract(year from :pdtatual) as date);
 RET_DATA = PDTINICIAL;
 while ( PDTINICIAL < PDTATUAL ) do
 begin
 if ( VINI > 0 ) then
 execute procedure retorna_taxamensal(PMOE, PDTINICIAL) returning_values (VTAXA);
 RET_INDICE = VTAXA;
 RET_DATA = PDTINICIAL;
 Result = PVLRINICIAL;
 Suspend;
 PVLRINICIAL = PVLRINICIAL + (VTAXA * PVLRINICIAL / 100);
 if (:vtaxa is null) then
 ret_flag=0;
 if (VINI = 12) then
 begin
 VINI = 1;
 VANO = VANO + 1;
 end
 else
 VINI = VINI + 1;
 PDTINICIAL = cast(cast(VINI as varchar(2)) || '/01/' || cast(VANO as varchar(4)) as date);
 end
 RET_INDICE = null;
 RET_DATA = PDTINICIAL;
 Result = PVLRINICIAL;
 Suspend;
 end
 else
 begin
 execute procedure retorna_taxadiaria(:pmoe,:pdtinicial) returning_values(:vvlin);
 execute procedure retorna_taxadiaria(:pmoe,:pdtatual) returning_values(:vvlfi);
 if (vnac = 'N') then
 ret_flag=1;
 else
 if ((vvlin is null) or (vvlfi is null)) then
 ret_flag=0;
 else
 ret_flag=1;
 Result = PVLRINICIAL;
 RET_INDICE = vvlin;
 RET_DATA = pdtinicial;
 suspend;
 if ((:vvlin <> 0) and (:vvlfi <> 0)) then
 PVLRINICIAL = ((PVLRINICIAL / :vvlin)* :vvlfi);
 else
 PVLRINICIAL =:pvlrinicial;
 PVLRINICIAL = cast((PVLRINICIAL * 10000) as integer) / 10000;
 Result = PVLRINICIAL;
 RET_DATA = pdtatual;
 RET_INDICE = vvlfi;
 suspend;
 end
 end

 commit;

 ALTER PROCEDURE CRIA_LOCALIZACAO (
    PMODELO VARCHAR(1))
 AS
DECLARE VARIABLE WALM INTEGER;
 DECLARE VARIABLE WPRO INTEGER;
 DECLARE VARIABLE WCOR VARCHAR(3);
 DECLARE VARIABLE WMED VARCHAR(3);
 DECLARE VARIABLE WUSACOR VARCHAR(1);
 DECLARE VARIABLE WUSAMED VARCHAR(1);
 BEGIN
 SELECT P_USA_COR, P_USA_MEDIDA FROM PARAMET INTO WUSACOR, WUSAMED;
 
 IF (pModelo = 'M') THEN
 BEGIN
 
 IF ( WUSACOR='T' OR WUSAMED='T' ) THEN
 BEGIN
 FOR SELECT PRO_PRO, PRO_COR, PRO_MED FROM CDPROPRE INTO :WPRO, :WCOR, :WMED DO
 BEGIN
 IF ( NOT EXISTS( SELECT * FROM CDPROCM WHERE PRO_PRO = :WPRO AND PRO_COR = :WCOR AND PRO_MED = :WMED ) ) THEN
 BEGIN
 DELETE FROM CDPROMAXMIN WHERE PRO_PRO = :WPRO AND PRO_COR = :WCOR AND PRO_MED = :WMED;
 END
 END
 END
 ELSE
 BEGIN
 Delete from CDPROMAXMIN Where pro_pro Not In ( Select pro_cod From cdpro );
 END
 
 FOR SELECT ALM_COD FROM CDALM
 INTO WALM
 DO
 BEGIN
 IF ( WUSACOR='T' OR WUSAMED='T' ) THEN
 BEGIN
 
 INSERT INTO CDPROMAXMIN
 SELECT :WALM, cdprocm.pro_PRO, cdprocm.PRO_COR, cdprocm.PRO_MED,'Today','Today','A',0,0,0,0
 FROM cdprocm WHERE not exists( select * from CDPROMAXMIN where CDPROMAXMIN.pro_pro=CDPROCM.pro_PRO
 and CDPROMAXMIN.pro_cor=cdprocm.pro_cor
 and CDPROMAXMIN.pro_med=cdprocm.pro_med and CDPROMAXMIN.pro_alm=:WALM)
 and (pro_cor<>'' and pro_med<>'');
 
 END
 ELSE
 BEGIN
 
 INSERT INTO CDPROMAXMIN
 SELECT :WALM,CDPRO.PRO_COD,'','','Today','Today','A',0,0,0,0
 FROM CDPRO WHERE CDPRO.pro_cod <> 0
 and not exists( select * from CDPROMAXMIN where CDPROMAXMIN.pro_pro=cdpro.pro_cod and CDPROMAXMIN.pro_alm=:WALM);
 
 END
 
 END
 
 END
 
 IF (pModelo = 'L') THEN
 BEGIN
 
 IF ( WUSACOR='T' OR WUSAMED='T' ) THEN
 BEGIN
 FOR SELECT PRO_PRO, PRO_COR, PRO_MED FROM CDPROPRE INTO :WPRO, :WCOR, :WMED DO
 BEGIN
 IF ( NOT EXISTS( SELECT * FROM CDPROCM WHERE PRO_PRO = :WPRO AND PRO_COR = :WCOR AND PRO_MED = :WMED ) ) THEN
 BEGIN
 DELETE FROM CDPROESTLO WHERE PRO_PRO = :WPRO AND PRO_COR = :WCOR AND PRO_MED = :WMED;
 END
 END
 END
 ELSE
 BEGIN
 Delete from cdproestlo Where pro_pro Not In ( Select pro_cod From cdpro );
 END
 
 FOR SELECT ALM_COD FROM CDALM WHERE ALM_COD IN (SELECT ALM_USO FROM CDALM3)
 OR ALM_COD IN (SELECT ALM_COD FROM CDALM2)
 INTO WALM
 DO
 BEGIN
 IF ( WUSACOR='T' OR WUSAMED='T' ) THEN
 BEGIN
 INSERT INTO CDPROESTLO
 SELECT :WALM, cdprocm.pro_PRO, cdprocm.PRO_COR, cdprocm.PRO_MED,'','','','', 'Today','Today','A'
 FROM cdprocm WHERE not exists( select * from CDPROESTLO where CDPROESTLO.pro_pro=CDPROCM.pro_PRO
 and CDPROESTLO.pro_cor=cdprocm.pro_cor
 and CDPROESTLO.pro_med=cdprocm.pro_med)
 and (pro_cor<>'' and pro_med<>'');
 END
 ELSE
 BEGIN
 INSERT INTO CDPROESTLO
 SELECT :WALM,CDPRO.PRO_COD,'','','','','','','Today','Today','A'
 FROM CDPRO WHERE CDPRO.pro_cod <> 0
 and not exists( select * from CDPROESTLO where CDPROESTLO.pro_pro=cdpro.pro_cod);
 END
 
 END
 
 END
 
 END

 commit;

 ALTER PROCEDURE AJUSTACDPROPRE (
    PUSACORMEDIDA VARCHAR(1))
 AS
DECLARE VARIABLE WREGPROPRE INTEGER;
 DECLARE VARIABLE WREGPRO INTEGER;
 DECLARE VARIABLE WREGPROCM INTEGER;
 DECLARE VARIABLE WEXECUTAPROC VARCHAR(1);
 BEGIN


 wExecutaProc='F';
 IF (PUSACORMEDIDA='S') THEN
 BEGIN
 SELECT COUNT(PRO_PRO) FROM CDPROPRE INTO :wRegPropre;
 SELECT COUNT(PRO_PRO) FROM CDPROCM INTO :wRegProcm;
 IF (wRegPropre <> wRegProcm) THEN
 wExecutaProc = 'T';
 END
 ELSE
 BEGIN
 SELECT COUNT(PRO_PRO) FROM CDPROPRE INTO :wRegPropre;
 SELECT COUNT(PRO_COD) AS REGISTROS FROM CDPRO INTO :wRegPro;
 IF (wRegPropre <> wRegPro) THEN
 wExecutaProc = 'T';
 END

 IF (wExecutaProc = 'T') THEN
 BEGIN
 IF (PUSACORMEDIDA='S') THEN
 BEGIN
 Insert Into cdpropre ( pro_pro, PRO_MARGEM_MARKUP ,pro_cor ,pro_med ,ativo, dat_cad, dat_atu)
 Select cdpro.pro_cod, cdpro.PRO_MARGEM_MARKUP
 ,cdprocm.pro_cor, cdprocm.pro_med, cdprocm.ativo, 'today', 'today'
 From cdpro, cdprocm
 Where cdpro.pro_cod <> 0
 and cdprocm.pro_pro = cdpro.pro_cod
 and not exists( select * from cdpropre where cdpropre.pro_pro=cdpro.pro_cod
 and cdpropre.pro_cor=cdprocm.pro_cor
 and cdpropre.pro_med=cdprocm.pro_med)
 and (pro_cor<>'' and pro_med<>'');
 END
 ELSE
 BEGIN
 Insert Into cdpropre ( pro_pro, PRO_MARGEM_MARKUP,ativo, dat_cad, dat_atu, pro_cor, pro_med)
 Select cdpro.pro_cod, cdpro.PRO_MARGEM_MARKUP,'A', 'today', 'today', '',''
 From cdpro Where cdpro.pro_cod <> 0
 and not exists( select * from cdpropre where cdpropre.pro_pro=cdpro.pro_cod);
 END

 INSERT INTO CDPROHIS(PRO_TAB,PRO_ANT,PRO_DEP,PRO_DAT,PRO_HIS) VALUES( 'CDPROCM', :wRegProcm, (SELECT COUNT(PRO_PRO) FROM CDPROCM), CAST('TODAY' AS DATE), 'PROCEDURE AJUSTACDPROPRE' );
 INSERT INTO CDPROHIS(PRO_TAB,PRO_ANT,PRO_DEP,PRO_DAT,PRO_HIS) VALUES( 'CDPROPRE', :wRegPropre, (SELECT COUNT(PRO_PRO) FROM CDPROPRE), CAST('TODAY' AS DATE), 'PROCEDURE AJUSTACDPROPRE' );
 INSERT INTO CDPROHIS(PRO_TAB,PRO_ANT,PRO_DEP,PRO_DAT,PRO_HIS) VALUES( 'CDPRO', :wRegPro, (SELECT COUNT(PRO_COD) FROM CDPRO), CAST('TODAY' AS DATE), 'PROCEDURE AJUSTACDPROPRE' );

 END

 END

 commit;

 ALTER PROCEDURE ESTOQUE_ABERTO_ORDENADO (
    PMODELO VARCHAR(3),
    P_ALM_FANT_DE VARCHAR(20),
    P_ALM_FANT_ATE VARCHAR(20),
    P_PRO_NOM_DE VARCHAR(100),
    P_PRO_NOM_ATE VARCHAR(100),
    P_COR_NOM_DE VARCHAR(30),
    P_COR_NOM_ATE VARCHAR(30),
    P_MED_NOM_DE VARCHAR(20),
    P_MED_NOM_ATE VARCHAR(20),
    P_MAR_ORD_DE VARCHAR(40),
    P_MAR_ORD_ATE VARCHAR(40),
    P_TIP_ORD_DE VARCHAR(40),
    P_TIP_ORD_ATE VARCHAR(40),
    P_CAT_ORD_DE VARCHAR(40),
    P_CAT_ORD_ATE VARCHAR(40),
    P_GRU_ORD_DE VARCHAR(40),
    P_GRU_ORD_ATE VARCHAR(40),
    P_SUB_GRU_ORD_DE VARCHAR(40),
    P_SUB_GRU_ORD_ATE VARCHAR(40))
RETURNS ( 
    PRO_COD INTEGER,
    PRO_INT VARCHAR(15),
    PRO_BAR VARCHAR(15),
    PRO_NOM VARCHAR(100),
    EST_SAL DOUBLE PRECISION,
    QUEBRA_COD VARCHAR(10),
    QUEBRA VARCHAR(30),
    COLUNA_COD VARCHAR(10),
    COLUNA VARCHAR(30),
    PROCM_COD VARCHAR(21),
    LINHA_COD VARCHAR(10),
    LINHA VARCHAR(30))
 AS
begin
 if (pModelo = 'ACM') then
 For
 Select PRO_COD, PRO_INT, PRO_BAR, PRO_NOM, EST_SAL, COR_COD, COR_NOM, MED_COD,
 MED_SIG, PROCM_COD, ALM_COD, ALM_FANT
 From estoque_aberto(:p_alm_fant_de, :p_alm_fant_ate,
 :p_pro_nom_de, :p_pro_nom_ate, :p_cor_nom_de, :p_cor_nom_ate,
 :p_med_nom_de, :p_med_nom_ate, :p_mar_ord_de, :p_mar_ord_ate,
 :p_tip_ord_de, :p_tip_ord_ate, :p_cat_ord_de, :p_cat_ord_ate,
 :p_gru_ord_de, :p_gru_ord_ate, :p_sub_gru_ord_de, :p_sub_gru_ord_ate)
 Order by PRO_NOM, ALM_FANT, COR_NOM, MED_ORD, MED_NOM
 Into :PRO_COD, :PRO_INT, :PRO_BAR, :PRO_NOM, :EST_SAL, :LINHA_COD, :LINHA,
 :COLUNA_COD, :COLUNA, :PROCM_COD, :QUEBRA_COD, :QUEBRA do
 suspend;
 if (pModelo = 'AMC') then
 For
 Select PRO_COD, PRO_INT, PRO_BAR, PRO_NOM, EST_SAL, COR_COD, COR_SIG, MED_COD,
 MED_NOM, PROCM_COD, ALM_COD, ALM_FANT
 From estoque_aberto(:p_alm_fant_de, :p_alm_fant_ate,
 :p_pro_nom_de, :p_pro_nom_ate, :p_cor_nom_de, :p_cor_nom_ate,
 :p_med_nom_de, :p_med_nom_ate, :p_mar_ord_de, :p_mar_ord_ate,
 :p_tip_ord_de, :p_tip_ord_ate, :p_cat_ord_de, :p_cat_ord_ate,
 :p_gru_ord_de, :p_gru_ord_ate, :p_sub_gru_ord_de, :p_sub_gru_ord_ate)
 Order by PRO_NOM, ALM_FANT, MED_ORD, MED_NOM, COR_NOM
 Into :PRO_COD, :PRO_INT, :PRO_BAR, :PRO_NOM, :EST_SAL, :COLUNA_COD, :COLUNA,
 :LINHA_COD, :LINHA, :PROCM_COD, :QUEBRA_COD, :QUEBRA do
 suspend;
 if (pModelo = 'CAM') then
 For
 Select PRO_COD, PRO_INT, PRO_BAR, PRO_NOM, EST_SAL, COR_COD, COR_NOM, MED_COD,
 MED_SIG, PROCM_COD, ALM_COD, ALM_FANT
 From estoque_aberto(:p_alm_fant_de, :p_alm_fant_ate,
 :p_pro_nom_de, :p_pro_nom_ate, :p_cor_nom_de, :p_cor_nom_ate,
 :p_med_nom_de, :p_med_nom_ate, :p_mar_ord_de, :p_mar_ord_ate,
 :p_tip_ord_de, :p_tip_ord_ate, :p_cat_ord_de, :p_cat_ord_ate,
 :p_gru_ord_de, :p_gru_ord_ate, :p_sub_gru_ord_de, :p_sub_gru_ord_ate)
 Order by PRO_NOM, COR_NOM, ALM_FANT, MED_ORD, MED_NOM
 Into :PRO_COD, :PRO_INT, :PRO_BAR, :PRO_NOM, :EST_SAL, :QUEBRA_COD, :QUEBRA,
 :COLUNA_COD, :COLUNA, :PROCM_COD, :LINHA_COD, :LINHA do
 suspend;
 if (pModelo = 'CMA') then
 For
 Select PRO_COD, PRO_INT, PRO_BAR, PRO_NOM, EST_SAL, COR_COD, COR_NOM, MED_COD,
 MED_NOM, PROCM_COD, ALM_COD, ALM_FANT
 From estoque_aberto(:p_alm_fant_de, :p_alm_fant_ate,
 :p_pro_nom_de, :p_pro_nom_ate, :p_cor_nom_de, :p_cor_nom_ate,
 :p_med_nom_de, :p_med_nom_ate, :p_mar_ord_de, :p_mar_ord_ate,
 :p_tip_ord_de, :p_tip_ord_ate, :p_cat_ord_de, :p_cat_ord_ate,
 :p_gru_ord_de, :p_gru_ord_ate, :p_sub_gru_ord_de, :p_sub_gru_ord_ate)
 Order by PRO_NOM, COR_NOM, MED_ORD, MED_NOM, ALM_FANT
 Into :PRO_COD, :PRO_INT, :PRO_BAR, :PRO_NOM, :EST_SAL, :QUEBRA_COD, :QUEBRA,
 :LINHA_COD, :LINHA, :PROCM_COD, :COLUNA_COD, :COLUNA do
 suspend;
 if (pModelo = 'MAC') then
 For
 Select PRO_COD, PRO_INT, PRO_BAR, PRO_NOM, EST_SAL, COR_COD, COR_SIG, MED_COD,
 MED_NOM, PROCM_COD, ALM_COD, ALM_FANT
 From estoque_aberto(:p_alm_fant_de, :p_alm_fant_ate,
 :p_pro_nom_de, :p_pro_nom_ate, :p_cor_nom_de, :p_cor_nom_ate,
 :p_med_nom_de, :p_med_nom_ate, :p_mar_ord_de, :p_mar_ord_ate,
 :p_tip_ord_de, :p_tip_ord_ate, :p_cat_ord_de, :p_cat_ord_ate,
 :p_gru_ord_de, :p_gru_ord_ate, :p_sub_gru_ord_de, :p_sub_gru_ord_ate)
 Order by PRO_NOM, MED_ORD, MED_NOM, ALM_FANT, COR_NOM
 Into :PRO_COD, :PRO_INT, :PRO_BAR, :PRO_NOM, :EST_SAL, :COLUNA_COD, :COLUNA,
 :QUEBRA_COD, :QUEBRA, :PROCM_COD, :LINHA_COD, :LINHA do
 suspend;
 if (pModelo = 'MCA') then
 For
 Select PRO_COD, PRO_INT, PRO_BAR, PRO_NOM, EST_SAL, COR_COD, COR_NOM, MED_COD,
 MED_NOM, PROCM_COD, ALM_COD, ALM_FANT
 From estoque_aberto(:p_alm_fant_de, :p_alm_fant_ate,
 :p_pro_nom_de, :p_pro_nom_ate, :p_cor_nom_de, :p_cor_nom_ate,
 :p_med_nom_de, :p_med_nom_ate, :p_mar_ord_de, :p_mar_ord_ate,
 :p_tip_ord_de, :p_tip_ord_ate, :p_cat_ord_de, :p_cat_ord_ate,
 :p_gru_ord_de, :p_gru_ord_ate, :p_sub_gru_ord_de, :p_sub_gru_ord_ate)
 Order by PRO_NOM, MED_ORD, MED_NOM, COR_NOM, ALM_FANT
 Into :PRO_COD, :PRO_INT, :PRO_BAR, :PRO_NOM, :EST_SAL, :LINHA_COD, :LINHA,
 :QUEBRA_COD, :QUEBRA, :PROCM_COD, :COLUNA_COD, :COLUNA do
 suspend;
 end

 commit;

 ALTER PROCEDURE CONVERTE_INDICE (
    PDATA TIMESTAMP,
    PVALOR DOUBLE PRECISION,
    PMOEORI INTEGER,
    PMOEDEST INTEGER)
RETURNS ( 
    RESULT DOUBLE PRECISION,
    RET_FLAG INTEGER)
 AS
DECLARE VARIABLE VANO INTEGER;
 DECLARE VARIABLE VINI INTEGER;
 DECLARE VARIABLE VVLIN DOUBLE PRECISION;
 DECLARE VARIABLE VVLFI DOUBLE PRECISION;
 DECLARE VARIABLE VNAC VARCHAR(1);
 begin
 VINI = extract(month from :pdata);
 VANO = extract(year from :pdata);
 RET_FLAG = 1;
 Select result, MOE_NAC
 from CDMOE, retorna_taxadiaria(:pmoeori,:pdata)
 where moe_cod = :pmoeori
 into vvlin, vnac;

 if (vNac = 'N') then
 vvlin = 1;
 else
 if (vvlin is null) then
 RET_FLAG = 0;

 Select result, MOE_NAC
 from CDMOE, retorna_taxadiaria(:pmoedest,:pdata)
 where moe_cod = :pmoedest
 into vvlfi, vnac;

 if (vNac = 'N') then
 vvlfi = 1;
 else
 if (vvlfi is null) then
 RET_FLAG = 0;

 if ((:vvlin <> 0) and (:vvlfi <> 0)) then
 RESULT = (PVALOR * vvlin / vvlfi);
 else
 RESULT = PVALOR;
 RESULT = cast(RESULT as Numeric(15,5));
 suspend;
 end

 COMMIT;

 ALTER PROCEDURE STRING_HORA (
    VAL DOUBLE PRECISION)
RETURNS ( 
    HORA VARCHAR(10))
 AS
DECLARE VARIABLE S VARCHAR(10);
 DECLARE VARIABLE MINUTOS INTEGER;
 DECLARE VARIABLE HORAS INTEGER;
 BEGIN
 IF (VAL >= 0.5) THEN
 HORAS = CAST((VAL - 0.5) AS INTEGER);
 ELSE
 IF (VAL <= -0.5) THEN
 HORAS = CAST((VAL + 0.5) AS INTEGER);
 ELSE
 HORAS = CAST(VAL AS INTEGER);
 MINUTOS = CAST (((VAL - HORAS) * 60) AS INTEGER);
 IF (MINUTOS < 0) THEN
 MINUTOS = (MINUTOS * -1);
 IF (MINUTOS < 10) then
 s = CAST(HORAS AS VARCHAR(4)) || ':0' || CAST(MINUTOS AS VARCHAR(1));
 ELSE
 s = CAST(HORAS AS VARCHAR(4)) || ':' || CAST(MINUTOS AS VARCHAR(4));
 HORA = S;
 suspend;
 END

 COMMIT;

 ALTER PROCEDURE VERIFICA_TRANSFERENCIA 
 AS
DECLARE VARIABLE VCOD INTEGER;
 DECLARE VARIABLE VTRA INTEGER;
 begin
 for
 Select lge_cod, lge_tra
 From mvlge A
 Where A.lge_pla = '1'
 and (Exists(Select lge_cod from mvlge where lge_pla = '1' and lge_cod = A.lge_tra and A.lge_cod <> lge_tra)
 or Exists(Select lge_cod from morlge b where b.lge_pla = '1' and b.lge_cod = A.lge_tra and A.lge_cod <> B.lge_tra))
 into vcod,vtra do
 begin
 update mvlge set lge_tra=:vcod
 where lge_cod = :vtra;
 update morlge set lge_tra=:vcod
 where lge_cod = :vtra;
 end
 end

 COMMIT;

 ALTER PROCEDURE COMPLETA_STRING (
    PTEXTO VARCHAR(100),
    PCARACTER VARCHAR(1),
    PCASAS INTEGER,
    PSENTIDO INTEGER)
RETURNS ( 
    RESULT VARCHAR(100))
 AS
DECLARE VARIABLE VCNT INTEGER;
 begin
 vCNT = 0;
 RESULT = PTEXTO;
 while (vCNT < pCASAS) do
 begin
 if (Substring(PTEXTO from 1 for 1) = '') then
 if (PSENTIDO > 0) then
 RESULT = RESULT || PCARACTER;
 else
 RESULT = PCARACTER || RESULT;
 else
 PTEXTO = Substring(PTEXTO from 2 for 100);
 vCNT = vCNT + 1;
 end
 suspend;
 end

 COMMIT;

 ALTER PROCEDURE ITEMSTRING (
    PTEXTO VARCHAR(600),
    PITEM INTEGER,
    PSEPARADOR VARCHAR(1))
RETURNS ( 
    RESULTADO VARCHAR(600),
    ENCONTRADO INTEGER)
 AS
DECLARE VARIABLE I INTEGER;
 DECLARE VARIABLE VTEXTO VARCHAR(600);
 DECLARE VARIABLE VCNT INTEGER;
 DECLARE VARIABLE VCARAC VARCHAR(1);
 begin
 Encontrado = 0;
 i = 0;
 vTexto = '';
 vCnt = 1;
 while ((vCnt <= pItem) and (i <= 600) and (not pTexto is null)) do
 begin
 vCarac = substring(pTEXTO from 1 for 1);
 if (vCarac = pSeparador) then
 vCnt = vCnt + 1;
 else
 if (vCnt = pItem) then
 begin
 vTexto = vTexto || vCarac;
 Encontrado = 1;
 end
 i = i+1;
 pTexto = substring(pTexto from 2 for 600);
 end
 Resultado = vTexto;
 suspend;
 end

 COMMIT;

 ALTER PROCEDURE SALDO_PEDIDO (
    PVD2COD INTEGER,
    PSALFEC INTEGER)
RETURNS ( 
    PSALDO DOUBLE PRECISION,
    PQUANT DOUBLE PRECISION)
 AS
declare variable vvd1can varchar(2);
 declare variable vvd1vtp double precision;
 declare variable vvd1dsv double precision;
 declare variable vvd1dsp double precision;
 declare variable vvd2vlr double precision;
 declare variable vvd2qtd double precision;
 declare variable vvd2dsc double precision;
 declare variable vvd10pd double precision;
 declare variable vpb double precision;
 declare variable vpd double precision;
 declare variable vcred double precision;
 declare variable vvdcod varchar(13);
 begin
 For Select
 vd1_canc, v1.vd1_valor_totalb,
 VD1_COD, VD1_DESC_V, VD1_DESC_P, vd2_vlr, vd2_qtd, descontoitem,
 Coalesce((Select sum(vd10_qtd)
 from estmvvd10, estmvvd9
 where vd10_vd9 = vd9_cod
 and vd10_pro = v2.vd2_pro
 and Coalesce(vd10_cor,'') = Coalesce(v2.vd2_cor,'')
 and Coalesce(vd10_med,'') = Coalesce(v2.vd2_med,'')
 and vd9_asc = v2.vd2_bol
 and vd9_asc_cad = v2.vd2_cad
 and vd9_asc_alm = v2.vd2_alm ),0) -
 Coalesce((Select sum(vd2_qtd)
 from estmvvd2 vd2
 where vd2.vd2_bol = v2.vd2_bol
 and vd2.vd2_item < v2.vd2_item
 and vd2.vd2_pro = v2.vd2_pro
 and Coalesce(vd2.vd2_cor,'') = Coalesce(v2.vd2_cor,'')
 and Coalesce(vd2.vd2_med,'') = Coalesce(v2.vd2_med,'')),0)
 from estmvvd1 v1, estmvvd2 v2
 where vd2_cod = :pVd2Cod
 and vd1_cod = vd2_bol
 and vd1_alm = vd2_alm
 and vd1_cad = vd2_cad
 Into vVd1Can, vVd1Vtp, vVdCod, vVd1DsV, vVd1DsP, vVd2Vlr, vVd2Qtd, vVd2Dsc, vVd10Pd Do
 begin
 if (vVd10Pd < 0) then
 vVd10Pd = 0;
 
 Select Saldo from SALDO_DEVOLUCOES(:vVdCod) into vCred;
 if (vCred is Null) then
 vCred = 0;
 vVd1DsV = vVd1DsV+vCred;
 
 if (vVd2Qtd is Null) then
 vVd2Qtd = 0;
 if (vVd2Dsc is Null) then
 vVd2Dsc = 0;
 if (vVd10Pd is Null) then
 vVd10Pd = 0;
 if (vVd2Vlr is Null) then
 vVd2Vlr = 0;
 if (vVd1DsP is Null) then
 vVd1DsP = 0;
 if (vVd1DsV is Null) then
 vVd1DsV = 0;
 if (vVd1Vtp is Null) then
 vVd1Vtp = 0;
 
 if ((vVd1Can = 'BP') and (vVd2Qtd >= vVd10Pd)) then
 pQuant = (vVd2Qtd - vVd10Pd);
 else if (vVd1Can = 'A') then
 pQuant = vVd2Qtd;
 else if ((pSalFec > 0) and ((vVd1Can = 'FN') or (vVd1Can = 'F') or (vVd1Can = 'P') )) then
 BEGIN
 pQuant = vVd2Qtd;
 IF ( (vVd1Vtp<=0) AND (vVd1Can = 'P') ) THEN
 vVd1Vtp=(pQuant * vVd2Vlr) * ((100.0 - vVd2Dsc) / 100.0);
 END
 else
 pQuant = 0;
 
 vPB = (pQuant * vVd2Vlr) * ((100.0 - vVd2Dsc) / 100.0);
 
 if (vVd1Vtp > 0) then
 begin
 vPD = (((vPB * vVd1DsP) + (((vVd1DsV * 100.00) / vVd1Vtp) * vPB)) / 100.00);
 pSaldo = vPB - vPD;
 end
 else
 begin
 pSaldo = vPB;
 end
 Suspend;
 end
 end

 COMMIT;

 ALTER PROCEDURE RETORNA_TAXADIARIA (
    PMOEDA INTEGER,
    PDATA TIMESTAMP)
RETURNS ( 
    RESULT DOUBLE PRECISION)
 AS
DECLARE VARIABLE VANO INTEGER;
 DECLARE VARIABLE VMES INTEGER;
 DECLARE VARIABLE VVALOR VARCHAR(600);
 DECLARE VARIABLE VERRO INTEGER;
 begin
 vAno = extract(year from :pdata);
 vMes = extract(month from :pdata);
 Select resultado, encontrado
 from itemstring(
 (select (Select Result from FLOAT_TO_STRING(cdindice.IND_TX01)) || '@' || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX02)) || '@' || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX03)) || '@' || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX04)) || '@' || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX05)) || '@' ||
 (Select Result from FLOAT_TO_STRING(cdindice.IND_TX06)) || '@' || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX07)) || '@' || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX08)) || '@' || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX09)) || '@' || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX10)) || '@' ||
 (Select Result from FLOAT_TO_STRING(cdindice.IND_TX11)) || '@' || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX12)) || '@' || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX13)) || '@' || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX14)) || '@' || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX15)) || '@' ||
 (Select Result from FLOAT_TO_STRING(cdindice.IND_TX16)) || '@' || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX17)) || '@' || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX18)) || '@' || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX19)) || '@' || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX20)) || '@' ||
 (Select Result from FLOAT_TO_STRING(cdindice.IND_TX21)) || '@' || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX22)) || '@' || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX23)) || '@' || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX24)) || '@' || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX25)) || '@' ||
 (Select Result from FLOAT_TO_STRING(cdindice.IND_TX26)) || '@' || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX27)) || '@' || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX28)) || '@' || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX29)) || '@' || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX30)) || '@' || (Select Result from FLOAT_TO_STRING(cdindice.IND_TX31))
 from cdindice where cdindice.ind_ano = :vAno and cdindice.ind_mes = :vmes and cdindice.ind_moe = :pmoeda),
 extract(day from :pdata), '@')
 into VVALOR, VERRO;
 if (VERRO = 1) then
 RESULT = cast(VVALOR as double precision);
 suspend;
 end

 COMMIT;

 ALTER PROCEDURE FLOAT_TO_STRING (
    VAL DOUBLE PRECISION)
RETURNS ( 
    RESULT VARCHAR(18))
 AS
begin
 if (Val is null) then
 Result = '';
 else
 Result = cast(Val as varchar(18));
 suspend;
 end

 COMMIT;

 ALTER PROCEDURE ATUCODFIXO (
    PPRO INTEGER,
    PCOR VARCHAR(3),
    PMED VARCHAR(3),
    PCOD VARCHAR(15),
    PTIPO INTEGER)
RETURNS ( 
    COD VARCHAR(21))
 AS
DECLARE VARIABLE WCODINTBAR VARCHAR(15);
 DECLARE VARIABLE WCODFIXO VARCHAR(8);
 DECLARE VARIABLE WCODSEQUENCIA INTEGER;
 DECLARE VARIABLE WCODNUMERO INTEGER;
 DECLARE VARIABLE WSEQNUM INTEGER;
 DECLARE VARIABLE WNUM INTEGER;
 DECLARE VARIABLE WEXISTE INTEGER;
 BEGIN
 
 IF (PTIPO=0) Then
 BEGIN
 select first 1 pro_bar from cdpro where pro_cod=:PPRO into WCODINTBAR;
 IF (PCOD<>'') THEN
 BEGIN
 COD=PCOD||PCOR||PMED;
 END
 ELSE
 BEGIN
 COD=WCODINTBAR||PCOR||PMED;
 END
 END
 
 IF (PTIPO=1) Then
 BEGIN
 select first 1 pro_int from cdpro where pro_cod=:PPRO into WCODINTBAR;
 IF (PCOD<>'') THEN
 BEGIN
 COD=PCOD||PCOR||PMED;
 END
 ELSE
 BEGIN
 COD=WCODINTBAR||PCOR||PMED;
 END
 END
 
 IF (PTIPO=2) THEN
 BEGIN
 SELECT P_CODFIXO, P_CODSEQUENCIA, P_CODNUMERO FROM PARAMET INTO WCODFIXO,WCODSEQUENCIA,WCODNUMERO;
 IF ( (WCODFIXO <> '') AND (WCODNUMERO <> 0) AND (WCODSEQUENCIA <> 0) ) THEN
 BEGIN
 SELECT RESULT FROM STR_LENGTH(:WCODSEQUENCIA) INTO WSeqNum;
 SELECT RESULT FROM STR_LENGTH(:WCODFIXO) INTO WNum;
 
 IF (:WSeqNum < :WCODNUMERO) THEN
 BEGIN
 SELECT RESULT FROM COMPLETA_STRING(:WCODSEQUENCIA,'0',:WCODNUMERO-:WNum,-1) INTO COD;
 COD=:WCODFIXO||COD;
 END
 ELSE
 COD=CAST( WCODSEQUENCIA AS VARCHAR(21) );
 
 WCODSEQUENCIA=WCODSEQUENCIA+1;
 UPDATE PARAMET SET P_CODSEQUENCIA=:WCODSEQUENCIA;
 END
 END
 
 IF ((PTIPO=4) or (PTIPO=5)) Then
 BEGIN
 if (PTIPO=5) then
 select first 1 pro_bar from cdpro where pro_cod=:PPRO into WCODINTBAR;
 else
 select first 1 pro_int from cdpro where pro_cod=:PPRO into WCODINTBAR;
 select count(pro_pro)+1 from cdprocm where pro_pro=:PPRO into WNum;
 WEXISTE = 1;
 while (wexiste = 1) do
 begin
 IF (PCOD<>'') THEN
 BEGIN
 COD=PCOD||cast(WNUM as varchar(10));
 END
 ELSE
 BEGIN
 COD=WCODINTBAR||cast(WNUM as varchar(10));
 END
 Select Coalesce((select 1 from cdprocm where pro_cod = :COD),0) from linhas(1) into :wexiste;
 WNum = WNum + 1;
 end
 END
 
 SUSPEND;
 END

 COMMIT;

 ALTER PROCEDURE CALC_DEVOLU (
    PALM INTEGER,
    PCLI INTEGER)
RETURNS ( 
    VD1_COD VARCHAR(13),
    VD1_CAD TIMESTAMP,
    VD1_ALM INTEGER,
    VD2_COR VARCHAR(3),
    VD2_MED VARCHAR(3),
    VD2_QTD DOUBLE PRECISION,
    VD2_VLR DOUBLE PRECISION,
    VD2_VLRTOT DOUBLE PRECISION,
    PRO_NOM VARCHAR(100),
    COR_NOM VARCHAR(30),
    MED_NOM VARCHAR(30),
    VD1_NOT INTEGER,
    STATUS VARCHAR(20),
    ALM_FANT VARCHAR(20),
    TRA_NOM VARCHAR(40),
    VD2_PRO INTEGER,
    VD1_CLI INTEGER,
    CLI_RED VARCHAR(75))
 AS
DECLARE VARIABLE WCAD DATE;
 DECLARE VARIABLE WALM INTEGER;
 DECLARE VARIABLE WCOR VARCHAR(3);
 DECLARE VARIABLE WMED VARCHAR(3);
 DECLARE VARIABLE WBOL VARCHAR(13);
 DECLARE VARIABLE WQTD DOUBLE PRECISION;
 DECLARE VARIABLE WVLR DOUBLE PRECISION;
 DECLARE VARIABLE WVLRTOT DOUBLE PRECISION;
 DECLARE VARIABLE WPRO_NOM VARCHAR(100);
 DECLARE VARIABLE WCOR_NOM VARCHAR(30);
 DECLARE VARIABLE WMED_NOM VARCHAR(30);
 DECLARE VARIABLE WNOT INTEGER;
 DECLARE VARIABLE WSTAT VARCHAR(20);
 DECLARE VARIABLE WFANT VARCHAR(20);
 DECLARE VARIABLE WTRANOM VARCHAR(40);
 DECLARE VARIABLE WPRO INTEGER;
 DECLARE VARIABLE WCLI INTEGER;
 DECLARE VARIABLE WUSACOR VARCHAR(3);
 DECLARE VARIABLE WUSAMED VARCHAR(3);
 DECLARE VARIABLE WACHOU VARCHAR(1);
 BEGIN
 FOR SELECT VD1_CLI, VD1_COD, VD1_CAD, VD1_ALM, VD2_PRO, VD2_COR, VD2_MED ,VD2_QTD, VD2_VLR, (VD2_QTD*VD2_VLR) ,VD1_NOT, STATUS, ALM_FANT, TRA_NOM
 FROM ESTMVVD1, ESTMVVD2, CDTRA1, CDALM
 WHERE ( (VD1_CLI=:PCLI) OR (:PCLI IS NULL) ) AND ( (VD1_ALM=:PALM) OR (:PALM IS NULL) ) AND TRA_COD=VD1_TRA AND ALM_COD=VD1_ALM
 AND VD1_CANC<>'C' AND VD2_BOL=VD1_COD AND TRA_TIP_TRA='TRC'
 INTO WCLI, WBOL ,WCAD ,WALM, WPRO, WCOR ,WMED , WQTD, WVLR, WVLRTOT, WNOT, WSTAT, WFANT, WTRANOM
 DO
 BEGIN
 
 SELECT PRO_NOM FROM CDPRO WHERE PRO_COD=:WPRO INTO WPRO_NOM;
 SELECT COR_NOM FROM CDCOR WHERE COR_COD=:WCOR INTO WCOR_NOM;
 SELECT MED_NOM FROM CDMED WHERE MED_COD=:WMED INTO WMED_NOM;
 SELECT CLI_RED FROM CDCLI WHERE CLI_COD=:WCLI INTO CLI_RED;
 SELECT P_USA_COR, P_USA_MEDIDA FROM PARAMET INTO WUSACOR, WUSAMED;
 WACHOU='F';
 
 IF ((WUSACOR='T') OR (WUSAMED='T')) THEN
 BEGIN
 IF (NOT EXISTS (SELECT VD10_PRO FROM ESTMVVD10, ESTMVVD9 WHERE VD10_PRO=:WPRO AND VD10_COR=:WCOR AND VD10_MED=:WMED AND VD9_BOL=:WBOL AND VD10_VD9=VD9_COD) ) THEN
 WACHOU='T';
 END
 ELSE
 BEGIN
 IF (NOT EXISTS (SELECT VD10_PRO FROM ESTMVVD10, ESTMVVD9 WHERE VD10_PRO=:WPRO AND VD9_BOL=:WBOL AND VD10_VD9=VD9_COD) ) THEN
 WACHOU='T';
 END
 
 IF (:WACHOU='T') THEN
 BEGIN
 VD1_COD=:WBOL; VD1_CAD=WCAD;
 VD1_ALM=WALM; VD2_COR=WCOR;
 VD2_mED=WMED; VD2_QTD=WQTD;
 VD2_VLR=WVLR; VD2_VLRTOT=WVLRTOT;
 PRO_NOM=WPRO_NOM; COR_NOM=WCOR_NOM;
 MED_NOM=WMED_NOM; VD1_NOT=WNOT;
 STATUS=WSTAT; ALM_FANT=WFANT; VD1_CLI=WCLI;
 TRA_NOM=WTRANOM; PRO_NOM=WPRO_NOM; VD2_PRO=WPRO;
 SUSPEND;
 END
 
 END
 END

 COMMIT;

 ALTER PROCEDURE SALDO_PEDIDO_VD1 (
    PVD1COD VARCHAR(13),
    PSALFEC INTEGER)
RETURNS ( 
    PSALDO DOUBLE PRECISION,
    PQUANT DOUBLE PRECISION,
    PSALDO_FIN DOUBLE PRECISION)
 AS
DECLARE VARIABLE VVD1CAN VARCHAR(2);
 DECLARE VARIABLE VVD1VTP DOUBLE PRECISION;
 DECLARE VARIABLE VVD1DSV DOUBLE PRECISION;
 DECLARE VARIABLE VVD1DSP DOUBLE PRECISION;
 DECLARE VARIABLE VVD2VLR DOUBLE PRECISION;
 DECLARE VARIABLE VVD2QTD DOUBLE PRECISION;
 DECLARE VARIABLE VVD2DSC DOUBLE PRECISION;
 DECLARE VARIABLE VVD10PD DOUBLE PRECISION;
 DECLARE VARIABLE VSALDO DOUBLE PRECISION;
 DECLARE VARIABLE VQUANT DOUBLE PRECISION;
 DECLARE VARIABLE VPB DOUBLE PRECISION;
 DECLARE VARIABLE VPD DOUBLE PRECISION;
 DECLARE VARIABLE VCRED DOUBLE PRECISION;
 DECLARE VARIABLE VPERCENT DOUBLE PRECISION;
 DECLARE VARIABLE VNPARC INTEGER;
 begin
 pSaldo = 0;
 pQuant = 0;
 For Select
 vd1_canc,
 estmvvd1.vd1_total_nota_semdescto,
 VD1_DESC_V,
 VD1_DESC_P,
 vd2_vlr,
 vd2_qtd,
 descontoitem,
 coalesce((Select sum(coalesce(vd10_qtd,0))
 from estmvvd10, estmvvd9
 where vd10_vd9 = vd9_cod
 and vd10_pro = estmvvd2.vd2_pro
 and vd10_cor = estmvvd2.vd2_cor
 and vd10_med = estmvvd2.vd2_med
 and vd9_asc = estmvvd2.vd2_bol
 and vd9_asc_cad = estmvvd2.vd2_cad
 and vd9_asc_alm = estmvvd2.vd2_alm ), 0)
 from estmvvd1, estmvvd2
 where vd1_cod = :pVd1Cod
 and vd1_cod = vd2_bol
 and vd1_alm = vd2_alm
 and vd1_cad = vd2_cad
 Into vVd1Can, vVd1Vtp, vVd1DsV, vVd1DsP, vVd2Vlr, vVd2Qtd, vVd2Dsc, vVd10Pd Do
 begin
 
 Select Saldo from SALDO_DEVOLUCOES(:PVD1COD) into vCred;
 if (vCred is Null) then
 vCred = 0;
 vVd1DsV = vVd1DsV+vCred;
 if (vVd2Qtd is Null) then
 vVd2Qtd = 0;
 if (vVd2Dsc is Null) then
 vVd2Dsc = 0;
 if (vVd10Pd is Null) then
 vVd10Pd = 0;
 if (vVd2Vlr is Null) then
 vVd2Vlr = 0;
 if (vVd1DsP is Null) then
 vVd1DsP = 0;
 if (vVd1DsV is Null) then
 vVd1DsV = 0;
 if (vVd1Vtp is Null) then
 vVd1Vtp = 0;
 
 if ((vVd1Can = 'BP') and (vVd2Qtd >= vVd10Pd)) then
 vQuant = (vVd2Qtd - vVd10Pd);
 else if (vVd1Can = 'A') then
 vQuant = vVd2Qtd;
 else if ((pSalFec > 0) and ((vVd1Can = 'FN') or (vVd1Can = 'F') or (vVd1Can = 'P') )) then
 BEGIN
 vQuant = vVd2Qtd;
 IF ( (vVd1Vtp<=0) AND (vVd1Can = 'P') ) THEN
 vVd1Vtp=(vQuant * vVd2Vlr) * ((100.0 - vVd2Dsc) / 100.0);
 END
 else
 vQuant = 0;
 
 vPB = (vQuant * vVd2Vlr) * ((100.0 - vVd2Dsc) / 100.0);
 
 if (vVd1Vtp > 0) then
 begin
 vPD = (((vPB * vVd1DsP) + (( (vVd1DsV * 100.00) / vVd1Vtp) * vPB)) / 100.00);
 vSaldo = vPB - vPD;
 end
 else
 begin
 vPD = 0;
 vSaldo = 0;
 end
 
 pQuant = pQuant + vQuant;
 pSaldo = pSaldo + vSaldo;
 
 end
 
 Select COUNT(VD4_COD),
 SUM(
 CASE
 WHEN (TIP_FIN = 'S') THEN ((VD4_VAL * 100) / VD3_VLRL)
 ELSE 0
 END)
 From Estmvvd4, cdtipd, estmvvd3
 Where vd4_bol = :PVD1COD
 and vd3_bol = vd4_bol
 and tip_cod = vd4_tip
 Into vNParc, vPercent;
 
 pSaldo_Fin = vPercent * pSaldo / 100 ;
 
 Suspend;
 end

 COMMIT;

 ALTER PROCEDURE RECALC_ESTOQUE (
    VPARAMCOR INTEGER,
    VPARAMMED INTEGER,
    VCASAS_DECIMAIS INTEGER,
    VALM INTEGER,
    VHIS VARCHAR(1))
 AS
declare variable vcustomedio double precision;
 declare variable vsaldo double precision;
 declare variable vultcusto double precision;
 declare variable vant double precision;
 declare variable vpos double precision;
 declare variable vvd2cad date;
 declare variable vproant integer;
 declare variable valmant integer;
 declare variable vmedant varchar(3);
 declare variable vcorant varchar(3);
 declare variable vprecocor varchar(1);
 declare variable vprecomed varchar(1);
 declare variable vprecor integer;
 declare variable vpremed integer;
 declare variable vmantemest varchar(1);
 declare variable vresult integer;
 Begin
 select alm_atu_est from cdalm where alm_cod = :vAlm into :vmantemest;
 if ((vAlm is null) and ((VHIS <> 'N') or (VHIS is null))) THEN
 Select sum(est_sal) From MVEST Into vAnt;
 Delete From mvest where (est_alm = :vAlm) or (:vAlm is null) or (:vmantemest = 'N');
 For
 Select vProAnt, vAlmAnt, vCorAnt, vMedAnt, vSaldo, vUltCusto, vCustoMedio, vVd2Cad
 from calcula_estoque(:vParamcor,:vParammed,:vCasas_decimais,null,null,null,null,:vAlm,0,0)
 Into :vProAnt, :vAlmAnt, :vCorAnt, :vMedAnt, :vSaldo, :vUltCusto, :vCustoMedio, :vVd2Cad
 Do
 Insert into MVEST (est_pro, est_alm, est_cor, est_tam, est_sal, est_ucus, est_cmed, est_dat)
 values (:vProAnt, :vAlmAnt, :vCorAnt, :vMedAnt, :vSaldo, :vUltCusto, :vCustoMedio, :vVd2Cad);
 Select sum(est_sal) From MVEST Into vPos;
 
 if ( (vAlm is null) and ( (VHIS <> 'N') or (VHIS is null) ) ) THEN
 Insert into MVESTHIS values (:vAnt, :vPos, (:vPos - :vAnt), 'NOW');
 
 Select PRECO_COR, PRECO_MEDIDA From PARAMET into vPrecoCor, vPrecoMed;
 if (vPrecoCor = 'T') then
 vPreCor = 1;
 else
 vPreCor = 0;
 if (vPrecoMed = 'T') then
 vPreMed = 1;
 else
 vPreMed = 0;
 execute procedure atualiza_cdpropre(:vPreCor,:vPreMed,:vcasas_decimais,null,null,null);
 
 delete from estmvvd10
 where not exists (select vd9_cod from estmvvd9 where vd9_cod = estmvvd10.vd10_vd9);
 
 Insert Into estmvvd10 (vd10_cod, vd10_vd9, vd10_pro, vd10_cor, vd10_med, vd10_qtd, vd10_ser)
 Select (Select max(vd10_cod)+1 from estmvvd10), vd9_cod, vd2_pro, vd2_cor, vd2_med, vd2_qtd, 0
 from estmvvd2 A, estmvvd9
 where vd2_bol = vd9_bol
 and not exists (Select * from estmvvd10
 where vd10_vd9 = estmvvd9.vd9_cod
 and vd10_pro = A.vd2_pro
 and ((A.vd2_cor is null) or (A.vd2_cor = '') or (A.vd2_cor = '000') or (vd10_cor = A.vd2_cor))
 and ((A.vd2_med is null) or (A.vd2_med = '') or (A.vd2_med = '000') or (vd10_med = A.vd2_med)) )
 and exists (Select * from estmvvd2 B
 where B.vd2_bol = estmvvd9.vd9_asc
 and B.vd2_pro = A.vd2_pro
 and ((A.vd2_cor is null) or (A.vd2_cor = '') or (A.vd2_cor = '000') or (B.vd2_cor = A.vd2_cor))
 and ((A.vd2_med is null) or (A.vd2_med = '') or (A.vd2_med = '000') or (B.vd2_med = A.vd2_med)) );
 
 update codigo set ultimocodigo = (Select max(vd10_cod) from estmvvd10)
 where upper(tabela) = 'ESTMVVD10';
 
 update estmvvd1 set vd1_canc = 'BT', status = 'BAIXA TOTAL', vd1_atu = 'today'
 where vd1_canc <> 'BT'
 and vd1_origem <> 'DDS'
 and vd1_origem <> 'DDO'
 and exists (select vd9_cod from estmvvd9 where estmvvd9.vd9_asc = estmvvd1.vd1_cod)
 and (Select sum(vd10_qtd) from estmvvd10, estmvvd9 where estmvvd9.vd9_asc = estmvvd1.vd1_cod and vd10_vd9 = estmvvd9.vd9_cod) >=
 (Select sum(vd2_qtd) from estmvvd2 A where A.vd2_bol = estmvvd1.vd1_cod);
 
 End

 COMMIT;

 ALTER PROCEDURE DUR_EST_SELECAO (
    PDATADE TIMESTAMP,
    PDATAATE TIMESTAMP,
    PPRODE VARCHAR(100),
    PPROATE VARCHAR(100),
    PALMDE VARCHAR(50),
    PALMATE VARCHAR(50),
    PMARDE VARCHAR(40),
    PMARATE VARCHAR(40),
    PGRUDE VARCHAR(40),
    PGRUATE VARCHAR(40),
    PSGRUDE VARCHAR(40),
    PSGRUATE VARCHAR(40),
    PTIPDE VARCHAR(40),
    PTIPATE VARCHAR(40),
    PTRADE VARCHAR(40),
    PTRAATE VARCHAR(40),
    PCATDE VARCHAR(40),
    PCATATE VARCHAR(40),
    PUSACOR INTEGER,
    PUSAMEDIDA INTEGER)
RETURNS ( 
    VD1_COD VARCHAR(13),
    VD2_QTD DOUBLE PRECISION,
    FATURAMENTO DOUBLE PRECISION,
    EST_SAL DOUBLE PRECISION,
    PRO_COD INTEGER,
    PRO_INT VARCHAR(15),
    PRO_BAR VARCHAR(15),
    PRO_NOM VARCHAR(100),
    PROCM VARCHAR(21),
    COR_NOM VARCHAR(30),
    MED_NOM VARCHAR(30),
    TIP_NOM VARCHAR(30),
    MAR_NOM VARCHAR(30),
    GRU_NOM VARCHAR(30),
    SUBGRUPO VARCHAR(30),
    CAT_NOM VARCHAR(30))
 AS
begin
 if (pUsaCor is null) then
 pUsaCor = 0;
 if (pUsaMedida is null) then
 pUsaMedida = 0;
 For
 Select vd1_cod,
 vd2_qtd,
 vd2_vlr * vd2_qtd,
 (Select Sum(est_sal) From mvest, cdalm
 Where alm_cod = est_alm
 and est_pro=estmvvd2.vd2_pro
 and ((:pUsaCor is null) or (:pUsaCor = 0) or (est_cor = estmvvd2.vd2_cor))
 and ((:pUsaMedida is null) or (:pUsaMedida = 0) or (est_tam=estmvvd2.vd2_med))
 and ((:palmde is null) or ((alm_fant >= :palmde) and (alm_fant <= :palmate)))
 ) as est_sal,
 cdpro.pro_cod,cdpro.pro_int,cdpro.pro_bar,cdpro.pro_nom,
 cdprocm.pro_cod AS CODIGO, cdmed.med_nom, cdcor.cor_nom,
 tip_nom, mar_nom, cat_nom, cdgrup.gru_nom, cdsubgrup.gru_nom
 From
 estmvvd1,cdtra1, CDALM,
 cdpro left outer join cdtipp on cdpro.pro_tip = cdtipp.tip_cod
 left outer join cdcatpro on cdpro.pro_cat = cdcatpro.cat_cod
 left outer join cdmar on cdpro.pro_mar = cdmar.mar_cod
 left outer join cdgrup on cdpro.pro_gru = cdgrup.gru_cod
 left outer join cdsubgrup on cdpro.pro_subgru = cdsubgrup.gru_cod,
 estmvvd2 left outer join cdprocm on (estmvvd2.vd2_pro = cdprocm.pro_pro and estmvvd2.vd2_cor = cdprocm.pro_cor and estmvvd2.vd2_med = cdprocm.pro_med and
 ((:pUsaMedida <> 0) or (:pUsaCor <> 0)))
 left outer join cdmed on ((:pUsaMedida <> 0) and estmvvd2.vd2_med = cdmed.med_cod)
 left outer join cdcor on ((:pUsaCor <> 0) and estmvvd2.vd2_cor = cdcor.cor_cod)
 Where vd2_pro = cdpro.pro_cod
 and vd2_bol = vd1_cod
 and vd1_canc <> 'C'
 and vd2_alm = alm_cod
 and TRA_TIP_TRA = 'VND'
 and vd1_tra = tra_cod
 and ESTMVVD1.VD1_CAD >= :PDATADE and ESTMVVD1.VD1_CAD <= :PDATAATE
 and ( (CDPRO.PRO_NOM >= :PPRODE and CDPRO.PRO_NOM <= :PPROATE) OR (:PPRODE IS NULL) )
 and ( (alm_fant >= :PALMDE) OR (:PALMDE IS NULL) )
 and ( (alm_fant <= :PALMATE) OR (:PALMDE IS NULL) )
 and ( (CDMAR.MAR_ORD >= :PMARDE and CDMAR.MAR_ORD <= :PMARATE) OR (:PMARDE IS NULL) )
 and ( (CDGRUP.GRU_ORD >= :PGRUDE and CDGRUP.GRU_ORD <= :PGRUATE) OR (:PGRUDE IS NULL) )
 and ( (CDSUBGRUP.GRU_ORD >= :PSGRUDE and CDSUBGRUP.GRU_ORD <= :PSGRUATE) OR (:PSGRUDE IS NULL) )
 and ( (CDTIPP.TIP_ORD >= :PTIPDE and CDTIPP.TIP_ORD <= :PTIPATE) OR (:PTIPDE IS NULL) )
 and ( (CDCATPRO.CAT_ORD >= :PCATDE and CDCATPRO.CAT_ORD <= :PCATATE) OR (:PCATDE IS NULL) )
 and ( (CDTRA1.TRA_NOM >= :PTRADE and CDTRA1.TRA_NOM <= :PTRAATE) OR (:PTRADE IS NULL) )
 into VD1_COD, VD2_QTD, FATURAMENTO, EST_SAL, PRO_COD, PRO_INT, PRO_BAR,
 PRO_NOM, PROCM, MED_NOM, COR_NOM, TIP_NOM, MAR_NOM, CAT_NOM, GRU_NOM,
 SUBGRUPO do
 suspend;
 end

 COMMIT;

 ALTER PROCEDURE DUR_EST_LISTAGEM (
    PDATADE TIMESTAMP,
    PDATAATE TIMESTAMP,
    PTIPO INTEGER,
    PPRODE VARCHAR(100),
    PPROATE VARCHAR(100),
    PALMDE VARCHAR(50),
    PALMATE VARCHAR(50),
    PMARDE VARCHAR(40),
    PMARATE VARCHAR(40),
    PGRUDE VARCHAR(40),
    PGRUATE VARCHAR(40),
    PSGRUDE VARCHAR(40),
    PSGRUATE VARCHAR(40),
    PTIPDE VARCHAR(40),
    PTIPATE VARCHAR(40),
    PTRADE VARCHAR(40),
    PTRAATE VARCHAR(40),
    PCATDE VARCHAR(40),
    PCATATE VARCHAR(40),
    PUSACOR INTEGER,
    PUSAMEDIDA INTEGER)
RETURNS ( 
    CUPOM VARCHAR(6),
    MOVIMENTO DOUBLE PRECISION,
    FATURAMENTO DOUBLE PRECISION,
    EST_SAL DOUBLE PRECISION,
    PRO_COD INTEGER,
    PRO_INT VARCHAR(15),
    PRO_BAR VARCHAR(15),
    PRO_NOM VARCHAR(100),
    DURACAO DOUBLE PRECISION,
    COR_NOM VARCHAR(30),
    MED_NOM VARCHAR(30),
    CODIGO VARCHAR(21),
    GRUPO VARCHAR(30),
    PDIAS INTEGER)
 AS
begin
 if (pDataDe is null) then
 begin
 Select Min(VD1_CAD) from estmvvd1 into :pDataDe;
 pDataAte = Cast('today' as date);
 end
 if (pDataAte is null) then
 pDataAte = pDataDe;
 pDias = pDataAte - pDataDe;
 For
 Select CUPOM,MOVIMENTO,FATURAMENTO,EST_SAL,PRO_COD,PRO_INT,PRO_BAR,PRO_NOM, CODIGO, MED_NOM, COR_NOM, GRUPO
 from dur_est_grupo(:pTipo, :pdatade, :pdataate, :pprode, :pproate, :palmde, :palmate,
 :pmarde, :pmarate, :pgrude, :pgruate, :psgrude, :psgruate, :ptipde, :ptipate,
 :ptrade, :ptraate, :pcatde, :pcatate, :pusacor, :pusamedida)
 INTO :CUPOM,:MOVIMENTO,:FATURAMENTO,:EST_SAL,:PRO_COD,:PRO_INT,:PRO_BAR,:PRO_NOM, :CODIGO, :MED_NOM, COR_NOM, GRUPO
 DO
 BEGIN
 IF (:MOVIMENTO>0) THEN
 BEGIN
 DURACAO = ( est_sal / (:MOVIMENTO/:pDIAS) );
 DURACAO = (CAST((DURACAO * 100) as integer) / 100);
 END
 ELSE
 DURACAO = 0;
 SUSPEND;
 END
 END


 COMMIT;

 ALTER PROCEDURE STR_LENGTH (
    PTEXTO VARCHAR(100))
RETURNS ( 
    RESULT INTEGER)
 AS
DECLARE VARIABLE VCNT INTEGER;
 begin
 vCNT = 0;
 RESULT = vCNT;
 while (PTEXTO <> '') do
 begin
 VCNT=VCNT+1;
 Ptexto = substring(PTEXTO from 2 for 100);
 result = VCNT;
 end
 suspend;
 end

 COMMIT;

 ALTER PROCEDURE ATUALIZACODCORMED (
    PPRODUTO INTEGER,
    PCOR VARCHAR(3),
    PMEDIDA VARCHAR(3),
    PTIPO INTEGER)
 AS
DECLARE VARIABLE WPRO INTEGER;
 DECLARE VARIABLE WCOR VARCHAR(3);
 DECLARE VARIABLE WMED VARCHAR(3);
 DECLARE VARIABLE WCOD INTEGER;
 BEGIN
 WCOD=0;
 IF (pMedida='') THEN
 BEGIN
 FOR SELECT DISTINCT PRO_MED
 FROM rdb$database left join cdprocm on (pro_pro= :PPRODUTO)
 WHERE pro_pro = :PPRODUTO OR NOT EXISTS (SELECT * FROM cdprocm WHERE pro_pro = :PPRODUTO)
 INTO WMED DO
 BEGIN
 INSERT INTO CDPROCM VALUES( :pProduto, :pCor, :WMED, (SELECT COD FROM ATUCODFIXO(null,'','','',2)),'A',cast('today' as date),cast('today' as date) );
 END
 END

 IF (pCor='') THEN
 BEGIN
 FOR SELECT DISTINCT PRO_COR
 FROM rdb$database left join cdprocm on (pro_pro= :PPRODUTO)
 WHERE pro_pro = :PPRODUTO OR NOT EXISTS (SELECT * FROM cdprocm WHERE pro_pro = :PPRODUTO)
 INTO WCOR DO
 BEGIN
 INSERT INTO CDPROCM VALUES( :pProduto, :WCOR, :pMedida, (SELECT COD FROM ATUCODFIXO(null,'','','',2)),'A',cast('today' as date),cast('today' as date) );
 END
 END

 END

 COMMIT;

 ALTER PROCEDURE REMOVE_INV_CHAR (
    TEXTO VARCHAR(100))
RETURNS ( 
    RESULT VARCHAR(100))
 AS
DECLARE VARIABLE I INTEGER;
 DECLARE VARIABLE LEN INTEGER;
 DECLARE VARIABLE S VARCHAR(100);
 DECLARE VARIABLE SS VARCHAR(100);
 begin
 RESULT = TEXTO;
 
 LEN = 0;
 WHILE ( RESULT <> '' ) DO
 BEGIN
 RESULT = SUBSTRING( RESULT FROM 2 FOR 100 );
 LEN = LEN +1;
 END
 
 RESULT = TEXTO;
 S = '';
 SS = '';
 I = 0;
 WHILE ( I < LEN ) DO
 BEGIN
 SS = SUBSTRING( RESULT FROM 1 FOR 1 );
 IF ( SS NOT IN ( '/', '\', '-', '' ) ) THEN
 S = S || SS;
 RESULT = SUBSTRING( RESULT FROM 2 FOR 100 );
 I = I +1;
 END
 RESULT = S;
 suspend;
 end

 COMMIT;

 ALTER PROCEDURE BALANCETE_RESUMIDO_EMI (
    PPROJETO VARCHAR(60),
    PPLANO VARCHAR(40),
    PFORNECATE VARCHAR(75),
    PFORNECDE VARCHAR(75),
    PCLIENTEATE VARCHAR(75),
    PCLIENTEDE VARCHAR(75),
    PCONTADE VARCHAR(30),
    PCONTAATE VARCHAR(30),
    PCCUSTODE VARCHAR(40),
    PCCUSTOATE VARCHAR(40),
    PDATAINI TIMESTAMP,
    PDATAFIN TIMESTAMP)
RETURNS ( 
    RTOTAL DOUBLE PRECISION)
 AS
DECLARE VARIABLE VSOMA DOUBLE PRECISION;
 BEGIN
 IF (pContaAte IS NULL) THEN
 pContaAte = pContaDe;
 IF (pCCustoAte IS NULL) THEN
 pCCustoAte = pCCustoDe;
 IF (pClienteAte IS NULL) THEN
 pClienteAte = pClienteDe;
 IF (pFornecAte IS NULL) THEN
 pFornecAte = pFornecDe;
 rTotal = 0;
 FOR
 SELECT SUM(lge_val)
 FROM MVLGE
 WHERE (MVLGE.LGE_TIP <> 'D' OR MVLGE.LGE_TIP IS NULL)
 AND MVLGE.LGE_PLA LIKE :pPLANO || '%'
 AND MVLGE.LGE_EMI >= :pDATAINI
 AND MVLGE.LGE_EMI <= :pDATAFIN
 AND ((:pContaDe IS NULL) OR (lge_con IN (SELECT con_cod FROM cdcon WHERE con_nom >= :pContaDe AND con_nom <= :pContaAte)))
 AND ((:pCCustoDe IS NULL) OR ((mvlge.lge_ccusto >= :pCCustoDe) AND (mvlge.lge_ccusto <= :pCCustoAte)))
 AND ((:pClienteDe IS NULL) OR (lge_cli IN (SELECT cli_cod FROM cdcli WHERE cli_red >= :pClienteDe AND cli_red <= :pClienteAte)))
 AND ((:pFornecDe IS NULL) OR (lge_for IN (SELECT for_cod FROM cdfor WHERE for_red >= :pFornecDe AND for_red <= :pFornecAte)))
 AND ((:pProjeto IS NULL) OR (lge_proj2 IN (SELECT proj2_cod FROM MVLGE,cdproj2,cdproj WHERE lge_proj2 = proj2_cod AND proj_nom = :pProjeto AND proj2_proj = proj_cod)))
 UNION ALL
 SELECT SUM(dob_val)
 FROM MVLGED
 WHERE MVLGED.DOB_PLA LIKE :pPLANO || '%'
 AND MVLGED.DOB_EMI >= :pDATAINI
 AND MVLGED.DOB_EMI <= :pDATAFIN
 AND ((:pContaDe IS NULL) OR (dob_con IN (SELECT con_cod FROM cdcon WHERE con_nom >= :pContaDe AND con_nom <= :pContaAte)))
 AND ((:pCCustoDe IS NULL) OR ((mvlged.dob_ccusto >= :pCCustoDe) AND (mvlged.dob_ccusto <= :pCCustoAte)))
 AND ((:pClienteDe IS NULL) OR (dob_cli IN (SELECT cli_cod FROM cdcli WHERE cli_red >= :pClienteDe AND cli_red <= :pClienteAte)))
 AND ((:pFornecDe IS NULL) OR (dob_for IN (SELECT for_cod FROM cdfor WHERE for_red >= :pFornecDe AND for_red <= :pFornecAte)))
 AND ((:pProjeto IS NULL) OR (dob_proj2 IN (SELECT proj2_cod FROM MVLGEd,cdproj2,cdproj WHERE dob_proj2 = proj2_cod AND proj_nom = :pProjeto AND proj2_proj = proj_cod)))
 UNION ALL
 SELECT SUM(lge_val)
 FROM MORLGE
 WHERE (MORLGE.LGE_TIP <> 'D' OR MORLGE.LGE_TIP IS NULL)
 AND MORLGE.LGE_PLA LIKE :pPLANO || '%'
 AND MORLGE.LGE_EMI >= :pDATAINI
 AND MORLGE.LGE_EMI <= :pDATAFIN
 AND ((:pContaDe IS NULL) OR (lge_con IN (SELECT con_cod FROM cdcon WHERE con_nom >= :pContaDe AND con_nom <= :pContaAte)))
 AND ((:pCCustoDe IS NULL) OR ((morlge.lge_ccusto >= :pCCustoDe) AND (morlge.lge_ccusto <= :pCCustoAte)))
 AND ((:pClienteDe IS NULL) OR (lge_cli IN (SELECT cli_cod FROM cdcli WHERE cli_red >= :pClienteDe AND cli_red <= :pClienteAte)))
 AND ((:pFornecDe IS NULL) OR (lge_for IN (SELECT for_cod FROM cdfor WHERE for_red >= :pFornecDe AND for_red <= :pFornecAte)))
 AND ((:pProjeto IS NULL) OR (lge_proj2 IN (SELECT proj2_cod FROM morlge,cdproj2,cdproj WHERE lge_proj2 = proj2_cod AND proj_nom = :pProjeto AND proj2_proj = proj_cod)))
 UNION ALL
 SELECT SUM(dob_val)
 FROM MORLGED
 WHERE MORLGED.DOB_PLA LIKE :pPLANO || '%'
 AND MORLGED.DOB_EMI >= :pDATAINI
 AND MORLGED.DOB_EMI <= :pDATAFIN
 AND ((:pContaDe IS NULL) OR (dob_con IN (SELECT con_cod FROM cdcon WHERE con_nom >= :pContaDe AND con_nom <= :pContaAte)))
 AND ((:pCCustoDe IS NULL) OR ((morlged.dob_ccusto >= :pCCustoDe) AND (morlged.dob_ccusto <= :pCCustoAte)))
 AND ((:pClienteDe IS NULL) OR (dob_cli IN (SELECT cli_cod FROM cdcli WHERE cli_red >= :pClienteDe AND cli_red <= :pClienteAte)))
 AND ((:pFornecDe IS NULL) OR (dob_for IN (SELECT for_cod FROM cdfor WHERE for_red >= :pFornecDe AND for_red <= :pFornecAte)))
 AND ((:pProjeto IS NULL) OR (dob_proj2 IN (SELECT proj2_cod FROM morlged,cdproj2,cdproj WHERE dob_proj2 = proj2_cod AND proj_nom = :pProjeto AND proj2_proj = proj_cod)))
 UNION ALL
 SELECT SUM(REC_VAL)
 FROM MVCOREC
 WHERE MVCOREC.REC_PLA LIKE :pPLANO || '%'
 AND MVCOREC.REC_EMI >= :pDATAINI
 AND MVCOREC.REC_EMI <= :pDATAFIN
 AND ((:pContaDe IS NULL) OR (REC_CON IN (SELECT con_cod FROM cdcon WHERE con_nom >= :pContaDe AND con_nom <= :pContaAte)))
 AND ((:pCCustoDe IS NULL) OR ((MVCOREC.REC_CCUSTO >= :pCCustoDe) AND (MVCOREC.REC_ccusto <= :pCCustoAte)))
 AND ((:pClienteDe IS NULL) OR (REC_CLI IN (SELECT CLI_COD FROM cdcli WHERE CLI_RED >= :pClienteDe AND CLI_RED <= :pClienteAte)))
 AND ((:pProjeto IS NULL) OR (REC_PROJ2 IN (SELECT PROJ2_COD FROM MVCOREC, CDPROJ2, CDPROJ WHERE REC_PROJ2 = PROJ2_COD AND PROJ_NOM = :pProjeto AND proj2_proj = proj_cod)))
 UNION ALL
 SELECT SUM(PAG_VAL)*-1
 FROM MVCOPAG
 WHERE MVCOPAG.PAG_PLA LIKE :pPLANO || '%'
 AND MVCOPAG.PAG_EMI >= :pDATAINI
 AND MVCOPAG.PAG_EMI <= :pDATAFIN
 AND ((:pContaDe IS NULL) OR (PAG_CON IN (SELECT con_cod FROM cdcon WHERE con_nom >= :pContaDe AND con_nom <= :pContaAte)))
 AND ((:pCCustoDe IS NULL) OR ((MVCOPAG.PAG_CCUSTO >= :pCCustoDe) AND (MVCOPAG.PAG_ccusto <= :pCCustoAte)))
 AND ((:pFornecDe IS NULL) OR (PAG_FOR IN (SELECT FOR_COD FROM cdfor WHERE FOR_RED >= :pFornecDe AND FOR_RED <= :pFornecAte)))
 AND ((:pProjeto IS NULL) OR (PAG_PROJ2 IN (SELECT PROJ2_COD FROM MVCOREC, CDPROJ2, CDPROJ WHERE REC_PROJ2 = PROJ2_COD AND PROJ_NOM = :pProjeto AND proj2_proj = proj_cod)))
 INTO vSoma DO
 IF (NOT vSoma IS NULL) THEN
 rTotal = vSoma + rTotal;
 END

 COMMIT;

 ALTER PROCEDURE BALANCETE_MES_A_MES_EMI (
    PPLANO VARCHAR(40),
    PPROJETO VARCHAR(60),
    PFORNECATE VARCHAR(75),
    PFORNECDE VARCHAR(75),
    PCLIENTEATE VARCHAR(75),
    PCLIENTEDE VARCHAR(75),
    PCONTADE VARCHAR(30),
    PCONTAATE VARCHAR(30),
    PCCUSTODE VARCHAR(40),
    PCCUSTOATE VARCHAR(40),
    PDATAINI TIMESTAMP,
    PDATAFIN TIMESTAMP)
RETURNS ( 
    RMESES INTEGER,
    RMES1 DOUBLE PRECISION,
    RMES2 DOUBLE PRECISION,
    RMES3 DOUBLE PRECISION,
    RMES4 DOUBLE PRECISION,
    RMES5 DOUBLE PRECISION,
    RMES6 DOUBLE PRECISION,
    RMES7 DOUBLE PRECISION,
    RMES8 DOUBLE PRECISION,
    RMES9 DOUBLE PRECISION,
    RMES10 DOUBLE PRECISION,
    RMES11 DOUBLE PRECISION,
    RMES12 DOUBLE PRECISION,
    RTOTAL DOUBLE PRECISION)
 AS
DECLARE VARIABLE VDIA INTEGER;
 DECLARE VARIABLE VMES INTEGER;
 DECLARE VARIABLE VANO INTEGER;
 DECLARE VARIABLE VCNT INTEGER;
 DECLARE VARIABLE VSOMA DOUBLE PRECISION;
 DECLARE VARIABLE VTOTAL DOUBLE PRECISION;
 DECLARE VARIABLE VDATAINI DATE;
 DECLARE VARIABLE VDATAFIN DATE;
 BEGIN
 IF (pContaAte IS NULL) THEN
 pContaAte = pContaDe;
 IF (pCCustoAte IS NULL) THEN
 pCCustoAte = pCCustoDe;
 IF (pClienteAte IS NULL) THEN
 pClienteAte = pClienteDe;
 IF (pFornecAte IS NULL) THEN
 pFornecAte = pFornecDe;
 rMes1 = 0;
 rMes2 = 0;
 rMes3 = 0;
 rMes4 = 0;
 rMes5 = 0;
 rMes6 = 0;
 rMes7 = 0;
 rMes8 = 0;
 rMes9 = 0;
 rMes10 = 0;
 rMes11 = 0;
 rMes12 = 0;
 rTotal = 0;
 vCnt = 0;
 EXECUTE PROCEDURE DecodeDate(pDataIni) RETURNING_VALUES(vAno, vMes, vDia);
 EXECUTE PROCEDURE EncodeDate(vAno, vMes, 01) RETURNING_VALUES(vDataIni);
 WHILE (vDataIni <= pDataFin) DO
 BEGIN
 vTotal = 0;
 vCnt = vCnt + 1;
 EXECUTE PROCEDURE DecodeDate(vDataIni) RETURNING_VALUES(vAno, vMes, vDia);
 EXECUTE PROCEDURE DaysOfMonth(vAno, vMes) RETURNING_VALUES(vDia);
 EXECUTE PROCEDURE EncodeDate(vAno, vMes, vDia) RETURNING_VALUES(vDataFin);
 FOR
 SELECT SUM(lge_val)
 FROM MVLGE
 WHERE (MVLGE.LGE_TIP <> 'D' OR MVLGE.LGE_TIP IS NULL)
 AND MVLGE.LGE_PLA LIKE :pPLANO || '%'
 AND MVLGE.LGE_EMI >= :vDATAINI
 AND MVLGE.LGE_EMI <= :vDATAFIN
 AND ((:pContaDe IS NULL) OR (lge_con IN (SELECT con_cod FROM cdcon WHERE con_nom >= :pContaDe AND con_nom <= :pContaAte)))
 AND ((:pCCustoDe IS NULL) OR ((mvlge.lge_ccusto >= :pCCustoDe) AND (mvlge.lge_ccusto <= :pCCustoAte)))
 AND ((:pClienteDe IS NULL) OR (lge_cli IN (SELECT cli_cod FROM cdcli WHERE cli_red >= :pClienteDe AND cli_red <= :pClienteAte)))
 AND ((:pFornecDe IS NULL) OR (lge_for IN (SELECT for_cod FROM cdfor WHERE for_red >= :pFornecDe AND for_red <= :pFornecAte)))
 AND ((:pProjeto IS NULL) OR (lge_proj2 IN (SELECT proj2_cod FROM MVLGE,cdproj2,cdproj WHERE lge_proj2 = proj2_cod AND proj_nom = :pProjeto AND proj2_proj = proj_cod)))
 UNION ALL
 SELECT SUM(dob_val)
 FROM MVLGED
 WHERE MVLGED.DOB_PLA LIKE :pPLANO || '%'
 AND MVLGED.DOB_EMI >= :vDATAINI
 AND MVLGED.DOB_EMI <= :vDATAFIN
 AND ((:pContaDe IS NULL) OR (dob_con IN (SELECT con_cod FROM cdcon WHERE con_nom >= :pContaDe AND con_nom <= :pContaAte)))
 AND ((:pCCustoDe IS NULL) OR ((mvlged.dob_ccusto >= :pCCustoDe) AND (mvlged.dob_ccusto <= :pCCustoAte)))
 AND ((:pClienteDe IS NULL) OR (dob_cli IN (SELECT cli_cod FROM cdcli WHERE cli_red >= :pClienteDe AND cli_red <= :pClienteAte)))
 AND ((:pFornecDe IS NULL) OR (dob_for IN (SELECT for_cod FROM cdfor WHERE for_red >= :pFornecDe AND for_red <= :pFornecAte)))
 AND ((:pProjeto IS NULL) OR (dob_proj2 IN (SELECT proj2_cod FROM mvlged,cdproj2,cdproj WHERE dob_proj2 = proj2_cod AND proj_nom = :pProjeto AND proj2_proj = proj_cod)))
 UNION ALL
 SELECT SUM(lge_val)
 FROM MORLGE
 WHERE (MORLGE.LGE_TIP <> 'D' OR MORLGE.LGE_TIP IS NULL)
 AND MORLGE.LGE_PLA LIKE :pPLANO || '%'
 AND MORLGE.LGE_EMI >= :vDATAINI
 AND MORLGE.LGE_EMI <= :vDATAFIN
 AND ((:pContaDe IS NULL) OR (lge_con IN (SELECT con_cod FROM cdcon WHERE con_nom >= :pContaDe AND con_nom <= :pContaAte)))
 AND ((:pCCustoDe IS NULL) OR ((morlge.lge_ccusto >= :pCCustoDe) AND (morlge.lge_ccusto <= :pCCustoAte)))
 AND ((:pClienteDe IS NULL) OR (lge_cli IN (SELECT cli_cod FROM cdcli WHERE cli_red >= :pClienteDe AND cli_red <= :pClienteAte)))
 AND ((:pFornecDe IS NULL) OR (lge_for IN (SELECT for_cod FROM cdfor WHERE for_red >= :pFornecDe AND for_red <= :pFornecAte)))
 AND ((:pProjeto IS NULL) OR (lge_proj2 IN (SELECT proj2_cod FROM morlge,cdproj2,cdproj WHERE lge_proj2 = proj2_cod AND proj_nom = :pProjeto AND proj2_proj = proj_cod)))
 UNION ALL
 SELECT SUM(dob_val)
 FROM MORLGED
 WHERE MORLGED.DOB_PLA LIKE :pPLANO || '%'
 AND MORLGED.DOB_EMI >= :vDATAINI
 AND MORLGED.DOB_EMI <= :vDATAFIN
 AND ((:pContaDe IS NULL) OR (dob_con IN (SELECT con_cod FROM cdcon WHERE con_nom >= :pContaDe AND con_nom <= :pContaAte)))
 AND ((:pCCustoDe IS NULL) OR ((morlged.dob_ccusto >= :pCCustoDe) AND (morlged.dob_ccusto <= :pCCustoAte)))
 AND ((:pClienteDe IS NULL) OR (dob_cli IN (SELECT cli_cod FROM cdcli WHERE cli_red >= :pClienteDe AND cli_red <= :pClienteAte)))
 AND ((:pFornecDe IS NULL) OR (dob_for IN (SELECT for_cod FROM cdfor WHERE for_red >= :pFornecDe AND for_red <= :pFornecAte)))
 AND ((:pProjeto IS NULL) OR (dob_proj2 IN (SELECT proj2_cod FROM morlged,cdproj2,cdproj WHERE dob_proj2 = proj2_cod AND proj_nom = :pProjeto AND proj2_proj = proj_cod)))
 UNION ALL
 SELECT SUM(REC_VAL)
 FROM MVCOREC
 WHERE MVCOREC.REC_PLA LIKE :PPLANO || '%'
 AND MVCOREC.REC_EMI >= :VDATAINI
 AND MVCOREC.REC_EMI <= :VDATAFIN
 AND ((:PCONTADE IS NULL) OR (REC_CON IN (SELECT CON_COD FROM CDCON WHERE CON_NOM >= :PCONTADE AND CON_NOM <= :PCONTAATE)))
 AND ((:PCCUSTODE IS NULL) OR ((MVCOREC.REC_CCUSTO >= :PCCUSTODE) AND (MVCOREC.REC_CCUSTO <= :PCCUSTOATE)))
 AND ((:PCLIENTEDE IS NULL) OR (REC_CLI IN (SELECT CLI_COD FROM CDCLI WHERE CLI_RED >= :PCLIENTEDE AND CLI_RED <= :PCLIENTEATE)))
 AND ((:PPROJETO IS NULL) OR (REC_PROJ2 IN (SELECT PROJ2_COD FROM MVCOREC,CDPROJ2,CDPROJ WHERE REC_PROJ2 = PROJ2_COD AND PROJ_NOM = :PPROJETO AND PROJ2_PROJ = PROJ_COD)))
 UNION ALL
 SELECT SUM(PAG_VAL)*-1
 FROM MVCOPAG
 WHERE MVCOPAG.PAG_PLA LIKE :PPLANO || '%'
 AND MVCOPAG.PAG_EMI >= :VDATAINI
 AND MVCOPAG.PAG_EMI <= :VDATAFIN
 AND ((:PCONTADE IS NULL) OR (PAG_CON IN (SELECT CON_COD FROM CDCON WHERE CON_NOM >= :PCONTADE AND CON_NOM <= :PCONTAATE)))
 AND ((:PCCUSTODE IS NULL) OR ((MVCOPAG.PAG_CCUSTO >= :PCCUSTODE) AND (MVCOPAG.PAG_CCUSTO <= :PCCUSTOATE)))
 AND ((:PFORNECDE IS NULL) OR (PAG_FOR IN (SELECT FOR_COD FROM CDFOR WHERE FOR_RED >= :PFORNECDE AND FOR_RED <= :PFORNECATE)))
 AND ((:PPROJETO IS NULL) OR (PAG_PROJ2 IN (SELECT PROJ2_COD FROM MVCOPAG,CDPROJ2,CDPROJ WHERE PAG_PROJ2 = PROJ2_COD AND PROJ_NOM = :PPROJETO AND PROJ2_PROJ = PROJ_COD)))
 INTO vSoma DO
 IF (NOT vSoma IS NULL) THEN
 vTotal = vSoma + vTotal;
 IF (vCnt = 1) THEN
 rMes1 = vTotal;
 ELSE IF (vCnt = 2) THEN
 rMes2 = vTotal;
 ELSE IF (vCnt = 3) THEN
 rMes3 = vTotal;
 ELSE IF (vCnt = 4) THEN
 rMes4 = vTotal;
 ELSE IF (vCnt = 5) THEN
 rMes5 = vTotal;
 ELSE IF (vCnt = 6) THEN
 rMes6 = vTotal;
 ELSE IF (vCnt = 7) THEN
 rMes7 = vTotal;
 ELSE IF (vCnt = 8) THEN
 rMes8 = vTotal;
 ELSE IF (vCnt = 9) THEN
 rMes9 = vTotal;
 ELSE IF (vCnt = 10) THEN
 rMes10 = vTotal;
 ELSE IF (vCnt = 11) THEN
 rMes11 = vTotal;
 ELSE IF (vCnt = 12) THEN
 rMes12 = vTotal;
 rTotal = rTotal + vTotal;
 vDataIni = vDataFin + 1;
 rMeses = vCnt;
 END
 suspend;
 END

 COMMIT;

 ALTER TRIGGER MVTMK2_A01
AS
begin
   new.tmk2_dat = CAST('TODAY' AS DATE);
   new.tmk2_cod  = gen_id(gen_mvtmk2, 1);
end

COMMIT;

ALTER TRIGGER MVTMK_A01
AS
begin
   new.dat_cad = CAST('TODAY' AS DATE);
   new.dat_atu = CAST('TODAY' AS DATE);
   new.tmk_cod = gen_id(gen_mvtmk, 1);
end

COMMIT;
